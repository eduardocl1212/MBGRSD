

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 30 11:55:39 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81  0000                     
    82                           ; Version 2.05
    83                           ; Generated 20/12/2018 GMT
    84                           ; 
    85                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F45K50 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataBANK0
   118  005E6A                     __pidataBANK0:
   119                           	opt callstack 0
   120                           
   121                           ;initializer for Error@F5055
   122  005E6A  7E                 	db	126
   123  005E6B  30                 	db	48
   124  005E6C  6D                 	db	109
   125  005E6D  79                 	db	121
   126  005E6E  33                 	db	51
   127  005E6F  5B                 	db	91
   128  005E70  5F                 	db	95
   129  005E71  70                 	db	112
   130  005E72  7F                 	db	127
   131  005E73  73                 	db	115
   132                           
   133                           ;initializer for _i
   134  005E74  EC78               	dw	60536
   135                           
   136                           ;initializer for _Stat
   137  005E76  01                 	db	1
   138  0000                     _ANSELA	set	3931
   139  0000                     _ANSELE	set	3935
   140  0000                     _ANSELD	set	3934
   141  0000                     _ANSELB	set	3932
   142  0000                     _ANSELC	set	3933
   143  0000                     _TXREG1	set	4013
   144  0000                     _RCREG1	set	4014
   145  0000                     _RCSTA1bits	set	4011
   146  0000                     _PIR1bits	set	3998
   147  0000                     _SPBRGH1	set	4016
   148  0000                     _SPBRG1	set	4015
   149  0000                     _TXSTA1	set	4012
   150  0000                     _RCSTA1	set	4011
   151  0000                     _BAUDCON1	set	4024
   152  0000                     _PORTA	set	3968
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADRESL	set	4035
   155  0000                     _ADRESH	set	4036
   156  0000                     _ADCON0	set	4034
   157  0000                     _TRISA	set	3986
   158  0000                     _LATA	set	3977
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON2	set	4032
   161  0000                     _TRISE	set	3990
   162  0000                     _LATE	set	3981
   163  0000                     _TRISD	set	3989
   164  0000                     _LATD	set	3980
   165  0000                     _SSP1STATbits	set	4039
   166  0000                     _SSP1BUF	set	4041
   167  0000                     _SSP1CON1bits	set	4038
   168  0000                     _SSP1ADD	set	4040
   169  0000                     _SSP1CON1	set	4038
   170  0000                     _SSP1STAT	set	4039
   171  0000                     _INTCON2bits	set	4081
   172  0000                     _WPUB	set	3973
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISB	set	3987
   175  0000                     _LATC	set	3979
   176  0000                     _LATB	set	3978
   177  0000                     _ACTCON	set	4021
   178  0000                     _OSCTUNE	set	3995
   179  0000                     _OSCCON2	set	4050
   180  0000                     _OSCCON	set	4051
   181  0000                     _LATBbits	set	3978
   182  0000                     _ADIF	set	31990
   183  0000                     _ADIE	set	31982
   184  0000                     _PEIE	set	32662
   185  0000                     _GIE	set	32663
   186                           
   187                           	psect	smallconst
   188  000800                     __psmallconst:
   189                           	opt callstack 0
   190  000800  00                 	db	0
   191  000801                     STR_1:
   192                           
   193                           ; BSR set to: 15
   194  000801  22                 	db	34
   195  000802  2A                 	db	42
   196  000803  2B                 	db	43
   197  000804  2C                 	db	44
   198  000805  3A                 	db	58	;':'
   199  000806  3B                 	db	59	;';'
   200  000807  3C                 	db	60	;'<'
   201  000808  3D                 	db	61	;'='
   202  000809  3E                 	db	62	;'>'
   203  00080A  3F                 	db	63	;'?'
   204  00080B  5B                 	db	91	;'['
   205  00080C  5D                 	db	93	;']'
   206  00080D  7C                 	db	124
   207  00080E  7F                 	db	127
   208  00080F  00                 	db	0
   209  000810                     STR_5:
   210                           
   211                           ; BSR set to: 15
   212  000810  42                 	db	66	;'B'
   213  000811  65                 	db	101	;'e'
   214  000812  65                 	db	101	;'e'
   215  000813  44                 	db	68	;'D'
   216  000814  65                 	db	101	;'e'
   217  000815  76                 	db	118	;'v'
   218  000816  2E                 	db	46
   219  000817  74                 	db	116	;'t'
   220  000818  78                 	db	120	;'x'
   221  000819  74                 	db	116	;'t'
   222  00081A  00                 	db	0
   223  0000                     
   224                           ; #config settings
   225  00081B  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  005AA6                     __pcinit:
   229                           	opt callstack 0
   230  005AA6                     start_initialization:
   231                           	opt callstack 0
   232  005AA6                     __initialization:
   233                           	opt callstack 0
   234                           
   235                           ; Initialize objects allocated to BANK0 (13 bytes)
   236                           ; load TBLPTR registers with __pidataBANK0
   237  005AA6  0E6A               	movlw	low __pidataBANK0
   238  005AA8  6EF6               	movwf	tblptrl,c
   239  005AAA  0E5E               	movlw	high __pidataBANK0
   240  005AAC  6EF7               	movwf	tblptrh,c
   241  005AAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   242  005AB0  6EF8               	movwf	tblptru,c
   243  005AB2  EE00  F0E4         	lfsr	0,__pdataBANK0
   244  005AB6  EE10 F00D          	lfsr	1,13
   245  005ABA                     copy_data0:
   246  005ABA  0009               	tblrd		*+
   247  005ABC  CFF5 FFEE          	movff	tablat,postinc0
   248  005AC0  50E5               	movf	postdec1,w,c
   249  005AC2  50E1               	movf	fsr1l,w,c
   250  005AC4  E1FA               	bnz	copy_data0
   251                           
   252                           ; Clear objects allocated to BIGRAM (558 bytes)
   253  005AC6  EE01  F020         	lfsr	0,__pbssBIGRAM
   254  005ACA  EE12 F02E          	lfsr	1,558
   255  005ACE                     clear_0:
   256  005ACE  6AEE               	clrf	postinc0,c
   257  005AD0  50E5               	movf	postdec1,w,c
   258  005AD2  50E1               	movf	fsr1l,w,c
   259  005AD4  E1FC               	bnz	clear_0
   260  005AD6  50E2               	movf	fsr1h,w,c
   261  005AD8  E1FA               	bnz	clear_0
   262                           
   263                           ; Clear objects allocated to BANK1 (32 bytes)
   264  005ADA  EE01  F000         	lfsr	0,__pbssBANK1
   265  005ADE  0E20               	movlw	32
   266  005AE0                     clear_1:
   267  005AE0  6AEE               	clrf	postinc0,c
   268  005AE2  06E8               	decf	wreg,f,c
   269  005AE4  E1FD               	bnz	clear_1
   270                           
   271                           ; Clear objects allocated to BANK0 (20 bytes)
   272  005AE6  EE00  F0D0         	lfsr	0,__pbssBANK0
   273  005AEA  0E14               	movlw	20
   274  005AEC                     clear_2:
   275  005AEC  6AEE               	clrf	postinc0,c
   276  005AEE  06E8               	decf	wreg,f,c
   277  005AF0  E1FD               	bnz	clear_2
   278  005AF2                     end_of_initialization:
   279                           	opt callstack 0
   280  005AF2                     __end_of__initialization:
   281                           	opt callstack 0
   282  005AF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   283  005AF4  6EF8               	movwf	tblptru,c
   284  005AF6  0100               	movlb	0
   285  005AF8  EFCD  F02D         	goto	_main	;jump to C main() function
   286                           
   287                           	psect	bssBANK0
   288  0000D0                     __pbssBANK0:
   289                           	opt callstack 0
   290  0000D0                     _volt:
   291                           	opt callstack 0
   292  0000D0                     	ds	4
   293  0000D4                     _out:
   294                           	opt callstack 0
   295  0000D4                     	ds	2
   296  0000D6                     _a:
   297                           	opt callstack 0
   298  0000D6                     	ds	2
   299  0000D8                     _adcin:
   300                           	opt callstack 0
   301  0000D8                     	ds	2
   302  0000DA                     _Fsid:
   303                           	opt callstack 0
   304  0000DA                     	ds	2
   305  0000DC                     ff@FatFs:
   306                           	opt callstack 0
   307  0000DC                     	ds	2
   308  0000DE                     _data:
   309                           	opt callstack 0
   310  0000DE                     	ds	1
   311  0000DF                     _CardType:
   312                           	opt callstack 0
   313  0000DF                     	ds	1
   314  0000E0                     _ND:
   315                           	opt callstack 0
   316  0000E0                     	ds	2
   317  0000E2                     _bw:
   318                           	opt callstack 0
   319  0000E2                     	ds	2
   320                           
   321                           	psect	dataBANK0
   322  0000E4                     __pdataBANK0:
   323                           	opt callstack 0
   324  0000E4                     Error@F5055:
   325                           	opt callstack 0
   326  0000E4                     	ds	10
   327  0000EE                     _i:
   328                           	opt callstack 0
   329  0000EE                     	ds	2
   330  0000F0                     _Stat:
   331                           	opt callstack 0
   332  0000F0                     	ds	1
   333                           
   334                           	psect	bssBANK1
   335  000100                     __pbssBANK1:
   336                           	opt callstack 0
   337  000100                     _Fil:
   338                           	opt callstack 0
   339  000100                     	ds	32
   340                           
   341                           	psect	bssBIGRAM
   342  000120                     __pbssBIGRAM:
   343                           	opt callstack 0
   344  000120                     _FatFs:
   345                           	opt callstack 0
   346  000120                     	ds	558
   347                           
   348                           	psect	cstackBANK0
   349  000060                     __pcstackBANK0:
   350                           	opt callstack 0
   351  000060                     ??_dir_sdi:
   352  000060                     remove_chain@res:
   353                           	opt callstack 0
   354  000060                     create_chain@res:
   355                           	opt callstack 0
   356  000060                     find_volume@br:
   357                           	opt callstack 0
   358                           
   359                           ; 16 bytes @ 0x0
   360  000060                     	ds	1
   361  000061                     remove_chain@nxt:
   362                           	opt callstack 0
   363  000061                     create_chain@scl:
   364                           	opt callstack 0
   365                           
   366                           ; 4 bytes @ 0x1
   367  000061                     	ds	4
   368  000065                     create_chain@ncl:
   369                           	opt callstack 0
   370                           
   371                           ; 4 bytes @ 0x5
   372  000065                     	ds	2
   373  000067                     dir_sdi@ic:
   374                           	opt callstack 0
   375                           
   376                           ; 2 bytes @ 0x7
   377  000067                     	ds	2
   378  000069                     create_chain@cs:
   379                           	opt callstack 0
   380  000069                     dir_sdi@sect:
   381                           	opt callstack 0
   382                           
   383                           ; 4 bytes @ 0x9
   384  000069                     	ds	4
   385  00006D                     dir_next@dp:
   386                           	opt callstack 0
   387  00006D                     f_write@fp:
   388                           	opt callstack 0
   389  00006D                     f_lseek@fp:
   390                           	opt callstack 0
   391  00006D                     dir_sdi@clst:
   392                           	opt callstack 0
   393                           
   394                           ; 4 bytes @ 0xD
   395  00006D                     	ds	2
   396  00006F                     dir_next@stretch:
   397                           	opt callstack 0
   398  00006F                     f_write@buff:
   399                           	opt callstack 0
   400  00006F                     f_lseek@ofs:
   401                           	opt callstack 0
   402                           
   403                           ; 4 bytes @ 0xF
   404  00006F                     	ds	1
   405  000070                     _find_volume$728:
   406                           	opt callstack 0
   407                           
   408                           ; 4 bytes @ 0x10
   409  000070                     	ds	1
   410  000071                     ??_dir_next:
   411  000071                     f_write@btw:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0x11
   415  000071                     	ds	2
   416  000073                     ??_f_lseek:
   417  000073                     f_write@bw:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x13
   421  000073                     	ds	1
   422  000074                     _find_volume$729:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x14
   426  000074                     	ds	1
   427  000075                     ??_f_write:
   428                           
   429                           ; 1 bytes @ 0x15
   430  000075                     	ds	1
   431  000076                     find_volume@szbfat:
   432                           	opt callstack 0
   433                           
   434                           ; 4 bytes @ 0x16
   435  000076                     	ds	2
   436  000078                     dir_next@c:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x18
   440  000078                     	ds	2
   441  00007A                     dir_next@i:
   442                           	opt callstack 0
   443  00007A                     find_volume@pt:
   444                           	opt callstack 0
   445                           
   446                           ; 2 bytes @ 0x1A
   447  00007A                     	ds	2
   448  00007C                     dir_next@clst:
   449                           	opt callstack 0
   450  00007C                     find_volume@sysect:
   451                           	opt callstack 0
   452                           
   453                           ; 4 bytes @ 0x1C
   454  00007C                     	ds	4
   455  000080                     dir_alloc@dp:
   456                           	opt callstack 0
   457  000080                     dir_find@dp:
   458                           	opt callstack 0
   459  000080                     find_volume@vol:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x20
   463  000080                     	ds	1
   464  000081                     f_write@res:
   465                           	opt callstack 0
   466                           
   467                           ; 1 bytes @ 0x21
   468  000081                     	ds	1
   469  000082                     dir_find@c:
   470                           	opt callstack 0
   471  000082                     dir_alloc@nent:
   472                           	opt callstack 0
   473  000082                     find_volume@nrsv:
   474                           	opt callstack 0
   475  000082                     f_write@wbuff:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x22
   479  000082                     	ds	1
   480  000083                     dir_find@dir:
   481                           	opt callstack 0
   482  000083                     f_lseek@ifptr:
   483                           	opt callstack 0
   484                           
   485                           ; 4 bytes @ 0x23
   486  000083                     	ds	1
   487  000084                     ??_dir_alloc:
   488  000084                     f_write@csect:
   489                           	opt callstack 0
   490  000084                     find_volume@tsect:
   491                           	opt callstack 0
   492                           
   493                           ; 4 bytes @ 0x24
   494  000084                     	ds	1
   495  000085                     dir_find@res:
   496                           	opt callstack 0
   497  000085                     f_write@cc:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x25
   501  000085                     	ds	1
   502  000086                     follow_path@dp:
   503                           	opt callstack 0
   504                           
   505                           ; 2 bytes @ 0x26
   506  000086                     	ds	1
   507  000087                     f_lseek@res:
   508                           	opt callstack 0
   509  000087                     dir_alloc@n:
   510                           	opt callstack 0
   511  000087                     f_write@sect:
   512                           	opt callstack 0
   513                           
   514                           ; 4 bytes @ 0x27
   515  000087                     	ds	1
   516  000088                     follow_path@path:
   517                           	opt callstack 0
   518  000088                     find_volume@nclst:
   519                           	opt callstack 0
   520  000088                     f_lseek@nsect:
   521                           	opt callstack 0
   522                           
   523                           ; 4 bytes @ 0x28
   524  000088                     	ds	1
   525  000089                     dir_alloc@res:
   526                           	opt callstack 0
   527                           
   528                           ; 1 bytes @ 0x29
   529  000089                     	ds	1
   530  00008A                     dir_register@dp:
   531                           	opt callstack 0
   532  00008A                     follow_path@dir:
   533                           	opt callstack 0
   534                           
   535                           ; 2 bytes @ 0x2A
   536  00008A                     	ds	1
   537  00008B                     f_write@clst:
   538                           	opt callstack 0
   539                           
   540                           ; 4 bytes @ 0x2B
   541  00008B                     	ds	1
   542  00008C                     dir_register@res:
   543                           	opt callstack 0
   544  00008C                     follow_path@ns:
   545                           	opt callstack 0
   546  00008C                     find_volume@stat:
   547                           	opt callstack 0
   548  00008C                     f_lseek@bcs:
   549                           	opt callstack 0
   550                           
   551                           ; 4 bytes @ 0x2C
   552  00008C                     	ds	1
   553  00008D                     follow_path@res:
   554                           	opt callstack 0
   555  00008D                     find_volume@fasize:
   556                           	opt callstack 0
   557                           
   558                           ; 4 bytes @ 0x2D
   559  00008D                     	ds	2
   560  00008F                     f_write@wcnt:
   561                           	opt callstack 0
   562                           
   563                           ; 2 bytes @ 0x2F
   564  00008F                     	ds	1
   565  000090                     f_lseek@clst:
   566                           	opt callstack 0
   567                           
   568                           ; 4 bytes @ 0x30
   569  000090                     	ds	1
   570  000091                     ??_grabador:
   571  000091                     find_volume@bsect:
   572                           	opt callstack 0
   573                           
   574                           ; 4 bytes @ 0x31
   575  000091                     	ds	4
   576  000095                     find_volume@i:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0x35
   580  000095                     	ds	2
   581  000097                     find_volume@fmt:
   582                           	opt callstack 0
   583                           
   584                           ; 1 bytes @ 0x37
   585  000097                     	ds	1
   586  000098                     find_volume@fs:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x38
   590  000098                     	ds	2
   591  00009A                     f_open@fp:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x3A
   595  00009A                     	ds	2
   596  00009C                     f_open@path:
   597                           	opt callstack 0
   598                           
   599                           ; 2 bytes @ 0x3C
   600  00009C                     	ds	2
   601  00009E                     f_open@mode:
   602                           	opt callstack 0
   603                           
   604                           ; 1 bytes @ 0x3E
   605  00009E                     	ds	1
   606  00009F                     ??_f_open:
   607                           
   608                           ; 1 bytes @ 0x3F
   609  00009F                     	ds	4
   610  0000A3                     f_open@sfn:
   611                           	opt callstack 0
   612                           
   613                           ; 12 bytes @ 0x43
   614  0000A3                     	ds	12
   615  0000AF                     f_open@cl:
   616                           	opt callstack 0
   617                           
   618                           ; 4 bytes @ 0x4F
   619  0000AF                     	ds	4
   620  0000B3                     f_open@dw:
   621                           	opt callstack 0
   622                           
   623                           ; 4 bytes @ 0x53
   624  0000B3                     	ds	4
   625  0000B7                     f_open@res:
   626                           	opt callstack 0
   627                           
   628                           ; 1 bytes @ 0x57
   629  0000B7                     	ds	1
   630  0000B8                     f_open@dir:
   631                           	opt callstack 0
   632                           
   633                           ; 2 bytes @ 0x58
   634  0000B8                     	ds	2
   635  0000BA                     f_open@dj:
   636                           	opt callstack 0
   637                           
   638                           ; 22 bytes @ 0x5A
   639  0000BA                     	ds	22
   640                           
   641                           	psect	cstackCOMRAM
   642  000001                     __pcstackCOMRAM:
   643                           	opt callstack 0
   644  000001                     ??___delay_sec:
   645  000001                     ?_mem_cmp:
   646                           	opt callstack 0
   647  000001                     ?_chk_chr:
   648                           	opt callstack 0
   649  000001                     ?_get_ldnumber:
   650                           	opt callstack 0
   651  000001                     ?_interruptadc:
   652                           	opt callstack 0
   653  000001                     ?___wmul:
   654                           	opt callstack 0
   655  000001                     ?_ld_clust:
   656                           	opt callstack 0
   657  000001                     ?___lmul:
   658                           	opt callstack 0
   659  000001                     ?___lldiv:
   660                           	opt callstack 0
   661  000001                     ?___xxtofl:
   662                           	opt callstack 0
   663  000001                     disk_status@pdrv:
   664                           	opt callstack 0
   665  000001                     SPI1_Exchange8bit@data:
   666                           	opt callstack 0
   667  000001                     EUSART1_Write@txData:
   668                           	opt callstack 0
   669  000001                     mem_cpy@dst:
   670                           	opt callstack 0
   671  000001                     mem_set@dst:
   672                           	opt callstack 0
   673  000001                     mem_cmp@dst:
   674                           	opt callstack 0
   675  000001                     chk_chr@str:
   676                           	opt callstack 0
   677  000001                     ld_clust@fs:
   678                           	opt callstack 0
   679  000001                     st_clust@dir:
   680                           	opt callstack 0
   681  000001                     get_ldnumber@path:
   682                           	opt callstack 0
   683  000001                     Error@a:
   684                           	opt callstack 0
   685  000001                     interruptadc@adcin:
   686                           	opt callstack 0
   687  000001                     ___wmul@multiplier:
   688                           	opt callstack 0
   689  000001                     ___lmul@multiplier:
   690                           	opt callstack 0
   691  000001                     ___lldiv@dividend:
   692                           	opt callstack 0
   693  000001                     ___xxtofl@val:
   694                           	opt callstack 0
   695                           
   696                           ; 4 bytes @ 0x0
   697  000001                     	ds	1
   698  000002                     wait_ready@tmr:
   699                           	opt callstack 0
   700  000002                     rcvr_datablock@buff:
   701                           	opt callstack 0
   702  000002                     validate@obj:
   703                           	opt callstack 0
   704  000002                     send_string@x:
   705                           	opt callstack 0
   706                           
   707                           ; 2 bytes @ 0x1
   708  000002                     	ds	1
   709  000003                     ??_get_ldnumber:
   710  000003                     ??_Error:
   711  000003                     mem_cpy@src:
   712                           	opt callstack 0
   713  000003                     mem_set@val:
   714                           	opt callstack 0
   715  000003                     mem_cmp@src:
   716                           	opt callstack 0
   717  000003                     chk_chr@chr:
   718                           	opt callstack 0
   719  000003                     ld_clust@dir:
   720                           	opt callstack 0
   721  000003                     interruptadc@a:
   722                           	opt callstack 0
   723  000003                     ___wmul@multiplicand:
   724                           	opt callstack 0
   725  000003                     st_clust@cl:
   726                           	opt callstack 0
   727                           
   728                           ; 4 bytes @ 0x2
   729  000003                     	ds	1
   730  000004                     ??_validate:
   731  000004                     ??_send_string:
   732  000004                     ___delay_sec@sec:
   733                           	opt callstack 0
   734  000004                     rcvr_datablock@btr:
   735                           	opt callstack 0
   736  000004                     xmit_datablock@buff:
   737                           	opt callstack 0
   738  000004                     ___send_cmd@arg:
   739                           	opt callstack 0
   740  000004                     Error@v_seg:
   741                           	opt callstack 0
   742                           
   743                           ; 10 bytes @ 0x3
   744  000004                     	ds	1
   745  000005                     ??_chk_chr:
   746  000005                     ??_ld_clust:
   747  000005                     ??_interruptadc:
   748  000005                     ??___xxtofl:
   749  000005                     ___delay_sec@i:
   750                           	opt callstack 0
   751  000005                     mem_cpy@cnt:
   752                           	opt callstack 0
   753  000005                     mem_set@cnt:
   754                           	opt callstack 0
   755  000005                     mem_cmp@cnt:
   756                           	opt callstack 0
   757  000005                     ___wmul@product:
   758                           	opt callstack 0
   759  000005                     ___lmul@multiplicand:
   760                           	opt callstack 0
   761  000005                     ___lldiv@divisor:
   762                           	opt callstack 0
   763                           
   764                           ; 4 bytes @ 0x4
   765  000005                     	ds	1
   766  000006                     xmit_datablock@token:
   767                           	opt callstack 0
   768  000006                     rcvr_datablock@tmr:
   769                           	opt callstack 0
   770                           
   771                           ; 2 bytes @ 0x5
   772  000006                     	ds	1
   773  000007                     ??_mem_cmp:
   774  000007                     xmit_datablock@i:
   775                           	opt callstack 0
   776  000007                     mem_cpy@d:
   777                           	opt callstack 0
   778  000007                     mem_set@d:
   779                           	opt callstack 0
   780  000007                     get_ldnumber@tp:
   781                           	opt callstack 0
   782                           
   783                           ; 2 bytes @ 0x6
   784  000007                     	ds	1
   785  000008                     rcvr_datablock@token:
   786                           	opt callstack 0
   787  000008                     ___send_cmd@res:
   788                           	opt callstack 0
   789  000008                     validate@fil:
   790                           	opt callstack 0
   791                           
   792                           ; 2 bytes @ 0x7
   793  000008                     	ds	1
   794  000009                     xmit_datablock@resp:
   795                           	opt callstack 0
   796  000009                     ___send_cmd@n:
   797                           	opt callstack 0
   798  000009                     ___xxtofl@sign:
   799                           	opt callstack 0
   800  000009                     mem_cpy@s:
   801                           	opt callstack 0
   802  000009                     mem_cmp@d:
   803                           	opt callstack 0
   804  000009                     create_name@dp:
   805                           	opt callstack 0
   806  000009                     get_ldnumber@vol:
   807                           	opt callstack 0
   808  000009                     ___lmul@product:
   809                           	opt callstack 0
   810  000009                     ___lldiv@quotient:
   811                           	opt callstack 0
   812                           
   813                           ; 4 bytes @ 0x8
   814  000009                     	ds	1
   815  00000A                     ___send_cmd@cmd:
   816                           	opt callstack 0
   817  00000A                     ___xxtofl@exp:
   818                           	opt callstack 0
   819                           
   820                           ; 1 bytes @ 0x9
   821  00000A                     	ds	1
   822  00000B                     mem_cmp@s:
   823                           	opt callstack 0
   824  00000B                     create_name@path:
   825                           	opt callstack 0
   826  00000B                     get_ldnumber@i:
   827                           	opt callstack 0
   828  00000B                     send_cmd@arg:
   829                           	opt callstack 0
   830  00000B                     ld_clust@cl:
   831                           	opt callstack 0
   832  00000B                     ___xxtofl@arg:
   833                           	opt callstack 0
   834                           
   835                           ; 4 bytes @ 0xA
   836  00000B                     	ds	2
   837  00000D                     ??_create_name:
   838  00000D                     ?_clust2sect:
   839                           	opt callstack 0
   840  00000D                     ___lldiv@counter:
   841                           	opt callstack 0
   842  00000D                     mem_cmp@r:
   843                           	opt callstack 0
   844  00000D                     clust2sect@fs:
   845                           	opt callstack 0
   846  00000D                     get_ldnumber@tt:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0xC
   850  00000D                     	ds	2
   851  00000F                     ?___flmul:
   852                           	opt callstack 0
   853  00000F                     send_cmd@cmd:
   854                           	opt callstack 0
   855  00000F                     clust2sect@clst:
   856                           	opt callstack 0
   857  00000F                     ___flmul@b:
   858                           	opt callstack 0
   859                           
   860                           ; 4 bytes @ 0xE
   861  00000F                     	ds	1
   862  000010                     send_cmd@res:
   863                           	opt callstack 0
   864                           
   865                           ; 1 bytes @ 0xF
   866  000010                     	ds	1
   867  000011                     ??_disk_initialize:
   868  000011                     disk_ioctl@cmd:
   869                           	opt callstack 0
   870  000011                     disk_read@buff:
   871                           	opt callstack 0
   872  000011                     disk_write@buff:
   873                           	opt callstack 0
   874  000011                     _create_name$624:
   875                           	opt callstack 0
   876                           
   877                           ; 2 bytes @ 0x10
   878  000011                     	ds	1
   879  000012                     disk_initialize@pdrv:
   880                           	opt callstack 0
   881  000012                     disk_ioctl@buff:
   882                           	opt callstack 0
   883                           
   884                           ; 2 bytes @ 0x11
   885  000012                     	ds	1
   886  000013                     ??_clust2sect:
   887  000013                     create_name@si:
   888                           	opt callstack 0
   889  000013                     disk_initialize@ocr:
   890                           	opt callstack 0
   891  000013                     disk_read@sector:
   892                           	opt callstack 0
   893  000013                     disk_write@sector:
   894                           	opt callstack 0
   895  000013                     ___flmul@a:
   896                           	opt callstack 0
   897                           
   898                           ; 4 bytes @ 0x12
   899  000013                     	ds	1
   900  000014                     ??_disk_ioctl:
   901                           
   902                           ; 1 bytes @ 0x13
   903  000014                     	ds	1
   904  000015                     create_name@b:
   905                           	opt callstack 0
   906                           
   907                           ; 1 bytes @ 0x14
   908  000015                     	ds	1
   909  000016                     create_name@ni:
   910                           	opt callstack 0
   911                           
   912                           ; 2 bytes @ 0x15
   913  000016                     	ds	1
   914  000017                     ??___flmul:
   915  000017                     _disk_initialize$134:
   916                           	opt callstack 0
   917  000017                     disk_read@count:
   918                           	opt callstack 0
   919  000017                     disk_write@count:
   920                           	opt callstack 0
   921                           
   922                           ; 2 bytes @ 0x16
   923  000017                     	ds	1
   924  000018                     create_name@p:
   925                           	opt callstack 0
   926                           
   927                           ; 2 bytes @ 0x17
   928  000018                     	ds	1
   929  000019                     ??_disk_write:
   930  000019                     disk_initialize@cmd:
   931                           	opt callstack 0
   932  000019                     disk_read@pdrv:
   933                           	opt callstack 0
   934                           
   935                           ; 1 bytes @ 0x18
   936  000019                     	ds	1
   937  00001A                     disk_initialize@ty:
   938                           	opt callstack 0
   939  00001A                     disk_write@pdrv:
   940                           	opt callstack 0
   941  00001A                     create_name@d:
   942                           	opt callstack 0
   943  00001A                     _disk_read$143:
   944                           	opt callstack 0
   945                           
   946                           ; 2 bytes @ 0x19
   947  00001A                     	ds	1
   948  00001B                     ___flmul@sign:
   949                           	opt callstack 0
   950  00001B                     disk_initialize@tmr:
   951                           	opt callstack 0
   952  00001B                     sync_window@fs:
   953                           	opt callstack 0
   954  00001B                     create_name@sfn:
   955                           	opt callstack 0
   956                           
   957                           ; 2 bytes @ 0x1A
   958  00001B                     	ds	1
   959  00001C                     disk_read@cmd:
   960                           	opt callstack 0
   961  00001C                     ___flmul@grs:
   962                           	opt callstack 0
   963                           
   964                           ; 4 bytes @ 0x1B
   965  00001C                     	ds	1
   966  00001D                     ??_sync_window:
   967  00001D                     disk_initialize@n:
   968                           	opt callstack 0
   969  00001D                     create_name@i:
   970                           	opt callstack 0
   971                           
   972                           ; 2 bytes @ 0x1C
   973  00001D                     	ds	2
   974  00001F                     create_name@c:
   975                           	opt callstack 0
   976                           
   977                           ; 1 bytes @ 0x1E
   978  00001F                     	ds	1
   979  000020                     ___flmul@aexp:
   980                           	opt callstack 0
   981                           
   982                           ; 1 bytes @ 0x1F
   983  000020                     	ds	1
   984  000021                     ___flmul@bexp:
   985                           	opt callstack 0
   986  000021                     disk_ioctl@csd:
   987                           	opt callstack 0
   988                           
   989                           ; 16 bytes @ 0x20
   990  000021                     	ds	1
   991  000022                     ___flmul@prod:
   992                           	opt callstack 0
   993                           
   994                           ; 4 bytes @ 0x21
   995  000022                     	ds	4
   996  000026                     ___flmul@temp:
   997                           	opt callstack 0
   998                           
   999                           ; 2 bytes @ 0x25
  1000  000026                     	ds	2
  1001  000028                     ?___fldiv:
  1002                           	opt callstack 0
  1003  000028                     ___fldiv@b:
  1004                           	opt callstack 0
  1005                           
  1006                           ; 4 bytes @ 0x27
  1007  000028                     	ds	1
  1008  000029                     sync_window@res:
  1009                           	opt callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x28
  1012  000029                     	ds	1
  1013  00002A                     sync_window@nf:
  1014                           	opt callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x29
  1017  00002A                     	ds	2
  1018  00002C                     sync_window@wsect:
  1019                           	opt callstack 0
  1020  00002C                     ___fldiv@a:
  1021                           	opt callstack 0
  1022                           
  1023                           ; 4 bytes @ 0x2B
  1024  00002C                     	ds	4
  1025  000030                     ??___fldiv:
  1026  000030                     move_window@fs:
  1027                           	opt callstack 0
  1028                           
  1029                           ; 2 bytes @ 0x2F
  1030  000030                     	ds	1
  1031  000031                     disk_ioctl@pdrv:
  1032                           	opt callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x30
  1035  000031                     	ds	1
  1036  000032                     disk_ioctl@csize:
  1037                           	opt callstack 0
  1038  000032                     move_window@sector:
  1039                           	opt callstack 0
  1040                           
  1041                           ; 4 bytes @ 0x31
  1042  000032                     	ds	2
  1043  000034                     ___fldiv@rem:
  1044                           	opt callstack 0
  1045                           
  1046                           ; 4 bytes @ 0x33
  1047  000034                     	ds	2
  1048  000036                     disk_ioctl@res:
  1049                           	opt callstack 0
  1050                           
  1051                           ; 1 bytes @ 0x35
  1052  000036                     	ds	1
  1053  000037                     disk_ioctl@n:
  1054                           	opt callstack 0
  1055                           
  1056                           ; 1 bytes @ 0x36
  1057  000037                     	ds	1
  1058  000038                     ___fldiv@sign:
  1059                           	opt callstack 0
  1060  000038                     disk_ioctl@ptr:
  1061                           	opt callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x37
  1064  000038                     	ds	1
  1065  000039                     ___fldiv@new_exp:
  1066                           	opt callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x38
  1069  000039                     	ds	1
  1070  00003A                     move_window@res:
  1071                           	opt callstack 0
  1072  00003A                     sync_fs@fs:
  1073                           	opt callstack 0
  1074                           
  1075                           ; 2 bytes @ 0x39
  1076  00003A                     	ds	1
  1077  00003B                     ?_get_fat:
  1078                           	opt callstack 0
  1079  00003B                     get_fat@fs:
  1080                           	opt callstack 0
  1081  00003B                     put_fat@fs:
  1082                           	opt callstack 0
  1083  00003B                     check_fs@fs:
  1084                           	opt callstack 0
  1085  00003B                     ___fldiv@grs:
  1086                           	opt callstack 0
  1087                           
  1088                           ; 4 bytes @ 0x3A
  1089  00003B                     	ds	1
  1090  00003C                     ??_sync_fs:
  1091                           
  1092                           ; 1 bytes @ 0x3B
  1093  00003C                     	ds	1
  1094  00003D                     get_fat@clst:
  1095                           	opt callstack 0
  1096  00003D                     put_fat@clst:
  1097                           	opt callstack 0
  1098  00003D                     check_fs@sect:
  1099                           	opt callstack 0
  1100                           
  1101                           ; 4 bytes @ 0x3C
  1102  00003D                     	ds	2
  1103  00003F                     ___fldiv@bexp:
  1104                           	opt callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x3E
  1107  00003F                     	ds	1
  1108  000040                     ___fldiv@aexp:
  1109                           	opt callstack 0
  1110                           
  1111                           ; 1 bytes @ 0x3F
  1112  000040                     	ds	1
  1113  000041                     ??_get_fat:
  1114  000041                     ??_check_fs:
  1115  000041                     put_fat@val:
  1116                           	opt callstack 0
  1117                           
  1118                           ; 4 bytes @ 0x40
  1119  000041                     	ds	3
  1120  000044                     sync_fs@res:
  1121                           	opt callstack 0
  1122                           
  1123                           ; 1 bytes @ 0x43
  1124  000044                     	ds	1
  1125  000045                     ??_put_fat:
  1126  000045                     find_volume@rfs:
  1127                           	opt callstack 0
  1128  000045                     f_sync@fp:
  1129                           	opt callstack 0
  1130                           
  1131                           ; 2 bytes @ 0x44
  1132  000045                     	ds	2
  1133  000047                     find_volume@path:
  1134                           	opt callstack 0
  1135                           
  1136                           ; 2 bytes @ 0x46
  1137  000047                     	ds	2
  1138  000049                     find_volume@wmode:
  1139                           	opt callstack 0
  1140                           
  1141                           ; 1 bytes @ 0x48
  1142  000049                     	ds	1
  1143  00004A                     ??_find_volume:
  1144  00004A                     _get_fat$374:
  1145                           	opt callstack 0
  1146                           
  1147                           ; 2 bytes @ 0x49
  1148  00004A                     	ds	1
  1149  00004B                     f_sync@res:
  1150                           	opt callstack 0
  1151                           
  1152                           ; 1 bytes @ 0x4A
  1153  00004B                     	ds	1
  1154  00004C                     f_sync@dir:
  1155                           	opt callstack 0
  1156  00004C                     get_fat@val:
  1157                           	opt callstack 0
  1158                           
  1159                           ; 4 bytes @ 0x4B
  1160  00004C                     	ds	1
  1161  00004D                     _put_fat$400:
  1162                           	opt callstack 0
  1163                           
  1164                           ; 2 bytes @ 0x4C
  1165  00004D                     	ds	1
  1166  00004E                     f_close@fp:
  1167                           	opt callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x4D
  1170  00004E                     	ds	1
  1171  00004F                     _put_fat$401:
  1172                           	opt callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x4E
  1175  00004F                     	ds	1
  1176  000050                     f_close@res:
  1177                           	opt callstack 0
  1178  000050                     get_fat@wc:
  1179                           	opt callstack 0
  1180                           
  1181                           ; 2 bytes @ 0x4F
  1182  000050                     	ds	1
  1183  000051                     put_fat@bc:
  1184                           	opt callstack 0
  1185                           
  1186                           ; 2 bytes @ 0x50
  1187  000051                     	ds	1
  1188  000052                     get_fat@p:
  1189                           	opt callstack 0
  1190  000052                     f_mount@fs:
  1191                           	opt callstack 0
  1192                           
  1193                           ; 2 bytes @ 0x51
  1194  000052                     	ds	1
  1195  000053                     put_fat@res:
  1196                           	opt callstack 0
  1197                           
  1198                           ; 1 bytes @ 0x52
  1199  000053                     	ds	1
  1200  000054                     get_fat@bc:
  1201                           	opt callstack 0
  1202  000054                     put_fat@p:
  1203                           	opt callstack 0
  1204  000054                     f_mount@path:
  1205                           	opt callstack 0
  1206                           
  1207                           ; 2 bytes @ 0x53
  1208  000054                     	ds	2
  1209  000056                     ?_create_chain:
  1210                           	opt callstack 0
  1211  000056                     f_mount@opt:
  1212                           	opt callstack 0
  1213  000056                     remove_chain@fs:
  1214                           	opt callstack 0
  1215  000056                     create_chain@fs:
  1216                           	opt callstack 0
  1217  000056                     dir_sdi@dp:
  1218                           	opt callstack 0
  1219                           
  1220                           ; 2 bytes @ 0x55
  1221  000056                     	ds	1
  1222  000057                     f_mount@res:
  1223                           	opt callstack 0
  1224                           
  1225                           ; 1 bytes @ 0x56
  1226  000057                     	ds	1
  1227  000058                     dir_sdi@idx:
  1228                           	opt callstack 0
  1229  000058                     f_mount@cfs:
  1230                           	opt callstack 0
  1231  000058                     remove_chain@clst:
  1232                           	opt callstack 0
  1233  000058                     create_chain@clst:
  1234                           	opt callstack 0
  1235                           
  1236                           ; 4 bytes @ 0x57
  1237  000058                     	ds	2
  1238  00005A                     f_mount@rp:
  1239                           	opt callstack 0
  1240                           
  1241                           ; 2 bytes @ 0x59
  1242  00005A                     	ds	2
  1243  00005C                     f_mount@vol:
  1244                           	opt callstack 0
  1245                           
  1246                           ; 2 bytes @ 0x5B
  1247  00005C                     	ds	4
  1248  000060                     
  1249                           ; 1 bytes @ 0x5F
  1250 ;;
  1251 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1252 ;;
  1253 ;; *************** function _main *****************
  1254 ;; Defined at:
  1255 ;;		line 43 in file "Main.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1269 ;;      Params:         0       0       0       0       0       0       0       0       0
  1270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1272 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels required when called:   15
  1275 ;; This function calls:
  1276 ;;		_Error
  1277 ;;		_Init8LEDs
  1278 ;;		_SYSTEM_Initialize
  1279 ;;		_guardar
  1280 ;; This function is called by:
  1281 ;;		Startup code after reset
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text0
  1286  005B9A                     __ptext0:
  1287                           	opt callstack 0
  1288  005B9A                     _main:
  1289                           	opt callstack 16
  1290                           
  1291                           ;Main.c: 46:     SYSTEM_Initialize();
  1292                           
  1293                           ;incstack = 0
  1294  005B9A  EC05  F02F         	call	_SYSTEM_Initialize	;wreg free
  1295                           
  1296                           ;Main.c: 49:     Init8LEDs();
  1297  005B9E  EC1F  F02F         	call	_Init8LEDs	;wreg free
  1298                           
  1299                           ;Main.c: 51:     OSCCON = 0x53;
  1300  005BA2  0E53               	movlw	83
  1301  005BA4  6ED3               	movwf	4051,c	;volatile
  1302                           
  1303                           ;Main.c: 52:     ADCON2 = 0x94;
  1304  005BA6  0E94               	movlw	148
  1305  005BA8  6EC0               	movwf	4032,c	;volatile
  1306                           
  1307                           ;Main.c: 53:     ADCON1 = 0x00;
  1308  005BAA  0E00               	movlw	0
  1309  005BAC  6EC1               	movwf	4033,c	;volatile
  1310                           
  1311                           ;Main.c: 54:     LATA = 0x00;
  1312  005BAE  0E00               	movlw	0
  1313  005BB0  6E89               	movwf	3977,c	;volatile
  1314                           
  1315                           ;Main.c: 55:     TRISA = 0x00;
  1316  005BB2  0E00               	movlw	0
  1317  005BB4  6E92               	movwf	3986,c	;volatile
  1318                           
  1319                           ;Main.c: 56:     ANSELA = 0x00;
  1320  005BB6  0E00               	movlw	0
  1321  005BB8  010F               	movlb	15	; () banked
  1322  005BBA  6F5B               	movwf	91,b	;volatile
  1323                           
  1324                           ; BSR set to: 15
  1325                           ;Main.c: 57:     TRISC = 0x04;
  1326  005BBC  0E04               	movlw	4
  1327  005BBE  6E94               	movwf	3988,c	;volatile
  1328                           
  1329                           ; BSR set to: 15
  1330                           ;Main.c: 58:     ANSELC = 0x04;
  1331  005BC0  0E04               	movlw	4
  1332  005BC2  6F5D               	movwf	93,b	;volatile
  1333                           
  1334                           ; BSR set to: 15
  1335                           ;Main.c: 59:     ADCON0 = 0x39;
  1336  005BC4  0E39               	movlw	57
  1337  005BC6  6EC2               	movwf	4034,c	;volatile
  1338                           
  1339                           ; BSR set to: 15
  1340                           ;Main.c: 60:     GIE = 1;
  1341  005BC8  8EF2               	bsf	4082,7,c	;volatile
  1342                           
  1343                           ; BSR set to: 15
  1344                           ;Main.c: 61:     PEIE = 1;
  1345  005BCA  8CF2               	bsf	4082,6,c	;volatile
  1346                           
  1347                           ; BSR set to: 15
  1348                           ;Main.c: 62:     ADIE = 1;
  1349  005BCC  8C9D               	bsf	3997,6,c	;volatile
  1350                           
  1351                           ; BSR set to: 15
  1352                           ;Main.c: 63:        guardar();
  1353  005BCE  ECB8  F025         	call	_guardar	;wreg free
  1354  005BD2                     l7268:
  1355                           
  1356                           ;Main.c: 66:         Error(55);
  1357  005BD2  0E00               	movlw	0
  1358  005BD4  6E02               	movwf	Error@a+1,c
  1359  005BD6  0E37               	movlw	55
  1360  005BD8  6E01               	movwf	Error@a,c
  1361  005BDA  EC00  F02A         	call	_Error	;wreg free
  1362  005BDE  D7F9               	goto	l7268
  1363  005BE0                     __end_of_main:
  1364                           	opt callstack 0
  1365                           
  1366 ;; *************** function _guardar *****************
  1367 ;; Defined at:
  1368 ;;		line 122 in file "Main.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:   14
  1389 ;; This function calls:
  1390 ;;		_Error
  1391 ;;		_SYSTEM_Initialize
  1392 ;;		___delay_sec
  1393 ;;		_f_close
  1394 ;;		_f_lseek
  1395 ;;		_f_mount
  1396 ;;		_f_open
  1397 ;;		_grabador
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text1
  1404  004B70                     __ptext1:
  1405                           	opt callstack 0
  1406  004B70                     _guardar:
  1407                           	opt callstack 16
  1408                           
  1409                           ;Main.c: 123:     SYSTEM_Initialize();
  1410                           
  1411                           ;incstack = 0
  1412  004B70  EC05  F02F         	call	_SYSTEM_Initialize	;wreg free
  1413                           
  1414                           ;Main.c: 124:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1415  004B74  0E20               	movlw	low _FatFs
  1416  004B76  6E52               	movwf	f_mount@fs,c
  1417  004B78  0E01               	movlw	high _FatFs
  1418  004B7A  6E53               	movwf	f_mount@fs+1,c
  1419  004B7C  0E1A               	movlw	low (STR_5+10)
  1420  004B7E  6E54               	movwf	f_mount@path,c
  1421  004B80  0E08               	movlw	high (STR_5+10)
  1422  004B82  6E55               	movwf	f_mount@path+1,c
  1423  004B84  0E01               	movlw	1
  1424  004B86  6E56               	movwf	f_mount@opt,c
  1425  004B88  ECC2  F02A         	call	_f_mount	;wreg free
  1426  004B8C  0900               	iorlw	0
  1427  004B8E  B4D8               	btfsc	status,2,c
  1428  004B90  D018               	goto	u9670
  1429                           
  1430                           ;Main.c: 126:         Error(33);
  1431  004B92  0E00               	movlw	0
  1432  004B94  6E02               	movwf	Error@a+1,c
  1433  004B96  0E21               	movlw	33
  1434  004B98  6E01               	movwf	Error@a,c
  1435  004B9A  EC00  F02A         	call	_Error	;wreg free
  1436                           
  1437                           ;Main.c: 127:         __delay_sec(2);
  1438  004B9E  0E02               	movlw	2
  1439  004BA0  EC4C  F02E         	call	___delay_sec
  1440  004BA4                     l7090:
  1441                           
  1442                           ;Main.c: 128:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1443  004BA4  0E20               	movlw	low _FatFs
  1444  004BA6  6E52               	movwf	f_mount@fs,c
  1445  004BA8  0E01               	movlw	high _FatFs
  1446  004BAA  6E53               	movwf	f_mount@fs+1,c
  1447  004BAC  0E1A               	movlw	low (STR_5+10)
  1448  004BAE  6E54               	movwf	f_mount@path,c
  1449  004BB0  0E08               	movlw	high (STR_5+10)
  1450  004BB2  6E55               	movwf	f_mount@path+1,c
  1451  004BB4  0E01               	movlw	1
  1452  004BB6  6E56               	movwf	f_mount@opt,c
  1453  004BB8  ECC2  F02A         	call	_f_mount	;wreg free
  1454  004BBC  0900               	iorlw	0
  1455  004BBE  A4D8               	btfss	status,2,c
  1456  004BC0  D7F1               	goto	l7090
  1457  004BC2                     u9670:
  1458                           
  1459                           ;Main.c: 133:     Error(1);
  1460  004BC2  0E00               	movlw	0
  1461  004BC4  6E02               	movwf	Error@a+1,c
  1462  004BC6  0E01               	movlw	1
  1463  004BC8  6E01               	movwf	Error@a,c
  1464  004BCA  EC00  F02A         	call	_Error	;wreg free
  1465                           
  1466                           ;Main.c: 134:     __delay_sec(2);
  1467  004BCE  0E02               	movlw	2
  1468  004BD0  EC4C  F02E         	call	___delay_sec
  1469                           
  1470                           ;Main.c: 136:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1471  004BD4  0E00               	movlw	low _Fil
  1472  004BD6  0100               	movlb	0	; () banked
  1473  004BD8  6F9A               	movwf	f_open@fp& (0+255),b
  1474  004BDA  0E01               	movlw	high _Fil
  1475  004BDC  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1476  004BDE  0E10               	movlw	low STR_5
  1477  004BE0  6F9C               	movwf	f_open@path& (0+255),b
  1478  004BE2  0E08               	movlw	high STR_5
  1479  004BE4  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1480  004BE6  0E13               	movlw	19
  1481  004BE8  6F9E               	movwf	f_open@mode& (0+255),b
  1482  004BEA  ECD6  F017         	call	_f_open	;wreg free
  1483  004BEE  0900               	iorlw	0
  1484  004BF0  A4D8               	btfss	status,2,c
  1485  004BF2  D055               	goto	l7128
  1486                           
  1487                           ;Main.c: 137:         Error(2);
  1488  004BF4  0E00               	movlw	0
  1489  004BF6  6E02               	movwf	Error@a+1,c
  1490  004BF8  0E02               	movlw	2
  1491  004BFA  6E01               	movwf	Error@a,c
  1492  004BFC  EC00  F02A         	call	_Error	;wreg free
  1493                           
  1494                           ;Main.c: 140:         __delay_sec(2);
  1495  004C00  0E02               	movlw	2
  1496  004C02  EC4C  F02E         	call	___delay_sec
  1497                           
  1498                           ;Main.c: 141:          Error(3);
  1499  004C06  0E00               	movlw	0
  1500  004C08  6E02               	movwf	Error@a+1,c
  1501  004C0A  0E03               	movlw	3
  1502  004C0C  6E01               	movwf	Error@a,c
  1503  004C0E  EC00  F02A         	call	_Error	;wreg free
  1504                           
  1505                           ;Main.c: 143:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD
      +                          ;
  1506  004C12  0101               	movlb	1	; () banked
  1507  004C14  510A               	movf	(_Fil+10)& (0+255),w,b
  1508  004C16  110B               	iorwf	(_Fil+11)& (0+255),w,b
  1509  004C18  110C               	iorwf	(_Fil+12)& (0+255),w,b
  1510  004C1A  110D               	iorwf	(_Fil+13)& (0+255),w,b
  1511  004C1C  B4D8               	btfsc	status,2,c
  1512  004C1E  D012               	goto	l7110
  1513                           
  1514                           ; BSR set to: 1
  1515  004C20  0E00               	movlw	low _Fil
  1516  004C22  0100               	movlb	0	; () banked
  1517  004C24  6F6D               	movwf	f_lseek@fp& (0+255),b
  1518  004C26  0E01               	movlw	high _Fil
  1519  004C28  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1520  004C2A  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  1521  004C2E  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  1522  004C32  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  1523  004C36  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  1524  004C3A  EC97  F00C         	call	_f_lseek	;wreg free
  1525  004C3E  0900               	iorlw	0
  1526  004C40  A4D8               	btfss	status,2,c
  1527  004C42  D014               	goto	l918
  1528  004C44                     l7110:
  1529                           
  1530                           ;Main.c: 144:                 Error(4);
  1531  004C44  0E00               	movlw	0
  1532  004C46  6E02               	movwf	Error@a+1,c
  1533  004C48  0E04               	movlw	4
  1534  004C4A  6E01               	movwf	Error@a,c
  1535  004C4C  EC00  F02A         	call	_Error	;wreg free
  1536                           
  1537                           ;Main.c: 145:                 __delay_sec(2);
  1538  004C50  0E02               	movlw	2
  1539  004C52  EC4C  F02E         	call	___delay_sec
  1540                           
  1541                           ;Main.c: 147:                 grabador();
  1542  004C56  ECDE  F026         	call	_grabador	;wreg free
  1543                           
  1544                           ;Main.c: 149:                 Error(5);
  1545  004C5A  0E00               	movlw	0
  1546  004C5C  6E02               	movwf	Error@a+1,c
  1547  004C5E  0E05               	movlw	5
  1548  004C60  6E01               	movwf	Error@a,c
  1549  004C62  EC00  F02A         	call	_Error	;wreg free
  1550                           
  1551                           ;Main.c: 150:                 __delay_sec(2);
  1552  004C66  0E02               	movlw	2
  1553  004C68  EC4C  F02E         	call	___delay_sec
  1554  004C6C                     l918:
  1555  004C6C  0E00               	movlw	low _Fil
  1556  004C6E  6E4E               	movwf	f_close@fp,c
  1557  004C70  0E01               	movlw	high _Fil
  1558  004C72  6E4F               	movwf	f_close@fp+1,c
  1559  004C74  EC2F  F02E         	call	_f_close	;wreg free
  1560                           
  1561                           ;Main.c: 152:                 Error(6);
  1562  004C78  0E00               	movlw	0
  1563  004C7A  6E02               	movwf	Error@a+1,c
  1564  004C7C  0E06               	movlw	6
  1565  004C7E  6E01               	movwf	Error@a,c
  1566  004C80  EC00  F02A         	call	_Error	;wreg free
  1567                           
  1568                           ;Main.c: 153:                 __delay_sec(1);
  1569  004C84  0E01               	movlw	1
  1570  004C86  EC4C  F02E         	call	___delay_sec
  1571                           
  1572                           ;Main.c: 155:                 Error(7);
  1573  004C8A  0E00               	movlw	0
  1574  004C8C  6E02               	movwf	Error@a+1,c
  1575  004C8E  0E07               	movlw	7
  1576  004C90  6E01               	movwf	Error@a,c
  1577  004C92  EC00  F02A         	call	_Error	;wreg free
  1578                           
  1579                           ;Main.c: 156:                 __delay_sec(2);
  1580  004C96  0E02               	movlw	2
  1581  004C98  EC4C  F02E         	call	___delay_sec
  1582                           
  1583                           ;Main.c: 158:  }
  1584  004C9C  0012               	return	
  1585  004C9E                     l7128:
  1586                           
  1587                           ;Main.c: 160:         Error(0);
  1588  004C9E  0E00               	movlw	0
  1589  004CA0  6E02               	movwf	Error@a+1,c
  1590  004CA2  0E00               	movlw	0
  1591  004CA4  6E01               	movwf	Error@a,c
  1592  004CA6  EC00  F02A         	call	_Error	;wreg free
  1593  004CAA  0012               	return		;funcret
  1594  004CAC                     __end_of_guardar:
  1595                           	opt callstack 0
  1596                           
  1597 ;; *************** function _grabador *****************
  1598 ;; Defined at:
  1599 ;;		line 92 in file "Main.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1613 ;;      Params:         0       0       0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1615 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1616 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:   11
  1620 ;; This function calls:
  1621 ;;		_Error
  1622 ;;		___fldiv
  1623 ;;		___flmul
  1624 ;;		___xxtofl
  1625 ;;		_f_write
  1626 ;;		_interruptadc
  1627 ;;		_send_string
  1628 ;; This function is called by:
  1629 ;;		_guardar
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text2
  1634  004DBC                     __ptext2:
  1635                           	opt callstack 0
  1636  004DBC                     _grabador:
  1637                           	opt callstack 18
  1638                           
  1639                           ;Main.c: 93:        Error(3);
  1640                           
  1641                           ;incstack = 0
  1642  004DBC  0E00               	movlw	0
  1643  004DBE  6E02               	movwf	Error@a+1,c
  1644  004DC0  0E03               	movlw	3
  1645  004DC2  6E01               	movwf	Error@a,c
  1646  004DC4  EC00  F02A         	call	_Error	;wreg free
  1647  004DC8                     l7056:
  1648                           
  1649                           ;Main.c: 95:         i++;
  1650  004DC8  0100               	movlb	0	; () banked
  1651  004DCA  4BEE               	infsnz	_i& (0+255),f,b
  1652  004DCC  2BEF               	incf	(_i+1)& (0+255),f,b
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;Main.c: 96:         ADCON0bits.GO=1;
  1656  004DCE  82C2               	bsf	4034,1,c	;volatile
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;Main.c: 97:         adcin = interruptadc(adcin, i);
  1660  004DD0  C0D8  F001         	movff	_adcin,interruptadc@adcin
  1661  004DD4  C0D9  F002         	movff	_adcin+1,interruptadc@adcin+1
  1662  004DD8  C0EE  F003         	movff	_i,interruptadc@a
  1663  004DDC  C0EF  F004         	movff	_i+1,interruptadc@a+1
  1664  004DE0  ECAC  F02E         	call	_interruptadc	;wreg free
  1665  004DE4  C001  F0D8         	movff	?_interruptadc,_adcin
  1666  004DE8  C002  F0D9         	movff	?_interruptadc+1,_adcin+1
  1667                           
  1668                           ;Main.c: 98:         PORTA = adcin/4;
  1669  004DEC  C0D8  F091         	movff	_adcin,??_grabador
  1670  004DF0  C0D9  F092         	movff	_adcin+1,??_grabador+1
  1671  004DF4  0100               	movlb	0	; () banked
  1672  004DF6  90D8               	bcf	status,0,c
  1673  004DF8  3392               	rrcf	(??_grabador+1)& (0+255),f,b
  1674  004DFA  3391               	rrcf	??_grabador& (0+255),f,b
  1675  004DFC  90D8               	bcf	status,0,c
  1676  004DFE  3392               	rrcf	(??_grabador+1)& (0+255),f,b
  1677  004E00  3391               	rrcf	??_grabador& (0+255),f,b
  1678  004E02  5191               	movf	??_grabador& (0+255),w,b
  1679  004E04  6E80               	movwf	3968,c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;Main.c: 99:         volt = (adcin*5.0)/1023.0;
  1683  004E06  0E00               	movlw	0
  1684  004E08  6E13               	movwf	___flmul@a,c
  1685  004E0A  0E00               	movlw	0
  1686  004E0C  6E14               	movwf	___flmul@a+1,c
  1687  004E0E  0EA0               	movlw	160
  1688  004E10  6E15               	movwf	___flmul@a+2,c
  1689  004E12  0E40               	movlw	64
  1690  004E14  6E16               	movwf	___flmul@a+3,c
  1691  004E16  C0D8  F001         	movff	_adcin,___xxtofl@val
  1692  004E1A  C0D9  F002         	movff	_adcin+1,___xxtofl@val+1
  1693  004E1E  6A03               	clrf	___xxtofl@val+2,c
  1694  004E20  6A04               	clrf	___xxtofl@val+3,c
  1695  004E22  0E00               	movlw	0
  1696  004E24  EC18  F025         	call	___xxtofl
  1697  004E28  C001  F00F         	movff	?___xxtofl,___flmul@b
  1698  004E2C  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  1699  004E30  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  1700  004E34  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  1701  004E38  ECA1  F019         	call	___flmul	;wreg free
  1702  004E3C  C00F  F028         	movff	?___flmul,___fldiv@b
  1703  004E40  C010  F029         	movff	?___flmul+1,___fldiv@b+1
  1704  004E44  C011  F02A         	movff	?___flmul+2,___fldiv@b+2
  1705  004E48  C012  F02B         	movff	?___flmul+3,___fldiv@b+3
  1706  004E4C  0E00               	movlw	0
  1707  004E4E  6E2C               	movwf	___fldiv@a,c
  1708  004E50  0EC0               	movlw	192
  1709  004E52  6E2D               	movwf	___fldiv@a+1,c
  1710  004E54  0E7F               	movlw	127
  1711  004E56  6E2E               	movwf	___fldiv@a+2,c
  1712  004E58  0E44               	movlw	68
  1713  004E5A  6E2F               	movwf	___fldiv@a+3,c
  1714  004E5C  EC28  F01E         	call	___fldiv	;wreg free
  1715  004E60  C028  F0D0         	movff	?___fldiv,_volt
  1716  004E64  C029  F0D1         	movff	?___fldiv+1,_volt+1
  1717  004E68  C02A  F0D2         	movff	?___fldiv+2,_volt+2
  1718  004E6C  C02B  F0D3         	movff	?___fldiv+3,_volt+3
  1719                           
  1720                           ;Main.c: 100:         ND[0] = (char) adcin;
  1721  004E70  C0D8  F0E0         	movff	_adcin,_ND
  1722                           
  1723                           ;Main.c: 102:         f_write(&Fil, ND , 2 , &bw);
  1724  004E74  0E00               	movlw	low _Fil
  1725  004E76  0100               	movlb	0	; () banked
  1726  004E78  6F6D               	movwf	f_write@fp& (0+255),b
  1727  004E7A  0E01               	movlw	high _Fil
  1728  004E7C  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1729  004E7E  0EE0               	movlw	low _ND
  1730  004E80  6F6F               	movwf	f_write@buff& (0+255),b
  1731  004E82  0E00               	movlw	high _ND
  1732  004E84  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1733  004E86  0E00               	movlw	0
  1734  004E88  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1735  004E8A  0E02               	movlw	2
  1736  004E8C  6F71               	movwf	f_write@btw& (0+255),b
  1737  004E8E  0EE2               	movlw	low _bw
  1738  004E90  6F73               	movwf	f_write@bw& (0+255),b
  1739  004E92  0E00               	movlw	high _bw
  1740  004E94  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1741  004E96  ECE5  F008         	call	_f_write	;wreg free
  1742                           
  1743                           ;Main.c: 103:         send_string(ND);
  1744  004E9A  0EE0               	movlw	low _ND
  1745  004E9C  6E02               	movwf	send_string@x,c
  1746  004E9E  0E00               	movlw	high _ND
  1747  004EA0  6E03               	movwf	send_string@x+1,c
  1748  004EA2  EC68  F02E         	call	_send_string	;wreg free
  1749                           
  1750                           ;Main.c: 104:         }while(i!=5000);
  1751  004EA6  0E88               	movlw	136
  1752  004EA8  0100               	movlb	0	; () banked
  1753  004EAA  19EE               	xorwf	_i& (0+255),w,b
  1754  004EAC  E18D               	bnz	l7056
  1755  004EAE  0E13               	movlw	19
  1756  004EB0  19EF               	xorwf	(_i+1)& (0+255),w,b
  1757  004EB2  B4D8               	btfsc	status,2,c
  1758  004EB4  0012               	return	
  1759  004EB6  D788               	goto	l7056
  1760  004EB8                     __end_of_grabador:
  1761                           	opt callstack 0
  1762                           
  1763 ;; *************** function _send_string *****************
  1764 ;; Defined at:
  1765 ;;		line 24 in file "Main.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  x               2    1[COMRAM] PTR const unsigned char 
  1768 ;;		 -> ND(2), 
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1780 ;;      Params:         2       0       0       0       0       0       0       0       0
  1781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1782 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1783 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1784 ;;Total ram usage:        3 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    1
  1787 ;; This function calls:
  1788 ;;		_EUSART1_Write
  1789 ;; This function is called by:
  1790 ;;		_grabador
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text3
  1795  005CD0                     __ptext3:
  1796                           	opt callstack 0
  1797  005CD0                     _send_string:
  1798                           	opt callstack 27
  1799                           
  1800                           ;Main.c: 25:     while(*x){
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;incstack = 0
  1804  005CD0  D010               	goto	l6436
  1805  005CD2                     l6430:
  1806                           
  1807                           ;Main.c: 26:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1808  005CD2  0E03               	movlw	3
  1809  005CD4  6E04               	movwf	??_send_string& (0+255),c
  1810  005CD6  0E98               	movlw	152
  1811  005CD8                     u9997:
  1812  005CD8  2EE8               	decfsz	wreg,f,c
  1813  005CDA  D7FE               	bra	u9997
  1814  005CDC  2E04               	decfsz	??_send_string& (0+255),f,c
  1815  005CDE  D7FC               	bra	u9997
  1816                           
  1817                           ;Main.c: 27:         EUSART1_Write(*x++);
  1818  005CE0  C002  FFD9         	movff	send_string@x,fsr2l
  1819  005CE4  C003  FFDA         	movff	send_string@x+1,fsr2h
  1820  005CE8  50DF               	movf	indf2,w,c
  1821  005CEA  EC3C  F02F         	call	_EUSART1_Write
  1822  005CEE  4A02               	infsnz	send_string@x,f,c
  1823  005CF0  2A03               	incf	send_string@x+1,f,c
  1824  005CF2                     l6436:
  1825                           
  1826                           ;Main.c: 25:     while(*x){
  1827  005CF2  C002  FFD9         	movff	send_string@x,fsr2l
  1828  005CF6  C003  FFDA         	movff	send_string@x+1,fsr2h
  1829  005CFA  50DF               	movf	indf2,w,c
  1830  005CFC  B4D8               	btfsc	status,2,c
  1831  005CFE  0012               	return	
  1832  005D00  D7E8               	goto	l6430
  1833  005D02                     __end_of_send_string:
  1834                           	opt callstack 0
  1835                           
  1836 ;; *************** function _EUSART1_Write *****************
  1837 ;; Defined at:
  1838 ;;		line 96 in file "mcc_generated_files/eusart1.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  txData          1    wreg     unsigned char 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  txData          1    0[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1852 ;;      Params:         0       0       0       0       0       0       0       0       0
  1853 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1855 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1856 ;;Total ram usage:        1 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_send_string
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text4
  1866  005E78                     __ptext4:
  1867                           	opt callstack 0
  1868  005E78                     _EUSART1_Write:
  1869                           	opt callstack 27
  1870                           
  1871                           ;incstack = 0
  1872                           ;EUSART1_Write@txData stored from wreg
  1873  005E78  6E01               	movwf	EUSART1_Write@txData,c
  1874  005E7A                     
  1875                           ;mcc_generated_files/eusart1.c: 98:     while(0 == PIR1bits.TX1IF)
  1876                           
  1877                           ;mcc_generated_files/eusart1.c: 99:     {;mcc_generated_files/eusart1.c: 100:     }
  1878  005E7A  A89E               	btfss	3998,4,c	;volatile
  1879  005E7C  D7FE               	goto	l5808
  1880                           
  1881                           ;mcc_generated_files/eusart1.c: 102:     TXREG1 = txData;
  1882  005E7E  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1883  005E82  0012               	return		;funcret
  1884  005E84                     __end_of_EUSART1_Write:
  1885                           	opt callstack 0
  1886                           
  1887 ;; *************** function _interruptadc *****************
  1888 ;; Defined at:
  1889 ;;		line 71 in file "Main.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  adcin           2    0[COMRAM] int 
  1892 ;;  a               2    2[COMRAM] int 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  2    0[COMRAM] int 
  1897 ;; Registers used:
  1898 ;;		wreg, status,2, status,0
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         4       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1906 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1907 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:        6 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_grabador
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text5
  1918  005D58                     __ptext5:
  1919                           	opt callstack 0
  1920  005D58                     _interruptadc:
  1921                           	opt callstack 28
  1922                           
  1923                           ;Main.c: 72:     if(ADIF==1) {
  1924                           
  1925                           ;incstack = 0
  1926  005D58  AC9E               	btfss	3998,6,c	;volatile
  1927  005D5A  D00A               	goto	l6444
  1928                           
  1929                           ;Main.c: 73:         ADIE=0;
  1930  005D5C  9C9D               	bcf	3997,6,c	;volatile
  1931                           
  1932                           ;Main.c: 74:         adcin = (ADRESH<<8)+ADRESL;
  1933  005D5E  50C4               	movf	4036,w,c	;volatile
  1934  005D60  6E06               	movwf	(??_interruptadc+1)& (0+255),c
  1935  005D62  6A05               	clrf	??_interruptadc& (0+255),c
  1936  005D64  50C3               	movf	4035,w,c	;volatile
  1937  005D66  2405               	addwf	??_interruptadc,w,c
  1938  005D68  6E01               	movwf	interruptadc@adcin,c
  1939  005D6A  0E00               	movlw	0
  1940  005D6C  2006               	addwfc	??_interruptadc+1,w,c
  1941  005D6E  6E02               	movwf	interruptadc@adcin+1,c
  1942  005D70                     l6444:
  1943                           
  1944                           ;Main.c: 76:     ADIE=1;
  1945  005D70  8C9D               	bsf	3997,6,c	;volatile
  1946                           
  1947                           ;Main.c: 77:     ADIF=0;
  1948  005D72  9C9E               	bcf	3998,6,c	;volatile
  1949                           
  1950                           ;Main.c: 79:     return adcin;
  1951  005D74  C001  F001         	movff	interruptadc@adcin,?_interruptadc
  1952  005D78  C002  F002         	movff	interruptadc@adcin+1,?_interruptadc+1
  1953  005D7C  0012               	return		;funcret
  1954  005D7E                     __end_of_interruptadc:
  1955                           	opt callstack 0
  1956                           
  1957 ;; *************** function _f_write *****************
  1958 ;; Defined at:
  1959 ;;		line 2691 in file "ff.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  fp              2   13[BANK0 ] PTR struct .
  1962 ;;		 -> Fil(32), 
  1963 ;;  buff            2   15[BANK0 ] PTR const void 
  1964 ;;		 -> ND(2), 
  1965 ;;  btw             2   17[BANK0 ] unsigned short 
  1966 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1967 ;;		 -> bw(2), 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  clst            4   43[BANK0 ] unsigned long 
  1970 ;;  sect            4   39[BANK0 ] unsigned long 
  1971 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1972 ;;  cc              2   37[BANK0 ] unsigned short 
  1973 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1974 ;;		 -> ND(2), 
  1975 ;;  csect           1   36[BANK0 ] unsigned char 
  1976 ;;  res             1   33[BANK0 ] enum E93
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      enum E93
  1979 ;; Registers used:
  1980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1986 ;;      Params:         0       8       0       0       0       0       0       0       0
  1987 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1988 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1989 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1990 ;;Total ram usage:       36 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:   10
  1993 ;; This function calls:
  1994 ;;		_clust2sect
  1995 ;;		_create_chain
  1996 ;;		_disk_write
  1997 ;;		_mem_cpy
  1998 ;;		_move_window
  1999 ;;		_sync_window
  2000 ;;		_validate
  2001 ;; This function is called by:
  2002 ;;		_grabador
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text6
  2007  0011CA                     __ptext6:
  2008                           	opt callstack 0
  2009  0011CA                     _f_write:
  2010                           	opt callstack 18
  2011                           
  2012                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  2013                           
  2014                           ;incstack = 0
  2015  0011CA  C06F  F082         	movff	f_write@buff,f_write@wbuff
  2016  0011CE  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  2017                           
  2018                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  2019  0011D2  C073  FFD9         	movff	f_write@bw,fsr2l
  2020  0011D6  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2021  0011DA  0E00               	movlw	0
  2022  0011DC  6EDE               	movwf	postinc2,c
  2023  0011DE  0E00               	movlw	0
  2024  0011E0  6EDD               	movwf	postdec2,c
  2025                           
  2026                           ;ff.c: 2707:  res = validate(fp);
  2027  0011E2  C06D  F002         	movff	f_write@fp,validate@obj
  2028  0011E6  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  2029  0011EA  EC6D  F02B         	call	_validate	;wreg free
  2030  0011EE  0100               	movlb	0	; () banked
  2031  0011F0  6F81               	movwf	f_write@res& (0+255),b
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;ff.c: 2708:  if (res != FR_OK) return res;
  2035  0011F2  5181               	movf	f_write@res& (0+255),w,b
  2036  0011F4  A4D8               	btfss	status,2,c
  2037  0011F6  0012               	return	
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;ff.c: 2709:  if (fp->err)
  2041  0011F8  EE20 F005          	lfsr	2,5
  2042  0011FC  516D               	movf	f_write@fp& (0+255),w,b
  2043  0011FE  26D9               	addwf	fsr2l,f,c
  2044  001200  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2045  001202  22DA               	addwfc	fsr2h,f,c
  2046  001204  50DF               	movf	indf2,w,c
  2047  001206  A4D8               	btfss	status,2,c
  2048  001208  0012               	return	
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  2052  00120A  EE20 F004          	lfsr	2,4
  2053  00120E  516D               	movf	f_write@fp& (0+255),w,b
  2054  001210  26D9               	addwf	fsr2l,f,c
  2055  001212  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2056  001214  22DA               	addwfc	fsr2h,f,c
  2057  001216  A2DF               	btfss	indf2,1,c
  2058  001218  0012               	return	
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  2062  00121A  EE20 F006          	lfsr	2,6
  2063  00121E  516D               	movf	f_write@fp& (0+255),w,b
  2064  001220  26D9               	addwf	fsr2l,f,c
  2065  001222  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2066  001224  22DA               	addwfc	fsr2h,f,c
  2067  001226  EE10 F006          	lfsr	1,6
  2068  00122A  516D               	movf	f_write@fp& (0+255),w,b
  2069  00122C  26E1               	addwf	fsr1l,f,c
  2070  00122E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2071  001230  22E2               	addwfc	fsr1h,f,c
  2072  001232  CFE6 F079          	movff	postinc1,??_f_write+4
  2073  001236  CFE6 F07A          	movff	postinc1,??_f_write+5
  2074  00123A  CFE6 F07B          	movff	postinc1,??_f_write+6
  2075  00123E  CFE6 F07C          	movff	postinc1,??_f_write+7
  2076  001242  5171               	movf	f_write@btw& (0+255),w,b
  2077  001244  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2078  001246  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2079  001248  5172               	movf	(f_write@btw+1)& (0+255),w,b
  2080  00124A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2081  00124C  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2082  00124E  0E00               	movlw	0
  2083  001250  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  2084  001252  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2085  001254  0E00               	movlw	0
  2086  001256  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  2087  001258  6F80               	movwf	(??_f_write+11)& (0+255),b
  2088  00125A  50DE               	movf	postinc2,w,c
  2089  00125C  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2090  00125E  50DE               	movf	postinc2,w,c
  2091  001260  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2092  001262  50DE               	movf	postinc2,w,c
  2093  001264  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2094  001266  50DE               	movf	postinc2,w,c
  2095  001268  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2096  00126A  B0D8               	btfsc	status,0,c
  2097  00126C  D329               	goto	l6336
  2098                           
  2099                           ; BSR set to: 0
  2100  00126E  0E00               	movlw	0
  2101  001270  6F72               	movwf	(f_write@btw+1)& (0+255),b
  2102  001272  0E00               	movlw	0
  2103  001274  6F71               	movwf	f_write@btw& (0+255),b
  2104  001276  D324               	goto	l6336
  2105  001278                     l6228:
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  2109  001278  EE20 F006          	lfsr	2,6
  2110  00127C  516D               	movf	f_write@fp& (0+255),w,b
  2111  00127E  26D9               	addwf	fsr2l,f,c
  2112  001280  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2113  001282  22DA               	addwfc	fsr2h,f,c
  2114  001284  0EFF               	movlw	255
  2115  001286  14DE               	andwf	postinc2,w,c
  2116  001288  6F75               	movwf	??_f_write& (0+255),b
  2117  00128A  0E01               	movlw	1
  2118  00128C  14DE               	andwf	postinc2,w,c
  2119  00128E  6F76               	movwf	(??_f_write+1)& (0+255),b
  2120  001290  0E00               	movlw	0
  2121  001292  14DE               	andwf	postinc2,w,c
  2122  001294  6F77               	movwf	(??_f_write+2)& (0+255),b
  2123  001296  0E00               	movlw	0
  2124  001298  14DE               	andwf	postinc2,w,c
  2125  00129A  6F78               	movwf	(??_f_write+3)& (0+255),b
  2126  00129C  5175               	movf	??_f_write& (0+255),w,b
  2127  00129E  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  2128  0012A0  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  2129  0012A2  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  2130  0012A4  A4D8               	btfss	status,2,c
  2131  0012A6  D26A               	goto	l6312
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  2135  0012A8  EE20 F006          	lfsr	2,6
  2136  0012AC  516D               	movf	f_write@fp& (0+255),w,b
  2137  0012AE  26D9               	addwf	fsr2l,f,c
  2138  0012B0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2139  0012B2  22DA               	addwfc	fsr2h,f,c
  2140  0012B4  CFDE F075          	movff	postinc2,??_f_write
  2141  0012B8  CFDE F076          	movff	postinc2,??_f_write+1
  2142  0012BC  CFDE F077          	movff	postinc2,??_f_write+2
  2143  0012C0  CFDE F078          	movff	postinc2,??_f_write+3
  2144  0012C4  0E0A               	movlw	10
  2145  0012C6  D005               	goto	u8270
  2146  0012C8                     u8275:
  2147  0012C8  90D8               	bcf	status,0,c
  2148  0012CA  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  2149  0012CC  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  2150  0012CE  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2151  0012D0  3375               	rrcf	??_f_write& (0+255),f,b
  2152  0012D2                     u8270:
  2153  0012D2  2EE8               	decfsz	wreg,f,c
  2154  0012D4  D7F9               	goto	u8275
  2155  0012D6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2156  0012DA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2157  0012DE  EE10 F002          	lfsr	1,2
  2158  0012E2  50DE               	movf	postinc2,w,c
  2159  0012E4  26E1               	addwf	fsr1l,f,c
  2160  0012E6  50DD               	movf	postdec2,w,c
  2161  0012E8  22E2               	addwfc	fsr1h,f,c
  2162  0012EA  50E7               	movf	indf1,w,c
  2163  0012EC  6F79               	movwf	(??_f_write+4)& (0+255),b
  2164  0012EE  0579               	decf	(??_f_write+4)& (0+255),w,b
  2165  0012F0  1575               	andwf	??_f_write& (0+255),w,b
  2166  0012F2  6F84               	movwf	f_write@csect& (0+255),b
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;ff.c: 2719:    if (!csect) {
  2170  0012F4  5184               	movf	f_write@csect& (0+255),w,b
  2171  0012F6  A4D8               	btfss	status,2,c
  2172  0012F8  D0A3               	goto	l6264
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;ff.c: 2720:     if (fp->fptr == 0) {
  2176  0012FA  EE20 F006          	lfsr	2,6
  2177  0012FE  516D               	movf	f_write@fp& (0+255),w,b
  2178  001300  26D9               	addwf	fsr2l,f,c
  2179  001302  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2180  001304  22DA               	addwfc	fsr2h,f,c
  2181  001306  50DE               	movf	postinc2,w,c
  2182  001308  10DE               	iorwf	postinc2,w,c
  2183  00130A  10DE               	iorwf	postinc2,w,c
  2184  00130C  10DE               	iorwf	postinc2,w,c
  2185  00130E  A4D8               	btfss	status,2,c
  2186  001310  D027               	goto	l6242
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;ff.c: 2721:      clst = fp->sclust;
  2190  001312  EE20 F00E          	lfsr	2,14
  2191  001316  516D               	movf	f_write@fp& (0+255),w,b
  2192  001318  26D9               	addwf	fsr2l,f,c
  2193  00131A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2194  00131C  22DA               	addwfc	fsr2h,f,c
  2195  00131E  CFDE F08B          	movff	postinc2,f_write@clst
  2196  001322  CFDE F08C          	movff	postinc2,f_write@clst+1
  2197  001326  CFDE F08D          	movff	postinc2,f_write@clst+2
  2198  00132A  CFDE F08E          	movff	postinc2,f_write@clst+3
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;ff.c: 2722:      if (clst == 0)
  2202  00132E  518B               	movf	f_write@clst& (0+255),w,b
  2203  001330  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  2204  001332  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  2205  001334  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  2206  001336  A4D8               	btfss	status,2,c
  2207  001338  D033               	goto	l6244
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  2211  00133A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2212  00133E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2213  001342  CFDE F056          	movff	postinc2,create_chain@fs
  2214  001346  CFDD F057          	movff	postdec2,create_chain@fs+1
  2215  00134A  0E00               	movlw	0
  2216  00134C  6E58               	movwf	create_chain@clst,c
  2217  00134E  0E00               	movlw	0
  2218  001350  6E59               	movwf	create_chain@clst+1,c
  2219  001352  0E00               	movlw	0
  2220  001354  6E5A               	movwf	create_chain@clst+2,c
  2221  001356  0E00               	movlw	0
  2222  001358  6E5B               	movwf	create_chain@clst+3,c
  2223  00135A  EC4A  F01B         	call	_create_chain	;wreg free
  2224  00135E  D018               	goto	L1
  2225  001360                     l6242:
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  2229  001360  C06D  FFD9         	movff	f_write@fp,fsr2l
  2230  001364  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2231  001368  CFDE F056          	movff	postinc2,create_chain@fs
  2232  00136C  CFDD F057          	movff	postdec2,create_chain@fs+1
  2233  001370  EE20 F012          	lfsr	2,18
  2234  001374  516D               	movf	f_write@fp& (0+255),w,b
  2235  001376  26D9               	addwf	fsr2l,f,c
  2236  001378  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2237  00137A  22DA               	addwfc	fsr2h,f,c
  2238  00137C  CFDE F058          	movff	postinc2,create_chain@clst
  2239  001380  CFDE F059          	movff	postinc2,create_chain@clst+1
  2240  001384  CFDE F05A          	movff	postinc2,create_chain@clst+2
  2241  001388  CFDE F05B          	movff	postinc2,create_chain@clst+3
  2242  00138C  EC4A  F01B         	call	_create_chain	;wreg free
  2243  001390                     L1:
  2244  001390  C056  F08B         	movff	?_create_chain,f_write@clst
  2245  001394  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  2246  001398  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  2247  00139C  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  2248  0013A0                     l6244:
  2249                           
  2250                           ;ff.c: 2732:     if (clst == 0) break;
  2251  0013A0  0100               	movlb	0	; () banked
  2252  0013A2  518B               	movf	f_write@clst& (0+255),w,b
  2253  0013A4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  2254  0013A6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  2255  0013A8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  2256  0013AA  B4D8               	btfsc	status,2,c
  2257  0013AC  D28D               	goto	u8490
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2261  0013AE  058B               	decf	f_write@clst& (0+255),w,b
  2262  0013B0  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  2263  0013B2  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  2264  0013B4  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  2265  0013B6  A4D8               	btfss	status,2,c
  2266  0013B8  D009               	goto	l6254
  2267                           
  2268                           ; BSR set to: 0
  2269  0013BA  EE20 F005          	lfsr	2,5
  2270  0013BE  516D               	movf	f_write@fp& (0+255),w,b
  2271  0013C0  26D9               	addwf	fsr2l,f,c
  2272  0013C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2273  0013C4  22DA               	addwfc	fsr2h,f,c
  2274  0013C6  0E02               	movlw	2
  2275  0013C8  6EDF               	movwf	indf2,c
  2276  0013CA  0012               	return	
  2277  0013CC                     l6254:
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  2281  0013CC  298B               	incf	f_write@clst& (0+255),w,b
  2282  0013CE  E110               	bnz	l6260
  2283  0013D0  298C               	incf	(f_write@clst+1)& (0+255),w,b
  2284  0013D2  E10E               	bnz	l6260
  2285  0013D4  298D               	incf	(f_write@clst+2)& (0+255),w,b
  2286  0013D6  E10C               	bnz	l6260
  2287  0013D8  298E               	incf	(f_write@clst+3)& (0+255),w,b
  2288  0013DA  A4D8               	btfss	status,2,c
  2289  0013DC  D009               	goto	l6260
  2290                           
  2291                           ; BSR set to: 0
  2292  0013DE  EE20 F005          	lfsr	2,5
  2293  0013E2  516D               	movf	f_write@fp& (0+255),w,b
  2294  0013E4  26D9               	addwf	fsr2l,f,c
  2295  0013E6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2296  0013E8  22DA               	addwfc	fsr2h,f,c
  2297  0013EA  0E01               	movlw	1
  2298  0013EC  6EDF               	movwf	indf2,c
  2299  0013EE  0012               	return	
  2300  0013F0                     l6260:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;ff.c: 2735:     fp->clust = clst;
  2304  0013F0  EE20 F012          	lfsr	2,18
  2305  0013F4  516D               	movf	f_write@fp& (0+255),w,b
  2306  0013F6  26D9               	addwf	fsr2l,f,c
  2307  0013F8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2308  0013FA  22DA               	addwfc	fsr2h,f,c
  2309  0013FC  C08B  FFDE         	movff	f_write@clst,postinc2
  2310  001400  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2311  001404  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2312  001408  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2313                           
  2314                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  2315  00140C  EE20 F00E          	lfsr	2,14
  2316  001410  516D               	movf	f_write@fp& (0+255),w,b
  2317  001412  26D9               	addwf	fsr2l,f,c
  2318  001414  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2319  001416  22DA               	addwfc	fsr2h,f,c
  2320  001418  50DE               	movf	postinc2,w,c
  2321  00141A  10DE               	iorwf	postinc2,w,c
  2322  00141C  10DE               	iorwf	postinc2,w,c
  2323  00141E  10DE               	iorwf	postinc2,w,c
  2324  001420  A4D8               	btfss	status,2,c
  2325  001422  D00E               	goto	l6264
  2326                           
  2327                           ; BSR set to: 0
  2328  001424  EE20 F00E          	lfsr	2,14
  2329  001428  516D               	movf	f_write@fp& (0+255),w,b
  2330  00142A  26D9               	addwf	fsr2l,f,c
  2331  00142C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2332  00142E  22DA               	addwfc	fsr2h,f,c
  2333  001430  C08B  FFDE         	movff	f_write@clst,postinc2
  2334  001434  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2335  001438  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2336  00143C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2337  001440                     l6264:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2341  001440  EE20 F016          	lfsr	2,22
  2342  001444  516D               	movf	f_write@fp& (0+255),w,b
  2343  001446  26D9               	addwf	fsr2l,f,c
  2344  001448  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2345  00144A  22DA               	addwfc	fsr2h,f,c
  2346  00144C  C06D  FFE1         	movff	f_write@fp,fsr1l
  2347  001450  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  2348  001454  EE00 F02A          	lfsr	0,42
  2349  001458  50E6               	movf	postinc1,w,c
  2350  00145A  26E9               	addwf	fsr0l,f,c
  2351  00145C  50E5               	movf	postdec1,w,c
  2352  00145E  22EA               	addwfc	fsr0h,f,c
  2353  001460  50DE               	movf	postinc2,w,c
  2354  001462  18EE               	xorwf	postinc0,w,c
  2355  001464  E121               	bnz	l6272
  2356  001466  50DE               	movf	postinc2,w,c
  2357  001468  18EE               	xorwf	postinc0,w,c
  2358  00146A  E11E               	bnz	l6272
  2359  00146C  50DE               	movf	postinc2,w,c
  2360  00146E  18EE               	xorwf	postinc0,w,c
  2361  001470  E11B               	bnz	l6272
  2362  001472  50DE               	movf	postinc2,w,c
  2363  001474  18EE               	xorwf	postinc0,w,c
  2364  001476  A4D8               	btfss	status,2,c
  2365  001478  D017               	goto	l6272
  2366                           
  2367                           ; BSR set to: 0
  2368  00147A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2369  00147E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2370  001482  CFDE F01B          	movff	postinc2,sync_window@fs
  2371  001486  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2372  00148A  EC83  F022         	call	_sync_window	;wreg free
  2373  00148E  0900               	iorlw	0
  2374  001490  B4D8               	btfsc	status,2,c
  2375  001492  D00A               	goto	l6272
  2376                           
  2377                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2378  001494  0100               	movlb	0	; () banked
  2379  001496  EE20 F005          	lfsr	2,5
  2380  00149A  516D               	movf	f_write@fp& (0+255),w,b
  2381  00149C  26D9               	addwf	fsr2l,f,c
  2382  00149E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2383  0014A0  22DA               	addwfc	fsr2h,f,c
  2384  0014A2  0E01               	movlw	1
  2385  0014A4  6EDF               	movwf	indf2,c
  2386  0014A6  0012               	return	
  2387  0014A8                     l6272:
  2388                           
  2389                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2390  0014A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2391  0014AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2392  0014B0  CFDE F00D          	movff	postinc2,clust2sect@fs
  2393  0014B4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2394  0014B8  0100               	movlb	0	; () banked
  2395  0014BA  EE20 F012          	lfsr	2,18
  2396  0014BE  516D               	movf	f_write@fp& (0+255),w,b
  2397  0014C0  26D9               	addwf	fsr2l,f,c
  2398  0014C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2399  0014C4  22DA               	addwfc	fsr2h,f,c
  2400  0014C6  CFDE F00F          	movff	postinc2,clust2sect@clst
  2401  0014CA  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2402  0014CE  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2403  0014D2  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2404  0014D6  EC65  F02A         	call	_clust2sect	;wreg free
  2405  0014DA  C00D  F087         	movff	?_clust2sect,f_write@sect
  2406  0014DE  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  2407  0014E2  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  2408  0014E6  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  2409                           
  2410                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2411  0014EA  0100               	movlb	0	; () banked
  2412  0014EC  5187               	movf	f_write@sect& (0+255),w,b
  2413  0014EE  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  2414  0014F0  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  2415  0014F2  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  2416  0014F4  A4D8               	btfss	status,2,c
  2417  0014F6  D009               	goto	l6280
  2418                           
  2419                           ; BSR set to: 0
  2420  0014F8  EE20 F005          	lfsr	2,5
  2421  0014FC  516D               	movf	f_write@fp& (0+255),w,b
  2422  0014FE  26D9               	addwf	fsr2l,f,c
  2423  001500  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2424  001502  22DA               	addwfc	fsr2h,f,c
  2425  001504  0E02               	movlw	2
  2426  001506  6EDF               	movwf	indf2,c
  2427  001508  0012               	return	
  2428  00150A                     l6280:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;ff.c: 2750:    sect += csect;
  2432  00150A  5184               	movf	f_write@csect& (0+255),w,b
  2433  00150C  2787               	addwf	f_write@sect& (0+255),f,b
  2434  00150E  0E00               	movlw	0
  2435  001510  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  2436  001512  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  2437  001514  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  2438                           
  2439                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2440  001516  C071  F075         	movff	f_write@btw,??_f_write
  2441  00151A  C072  F076         	movff	f_write@btw+1,??_f_write+1
  2442  00151E  0E09               	movlw	9
  2443  001520  6F77               	movwf	(??_f_write+2)& (0+255),b
  2444  001522                     u8385:
  2445  001522  90D8               	bcf	status,0,c
  2446  001524  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2447  001526  3375               	rrcf	??_f_write& (0+255),f,b
  2448  001528  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  2449  00152A  D7FB               	goto	u8385
  2450  00152C  C075  F085         	movff	??_f_write,f_write@cc
  2451  001530  C076  F086         	movff	??_f_write+1,f_write@cc+1
  2452                           
  2453                           ;ff.c: 2752:    if (cc) {
  2454  001534  5185               	movf	f_write@cc& (0+255),w,b
  2455  001536  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  2456  001538  B4D8               	btfsc	status,2,c
  2457  00153A  D0D2               	goto	l6300
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2461  00153C  5184               	movf	f_write@csect& (0+255),w,b
  2462  00153E  2585               	addwf	f_write@cc& (0+255),w,b
  2463  001540  6F75               	movwf	??_f_write& (0+255),b
  2464  001542  0E00               	movlw	0
  2465  001544  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  2466  001546  6F76               	movwf	(??_f_write+1)& (0+255),b
  2467  001548  C06D  FFD9         	movff	f_write@fp,fsr2l
  2468  00154C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2469  001550  EE10 F002          	lfsr	1,2
  2470  001554  50DE               	movf	postinc2,w,c
  2471  001556  26E1               	addwf	fsr1l,f,c
  2472  001558  50DD               	movf	postdec2,w,c
  2473  00155A  22E2               	addwfc	fsr1h,f,c
  2474  00155C  50E7               	movf	indf1,w,c
  2475  00155E  6F77               	movwf	(??_f_write+2)& (0+255),b
  2476  001560  6B78               	clrf	(??_f_write+3)& (0+255),b
  2477  001562  5175               	movf	??_f_write& (0+255),w,b
  2478  001564  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  2479  001566  5176               	movf	(??_f_write+1)& (0+255),w,b
  2480  001568  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  2481  00156A  B0D8               	btfsc	status,0,c
  2482  00156C  D012               	goto	l6286
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2486  00156E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2487  001572  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2488  001576  EE10 F002          	lfsr	1,2
  2489  00157A  50DE               	movf	postinc2,w,c
  2490  00157C  26E1               	addwf	fsr1l,f,c
  2491  00157E  50DD               	movf	postdec2,w,c
  2492  001580  22E2               	addwfc	fsr1h,f,c
  2493  001582  50E7               	movf	indf1,w,c
  2494  001584  6F75               	movwf	??_f_write& (0+255),b
  2495  001586  5184               	movf	f_write@csect& (0+255),w,b
  2496  001588  5D75               	subwf	??_f_write& (0+255),w,b
  2497  00158A  6F85               	movwf	f_write@cc& (0+255),b
  2498  00158C  6B86               	clrf	(f_write@cc+1)& (0+255),b
  2499  00158E  A0D8               	btfss	status,0,c
  2500  001590  0786               	decf	(f_write@cc+1)& (0+255),f,b
  2501  001592                     l6286:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2505  001592  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2506  001596  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2507  00159A  C087  F013         	movff	f_write@sect,disk_write@sector
  2508  00159E  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2509  0015A2  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2510  0015A6  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2511  0015AA  C085  F017         	movff	f_write@cc,disk_write@count
  2512  0015AE  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2513  0015B2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2514  0015B6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2515  0015BA  EE10 F001          	lfsr	1,1
  2516  0015BE  50DE               	movf	postinc2,w,c
  2517  0015C0  26E1               	addwf	fsr1l,f,c
  2518  0015C2  50DD               	movf	postdec2,w,c
  2519  0015C4  22E2               	addwfc	fsr1h,f,c
  2520  0015C6  50E7               	movf	indf1,w,c
  2521  0015C8  EC56  F026         	call	_disk_write
  2522  0015CC  0900               	iorlw	0
  2523  0015CE  B4D8               	btfsc	status,2,c
  2524  0015D0  D00A               	goto	l6292
  2525                           
  2526                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2527  0015D2  0100               	movlb	0	; () banked
  2528  0015D4  EE20 F005          	lfsr	2,5
  2529  0015D8  516D               	movf	f_write@fp& (0+255),w,b
  2530  0015DA  26D9               	addwf	fsr2l,f,c
  2531  0015DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2532  0015DE  22DA               	addwfc	fsr2h,f,c
  2533  0015E0  0E01               	movlw	1
  2534  0015E2  6EDF               	movwf	indf2,c
  2535  0015E4  0012               	return	
  2536  0015E6                     l6292:
  2537                           
  2538                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2539  0015E6  0100               	movlb	0	; () banked
  2540  0015E8  5185               	movf	f_write@cc& (0+255),w,b
  2541  0015EA  6F75               	movwf	??_f_write& (0+255),b
  2542  0015EC  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2543  0015EE  6F76               	movwf	(??_f_write+1)& (0+255),b
  2544  0015F0  6B77               	clrf	(??_f_write+2)& (0+255),b
  2545  0015F2  6B78               	clrf	(??_f_write+3)& (0+255),b
  2546  0015F4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2547  0015F8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2548  0015FC  EE10 F02A          	lfsr	1,42
  2549  001600  50DE               	movf	postinc2,w,c
  2550  001602  26E1               	addwf	fsr1l,f,c
  2551  001604  50DD               	movf	postdec2,w,c
  2552  001606  22E2               	addwfc	fsr1h,f,c
  2553  001608  CFE6 F079          	movff	postinc1,??_f_write+4
  2554  00160C  CFE6 F07A          	movff	postinc1,??_f_write+5
  2555  001610  CFE6 F07B          	movff	postinc1,??_f_write+6
  2556  001614  CFE6 F07C          	movff	postinc1,??_f_write+7
  2557  001618  5187               	movf	f_write@sect& (0+255),w,b
  2558  00161A  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2559  00161C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2560  00161E  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2561  001620  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2562  001622  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2563  001624  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2564  001626  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2565  001628  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2566  00162A  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2567  00162C  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2568  00162E  6F80               	movwf	(??_f_write+11)& (0+255),b
  2569  001630  5175               	movf	??_f_write& (0+255),w,b
  2570  001632  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2571  001634  5176               	movf	(??_f_write+1)& (0+255),w,b
  2572  001636  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2573  001638  5177               	movf	(??_f_write+2)& (0+255),w,b
  2574  00163A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2575  00163C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2576  00163E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2577  001640  B0D8               	btfsc	status,0,c
  2578  001642  D03E               	goto	l6298
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2582  001644  C06D  FFD9         	movff	f_write@fp,fsr2l
  2583  001648  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2584  00164C  CFDE F075          	movff	postinc2,??_f_write
  2585  001650  CFDD F076          	movff	postdec2,??_f_write+1
  2586  001654  0E2E               	movlw	46
  2587  001656  2575               	addwf	??_f_write& (0+255),w,b
  2588  001658  6E01               	movwf	mem_cpy@dst,c
  2589  00165A  0E00               	movlw	0
  2590  00165C  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2591  00165E  6E02               	movwf	mem_cpy@dst+1,c
  2592  001660  C06D  FFD9         	movff	f_write@fp,fsr2l
  2593  001664  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2594  001668  EE10 F02A          	lfsr	1,42
  2595  00166C  50DE               	movf	postinc2,w,c
  2596  00166E  26E1               	addwf	fsr1l,f,c
  2597  001670  50DD               	movf	postdec2,w,c
  2598  001672  22E2               	addwfc	fsr1h,f,c
  2599  001674  CFE6 F077          	movff	postinc1,??_f_write+2
  2600  001678  CFE5 F078          	movff	postdec1,??_f_write+3
  2601  00167C  5187               	movf	f_write@sect& (0+255),w,b
  2602  00167E  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2603  001680  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2604  001682  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2605  001684  0E09               	movlw	9
  2606  001686                     u8435:
  2607  001686  90D8               	bcf	status,0,c
  2608  001688  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2609  00168A  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2610  00168C  2EE8               	decfsz	wreg,f,c
  2611  00168E  D7FB               	goto	u8435
  2612  001690  5177               	movf	(??_f_write+2)& (0+255),w,b
  2613  001692  2582               	addwf	f_write@wbuff& (0+255),w,b
  2614  001694  6E03               	movwf	mem_cpy@src,c
  2615  001696  5178               	movf	(??_f_write+3)& (0+255),w,b
  2616  001698  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2617  00169A  6E04               	movwf	mem_cpy@src+1,c
  2618  00169C  0E02               	movlw	2
  2619  00169E  6E06               	movwf	mem_cpy@cnt+1,c
  2620  0016A0  0E00               	movlw	0
  2621  0016A2  6E05               	movwf	mem_cpy@cnt,c
  2622  0016A4  EC78  F02C         	call	_mem_cpy	;wreg free
  2623                           
  2624                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2625  0016A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2626  0016AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2627  0016B0  EE10 F004          	lfsr	1,4
  2628  0016B4  50DE               	movf	postinc2,w,c
  2629  0016B6  26E1               	addwf	fsr1l,f,c
  2630  0016B8  50DD               	movf	postdec2,w,c
  2631  0016BA  22E2               	addwfc	fsr1h,f,c
  2632  0016BC  0E00               	movlw	0
  2633  0016BE  6EE7               	movwf	indf1,c
  2634  0016C0                     l6298:
  2635                           
  2636                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2637  0016C0  C085  F075         	movff	f_write@cc,??_f_write
  2638  0016C4  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2639  0016C8  0E09               	movlw	9
  2640  0016CA                     u8445:
  2641  0016CA  90D8               	bcf	status,0,c
  2642  0016CC  0100               	movlb	0	; () banked
  2643  0016CE  3775               	rlcf	??_f_write& (0+255),f,b
  2644  0016D0  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2645  0016D2  2EE8               	decfsz	wreg,f,c
  2646  0016D4  D7FA               	goto	u8445
  2647  0016D6  C075  F08F         	movff	??_f_write,f_write@wcnt
  2648  0016DA  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2649                           
  2650                           ;ff.c: 2771:     continue;
  2651  0016DE  D0D2               	goto	l6328
  2652  0016E0                     l6300:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2656  0016E0  EE20 F00A          	lfsr	2,10
  2657  0016E4  516D               	movf	f_write@fp& (0+255),w,b
  2658  0016E6  26D9               	addwf	fsr2l,f,c
  2659  0016E8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2660  0016EA  22DA               	addwfc	fsr2h,f,c
  2661  0016EC  EE10 F006          	lfsr	1,6
  2662  0016F0  516D               	movf	f_write@fp& (0+255),w,b
  2663  0016F2  26E1               	addwf	fsr1l,f,c
  2664  0016F4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2665  0016F6  22E2               	addwfc	fsr1h,f,c
  2666  0016F8  50DE               	movf	postinc2,w,c
  2667  0016FA  5CE6               	subwf	postinc1,w,c
  2668  0016FC  50DE               	movf	postinc2,w,c
  2669  0016FE  58E6               	subwfb	postinc1,w,c
  2670  001700  50DE               	movf	postinc2,w,c
  2671  001702  58E6               	subwfb	postinc1,w,c
  2672  001704  50DE               	movf	postinc2,w,c
  2673  001706  58E6               	subwfb	postinc1,w,c
  2674  001708  A0D8               	btfss	status,0,c
  2675  00170A  D029               	goto	l6310
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2679  00170C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2680  001710  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2681  001714  CFDE F01B          	movff	postinc2,sync_window@fs
  2682  001718  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2683  00171C  EC83  F022         	call	_sync_window	;wreg free
  2684  001720  0900               	iorlw	0
  2685  001722  B4D8               	btfsc	status,2,c
  2686  001724  D00A               	goto	l6308
  2687  001726  0100               	movlb	0	; () banked
  2688  001728  EE20 F005          	lfsr	2,5
  2689  00172C  516D               	movf	f_write@fp& (0+255),w,b
  2690  00172E  26D9               	addwf	fsr2l,f,c
  2691  001730  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2692  001732  22DA               	addwfc	fsr2h,f,c
  2693  001734  0E01               	movlw	1
  2694  001736  6EDF               	movwf	indf2,c
  2695  001738  0012               	return	
  2696  00173A                     l6308:
  2697                           
  2698                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2699  00173A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2700  00173E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2701  001742  EE10 F02A          	lfsr	1,42
  2702  001746  50DE               	movf	postinc2,w,c
  2703  001748  26E1               	addwf	fsr1l,f,c
  2704  00174A  50DD               	movf	postdec2,w,c
  2705  00174C  22E2               	addwfc	fsr1h,f,c
  2706  00174E  C087  FFE6         	movff	f_write@sect,postinc1
  2707  001752  C088  FFE6         	movff	f_write@sect+1,postinc1
  2708  001756  C089  FFE6         	movff	f_write@sect+2,postinc1
  2709  00175A  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2710  00175E                     l6310:
  2711                           
  2712                           ;ff.c: 2785:    fp->dsect = sect;
  2713  00175E  0100               	movlb	0	; () banked
  2714  001760  EE20 F016          	lfsr	2,22
  2715  001764  516D               	movf	f_write@fp& (0+255),w,b
  2716  001766  26D9               	addwf	fsr2l,f,c
  2717  001768  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2718  00176A  22DA               	addwfc	fsr2h,f,c
  2719  00176C  C087  FFDE         	movff	f_write@sect,postinc2
  2720  001770  C088  FFDE         	movff	f_write@sect+1,postinc2
  2721  001774  C089  FFDE         	movff	f_write@sect+2,postinc2
  2722  001778  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2723  00177C                     l6312:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2727  00177C  0EFF               	movlw	255
  2728  00177E  6F75               	movwf	??_f_write& (0+255),b
  2729  001780  0E01               	movlw	1
  2730  001782  6F76               	movwf	(??_f_write+1)& (0+255),b
  2731  001784  EE20 F006          	lfsr	2,6
  2732  001788  516D               	movf	f_write@fp& (0+255),w,b
  2733  00178A  26D9               	addwf	fsr2l,f,c
  2734  00178C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2735  00178E  22DA               	addwfc	fsr2h,f,c
  2736  001790  CFDE F077          	movff	postinc2,??_f_write+2
  2737  001794  CFDD F078          	movff	postdec2,??_f_write+3
  2738  001798  5175               	movf	??_f_write& (0+255),w,b
  2739  00179A  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2740  00179C  5176               	movf	(??_f_write+1)& (0+255),w,b
  2741  00179E  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2742  0017A0  5177               	movf	(??_f_write+2)& (0+255),w,b
  2743  0017A2  0800               	sublw	0
  2744  0017A4  6F8F               	movwf	f_write@wcnt& (0+255),b
  2745  0017A6  5178               	movf	(??_f_write+3)& (0+255),w,b
  2746  0017A8  A0D8               	btfss	status,0,c
  2747  0017AA  2AE8               	incf	wreg,f,c
  2748  0017AC  0802               	sublw	2
  2749  0017AE  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2753  0017B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2754  0017B2  5D71               	subwf	f_write@btw& (0+255),w,b
  2755  0017B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2756  0017B6  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2757  0017B8  B0D8               	btfsc	status,0,c
  2758  0017BA  D004               	goto	l6318
  2759                           
  2760                           ; BSR set to: 0
  2761  0017BC  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2762  0017C0  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2763  0017C4                     l6318:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2767  0017C4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2768  0017C8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2769  0017CC  CFDE F030          	movff	postinc2,move_window@fs
  2770  0017D0  CFDD F031          	movff	postdec2,move_window@fs+1
  2771  0017D4  EE20 F016          	lfsr	2,22
  2772  0017D8  516D               	movf	f_write@fp& (0+255),w,b
  2773  0017DA  26D9               	addwf	fsr2l,f,c
  2774  0017DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2775  0017DE  22DA               	addwfc	fsr2h,f,c
  2776  0017E0  CFDE F032          	movff	postinc2,move_window@sector
  2777  0017E4  CFDE F033          	movff	postinc2,move_window@sector+1
  2778  0017E8  CFDE F034          	movff	postinc2,move_window@sector+2
  2779  0017EC  CFDE F035          	movff	postinc2,move_window@sector+3
  2780  0017F0  EC1A  F02B         	call	_move_window	;wreg free
  2781  0017F4  0900               	iorlw	0
  2782  0017F6  B4D8               	btfsc	status,2,c
  2783  0017F8  D00A               	goto	l6324
  2784                           
  2785                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2786  0017FA  0100               	movlb	0	; () banked
  2787  0017FC  EE20 F005          	lfsr	2,5
  2788  001800  516D               	movf	f_write@fp& (0+255),w,b
  2789  001802  26D9               	addwf	fsr2l,f,c
  2790  001804  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2791  001806  22DA               	addwfc	fsr2h,f,c
  2792  001808  0E01               	movlw	1
  2793  00180A  6EDF               	movwf	indf2,c
  2794  00180C  0012               	return	
  2795  00180E                     l6324:
  2796                           
  2797                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2798  00180E  0EFF               	movlw	255
  2799  001810  0100               	movlb	0	; () banked
  2800  001812  6F75               	movwf	??_f_write& (0+255),b
  2801  001814  0E01               	movlw	1
  2802  001816  6F76               	movwf	(??_f_write+1)& (0+255),b
  2803  001818  EE20 F006          	lfsr	2,6
  2804  00181C  516D               	movf	f_write@fp& (0+255),w,b
  2805  00181E  26D9               	addwf	fsr2l,f,c
  2806  001820  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2807  001822  22DA               	addwfc	fsr2h,f,c
  2808  001824  CFDE F077          	movff	postinc2,??_f_write+2
  2809  001828  CFDD F078          	movff	postdec2,??_f_write+3
  2810  00182C  5175               	movf	??_f_write& (0+255),w,b
  2811  00182E  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2812  001830  5176               	movf	(??_f_write+1)& (0+255),w,b
  2813  001832  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2814  001834  C06D  FFD9         	movff	f_write@fp,fsr2l
  2815  001838  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2816  00183C  CFDE F079          	movff	postinc2,??_f_write+4
  2817  001840  CFDD F07A          	movff	postdec2,??_f_write+5
  2818  001844  5177               	movf	(??_f_write+2)& (0+255),w,b
  2819  001846  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2820  001848  5178               	movf	(??_f_write+3)& (0+255),w,b
  2821  00184A  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2822  00184C  0E2E               	movlw	46
  2823  00184E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2824  001850  6E01               	movwf	mem_cpy@dst,c
  2825  001852  0E00               	movlw	0
  2826  001854  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2827  001856  6E02               	movwf	mem_cpy@dst+1,c
  2828  001858  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2829  00185C  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2830  001860  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2831  001864  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2832  001868  EC78  F02C         	call	_mem_cpy	;wreg free
  2833                           
  2834                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2835  00186C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2836  001870  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2837  001874  EE10 F004          	lfsr	1,4
  2838  001878  50DE               	movf	postinc2,w,c
  2839  00187A  26E1               	addwf	fsr1l,f,c
  2840  00187C  50DD               	movf	postdec2,w,c
  2841  00187E  22E2               	addwfc	fsr1h,f,c
  2842  001880  0E01               	movlw	1
  2843  001882  6EE7               	movwf	indf1,c
  2844  001884                     l6328:
  2845  001884  0100               	movlb	0	; () banked
  2846  001886  518F               	movf	f_write@wcnt& (0+255),w,b
  2847  001888  2782               	addwf	f_write@wbuff& (0+255),f,b
  2848  00188A  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2849  00188C  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2850                           
  2851                           ; BSR set to: 0
  2852  00188E  EE20 F006          	lfsr	2,6
  2853  001892  516D               	movf	f_write@fp& (0+255),w,b
  2854  001894  26D9               	addwf	fsr2l,f,c
  2855  001896  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2856  001898  22DA               	addwfc	fsr2h,f,c
  2857  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2858  00189C  26DE               	addwf	postinc2,f,c
  2859  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2860  0018A0  22DE               	addwfc	postinc2,f,c
  2861  0018A2  0E00               	movlw	0
  2862  0018A4  22DE               	addwfc	postinc2,f,c
  2863  0018A6  22DE               	addwfc	postinc2,f,c
  2864                           
  2865                           ; BSR set to: 0
  2866  0018A8  C073  FFD9         	movff	f_write@bw,fsr2l
  2867  0018AC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2868  0018B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2869  0018B2  26DE               	addwf	postinc2,f,c
  2870  0018B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2871  0018B6  22DD               	addwfc	postdec2,f,c
  2872                           
  2873                           ; BSR set to: 0
  2874  0018B8  518F               	movf	f_write@wcnt& (0+255),w,b
  2875  0018BA  5F71               	subwf	f_write@btw& (0+255),f,b
  2876  0018BC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2877  0018BE  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2878  0018C0                     l6336:
  2879                           
  2880                           ; BSR set to: 0
  2881  0018C0  5171               	movf	f_write@btw& (0+255),w,b
  2882  0018C2  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2883  0018C4  A4D8               	btfss	status,2,c
  2884  0018C6  D4D8               	goto	l6228
  2885  0018C8                     u8490:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2889  0018C8  EE20 F006          	lfsr	2,6
  2890  0018CC  516D               	movf	f_write@fp& (0+255),w,b
  2891  0018CE  26D9               	addwf	fsr2l,f,c
  2892  0018D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2893  0018D2  22DA               	addwfc	fsr2h,f,c
  2894  0018D4  EE10 F00A          	lfsr	1,10
  2895  0018D8  516D               	movf	f_write@fp& (0+255),w,b
  2896  0018DA  26E1               	addwf	fsr1l,f,c
  2897  0018DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2898  0018DE  22E2               	addwfc	fsr1h,f,c
  2899  0018E0  50DE               	movf	postinc2,w,c
  2900  0018E2  5CE6               	subwf	postinc1,w,c
  2901  0018E4  50DE               	movf	postinc2,w,c
  2902  0018E6  58E6               	subwfb	postinc1,w,c
  2903  0018E8  50DE               	movf	postinc2,w,c
  2904  0018EA  58E6               	subwfb	postinc1,w,c
  2905  0018EC  50DE               	movf	postinc2,w,c
  2906  0018EE  58E6               	subwfb	postinc1,w,c
  2907  0018F0  B0D8               	btfsc	status,0,c
  2908  0018F2  D014               	goto	l6342
  2909                           
  2910                           ; BSR set to: 0
  2911  0018F4  EE20 F006          	lfsr	2,6
  2912  0018F8  516D               	movf	f_write@fp& (0+255),w,b
  2913  0018FA  26D9               	addwf	fsr2l,f,c
  2914  0018FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2915  0018FE  22DA               	addwfc	fsr2h,f,c
  2916  001900  EE10 F00A          	lfsr	1,10
  2917  001904  516D               	movf	f_write@fp& (0+255),w,b
  2918  001906  26E1               	addwf	fsr1l,f,c
  2919  001908  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2920  00190A  22E2               	addwfc	fsr1h,f,c
  2921  00190C  CFDE FFE6          	movff	postinc2,postinc1
  2922  001910  CFDE FFE6          	movff	postinc2,postinc1
  2923  001914  CFDE FFE6          	movff	postinc2,postinc1
  2924  001918  CFDE FFE6          	movff	postinc2,postinc1
  2925  00191C                     l6342:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;ff.c: 2801:  fp->flag |= 0x20;
  2929  00191C  EE20 F004          	lfsr	2,4
  2930  001920  516D               	movf	f_write@fp& (0+255),w,b
  2931  001922  26D9               	addwf	fsr2l,f,c
  2932  001924  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2933  001926  22DA               	addwfc	fsr2h,f,c
  2934  001928  0E00               	movlw	0
  2935  00192A  8ADB               	bsf	plusw2,5,c
  2936                           
  2937                           ; BSR set to: 0
  2938  00192C  0012               	return		;funcret
  2939  00192E                     __end_of_f_write:
  2940                           	opt callstack 0
  2941                           
  2942 ;; *************** function ___xxtofl *****************
  2943 ;; Defined at:
  2944 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\xxtofl.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  sign            1    wreg     unsigned char 
  2947 ;;  val             4    0[COMRAM] long 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  sign            1    8[COMRAM] unsigned char 
  2950 ;;  arg             4   10[COMRAM] unsigned long 
  2951 ;;  exp             1    9[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  4    0[COMRAM] unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         4       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2964 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:       14 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_grabador
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text7
  2975  004A30                     __ptext7:
  2976                           	opt callstack 0
  2977  004A30                     ___xxtofl:
  2978                           	opt callstack 28
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;incstack = 0
  2982                           ;___xxtofl@sign stored from wreg
  2983  004A30  6E09               	movwf	___xxtofl@sign,c
  2984  004A32  5009               	movf	___xxtofl@sign,w,c
  2985  004A34  A4D8               	btfss	status,2,c
  2986  004A36  AE04               	btfss	___xxtofl@val+3,7,c
  2987  004A38  D01A               	goto	l1612
  2988  004A3A  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2989  004A3E  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2990  004A42  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2991  004A46  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2992  004A4A  1E05               	comf	??___xxtofl,f,c
  2993  004A4C  1E06               	comf	??___xxtofl+1,f,c
  2994  004A4E  1E07               	comf	??___xxtofl+2,f,c
  2995  004A50  1E08               	comf	??___xxtofl+3,f,c
  2996  004A52  2A05               	incf	??___xxtofl,f,c
  2997  004A54  0E00               	movlw	0
  2998  004A56  2206               	addwfc	??___xxtofl+1,f,c
  2999  004A58  2207               	addwfc	??___xxtofl+2,f,c
  3000  004A5A  2208               	addwfc	??___xxtofl+3,f,c
  3001  004A5C  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  3002  004A60  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  3003  004A64  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  3004  004A68  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  3005  004A6C  D008               	goto	l6726
  3006  004A6E                     l1612:
  3007  004A6E  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  3008  004A72  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  3009  004A76  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  3010  004A7A  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  3011  004A7E                     l6726:
  3012  004A7E  5001               	movf	___xxtofl@val,w,c
  3013  004A80  1002               	iorwf	___xxtofl@val+1,w,c
  3014  004A82  1003               	iorwf	___xxtofl@val+2,w,c
  3015  004A84  1004               	iorwf	___xxtofl@val+3,w,c
  3016  004A86  A4D8               	btfss	status,2,c
  3017  004A88  D009               	goto	l6732
  3018  004A8A  0E00               	movlw	0
  3019  004A8C  6E01               	movwf	?___xxtofl,c
  3020  004A8E  0E00               	movlw	0
  3021  004A90  6E02               	movwf	?___xxtofl+1,c
  3022  004A92  0E00               	movlw	0
  3023  004A94  6E03               	movwf	?___xxtofl+2,c
  3024  004A96  0E00               	movlw	0
  3025  004A98  6E04               	movwf	?___xxtofl+3,c
  3026  004A9A  0012               	return	
  3027  004A9C                     l6732:
  3028  004A9C  0E96               	movlw	150
  3029  004A9E  6E0A               	movwf	___xxtofl@exp,c
  3030  004AA0  D006               	goto	l6736
  3031  004AA2                     l6734:
  3032  004AA2  2A0A               	incf	___xxtofl@exp,f,c
  3033  004AA4  90D8               	bcf	status,0,c
  3034  004AA6  320E               	rrcf	___xxtofl@arg+3,f,c
  3035  004AA8  320D               	rrcf	___xxtofl@arg+2,f,c
  3036  004AAA  320C               	rrcf	___xxtofl@arg+1,f,c
  3037  004AAC  320B               	rrcf	___xxtofl@arg,f,c
  3038  004AAE                     l6736:
  3039  004AAE  0E00               	movlw	0
  3040  004AB0  140B               	andwf	___xxtofl@arg,w,c
  3041  004AB2  6E05               	movwf	??___xxtofl& (0+255),c
  3042  004AB4  0E00               	movlw	0
  3043  004AB6  140C               	andwf	___xxtofl@arg+1,w,c
  3044  004AB8  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  3045  004ABA  0E00               	movlw	0
  3046  004ABC  140D               	andwf	___xxtofl@arg+2,w,c
  3047  004ABE  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  3048  004AC0  0EFE               	movlw	254
  3049  004AC2  140E               	andwf	___xxtofl@arg+3,w,c
  3050  004AC4  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  3051  004AC6  5005               	movf	??___xxtofl,w,c
  3052  004AC8  1006               	iorwf	??___xxtofl+1,w,c
  3053  004ACA  1007               	iorwf	??___xxtofl+2,w,c
  3054  004ACC  1008               	iorwf	??___xxtofl+3,w,c
  3055  004ACE  B4D8               	btfsc	status,2,c
  3056  004AD0  D00D               	goto	l1619
  3057  004AD2  D7E7               	goto	l6734
  3058  004AD4                     l6738:
  3059  004AD4  2A0A               	incf	___xxtofl@exp,f,c
  3060  004AD6  0E01               	movlw	1
  3061  004AD8  260B               	addwf	___xxtofl@arg,f,c
  3062  004ADA  0E00               	movlw	0
  3063  004ADC  220C               	addwfc	___xxtofl@arg+1,f,c
  3064  004ADE  220D               	addwfc	___xxtofl@arg+2,f,c
  3065  004AE0  220E               	addwfc	___xxtofl@arg+3,f,c
  3066  004AE2  90D8               	bcf	status,0,c
  3067  004AE4  320E               	rrcf	___xxtofl@arg+3,f,c
  3068  004AE6  320D               	rrcf	___xxtofl@arg+2,f,c
  3069  004AE8  320C               	rrcf	___xxtofl@arg+1,f,c
  3070  004AEA  320B               	rrcf	___xxtofl@arg,f,c
  3071  004AEC                     l1619:
  3072  004AEC  0E00               	movlw	0
  3073  004AEE  140B               	andwf	___xxtofl@arg,w,c
  3074  004AF0  6E05               	movwf	??___xxtofl& (0+255),c
  3075  004AF2  0E00               	movlw	0
  3076  004AF4  140C               	andwf	___xxtofl@arg+1,w,c
  3077  004AF6  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  3078  004AF8  0E00               	movlw	0
  3079  004AFA  140D               	andwf	___xxtofl@arg+2,w,c
  3080  004AFC  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  3081  004AFE  0EFF               	movlw	255
  3082  004B00  140E               	andwf	___xxtofl@arg+3,w,c
  3083  004B02  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  3084  004B04  5005               	movf	??___xxtofl,w,c
  3085  004B06  1006               	iorwf	??___xxtofl+1,w,c
  3086  004B08  1007               	iorwf	??___xxtofl+2,w,c
  3087  004B0A  1008               	iorwf	??___xxtofl+3,w,c
  3088  004B0C  B4D8               	btfsc	status,2,c
  3089  004B0E  D007               	goto	l6746
  3090  004B10  D7E1               	goto	l6738
  3091  004B12                     l6744:
  3092  004B12  060A               	decf	___xxtofl@exp,f,c
  3093  004B14  90D8               	bcf	status,0,c
  3094  004B16  360B               	rlcf	___xxtofl@arg,f,c
  3095  004B18  360C               	rlcf	___xxtofl@arg+1,f,c
  3096  004B1A  360D               	rlcf	___xxtofl@arg+2,f,c
  3097  004B1C  360E               	rlcf	___xxtofl@arg+3,f,c
  3098  004B1E                     l6746:
  3099  004B1E  BE0D               	btfsc	___xxtofl@arg+2,7,c
  3100  004B20  D003               	goto	u9090
  3101  004B22  0E02               	movlw	2
  3102  004B24  600A               	cpfslt	___xxtofl@exp,c
  3103  004B26  D7F5               	goto	l6744
  3104  004B28                     u9090:
  3105  004B28  A00A               	btfss	___xxtofl@exp,0,c
  3106  004B2A  9E0D               	bcf	___xxtofl@arg+2,7,c
  3107  004B2C  90D8               	bcf	status,0,c
  3108  004B2E  320A               	rrcf	___xxtofl@exp,f,c
  3109  004B30  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  3110  004B34  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  3111  004B36  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  3112  004B38  6A08               	clrf	(??___xxtofl+3)& (0+255),c
  3113  004B3A  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  3114  004B3E  6A07               	clrf	??___xxtofl+2,c
  3115  004B40  6A06               	clrf	??___xxtofl+1,c
  3116  004B42  6A05               	clrf	??___xxtofl,c
  3117  004B44  5005               	movf	??___xxtofl,w,c
  3118  004B46  120B               	iorwf	___xxtofl@arg,f,c
  3119  004B48  5006               	movf	??___xxtofl+1,w,c
  3120  004B4A  120C               	iorwf	___xxtofl@arg+1,f,c
  3121  004B4C  5007               	movf	??___xxtofl+2,w,c
  3122  004B4E  120D               	iorwf	___xxtofl@arg+2,f,c
  3123  004B50  5008               	movf	??___xxtofl+3,w,c
  3124  004B52  120E               	iorwf	___xxtofl@arg+3,f,c
  3125  004B54  5009               	movf	___xxtofl@sign,w,c
  3126  004B56  A4D8               	btfss	status,2,c
  3127  004B58  AE04               	btfss	___xxtofl@val+3,7,c
  3128  004B5A  D001               	goto	l6762
  3129  004B5C  8E0E               	bsf	___xxtofl@arg+3,7,c
  3130  004B5E                     l6762:
  3131  004B5E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  3132  004B62  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  3133  004B66  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  3134  004B6A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  3135  004B6E  0012               	return		;funcret
  3136  004B70                     __end_of___xxtofl:
  3137                           	opt callstack 0
  3138                           
  3139 ;; *************** function ___flmul *****************
  3140 ;; Defined at:
  3141 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcmul.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  b               4   14[COMRAM] unsigned char 
  3144 ;;  a               4   18[COMRAM] unsigned char 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  prod            4   33[COMRAM] struct .
  3147 ;;  grs             4   27[COMRAM] unsigned long 
  3148 ;;  temp            2   37[COMRAM] struct .
  3149 ;;  bexp            1   32[COMRAM] unsigned char 
  3150 ;;  aexp            1   31[COMRAM] unsigned char 
  3151 ;;  sign            1   26[COMRAM] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  4   14[COMRAM] unsigned char 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, prodl, prodh
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3161 ;;      Params:         8       0       0       0       0       0       0       0       0
  3162 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3163 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3164 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3165 ;;Total ram usage:       25 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_grabador
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text8
  3175  003342                     __ptext8:
  3176                           	opt callstack 0
  3177  003342                     ___flmul:
  3178                           	opt callstack 28
  3179                           
  3180                           ;incstack = 0
  3181  003342  5012               	movf	___flmul@b+3,w,c
  3182  003344  0B80               	andlw	128
  3183  003346  6E1B               	movwf	___flmul@sign,c
  3184  003348  5012               	movf	___flmul@b+3,w,c
  3185  00334A  2412               	addwf	___flmul@b+3,w,c
  3186  00334C  6E21               	movwf	___flmul@bexp,c
  3187  00334E  BE11               	btfsc	___flmul@b+2,7,c
  3188  003350  8021               	bsf	___flmul@bexp,0,c
  3189  003352  5021               	movf	___flmul@bexp,w,c
  3190  003354  B4D8               	btfsc	status,2,c
  3191  003356  D00D               	goto	l6604
  3192  003358  2821               	incf	___flmul@bexp,w,c
  3193  00335A  A4D8               	btfss	status,2,c
  3194  00335C  D008               	goto	l6602
  3195  00335E  0E00               	movlw	0
  3196  003360  6E0F               	movwf	___flmul@b,c
  3197  003362  0E00               	movlw	0
  3198  003364  6E10               	movwf	___flmul@b+1,c
  3199  003366  0E00               	movlw	0
  3200  003368  6E11               	movwf	___flmul@b+2,c
  3201  00336A  0E00               	movlw	0
  3202  00336C  6E12               	movwf	___flmul@b+3,c
  3203  00336E                     l6602:
  3204  00336E  8E11               	bsf	___flmul@b+2,7,c
  3205  003370  D008               	goto	l6606
  3206  003372                     l6604:
  3207  003372  0E00               	movlw	0
  3208  003374  6E0F               	movwf	___flmul@b,c
  3209  003376  0E00               	movlw	0
  3210  003378  6E10               	movwf	___flmul@b+1,c
  3211  00337A  0E00               	movlw	0
  3212  00337C  6E11               	movwf	___flmul@b+2,c
  3213  00337E  0E00               	movlw	0
  3214  003380  6E12               	movwf	___flmul@b+3,c
  3215  003382                     l6606:
  3216  003382  5016               	movf	___flmul@a+3,w,c
  3217  003384  0B80               	andlw	128
  3218  003386  1A1B               	xorwf	___flmul@sign,f,c
  3219  003388  5016               	movf	___flmul@a+3,w,c
  3220  00338A  2416               	addwf	___flmul@a+3,w,c
  3221  00338C  6E20               	movwf	___flmul@aexp,c
  3222  00338E  BE15               	btfsc	___flmul@a+2,7,c
  3223  003390  8020               	bsf	___flmul@aexp,0,c
  3224  003392  5020               	movf	___flmul@aexp,w,c
  3225  003394  B4D8               	btfsc	status,2,c
  3226  003396  D00D               	goto	l6622
  3227  003398  2820               	incf	___flmul@aexp,w,c
  3228  00339A  A4D8               	btfss	status,2,c
  3229  00339C  D008               	goto	l6620
  3230  00339E  0E00               	movlw	0
  3231  0033A0  6E13               	movwf	___flmul@a,c
  3232  0033A2  0E00               	movlw	0
  3233  0033A4  6E14               	movwf	___flmul@a+1,c
  3234  0033A6  0E00               	movlw	0
  3235  0033A8  6E15               	movwf	___flmul@a+2,c
  3236  0033AA  0E00               	movlw	0
  3237  0033AC  6E16               	movwf	___flmul@a+3,c
  3238  0033AE                     l6620:
  3239  0033AE  8E15               	bsf	___flmul@a+2,7,c
  3240  0033B0  D008               	goto	l1571
  3241  0033B2                     l6622:
  3242  0033B2  0E00               	movlw	0
  3243  0033B4  6E13               	movwf	___flmul@a,c
  3244  0033B6  0E00               	movlw	0
  3245  0033B8  6E14               	movwf	___flmul@a+1,c
  3246  0033BA  0E00               	movlw	0
  3247  0033BC  6E15               	movwf	___flmul@a+2,c
  3248  0033BE  0E00               	movlw	0
  3249  0033C0  6E16               	movwf	___flmul@a+3,c
  3250  0033C2                     l1571:
  3251  0033C2  5020               	movf	___flmul@aexp,w,c
  3252  0033C4  B4D8               	btfsc	status,2,c
  3253  0033C6  D003               	goto	u8910
  3254  0033C8  5021               	movf	___flmul@bexp,w,c
  3255  0033CA  A4D8               	btfss	status,2,c
  3256  0033CC  D009               	goto	l6630
  3257  0033CE                     u8910:
  3258  0033CE  0E00               	movlw	0
  3259  0033D0  6E0F               	movwf	?___flmul,c
  3260  0033D2  0E00               	movlw	0
  3261  0033D4  6E10               	movwf	?___flmul+1,c
  3262  0033D6  0E00               	movlw	0
  3263  0033D8  6E11               	movwf	?___flmul+2,c
  3264  0033DA  0E00               	movlw	0
  3265  0033DC  6E12               	movwf	?___flmul+3,c
  3266  0033DE  0012               	return	
  3267  0033E0                     l6630:
  3268  0033E0  5015               	movf	___flmul@a+2,w,c
  3269  0033E2  020F               	mulwf	___flmul@b,c
  3270  0033E4  CFF3 F026          	movff	prodl,___flmul@temp
  3271  0033E8  CFF4 F027          	movff	prodh,___flmul@temp+1
  3272  0033EC  5026               	movf	___flmul@temp,w,c
  3273  0033EE  6E1C               	movwf	___flmul@grs,c
  3274  0033F0  6A1D               	clrf	___flmul@grs+1,c
  3275  0033F2  6A1E               	clrf	___flmul@grs+2,c
  3276  0033F4  6A1F               	clrf	___flmul@grs+3,c
  3277  0033F6  5027               	movf	___flmul@temp+1,w,c
  3278  0033F8  6E22               	movwf	___flmul@prod,c
  3279  0033FA  6A23               	clrf	___flmul@prod+1,c
  3280  0033FC  6A24               	clrf	___flmul@prod+2,c
  3281  0033FE  6A25               	clrf	___flmul@prod+3,c
  3282  003400  5014               	movf	___flmul@a+1,w,c
  3283  003402  0210               	mulwf	___flmul@b+1,c
  3284  003404  CFF3 F026          	movff	prodl,___flmul@temp
  3285  003408  CFF4 F027          	movff	prodh,___flmul@temp+1
  3286  00340C  5026               	movf	___flmul@temp,w,c
  3287  00340E  261C               	addwf	___flmul@grs,f,c
  3288  003410  0E00               	movlw	0
  3289  003412  221D               	addwfc	___flmul@grs+1,f,c
  3290  003414  221E               	addwfc	___flmul@grs+2,f,c
  3291  003416  221F               	addwfc	___flmul@grs+3,f,c
  3292  003418  5027               	movf	___flmul@temp+1,w,c
  3293  00341A  2622               	addwf	___flmul@prod,f,c
  3294  00341C  0E00               	movlw	0
  3295  00341E  2223               	addwfc	___flmul@prod+1,f,c
  3296  003420  2224               	addwfc	___flmul@prod+2,f,c
  3297  003422  2225               	addwfc	___flmul@prod+3,f,c
  3298  003424  5013               	movf	___flmul@a,w,c
  3299  003426  0211               	mulwf	___flmul@b+2,c
  3300  003428  CFF3 F026          	movff	prodl,___flmul@temp
  3301  00342C  CFF4 F027          	movff	prodh,___flmul@temp+1
  3302  003430  5026               	movf	___flmul@temp,w,c
  3303  003432  261C               	addwf	___flmul@grs,f,c
  3304  003434  0E00               	movlw	0
  3305  003436  221D               	addwfc	___flmul@grs+1,f,c
  3306  003438  221E               	addwfc	___flmul@grs+2,f,c
  3307  00343A  221F               	addwfc	___flmul@grs+3,f,c
  3308  00343C  5027               	movf	___flmul@temp+1,w,c
  3309  00343E  2622               	addwf	___flmul@prod,f,c
  3310  003440  0E00               	movlw	0
  3311  003442  2223               	addwfc	___flmul@prod+1,f,c
  3312  003444  2224               	addwfc	___flmul@prod+2,f,c
  3313  003446  2225               	addwfc	___flmul@prod+3,f,c
  3314  003448  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3315  00344C  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3316  003450  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3317  003454  6A1C               	clrf	___flmul@grs,c
  3318  003456  5013               	movf	___flmul@a,w,c
  3319  003458  0210               	mulwf	___flmul@b+1,c
  3320  00345A  CFF3 F026          	movff	prodl,___flmul@temp
  3321  00345E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3322  003462  5026               	movf	___flmul@temp,w,c
  3323  003464  261C               	addwf	___flmul@grs,f,c
  3324  003466  5027               	movf	___flmul@temp+1,w,c
  3325  003468  221D               	addwfc	___flmul@grs+1,f,c
  3326  00346A  0E00               	movlw	0
  3327  00346C  221E               	addwfc	___flmul@grs+2,f,c
  3328  00346E  0E00               	movlw	0
  3329  003470  221F               	addwfc	___flmul@grs+3,f,c
  3330  003472  5014               	movf	___flmul@a+1,w,c
  3331  003474  020F               	mulwf	___flmul@b,c
  3332  003476  CFF3 F026          	movff	prodl,___flmul@temp
  3333  00347A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3334  00347E  5026               	movf	___flmul@temp,w,c
  3335  003480  261C               	addwf	___flmul@grs,f,c
  3336  003482  5027               	movf	___flmul@temp+1,w,c
  3337  003484  221D               	addwfc	___flmul@grs+1,f,c
  3338  003486  0E00               	movlw	0
  3339  003488  221E               	addwfc	___flmul@grs+2,f,c
  3340  00348A  0E00               	movlw	0
  3341  00348C  221F               	addwfc	___flmul@grs+3,f,c
  3342  00348E  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3343  003492  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3344  003496  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3345  00349A  6A1C               	clrf	___flmul@grs,c
  3346  00349C  5013               	movf	___flmul@a,w,c
  3347  00349E  020F               	mulwf	___flmul@b,c
  3348  0034A0  CFF3 F026          	movff	prodl,___flmul@temp
  3349  0034A4  CFF4 F027          	movff	prodh,___flmul@temp+1
  3350  0034A8  5026               	movf	___flmul@temp,w,c
  3351  0034AA  261C               	addwf	___flmul@grs,f,c
  3352  0034AC  5027               	movf	___flmul@temp+1,w,c
  3353  0034AE  221D               	addwfc	___flmul@grs+1,f,c
  3354  0034B0  0E00               	movlw	0
  3355  0034B2  221E               	addwfc	___flmul@grs+2,f,c
  3356  0034B4  0E00               	movlw	0
  3357  0034B6  221F               	addwfc	___flmul@grs+3,f,c
  3358  0034B8  5015               	movf	___flmul@a+2,w,c
  3359  0034BA  0210               	mulwf	___flmul@b+1,c
  3360  0034BC  CFF3 F026          	movff	prodl,___flmul@temp
  3361  0034C0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3362  0034C4  5026               	movf	___flmul@temp,w,c
  3363  0034C6  2622               	addwf	___flmul@prod,f,c
  3364  0034C8  5027               	movf	___flmul@temp+1,w,c
  3365  0034CA  2223               	addwfc	___flmul@prod+1,f,c
  3366  0034CC  0E00               	movlw	0
  3367  0034CE  2224               	addwfc	___flmul@prod+2,f,c
  3368  0034D0  0E00               	movlw	0
  3369  0034D2  2225               	addwfc	___flmul@prod+3,f,c
  3370  0034D4  5014               	movf	___flmul@a+1,w,c
  3371  0034D6  0211               	mulwf	___flmul@b+2,c
  3372  0034D8  CFF3 F026          	movff	prodl,___flmul@temp
  3373  0034DC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3374  0034E0  5026               	movf	___flmul@temp,w,c
  3375  0034E2  2622               	addwf	___flmul@prod,f,c
  3376  0034E4  5027               	movf	___flmul@temp+1,w,c
  3377  0034E6  2223               	addwfc	___flmul@prod+1,f,c
  3378  0034E8  0E00               	movlw	0
  3379  0034EA  2224               	addwfc	___flmul@prod+2,f,c
  3380  0034EC  0E00               	movlw	0
  3381  0034EE  2225               	addwfc	___flmul@prod+3,f,c
  3382  0034F0  5015               	movf	___flmul@a+2,w,c
  3383  0034F2  0211               	mulwf	___flmul@b+2,c
  3384  0034F4  CFF3 F026          	movff	prodl,___flmul@temp
  3385  0034F8  CFF4 F027          	movff	prodh,___flmul@temp+1
  3386  0034FC  5026               	movf	___flmul@temp,w,c
  3387  0034FE  6E17               	movwf	??___flmul& (0+255),c
  3388  003500  5027               	movf	___flmul@temp+1,w,c
  3389  003502  6E18               	movwf	(??___flmul+1)& (0+255),c
  3390  003504  6A19               	clrf	(??___flmul+2)& (0+255),c
  3391  003506  6A1A               	clrf	(??___flmul+3)& (0+255),c
  3392  003508  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3393  00350C  C018  F019         	movff	??___flmul+1,??___flmul+2
  3394  003510  C017  F018         	movff	??___flmul,??___flmul+1
  3395  003514  6A17               	clrf	??___flmul,c
  3396  003516  5017               	movf	??___flmul,w,c
  3397  003518  2622               	addwf	___flmul@prod,f,c
  3398  00351A  5018               	movf	??___flmul+1,w,c
  3399  00351C  2223               	addwfc	___flmul@prod+1,f,c
  3400  00351E  5019               	movf	??___flmul+2,w,c
  3401  003520  2224               	addwfc	___flmul@prod+2,f,c
  3402  003522  501A               	movf	??___flmul+3,w,c
  3403  003524  2225               	addwfc	___flmul@prod+3,f,c
  3404  003526  C01C  F017         	movff	___flmul@grs,??___flmul
  3405  00352A  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3406  00352E  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3407  003532  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3408  003536  0E19               	movlw	25
  3409  003538  D005               	goto	u8920
  3410  00353A                     u8925:
  3411  00353A  90D8               	bcf	status,0,c
  3412  00353C  321A               	rrcf	??___flmul+3,f,c
  3413  00353E  3219               	rrcf	??___flmul+2,f,c
  3414  003540  3218               	rrcf	??___flmul+1,f,c
  3415  003542  3217               	rrcf	??___flmul,f,c
  3416  003544                     u8920:
  3417  003544  2EE8               	decfsz	wreg,f,c
  3418  003546  D7F9               	goto	u8925
  3419  003548  5017               	movf	??___flmul,w,c
  3420  00354A  2622               	addwf	___flmul@prod,f,c
  3421  00354C  5018               	movf	??___flmul+1,w,c
  3422  00354E  2223               	addwfc	___flmul@prod+1,f,c
  3423  003550  5019               	movf	??___flmul+2,w,c
  3424  003552  2224               	addwfc	___flmul@prod+2,f,c
  3425  003554  501A               	movf	??___flmul+3,w,c
  3426  003556  2225               	addwfc	___flmul@prod+3,f,c
  3427  003558  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3428  00355C  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3429  003560  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3430  003564  6A1C               	clrf	___flmul@grs,c
  3431  003566  5020               	movf	___flmul@aexp,w,c
  3432  003568  C021  F017         	movff	___flmul@bexp,??___flmul
  3433  00356C  6A18               	clrf	(??___flmul+1)& (0+255),c
  3434  00356E  2617               	addwf	??___flmul,f,c
  3435  003570  0E00               	movlw	0
  3436  003572  2218               	addwfc	??___flmul+1,f,c
  3437  003574  0E82               	movlw	130
  3438  003576  2417               	addwf	??___flmul,w,c
  3439  003578  6E26               	movwf	___flmul@temp,c
  3440  00357A  0EFF               	movlw	255
  3441  00357C  2018               	addwfc	??___flmul+1,w,c
  3442  00357E  6E27               	movwf	___flmul@temp+1,c
  3443  003580  D00F               	goto	l6678
  3444  003582                     l6672:
  3445  003582  90D8               	bcf	status,0,c
  3446  003584  3622               	rlcf	___flmul@prod,f,c
  3447  003586  3623               	rlcf	___flmul@prod+1,f,c
  3448  003588  3624               	rlcf	___flmul@prod+2,f,c
  3449  00358A  3625               	rlcf	___flmul@prod+3,f,c
  3450  00358C  BE1F               	btfsc	___flmul@grs+3,7,c
  3451  00358E  8022               	bsf	___flmul@prod,0,c
  3452  003590  90D8               	bcf	status,0,c
  3453  003592  361C               	rlcf	___flmul@grs,f,c
  3454  003594  361D               	rlcf	___flmul@grs+1,f,c
  3455  003596  361E               	rlcf	___flmul@grs+2,f,c
  3456  003598  361F               	rlcf	___flmul@grs+3,f,c
  3457  00359A  0626               	decf	___flmul@temp,f,c
  3458  00359C  A0D8               	btfss	status,0,c
  3459  00359E  0627               	decf	___flmul@temp+1,f,c
  3460  0035A0                     l6678:
  3461  0035A0  AE24               	btfss	___flmul@prod+2,7,c
  3462  0035A2  D7EF               	goto	l6672
  3463  0035A4  0E00               	movlw	0
  3464  0035A6  6E20               	movwf	___flmul@aexp,c
  3465  0035A8  AE1F               	btfss	___flmul@grs+3,7,c
  3466  0035AA  D017               	goto	l1580
  3467  0035AC  0EFF               	movlw	255
  3468  0035AE  141C               	andwf	___flmul@grs,w,c
  3469  0035B0  6E17               	movwf	??___flmul& (0+255),c
  3470  0035B2  0EFF               	movlw	255
  3471  0035B4  141D               	andwf	___flmul@grs+1,w,c
  3472  0035B6  6E18               	movwf	(??___flmul+1)& (0+255),c
  3473  0035B8  0EFF               	movlw	255
  3474  0035BA  141E               	andwf	___flmul@grs+2,w,c
  3475  0035BC  6E19               	movwf	(??___flmul+2)& (0+255),c
  3476  0035BE  0E7F               	movlw	127
  3477  0035C0  141F               	andwf	___flmul@grs+3,w,c
  3478  0035C2  6E1A               	movwf	(??___flmul+3)& (0+255),c
  3479  0035C4  5017               	movf	??___flmul,w,c
  3480  0035C6  1018               	iorwf	??___flmul+1,w,c
  3481  0035C8  1019               	iorwf	??___flmul+2,w,c
  3482  0035CA  101A               	iorwf	??___flmul+3,w,c
  3483  0035CC  B4D8               	btfsc	status,2,c
  3484  0035CE  D003               	goto	l1581
  3485  0035D0                     u8960:
  3486  0035D0  0E01               	movlw	1
  3487  0035D2  6E20               	movwf	___flmul@aexp,c
  3488  0035D4  D002               	goto	l1580
  3489  0035D6                     l1581:
  3490  0035D6  B022               	btfsc	___flmul@prod,0,c
  3491  0035D8  D7FB               	goto	u8960
  3492  0035DA                     l1580:
  3493  0035DA  5020               	movf	___flmul@aexp,w,c
  3494  0035DC  B4D8               	btfsc	status,2,c
  3495  0035DE  D01F               	goto	l6698
  3496  0035E0  0E01               	movlw	1
  3497  0035E2  2622               	addwf	___flmul@prod,f,c
  3498  0035E4  0E00               	movlw	0
  3499  0035E6  2223               	addwfc	___flmul@prod+1,f,c
  3500  0035E8  2224               	addwfc	___flmul@prod+2,f,c
  3501  0035EA  2225               	addwfc	___flmul@prod+3,f,c
  3502  0035EC  A025               	btfss	___flmul@prod+3,0,c
  3503  0035EE  D017               	goto	l6698
  3504  0035F0  C022  F017         	movff	___flmul@prod,??___flmul
  3505  0035F4  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3506  0035F8  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3507  0035FC  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3508  003600  341A               	rlcf	??___flmul+3,w,c
  3509  003602  321A               	rrcf	??___flmul+3,f,c
  3510  003604  3219               	rrcf	??___flmul+2,f,c
  3511  003606  3218               	rrcf	??___flmul+1,f,c
  3512  003608  3217               	rrcf	??___flmul,f,c
  3513  00360A  C017  F022         	movff	??___flmul,___flmul@prod
  3514  00360E  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3515  003612  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3516  003616  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3517  00361A  4A26               	infsnz	___flmul@temp,f,c
  3518  00361C  2A27               	incf	___flmul@temp+1,f,c
  3519  00361E                     l6698:
  3520  00361E  BE27               	btfsc	___flmul@temp+1,7,c
  3521  003620  D00D               	goto	l6702
  3522  003622  5027               	movf	___flmul@temp+1,w,c
  3523  003624  E103               	bnz	u9000
  3524  003626  2826               	incf	___flmul@temp,w,c
  3525  003628  A0D8               	btfss	status,0,c
  3526  00362A  D008               	goto	l6702
  3527  00362C                     u9000:
  3528  00362C  0E00               	movlw	0
  3529  00362E  6E22               	movwf	___flmul@prod,c
  3530  003630  0E00               	movlw	0
  3531  003632  6E23               	movwf	___flmul@prod+1,c
  3532  003634  0E80               	movlw	128
  3533  003636  6E24               	movwf	___flmul@prod+2,c
  3534  003638  0E7F               	movlw	127
  3535  00363A  D020               	goto	L2
  3536  00363C                     l6702:
  3537  00363C  BE27               	btfsc	___flmul@temp+1,7,c
  3538  00363E  D005               	goto	u9010
  3539  003640  5027               	movf	___flmul@temp+1,w,c
  3540  003642  E10E               	bnz	l1588
  3541  003644  0426               	decf	___flmul@temp,w,c
  3542  003646  B0D8               	btfsc	status,0,c
  3543  003648  D00B               	goto	l1588
  3544  00364A                     u9010:
  3545  00364A  0E00               	movlw	0
  3546  00364C  6E22               	movwf	___flmul@prod,c
  3547  00364E  0E00               	movlw	0
  3548  003650  6E23               	movwf	___flmul@prod+1,c
  3549  003652  0E00               	movlw	0
  3550  003654  6E24               	movwf	___flmul@prod+2,c
  3551  003656  0E00               	movlw	0
  3552  003658  6E25               	movwf	___flmul@prod+3,c
  3553  00365A  0E00               	movlw	0
  3554  00365C  6E1B               	movwf	___flmul@sign,c
  3555  00365E  D00F               	goto	l6714
  3556  003660                     l1588:
  3557  003660  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3558  003664  0EFF               	movlw	255
  3559  003666  1622               	andwf	___flmul@prod,f,c
  3560  003668  0EFF               	movlw	255
  3561  00366A  1623               	andwf	___flmul@prod+1,f,c
  3562  00366C  0E7F               	movlw	127
  3563  00366E  1624               	andwf	___flmul@prod+2,f,c
  3564  003670  0E00               	movlw	0
  3565  003672  1625               	andwf	___flmul@prod+3,f,c
  3566  003674  B021               	btfsc	___flmul@bexp,0,c
  3567  003676  8E24               	bsf	___flmul@prod+2,7,c
  3568  003678  90D8               	bcf	status,0,c
  3569  00367A  3021               	rrcf	___flmul@bexp,w,c
  3570  00367C                     L2:
  3571  00367C  6E25               	movwf	___flmul@prod+3,c
  3572  00367E                     l6714:
  3573  00367E  501B               	movf	___flmul@sign,w,c
  3574  003680  1225               	iorwf	___flmul@prod+3,f,c
  3575  003682  C022  F00F         	movff	___flmul@prod,?___flmul
  3576  003686  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3577  00368A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3578  00368E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3579  003692  0012               	return		;funcret
  3580  003694                     __end_of___flmul:
  3581                           	opt callstack 0
  3582                           
  3583 ;; *************** function ___fldiv *****************
  3584 ;; Defined at:
  3585 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcdiv.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  b               4   39[COMRAM] unsigned char 
  3588 ;;  a               4   43[COMRAM] unsigned char 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  grs             4   58[COMRAM] unsigned long 
  3591 ;;  rem             4   51[COMRAM] unsigned long 
  3592 ;;  new_exp         2   56[COMRAM] short 
  3593 ;;  aexp            1   63[COMRAM] unsigned char 
  3594 ;;  bexp            1   62[COMRAM] unsigned char 
  3595 ;;  sign            1   55[COMRAM] unsigned char 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  4   39[COMRAM] unsigned char 
  3598 ;; Registers used:
  3599 ;;		wreg, status,2, status,0
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3605 ;;      Params:         8       0       0       0       0       0       0       0       0
  3606 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3607 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3608 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3609 ;;Total ram usage:       25 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_grabador
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text9
  3619  003C50                     __ptext9:
  3620                           	opt callstack 0
  3621  003C50                     ___fldiv:
  3622                           	opt callstack 28
  3623                           
  3624                           ;incstack = 0
  3625  003C50  502B               	movf	___fldiv@b+3,w,c
  3626  003C52  0B80               	andlw	128
  3627  003C54  6E38               	movwf	___fldiv@sign,c
  3628  003C56  502B               	movf	___fldiv@b+3,w,c
  3629  003C58  242B               	addwf	___fldiv@b+3,w,c
  3630  003C5A  6E3F               	movwf	___fldiv@bexp,c
  3631  003C5C  BE2A               	btfsc	___fldiv@b+2,7,c
  3632  003C5E  803F               	bsf	___fldiv@bexp,0,c
  3633  003C60  503F               	movf	___fldiv@bexp,w,c
  3634  003C62  B4D8               	btfsc	status,2,c
  3635  003C64  D00D               	goto	l6468
  3636  003C66  283F               	incf	___fldiv@bexp,w,c
  3637  003C68  A4D8               	btfss	status,2,c
  3638  003C6A  D008               	goto	l6464
  3639  003C6C  0E00               	movlw	0
  3640  003C6E  6E28               	movwf	___fldiv@b,c
  3641  003C70  0E00               	movlw	0
  3642  003C72  6E29               	movwf	___fldiv@b+1,c
  3643  003C74  0E00               	movlw	0
  3644  003C76  6E2A               	movwf	___fldiv@b+2,c
  3645  003C78  0E00               	movlw	0
  3646  003C7A  6E2B               	movwf	___fldiv@b+3,c
  3647  003C7C                     l6464:
  3648  003C7C  8E2A               	bsf	___fldiv@b+2,7,c
  3649  003C7E  D006               	goto	L3
  3650  003C80                     l6468:
  3651  003C80  0E00               	movlw	0
  3652  003C82  6E28               	movwf	___fldiv@b,c
  3653  003C84  0E00               	movlw	0
  3654  003C86  6E29               	movwf	___fldiv@b+1,c
  3655  003C88  0E00               	movlw	0
  3656  003C8A  6E2A               	movwf	___fldiv@b+2,c
  3657  003C8C                     L3:
  3658  003C8C  0E00               	movlw	0
  3659  003C8E  6E2B               	movwf	___fldiv@b+3,c
  3660  003C90  502F               	movf	___fldiv@a+3,w,c
  3661  003C92  0B80               	andlw	128
  3662  003C94  1A38               	xorwf	___fldiv@sign,f,c
  3663  003C96  502F               	movf	___fldiv@a+3,w,c
  3664  003C98  242F               	addwf	___fldiv@a+3,w,c
  3665  003C9A  6E40               	movwf	___fldiv@aexp,c
  3666  003C9C  BE2E               	btfsc	___fldiv@a+2,7,c
  3667  003C9E  8040               	bsf	___fldiv@aexp,0,c
  3668  003CA0  5040               	movf	___fldiv@aexp,w,c
  3669  003CA2  B4D8               	btfsc	status,2,c
  3670  003CA4  D00D               	goto	l6488
  3671  003CA6  2840               	incf	___fldiv@aexp,w,c
  3672  003CA8  A4D8               	btfss	status,2,c
  3673  003CAA  D008               	goto	l6484
  3674  003CAC  0E00               	movlw	0
  3675  003CAE  6E2C               	movwf	___fldiv@a,c
  3676  003CB0  0E00               	movlw	0
  3677  003CB2  6E2D               	movwf	___fldiv@a+1,c
  3678  003CB4  0E00               	movlw	0
  3679  003CB6  6E2E               	movwf	___fldiv@a+2,c
  3680  003CB8  0E00               	movlw	0
  3681  003CBA  6E2F               	movwf	___fldiv@a+3,c
  3682  003CBC                     l6484:
  3683  003CBC  8E2E               	bsf	___fldiv@a+2,7,c
  3684  003CBE  D006               	goto	L4
  3685  003CC0                     l6488:
  3686  003CC0  0E00               	movlw	0
  3687  003CC2  6E2C               	movwf	___fldiv@a,c
  3688  003CC4  0E00               	movlw	0
  3689  003CC6  6E2D               	movwf	___fldiv@a+1,c
  3690  003CC8  0E00               	movlw	0
  3691  003CCA  6E2E               	movwf	___fldiv@a+2,c
  3692  003CCC                     L4:
  3693  003CCC  0E00               	movlw	0
  3694  003CCE  6E2F               	movwf	___fldiv@a+3,c
  3695  003CD0  502C               	movf	___fldiv@a,w,c
  3696  003CD2  102D               	iorwf	___fldiv@a+1,w,c
  3697  003CD4  102E               	iorwf	___fldiv@a+2,w,c
  3698  003CD6  102F               	iorwf	___fldiv@a+3,w,c
  3699  003CD8  A4D8               	btfss	status,2,c
  3700  003CDA  D017               	goto	l6502
  3701  003CDC  0E00               	movlw	0
  3702  003CDE  6E28               	movwf	___fldiv@b,c
  3703  003CE0  0E00               	movlw	0
  3704  003CE2  6E29               	movwf	___fldiv@b+1,c
  3705  003CE4  0E00               	movlw	0
  3706  003CE6  6E2A               	movwf	___fldiv@b+2,c
  3707  003CE8  0E00               	movlw	0
  3708  003CEA  6E2B               	movwf	___fldiv@b+3,c
  3709  003CEC  0E80               	movlw	128
  3710  003CEE  122A               	iorwf	___fldiv@b+2,f,c
  3711  003CF0  0E7F               	movlw	127
  3712  003CF2  122B               	iorwf	___fldiv@b+3,f,c
  3713  003CF4                     l6496:
  3714  003CF4  5038               	movf	___fldiv@sign,w,c
  3715  003CF6  122B               	iorwf	___fldiv@b+3,f,c
  3716  003CF8  C028  F028         	movff	___fldiv@b,?___fldiv
  3717  003CFC  C029  F029         	movff	___fldiv@b+1,?___fldiv+1
  3718  003D00  C02A  F02A         	movff	___fldiv@b+2,?___fldiv+2
  3719  003D04  C02B  F02B         	movff	___fldiv@b+3,?___fldiv+3
  3720  003D08  0012               	return	
  3721  003D0A                     l6502:
  3722  003D0A  503F               	movf	___fldiv@bexp,w,c
  3723  003D0C  A4D8               	btfss	status,2,c
  3724  003D0E  D009               	goto	l6510
  3725  003D10  0E00               	movlw	0
  3726  003D12  6E28               	movwf	?___fldiv,c
  3727  003D14  0E00               	movlw	0
  3728  003D16  6E29               	movwf	?___fldiv+1,c
  3729  003D18  0E00               	movlw	0
  3730  003D1A  6E2A               	movwf	?___fldiv+2,c
  3731  003D1C  0E00               	movlw	0
  3732  003D1E  6E2B               	movwf	?___fldiv+3,c
  3733  003D20  0012               	return	
  3734  003D22                     l6510:
  3735  003D22  5040               	movf	___fldiv@aexp,w,c
  3736  003D24  C03F  F030         	movff	___fldiv@bexp,??___fldiv
  3737  003D28  6A31               	clrf	(??___fldiv+1)& (0+255),c
  3738  003D2A  5E30               	subwf	??___fldiv,f,c
  3739  003D2C  0E00               	movlw	0
  3740  003D2E  5A31               	subwfb	??___fldiv+1,f,c
  3741  003D30  0E7F               	movlw	127
  3742  003D32  2430               	addwf	??___fldiv,w,c
  3743  003D34  6E39               	movwf	___fldiv@new_exp,c
  3744  003D36  0E00               	movlw	0
  3745  003D38  2031               	addwfc	??___fldiv+1,w,c
  3746  003D3A  6E3A               	movwf	___fldiv@new_exp+1,c
  3747  003D3C  C028  F034         	movff	___fldiv@b,___fldiv@rem
  3748  003D40  C029  F035         	movff	___fldiv@b+1,___fldiv@rem+1
  3749  003D44  C02A  F036         	movff	___fldiv@b+2,___fldiv@rem+2
  3750  003D48  C02B  F037         	movff	___fldiv@b+3,___fldiv@rem+3
  3751  003D4C  0E00               	movlw	0
  3752  003D4E  6E28               	movwf	___fldiv@b,c
  3753  003D50  0E00               	movlw	0
  3754  003D52  6E29               	movwf	___fldiv@b+1,c
  3755  003D54  0E00               	movlw	0
  3756  003D56  6E2A               	movwf	___fldiv@b+2,c
  3757  003D58  0E00               	movlw	0
  3758  003D5A  6E2B               	movwf	___fldiv@b+3,c
  3759  003D5C  0E00               	movlw	0
  3760  003D5E  6E3B               	movwf	___fldiv@grs,c
  3761  003D60  0E00               	movlw	0
  3762  003D62  6E3C               	movwf	___fldiv@grs+1,c
  3763  003D64  0E00               	movlw	0
  3764  003D66  6E3D               	movwf	___fldiv@grs+2,c
  3765  003D68  0E00               	movlw	0
  3766  003D6A  6E3E               	movwf	___fldiv@grs+3,c
  3767  003D6C  0E00               	movlw	0
  3768  003D6E  6E40               	movwf	___fldiv@aexp,c
  3769  003D70  D028               	goto	l1541
  3770  003D72                     l6520:
  3771  003D72  5040               	movf	___fldiv@aexp,w,c
  3772  003D74  B4D8               	btfsc	status,2,c
  3773  003D76  D011               	goto	l6528
  3774  003D78  90D8               	bcf	status,0,c
  3775  003D7A  3634               	rlcf	___fldiv@rem,f,c
  3776  003D7C  3635               	rlcf	___fldiv@rem+1,f,c
  3777  003D7E  3636               	rlcf	___fldiv@rem+2,f,c
  3778  003D80  3637               	rlcf	___fldiv@rem+3,f,c
  3779  003D82  90D8               	bcf	status,0,c
  3780  003D84  3628               	rlcf	___fldiv@b,f,c
  3781  003D86  3629               	rlcf	___fldiv@b+1,f,c
  3782  003D88  362A               	rlcf	___fldiv@b+2,f,c
  3783  003D8A  362B               	rlcf	___fldiv@b+3,f,c
  3784  003D8C  BE3E               	btfsc	___fldiv@grs+3,7,c
  3785  003D8E  8028               	bsf	___fldiv@b,0,c
  3786  003D90  90D8               	bcf	status,0,c
  3787  003D92  363B               	rlcf	___fldiv@grs,f,c
  3788  003D94  363C               	rlcf	___fldiv@grs+1,f,c
  3789  003D96  363D               	rlcf	___fldiv@grs+2,f,c
  3790  003D98  363E               	rlcf	___fldiv@grs+3,f,c
  3791  003D9A                     l6528:
  3792  003D9A  502C               	movf	___fldiv@a,w,c
  3793  003D9C  5C34               	subwf	___fldiv@rem,w,c
  3794  003D9E  502D               	movf	___fldiv@a+1,w,c
  3795  003DA0  5835               	subwfb	___fldiv@rem+1,w,c
  3796  003DA2  502E               	movf	___fldiv@a+2,w,c
  3797  003DA4  5836               	subwfb	___fldiv@rem+2,w,c
  3798  003DA6  502F               	movf	___fldiv@a+3,w,c
  3799  003DA8  5837               	subwfb	___fldiv@rem+3,w,c
  3800  003DAA  A0D8               	btfss	status,0,c
  3801  003DAC  D009               	goto	l6534
  3802  003DAE  8C3E               	bsf	___fldiv@grs+3,6,c
  3803  003DB0  502C               	movf	___fldiv@a,w,c
  3804  003DB2  5E34               	subwf	___fldiv@rem,f,c
  3805  003DB4  502D               	movf	___fldiv@a+1,w,c
  3806  003DB6  5A35               	subwfb	___fldiv@rem+1,f,c
  3807  003DB8  502E               	movf	___fldiv@a+2,w,c
  3808  003DBA  5A36               	subwfb	___fldiv@rem+2,f,c
  3809  003DBC  502F               	movf	___fldiv@a+3,w,c
  3810  003DBE  5A37               	subwfb	___fldiv@rem+3,f,c
  3811  003DC0                     l6534:
  3812  003DC0  2A40               	incf	___fldiv@aexp,f,c
  3813  003DC2                     l1541:
  3814  003DC2  0E19               	movlw	25
  3815  003DC4  6440               	cpfsgt	___fldiv@aexp,c
  3816  003DC6  D7D5               	goto	l6520
  3817  003DC8  5034               	movf	___fldiv@rem,w,c
  3818  003DCA  1035               	iorwf	___fldiv@rem+1,w,c
  3819  003DCC  1036               	iorwf	___fldiv@rem+2,w,c
  3820  003DCE  1037               	iorwf	___fldiv@rem+3,w,c
  3821  003DD0  B4D8               	btfsc	status,2,c
  3822  003DD2  D011               	goto	l6546
  3823  003DD4  803B               	bsf	___fldiv@grs,0,c
  3824  003DD6  D00F               	goto	l6546
  3825  003DD8                     l6540:
  3826  003DD8  90D8               	bcf	status,0,c
  3827  003DDA  3628               	rlcf	___fldiv@b,f,c
  3828  003DDC  3629               	rlcf	___fldiv@b+1,f,c
  3829  003DDE  362A               	rlcf	___fldiv@b+2,f,c
  3830  003DE0  362B               	rlcf	___fldiv@b+3,f,c
  3831  003DE2  BE3E               	btfsc	___fldiv@grs+3,7,c
  3832  003DE4  8028               	bsf	___fldiv@b,0,c
  3833  003DE6  90D8               	bcf	status,0,c
  3834  003DE8  363B               	rlcf	___fldiv@grs,f,c
  3835  003DEA  363C               	rlcf	___fldiv@grs+1,f,c
  3836  003DEC  363D               	rlcf	___fldiv@grs+2,f,c
  3837  003DEE  363E               	rlcf	___fldiv@grs+3,f,c
  3838  003DF0  0639               	decf	___fldiv@new_exp,f,c
  3839  003DF2  A0D8               	btfss	status,0,c
  3840  003DF4  063A               	decf	___fldiv@new_exp+1,f,c
  3841  003DF6                     l6546:
  3842  003DF6  AE2A               	btfss	___fldiv@b+2,7,c
  3843  003DF8  D7EF               	goto	l6540
  3844  003DFA  0E00               	movlw	0
  3845  003DFC  6E40               	movwf	___fldiv@aexp,c
  3846  003DFE  AE3E               	btfss	___fldiv@grs+3,7,c
  3847  003E00  D017               	goto	l1552
  3848  003E02  0EFF               	movlw	255
  3849  003E04  143B               	andwf	___fldiv@grs,w,c
  3850  003E06  6E30               	movwf	??___fldiv& (0+255),c
  3851  003E08  0EFF               	movlw	255
  3852  003E0A  143C               	andwf	___fldiv@grs+1,w,c
  3853  003E0C  6E31               	movwf	(??___fldiv+1)& (0+255),c
  3854  003E0E  0EFF               	movlw	255
  3855  003E10  143D               	andwf	___fldiv@grs+2,w,c
  3856  003E12  6E32               	movwf	(??___fldiv+2)& (0+255),c
  3857  003E14  0E7F               	movlw	127
  3858  003E16  143E               	andwf	___fldiv@grs+3,w,c
  3859  003E18  6E33               	movwf	(??___fldiv+3)& (0+255),c
  3860  003E1A  5030               	movf	??___fldiv,w,c
  3861  003E1C  1031               	iorwf	??___fldiv+1,w,c
  3862  003E1E  1032               	iorwf	??___fldiv+2,w,c
  3863  003E20  1033               	iorwf	??___fldiv+3,w,c
  3864  003E22  B4D8               	btfsc	status,2,c
  3865  003E24  D003               	goto	l1553
  3866  003E26                     u8770:
  3867  003E26  0E01               	movlw	1
  3868  003E28  6E40               	movwf	___fldiv@aexp,c
  3869  003E2A  D002               	goto	l1552
  3870  003E2C                     l1553:
  3871  003E2C  B028               	btfsc	___fldiv@b,0,c
  3872  003E2E  D7FB               	goto	u8770
  3873  003E30                     l1552:
  3874  003E30  5040               	movf	___fldiv@aexp,w,c
  3875  003E32  B4D8               	btfsc	status,2,c
  3876  003E34  D01F               	goto	l6566
  3877  003E36  0E01               	movlw	1
  3878  003E38  2628               	addwf	___fldiv@b,f,c
  3879  003E3A  0E00               	movlw	0
  3880  003E3C  2229               	addwfc	___fldiv@b+1,f,c
  3881  003E3E  222A               	addwfc	___fldiv@b+2,f,c
  3882  003E40  222B               	addwfc	___fldiv@b+3,f,c
  3883  003E42  A02B               	btfss	___fldiv@b+3,0,c
  3884  003E44  D017               	goto	l6566
  3885  003E46  C028  F030         	movff	___fldiv@b,??___fldiv
  3886  003E4A  C029  F031         	movff	___fldiv@b+1,??___fldiv+1
  3887  003E4E  C02A  F032         	movff	___fldiv@b+2,??___fldiv+2
  3888  003E52  C02B  F033         	movff	___fldiv@b+3,??___fldiv+3
  3889  003E56  3433               	rlcf	??___fldiv+3,w,c
  3890  003E58  3233               	rrcf	??___fldiv+3,f,c
  3891  003E5A  3232               	rrcf	??___fldiv+2,f,c
  3892  003E5C  3231               	rrcf	??___fldiv+1,f,c
  3893  003E5E  3230               	rrcf	??___fldiv,f,c
  3894  003E60  C030  F028         	movff	??___fldiv,___fldiv@b
  3895  003E64  C031  F029         	movff	??___fldiv+1,___fldiv@b+1
  3896  003E68  C032  F02A         	movff	??___fldiv+2,___fldiv@b+2
  3897  003E6C  C033  F02B         	movff	??___fldiv+3,___fldiv@b+3
  3898  003E70  4A39               	infsnz	___fldiv@new_exp,f,c
  3899  003E72  2A3A               	incf	___fldiv@new_exp+1,f,c
  3900  003E74                     l6566:
  3901  003E74  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3902  003E76  D010               	goto	l6570
  3903  003E78  503A               	movf	___fldiv@new_exp+1,w,c
  3904  003E7A  E103               	bnz	u8810
  3905  003E7C  2839               	incf	___fldiv@new_exp,w,c
  3906  003E7E  A0D8               	btfss	status,0,c
  3907  003E80  D00B               	goto	l6570
  3908  003E82                     u8810:
  3909  003E82  0E00               	movlw	0
  3910  003E84  6E3A               	movwf	___fldiv@new_exp+1,c
  3911  003E86  6839               	setf	___fldiv@new_exp,c
  3912  003E88  0E00               	movlw	0
  3913  003E8A  6E28               	movwf	___fldiv@b,c
  3914  003E8C  0E00               	movlw	0
  3915  003E8E  6E29               	movwf	___fldiv@b+1,c
  3916  003E90  0E00               	movlw	0
  3917  003E92  6E2A               	movwf	___fldiv@b+2,c
  3918  003E94  0E00               	movlw	0
  3919  003E96  6E2B               	movwf	___fldiv@b+3,c
  3920  003E98                     l6570:
  3921  003E98  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3922  003E9A  D005               	goto	u8820
  3923  003E9C  503A               	movf	___fldiv@new_exp+1,w,c
  3924  003E9E  E111               	bnz	l6574
  3925  003EA0  0439               	decf	___fldiv@new_exp,w,c
  3926  003EA2  B0D8               	btfsc	status,0,c
  3927  003EA4  D00E               	goto	l6574
  3928  003EA6                     u8820:
  3929  003EA6  0E00               	movlw	0
  3930  003EA8  6E3A               	movwf	___fldiv@new_exp+1,c
  3931  003EAA  0E00               	movlw	0
  3932  003EAC  6E39               	movwf	___fldiv@new_exp,c
  3933  003EAE  0E00               	movlw	0
  3934  003EB0  6E28               	movwf	___fldiv@b,c
  3935  003EB2  0E00               	movlw	0
  3936  003EB4  6E29               	movwf	___fldiv@b+1,c
  3937  003EB6  0E00               	movlw	0
  3938  003EB8  6E2A               	movwf	___fldiv@b+2,c
  3939  003EBA  0E00               	movlw	0
  3940  003EBC  6E2B               	movwf	___fldiv@b+3,c
  3941  003EBE  0E00               	movlw	0
  3942  003EC0  6E38               	movwf	___fldiv@sign,c
  3943  003EC2                     l6574:
  3944  003EC2  C039  F03F         	movff	___fldiv@new_exp,___fldiv@bexp
  3945  003EC6  A03F               	btfss	___fldiv@bexp,0,c
  3946  003EC8  D002               	goto	l6580
  3947  003ECA  8E2A               	bsf	___fldiv@b+2,7,c
  3948  003ECC  D001               	goto	l6582
  3949  003ECE                     l6580:
  3950  003ECE  9E2A               	bcf	___fldiv@b+2,7,c
  3951  003ED0                     l6582:
  3952  003ED0  90D8               	bcf	status,0,c
  3953  003ED2  303F               	rrcf	___fldiv@bexp,w,c
  3954  003ED4  6E2B               	movwf	___fldiv@b+3,c
  3955  003ED6  D70E               	goto	l6496
  3956  003ED8                     __end_of___fldiv:
  3957                           	opt callstack 0
  3958                           
  3959 ;; *************** function _Error *****************
  3960 ;; Defined at:
  3961 ;;		line 13 in file "./Errores.h"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  a               2    0[COMRAM] int 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  v_seg          10    3[COMRAM] unsigned char [10]
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3975 ;;      Params:         2       0       0       0       0       0       0       0       0
  3976 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3977 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3978 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3979 ;;Total ram usage:       13 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_main
  3985 ;;		_grabador
  3986 ;;		_guardar
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text10
  3991  005400                     __ptext10:
  3992                           	opt callstack 0
  3993  005400                     _Error:
  3994                           	opt callstack 28
  3995                           
  3996                           ;./Errores.h: 14:     LATD = 0x00;
  3997                           
  3998                           ;incstack = 0
  3999  005400  0E00               	movlw	0
  4000  005402  6E8C               	movwf	3980,c	;volatile
  4001                           
  4002                           ;./Errores.h: 15:     TRISD = 0x00;
  4003  005404  0E00               	movlw	0
  4004  005406  6E95               	movwf	3989,c	;volatile
  4005                           
  4006                           ;./Errores.h: 16:     ANSELD = 0x00;
  4007  005408  0E00               	movlw	0
  4008  00540A  010F               	movlb	15	; () banked
  4009  00540C  6F5E               	movwf	94,b	;volatile
  4010                           
  4011                           ;./Errores.h: 17:     LATE = 0x00;
  4012  00540E  0E00               	movlw	0
  4013  005410  6E8D               	movwf	3981,c	;volatile
  4014                           
  4015                           ;./Errores.h: 18:     TRISE = 0x00;
  4016  005412  0E00               	movlw	0
  4017  005414  6E96               	movwf	3990,c	;volatile
  4018                           
  4019                           ;./Errores.h: 19:     ANSELE = 0x00;
  4020  005416  0E00               	movlw	0
  4021  005418  6F5F               	movwf	95,b	;volatile
  4022                           
  4023                           ; BSR set to: 15
  4024                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
  4025  00541A  EE20  F0E4         	lfsr	2,Error@F5055
  4026  00541E  EE10  F004         	lfsr	1,Error@v_seg
  4027  005422  0E09               	movlw	9
  4028  005424                     u8541:
  4029  005424  CFDB FFE3          	movff	plusw2,plusw1
  4030  005428  06E8               	decf	wreg,f,c
  4031  00542A  E2FC               	bc	u8541
  4032                           
  4033                           ; BSR set to: 15
  4034                           ;./Errores.h: 22:     if(a != 33 && a != 55){
  4035  00542C  0E21               	movlw	33
  4036  00542E  1801               	xorwf	Error@a,w,c
  4037  005430  1002               	iorwf	Error@a+1,w,c
  4038  005432  B4D8               	btfsc	status,2,c
  4039  005434  D010               	goto	l6400
  4040                           
  4041                           ; BSR set to: 15
  4042  005436  0E37               	movlw	55
  4043  005438  1801               	xorwf	Error@a,w,c
  4044  00543A  1002               	iorwf	Error@a+1,w,c
  4045  00543C  B4D8               	btfsc	status,2,c
  4046  00543E  D00B               	goto	l6400
  4047                           
  4048                           ; BSR set to: 15
  4049                           ;./Errores.h: 23:     LATD = v_seg[a];
  4050  005440  0E04               	movlw	low Error@v_seg
  4051  005442  2401               	addwf	Error@a,w,c
  4052  005444  6ED9               	movwf	fsr2l,c
  4053  005446  0E00               	movlw	high Error@v_seg
  4054  005448  2002               	addwfc	Error@a+1,w,c
  4055  00544A  6EDA               	movwf	fsr2h,c
  4056  00544C  50DF               	movf	indf2,w,c
  4057  00544E  6E8C               	movwf	3980,c	;volatile
  4058                           
  4059                           ; BSR set to: 15
  4060                           ;./Errores.h: 24:     LATE = 0x01;
  4061  005450  0E01               	movlw	1
  4062  005452  6E8D               	movwf	3981,c	;volatile
  4063                           
  4064                           ;./Errores.h: 25:     }
  4065  005454  0012               	return	
  4066  005456                     l6400:
  4067                           
  4068                           ; BSR set to: 15
  4069  005456  0E21               	movlw	33
  4070  005458  1801               	xorwf	Error@a,w,c
  4071  00545A  1002               	iorwf	Error@a+1,w,c
  4072  00545C  A4D8               	btfss	status,2,c
  4073  00545E  D005               	goto	l6406
  4074                           
  4075                           ; BSR set to: 15
  4076                           ;./Errores.h: 27:     LATD = v_seg[6];
  4077  005460  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
  4078                           
  4079                           ; BSR set to: 15
  4080                           ;./Errores.h: 28:     LATE = 0x02;
  4081  005464  0E02               	movlw	2
  4082  005466  6E8D               	movwf	3981,c	;volatile
  4083                           
  4084                           ;./Errores.h: 29:     }
  4085  005468  0012               	return	
  4086  00546A                     l6406:
  4087                           
  4088                           ; BSR set to: 15
  4089  00546A  0EE7               	movlw	231
  4090  00546C  1801               	xorwf	Error@a,w,c
  4091  00546E  E107               	bnz	l852
  4092  005470  0E03               	movlw	3
  4093  005472  1802               	xorwf	Error@a+1,w,c
  4094  005474  A4D8               	btfss	status,2,c
  4095  005476  D003               	goto	l852
  4096  005478                     u8580:
  4097                           
  4098                           ;./Errores.h: 31:     LATE = 0x00;
  4099  005478  0E00               	movlw	0
  4100  00547A  6E8D               	movwf	3981,c	;volatile
  4101                           
  4102                           ;./Errores.h: 32:     }
  4103  00547C  0012               	return	
  4104  00547E                     l852:
  4105                           
  4106                           ; BSR set to: 15
  4107                           ;./Errores.h: 34:     LATD = v_seg[0];
  4108  00547E  C004  FF8C         	movff	Error@v_seg,3980	;volatile
  4109                           
  4110                           ; BSR set to: 15
  4111                           ;./Errores.h: 35:     LATE = 0x01;
  4112  005482  0E01               	movlw	1
  4113  005484  6E8D               	movwf	3981,c	;volatile
  4114                           
  4115                           ; BSR set to: 15
  4116                           ;./Errores.h: 36:     _delay((unsigned long)((1)*(8000000/4000.0)));
  4117  005486  0E03               	movlw	3
  4118  005488  6E03               	movwf	??_Error& (0+255),c
  4119  00548A  0E98               	movlw	152
  4120  00548C                     u10007:
  4121  00548C  2EE8               	decfsz	wreg,f,c
  4122  00548E  D7FE               	bra	u10007
  4123  005490  2E03               	decfsz	??_Error& (0+255),f,c
  4124  005492  D7FC               	bra	u10007
  4125                           
  4126                           ;./Errores.h: 38:     LATE = 0x00;
  4127  005494  0E00               	movlw	0
  4128  005496  6E8D               	movwf	3981,c	;volatile
  4129                           
  4130                           ;./Errores.h: 39:     LATD = v_seg[9];
  4131  005498  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
  4132                           
  4133                           ;./Errores.h: 40:     LATE = 0x02;
  4134  00549C  0E02               	movlw	2
  4135  00549E  6E8D               	movwf	3981,c	;volatile
  4136                           
  4137                           ;./Errores.h: 41:     _delay((unsigned long)((1)*(8000000/4000.0)));
  4138  0054A0  0E03               	movlw	3
  4139  0054A2  6E03               	movwf	??_Error& (0+255),c
  4140  0054A4  0E98               	movlw	152
  4141  0054A6                     u10017:
  4142  0054A6  2EE8               	decfsz	wreg,f,c
  4143  0054A8  D7FE               	bra	u10017
  4144  0054AA  2E03               	decfsz	??_Error& (0+255),f,c
  4145  0054AC  D7FC               	bra	u10017
  4146                           
  4147                           ;./Errores.h: 43:     LATE = 0x00;
  4148  0054AE  0E00               	movlw	0
  4149  0054B0  6E8D               	movwf	3981,c	;volatile
  4150                           
  4151                           ;./Errores.h: 44:     LATD = v_seg[6];
  4152  0054B2  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
  4153                           
  4154                           ;./Errores.h: 45:     LATE = 0x04;
  4155  0054B6  0E04               	movlw	4
  4156  0054B8  6E8D               	movwf	3981,c	;volatile
  4157                           
  4158                           ;./Errores.h: 46:     _delay((unsigned long)((1)*(8000000/4000.0)));
  4159  0054BA  0E03               	movlw	3
  4160  0054BC  6E03               	movwf	??_Error& (0+255),c
  4161  0054BE  0E98               	movlw	152
  4162  0054C0                     u10027:
  4163  0054C0  2EE8               	decfsz	wreg,f,c
  4164  0054C2  D7FE               	bra	u10027
  4165  0054C4  2E03               	decfsz	??_Error& (0+255),f,c
  4166  0054C6  D7FC               	bra	u10027
  4167  0054C8  D7D7               	goto	u8580
  4168  0054CA                     __end_of_Error:
  4169                           	opt callstack 0
  4170                           
  4171 ;; *************** function _f_open *****************
  4172 ;; Defined at:
  4173 ;;		line 2449 in file "ff.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  fp              2   58[BANK0 ] PTR struct .
  4176 ;;		 -> Fil(32), 
  4177 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  4178 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  4179 ;;  mode            1   62[BANK0 ] unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  dj             22   90[BANK0 ] struct .
  4182 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  4183 ;;  dw              4   83[BANK0 ] unsigned long 
  4184 ;;  cl              4   79[BANK0 ] unsigned long 
  4185 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  4186 ;;		 -> FatFs(558), NULL(0), 
  4187 ;;  res             1   87[BANK0 ] enum E93
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      enum E93
  4190 ;; Registers used:
  4191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4197 ;;      Params:         0       5       0       0       0       0       0       0       0
  4198 ;;      Locals:         0      45       0       0       0       0       0       0       0
  4199 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4200 ;;      Totals:         0      54       0       0       0       0       0       0       0
  4201 ;;Total ram usage:       54 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:   13
  4204 ;; This function calls:
  4205 ;;		_dir_register
  4206 ;;		_find_volume
  4207 ;;		_follow_path
  4208 ;;		_ld_clust
  4209 ;;		_move_window
  4210 ;;		_remove_chain
  4211 ;;		_st_clust
  4212 ;; This function is called by:
  4213 ;;		_guardar
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text11
  4218  002FAC                     __ptext11:
  4219                           	opt callstack 0
  4220  002FAC                     _f_open:
  4221                           	opt callstack 16
  4222                           
  4223                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  4224                           
  4225                           ;incstack = 0
  4226  002FAC  0100               	movlb	0	; () banked
  4227  002FAE  519A               	movf	f_open@fp& (0+255),w,b
  4228  002FB0  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  4229  002FB2  A4D8               	btfss	status,2,c
  4230  002FB4  D002               	goto	l6808
  4231                           
  4232                           ; BSR set to: 0
  4233  002FB6  0E09               	movlw	9
  4234  002FB8  0012               	return	
  4235  002FBA                     l6808:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;ff.c: 2465:  fp->fs = 0;
  4239  002FBA  C09A  FFD9         	movff	f_open@fp,fsr2l
  4240  002FBE  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4241  002FC2  0E00               	movlw	0
  4242  002FC4  6EDE               	movwf	postinc2,c
  4243  002FC6  0E00               	movlw	0
  4244  002FC8  6EDD               	movwf	postdec2,c
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;ff.c: 2468:  dj.fs = FatFs[0];
  4248  002FCA  C0DC  F0BA         	movff	ff@FatFs,f_open@dj
  4249  002FCE  C0DD  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  4253  002FD2  0E1F               	movlw	31
  4254  002FD4  179E               	andwf	f_open@mode& (0+255),f,b
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  4258  002FD6  0EBA               	movlw	low f_open@dj
  4259  002FD8  6E45               	movwf	find_volume@rfs,c
  4260  002FDA  0E00               	movlw	high f_open@dj
  4261  002FDC  6E46               	movwf	find_volume@rfs+1,c
  4262  002FDE  0E9C               	movlw	low f_open@path
  4263  002FE0  6E47               	movwf	find_volume@path,c
  4264  002FE2  0E00               	movlw	high f_open@path
  4265  002FE4  6E48               	movwf	find_volume@path+1,c
  4266  002FE6  519E               	movf	f_open@mode& (0+255),w,b
  4267  002FE8  0BFE               	andlw	254
  4268  002FEA  6E49               	movwf	find_volume@wmode,c
  4269  002FEC  EC0E  F004         	call	_find_volume	;wreg free
  4270  002FF0  0100               	movlb	0	; () banked
  4271  002FF2  6FB7               	movwf	f_open@res& (0+255),b
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;ff.c: 2479:  if (res == FR_OK) {
  4275  002FF4  51B7               	movf	f_open@res& (0+255),w,b
  4276  002FF6  A4D8               	btfss	status,2,c
  4277  002FF8  D1A2               	goto	l6912
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;ff.c: 2480:   (dj).fn = sfn;
  4281  002FFA  0EA3               	movlw	low f_open@sfn
  4282  002FFC  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  4283  002FFE  0E00               	movlw	high f_open@sfn
  4284  003000  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;ff.c: 2481:   res = follow_path(&dj, path);
  4288  003002  0EBA               	movlw	low f_open@dj
  4289  003004  6F86               	movwf	follow_path@dp& (0+255),b
  4290  003006  0E00               	movlw	high f_open@dj
  4291  003008  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  4292  00300A  C09C  F088         	movff	f_open@path,follow_path@path
  4293  00300E  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  4294  003012  ECD4  F023         	call	_follow_path	;wreg free
  4295  003016  0100               	movlb	0	; () banked
  4296  003018  6FB7               	movwf	f_open@res& (0+255),b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;ff.c: 2482:   dir = dj.dir;
  4300  00301A  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  4301  00301E  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;ff.c: 2484:   if (res == FR_OK) {
  4305  003022  51B7               	movf	f_open@res& (0+255),w,b
  4306  003024  A4D8               	btfss	status,2,c
  4307  003026  D006               	goto	l6830
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;ff.c: 2485:    if (!dir)
  4311  003028  51B8               	movf	f_open@dir& (0+255),w,b
  4312  00302A  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  4313  00302C  A4D8               	btfss	status,2,c
  4314  00302E  D002               	goto	l6830
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  4318  003030  0E06               	movlw	6
  4319  003032  6FB7               	movwf	f_open@res& (0+255),b
  4320  003034                     l6830:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  4324  003034  C09E  F09F         	movff	f_open@mode,??_f_open
  4325  003038  0E1C               	movlw	28
  4326  00303A  179F               	andwf	??_f_open& (0+255),f,b
  4327  00303C  B4D8               	btfsc	status,2,c
  4328  00303E  D0D3               	goto	l6878
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;ff.c: 2494:    if (res != FR_OK) {
  4332  003040  51B7               	movf	f_open@res& (0+255),w,b
  4333  003042  B4D8               	btfsc	status,2,c
  4334  003044  D012               	goto	l6842
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  4338  003046  0E04               	movlw	4
  4339  003048  19B7               	xorwf	f_open@res& (0+255),w,b
  4340  00304A  A4D8               	btfss	status,2,c
  4341  00304C  D008               	goto	l6838
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;ff.c: 2499:      res = dir_register(&dj);
  4345  00304E  0EBA               	movlw	low f_open@dj
  4346  003050  6F8A               	movwf	dir_register@dp& (0+255),b
  4347  003052  0E00               	movlw	high f_open@dj
  4348  003054  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  4349  003056  EC2F  F029         	call	_dir_register	;wreg free
  4350  00305A  0100               	movlb	0	; () banked
  4351  00305C  6FB7               	movwf	f_open@res& (0+255),b
  4352  00305E                     l6838:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;ff.c: 2501:     mode |= 0x08;
  4356  00305E  879E               	bsf	f_open@mode& (0+255),3,b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;ff.c: 2502:     dir = dj.dir;
  4360  003060  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  4361  003064  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  4362                           
  4363                           ;ff.c: 2503:    }
  4364  003068  D012               	goto	l581
  4365  00306A                     l6842:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  4369  00306A  EE20 F00B          	lfsr	2,11
  4370  00306E  51B8               	movf	f_open@dir& (0+255),w,b
  4371  003070  26D9               	addwf	fsr2l,f,c
  4372  003072  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4373  003074  22DA               	addwfc	fsr2h,f,c
  4374  003076  50DF               	movf	indf2,w,c
  4375  003078  6F9F               	movwf	??_f_open& (0+255),b
  4376  00307A  0E11               	movlw	17
  4377  00307C  179F               	andwf	??_f_open& (0+255),f,b
  4378  00307E  B4D8               	btfsc	status,2,c
  4379  003080  D002               	goto	l582
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;ff.c: 2506:      res = FR_DENIED;
  4383  003082  0E07               	movlw	7
  4384  003084  D003               	goto	L5
  4385  003086                     l582:
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;ff.c: 2508:      if (mode & 0x04)
  4389  003086  A59E               	btfss	f_open@mode& (0+255),2,b
  4390  003088  D002               	goto	l581
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;ff.c: 2509:       res = FR_EXIST;
  4394  00308A  0E08               	movlw	8
  4395  00308C                     L5:
  4396  00308C  6FB7               	movwf	f_open@res& (0+255),b
  4397  00308E                     l581:
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  4401  00308E  51B7               	movf	f_open@res& (0+255),w,b
  4402  003090  B4D8               	btfsc	status,2,c
  4403                           
  4404                           ; BSR set to: 0
  4405  003092  A79E               	btfss	f_open@mode& (0+255),3,b
  4406  003094  D0C1               	goto	l588
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  4410                           
  4411                           ; BSR set to: 0
  4412  003096  EE20 F00E          	lfsr	2,14
  4413  00309A  51B8               	movf	f_open@dir& (0+255),w,b
  4414  00309C  26D9               	addwf	fsr2l,f,c
  4415  00309E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4416  0030A0  22DA               	addwfc	fsr2h,f,c
  4417  0030A2  0E00               	movlw	0
  4418  0030A4  6EDE               	movwf	postinc2,c
  4419  0030A6  0E00               	movlw	0
  4420  0030A8  6EDE               	movwf	postinc2,c
  4421  0030AA  0E21               	movlw	33
  4422  0030AC  6EDE               	movwf	postinc2,c
  4423  0030AE  0E46               	movlw	70
  4424  0030B0  6EDD               	movwf	postdec2,c
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  4428  0030B2  EE20 F016          	lfsr	2,22
  4429  0030B6  51B8               	movf	f_open@dir& (0+255),w,b
  4430  0030B8  26D9               	addwf	fsr2l,f,c
  4431  0030BA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4432  0030BC  22DA               	addwfc	fsr2h,f,c
  4433  0030BE  0E00               	movlw	0
  4434  0030C0  6EDE               	movwf	postinc2,c
  4435  0030C2  0E00               	movlw	0
  4436  0030C4  6EDE               	movwf	postinc2,c
  4437  0030C6  0E21               	movlw	33
  4438  0030C8  6EDE               	movwf	postinc2,c
  4439  0030CA  0E46               	movlw	70
  4440  0030CC  6EDD               	movwf	postdec2,c
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;ff.c: 2516:     dir[11] = 0;
  4444  0030CE  EE20 F00B          	lfsr	2,11
  4445  0030D2  51B8               	movf	f_open@dir& (0+255),w,b
  4446  0030D4  26D9               	addwf	fsr2l,f,c
  4447  0030D6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4448  0030D8  22DA               	addwfc	fsr2h,f,c
  4449  0030DA  0E00               	movlw	0
  4450  0030DC  6EDF               	movwf	indf2,c
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  4454  0030DE  EE20 F01C          	lfsr	2,28
  4455  0030E2  51B8               	movf	f_open@dir& (0+255),w,b
  4456  0030E4  26D9               	addwf	fsr2l,f,c
  4457  0030E6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4458  0030E8  22DA               	addwfc	fsr2h,f,c
  4459  0030EA  6ADE               	clrf	postinc2,c
  4460  0030EC  6ADE               	clrf	postinc2,c
  4461  0030EE  6ADE               	clrf	postinc2,c
  4462  0030F0  6ADD               	clrf	postdec2,c
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  4466  0030F2  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4467  0030F6  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4468  0030FA  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4469  0030FE  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4470  003102  EC39  F02C         	call	_ld_clust	;wreg free
  4471  003106  C001  F0AF         	movff	?_ld_clust,f_open@cl
  4472  00310A  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  4473  00310E  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  4474  003112  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  4475                           
  4476                           ;ff.c: 2519:     st_clust(dir, 0);
  4477  003116  C0B8  F001         	movff	f_open@dir,st_clust@dir
  4478  00311A  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  4479  00311E  0E00               	movlw	0
  4480  003120  6E03               	movwf	st_clust@cl,c
  4481  003122  0E00               	movlw	0
  4482  003124  6E04               	movwf	st_clust@cl+1,c
  4483  003126  0E00               	movlw	0
  4484  003128  6E05               	movwf	st_clust@cl+2,c
  4485  00312A  0E00               	movlw	0
  4486  00312C  6E06               	movwf	st_clust@cl+3,c
  4487  00312E  EC97  F02E         	call	_st_clust	;wreg free
  4488                           
  4489                           ;ff.c: 2520:     dj.fs->wflag = 1;
  4490  003132  0100               	movlb	0	; () banked
  4491  003134  EE20 F004          	lfsr	2,4
  4492  003138  51BA               	movf	f_open@dj& (0+255),w,b
  4493  00313A  26D9               	addwf	fsr2l,f,c
  4494  00313C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4495  00313E  22DA               	addwfc	fsr2h,f,c
  4496  003140  0E01               	movlw	1
  4497  003142  6EDF               	movwf	indf2,c
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;ff.c: 2521:     if (cl) {
  4501  003144  51AF               	movf	f_open@cl& (0+255),w,b
  4502  003146  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  4503  003148  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  4504  00314A  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  4505  00314C  B4D8               	btfsc	status,2,c
  4506  00314E  D064               	goto	l588
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;ff.c: 2522:      dw = dj.fs->winsect;
  4510  003150  EE20 F02A          	lfsr	2,42
  4511  003154  51BA               	movf	f_open@dj& (0+255),w,b
  4512  003156  26D9               	addwf	fsr2l,f,c
  4513  003158  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4514  00315A  22DA               	addwfc	fsr2h,f,c
  4515  00315C  CFDE F0B3          	movff	postinc2,f_open@dw
  4516  003160  CFDE F0B4          	movff	postinc2,f_open@dw+1
  4517  003164  CFDE F0B5          	movff	postinc2,f_open@dw+2
  4518  003168  CFDE F0B6          	movff	postinc2,f_open@dw+3
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  4522  00316C  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  4523  003170  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  4524  003174  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  4525  003178  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  4526  00317C  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  4527  003180  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  4528  003184  EC2F  F023         	call	_remove_chain	;wreg free
  4529  003188  0100               	movlb	0	; () banked
  4530  00318A  6FB7               	movwf	f_open@res& (0+255),b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;ff.c: 2524:      if (res == FR_OK) {
  4534  00318C  51B7               	movf	f_open@res& (0+255),w,b
  4535  00318E  A4D8               	btfss	status,2,c
  4536  003190  D043               	goto	l588
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  4540  003192  0EFF               	movlw	255
  4541  003194  25AF               	addwf	f_open@cl& (0+255),w,b
  4542  003196  6F9F               	movwf	??_f_open& (0+255),b
  4543  003198  0EFF               	movlw	255
  4544  00319A  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  4545  00319C  6FA0               	movwf	(??_f_open+1)& (0+255),b
  4546  00319E  0EFF               	movlw	255
  4547  0031A0  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  4548  0031A2  6FA1               	movwf	(??_f_open+2)& (0+255),b
  4549  0031A4  0EFF               	movlw	255
  4550  0031A6  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  4551  0031A8  6FA2               	movwf	(??_f_open+3)& (0+255),b
  4552  0031AA  EE20 F00A          	lfsr	2,10
  4553  0031AE  51BA               	movf	f_open@dj& (0+255),w,b
  4554  0031B0  26D9               	addwf	fsr2l,f,c
  4555  0031B2  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4556  0031B4  22DA               	addwfc	fsr2h,f,c
  4557  0031B6  C09F  FFDE         	movff	??_f_open,postinc2
  4558  0031BA  C0A0  FFDE         	movff	??_f_open+1,postinc2
  4559  0031BE  C0A1  FFDE         	movff	??_f_open+2,postinc2
  4560  0031C2  C0A2  FFDE         	movff	??_f_open+3,postinc2
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  4564  0031C6  C0BA  F030         	movff	f_open@dj,move_window@fs
  4565  0031CA  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  4566  0031CE  C0B3  F032         	movff	f_open@dw,move_window@sector
  4567  0031D2  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  4568  0031D6  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  4569  0031DA  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  4570  0031DE  EC1A  F02B         	call	_move_window	;wreg free
  4571  0031E2  0100               	movlb	0	; () banked
  4572  0031E4  D018               	goto	L6
  4573  0031E6                     l6878:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;ff.c: 2532:    if (res == FR_OK) {
  4577  0031E6  51B7               	movf	f_open@res& (0+255),w,b
  4578  0031E8  A4D8               	btfss	status,2,c
  4579  0031EA  D016               	goto	l588
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  4583  0031EC  EE20 F00B          	lfsr	2,11
  4584  0031F0  51B8               	movf	f_open@dir& (0+255),w,b
  4585  0031F2  26D9               	addwf	fsr2l,f,c
  4586  0031F4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4587  0031F6  22DA               	addwfc	fsr2h,f,c
  4588  0031F8  A8DF               	btfss	indf2,4,c
  4589  0031FA  D002               	goto	l590
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;ff.c: 2534:      res = FR_NO_FILE;
  4593  0031FC  0E04               	movlw	4
  4594  0031FE  D00B               	goto	L6
  4595  003200                     l590:
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  4599  003200  A39E               	btfss	f_open@mode& (0+255),1,b
  4600  003202  D00A               	goto	l588
  4601                           
  4602                           ; BSR set to: 0
  4603  003204  EE20 F00B          	lfsr	2,11
  4604  003208  51B8               	movf	f_open@dir& (0+255),w,b
  4605  00320A  26D9               	addwf	fsr2l,f,c
  4606  00320C  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4607  00320E  22DA               	addwfc	fsr2h,f,c
  4608  003210  A0DF               	btfss	indf2,0,c
  4609  003212  D002               	goto	l588
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;ff.c: 2537:       res = FR_DENIED;
  4613  003214  0E07               	movlw	7
  4614  003216                     L6:
  4615  003216  6FB7               	movwf	f_open@res& (0+255),b
  4616  003218                     l588:
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;ff.c: 2541:   if (res == FR_OK) {
  4620  003218  51B7               	movf	f_open@res& (0+255),w,b
  4621  00321A  A4D8               	btfss	status,2,c
  4622  00321C  D020               	goto	l6896
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;ff.c: 2542:    if (mode & 0x08)
  4626  00321E  B79E               	btfsc	f_open@mode& (0+255),3,b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;ff.c: 2543:     mode |= 0x20;
  4630  003220  8B9E               	bsf	f_open@mode& (0+255),5,b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  4634  003222  EE20 F02A          	lfsr	2,42
  4635  003226  51BA               	movf	f_open@dj& (0+255),w,b
  4636  003228  26D9               	addwf	fsr2l,f,c
  4637  00322A  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4638  00322C  22DA               	addwfc	fsr2h,f,c
  4639  00322E  EE10 F01A          	lfsr	1,26
  4640  003232  519A               	movf	f_open@fp& (0+255),w,b
  4641  003234  26E1               	addwf	fsr1l,f,c
  4642  003236  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4643  003238  22E2               	addwfc	fsr1h,f,c
  4644  00323A  CFDE FFE6          	movff	postinc2,postinc1
  4645  00323E  CFDE FFE6          	movff	postinc2,postinc1
  4646  003242  CFDE FFE6          	movff	postinc2,postinc1
  4647  003246  CFDE FFE6          	movff	postinc2,postinc1
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;ff.c: 2545:    fp->dir_ptr = dir;
  4651  00324A  EE20 F01E          	lfsr	2,30
  4652  00324E  519A               	movf	f_open@fp& (0+255),w,b
  4653  003250  26D9               	addwf	fsr2l,f,c
  4654  003252  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4655  003254  22DA               	addwfc	fsr2h,f,c
  4656  003256  C0B8  FFDE         	movff	f_open@dir,postinc2
  4657  00325A  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  4658  00325E                     l6896:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;ff.c: 2565:   if (res == FR_OK) {
  4662  00325E  51B7               	movf	f_open@res& (0+255),w,b
  4663  003260  A4D8               	btfss	status,2,c
  4664  003262  D06D               	goto	l6912
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;ff.c: 2566:    fp->flag = mode;
  4668  003264  EE20 F004          	lfsr	2,4
  4669  003268  519A               	movf	f_open@fp& (0+255),w,b
  4670  00326A  26D9               	addwf	fsr2l,f,c
  4671  00326C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4672  00326E  22DA               	addwfc	fsr2h,f,c
  4673  003270  C09E  FFDF         	movff	f_open@mode,indf2
  4674                           
  4675                           ;ff.c: 2567:    fp->err = 0;
  4676  003274  EE20 F005          	lfsr	2,5
  4677  003278  519A               	movf	f_open@fp& (0+255),w,b
  4678  00327A  26D9               	addwf	fsr2l,f,c
  4679  00327C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4680  00327E  22DA               	addwfc	fsr2h,f,c
  4681  003280  0E00               	movlw	0
  4682  003282  6EDF               	movwf	indf2,c
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  4686  003284  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4687  003288  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4688  00328C  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4689  003290  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4690  003294  EC39  F02C         	call	_ld_clust	;wreg free
  4691  003298  0100               	movlb	0	; () banked
  4692  00329A  EE20 F00E          	lfsr	2,14
  4693  00329E  519A               	movf	f_open@fp& (0+255),w,b
  4694  0032A0  26D9               	addwf	fsr2l,f,c
  4695  0032A2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4696  0032A4  22DA               	addwfc	fsr2h,f,c
  4697  0032A6  C001  FFDE         	movff	?_ld_clust,postinc2
  4698  0032AA  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4699  0032AE  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4700  0032B2  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4704  0032B6  EE20 F01C          	lfsr	2,28
  4705  0032BA  51B8               	movf	f_open@dir& (0+255),w,b
  4706  0032BC  26D9               	addwf	fsr2l,f,c
  4707  0032BE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4708  0032C0  22DA               	addwfc	fsr2h,f,c
  4709  0032C2  EE10 F00A          	lfsr	1,10
  4710  0032C6  519A               	movf	f_open@fp& (0+255),w,b
  4711  0032C8  26E1               	addwf	fsr1l,f,c
  4712  0032CA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4713  0032CC  22E2               	addwfc	fsr1h,f,c
  4714  0032CE  CFDE FFE6          	movff	postinc2,postinc1
  4715  0032D2  CFDE FFE6          	movff	postinc2,postinc1
  4716  0032D6  CFDE FFE6          	movff	postinc2,postinc1
  4717  0032DA  CFDE FFE6          	movff	postinc2,postinc1
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;ff.c: 2570:    fp->fptr = 0;
  4721  0032DE  EE20 F006          	lfsr	2,6
  4722  0032E2  519A               	movf	f_open@fp& (0+255),w,b
  4723  0032E4  26D9               	addwf	fsr2l,f,c
  4724  0032E6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4725  0032E8  22DA               	addwfc	fsr2h,f,c
  4726  0032EA  6ADE               	clrf	postinc2,c
  4727  0032EC  6ADE               	clrf	postinc2,c
  4728  0032EE  6ADE               	clrf	postinc2,c
  4729  0032F0  6ADD               	clrf	postdec2,c
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;ff.c: 2571:    fp->dsect = 0;
  4733  0032F2  EE20 F016          	lfsr	2,22
  4734  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  4735  0032F8  26D9               	addwf	fsr2l,f,c
  4736  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4737  0032FC  22DA               	addwfc	fsr2h,f,c
  4738  0032FE  6ADE               	clrf	postinc2,c
  4739  003300  6ADE               	clrf	postinc2,c
  4740  003302  6ADE               	clrf	postinc2,c
  4741  003304  6ADD               	clrf	postdec2,c
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;ff.c: 2575:    fp->fs = dj.fs;
  4745  003306  C09A  FFD9         	movff	f_open@fp,fsr2l
  4746  00330A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4747  00330E  C0BA  FFDE         	movff	f_open@dj,postinc2
  4748  003312  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;ff.c: 2576:    fp->id = fp->fs->id;
  4752  003316  C09A  FFD9         	movff	f_open@fp,fsr2l
  4753  00331A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4754  00331E  EE10 F006          	lfsr	1,6
  4755  003322  50DE               	movf	postinc2,w,c
  4756  003324  26E1               	addwf	fsr1l,f,c
  4757  003326  50DD               	movf	postdec2,w,c
  4758  003328  22E2               	addwfc	fsr1h,f,c
  4759  00332A  EE20 F002          	lfsr	2,2
  4760  00332E  519A               	movf	f_open@fp& (0+255),w,b
  4761  003330  26D9               	addwf	fsr2l,f,c
  4762  003332  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4763  003334  22DA               	addwfc	fsr2h,f,c
  4764  003336  CFE6 FFDE          	movff	postinc1,postinc2
  4765  00333A  CFE5 FFDD          	movff	postdec1,postdec2
  4766  00333E                     l6912:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;ff.c: 2580:  return res;
  4770  00333E  51B7               	movf	f_open@res& (0+255),w,b
  4771                           
  4772                           ; BSR set to: 0
  4773  003340  0012               	return		;funcret
  4774  003342                     __end_of_f_open:
  4775                           	opt callstack 0
  4776                           
  4777 ;; *************** function _remove_chain *****************
  4778 ;; Defined at:
  4779 ;;		line 937 in file "ff.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  fs              2   85[COMRAM] PTR struct .
  4782 ;;		 -> FatFs(558), NULL(0), 
  4783 ;;  clst            4   87[COMRAM] unsigned long 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  nxt             4    1[BANK0 ] unsigned long 
  4786 ;;  res             1    0[BANK0 ] enum E93
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      enum E93
  4789 ;; Registers used:
  4790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4796 ;;      Params:         6       0       0       0       0       0       0       0       0
  4797 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4798 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4799 ;;      Totals:        10       5       0       0       0       0       0       0       0
  4800 ;;Total ram usage:       15 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    9
  4803 ;; This function calls:
  4804 ;;		_get_fat
  4805 ;;		_put_fat
  4806 ;; This function is called by:
  4807 ;;		_f_open
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text12
  4812  00465E                     __ptext12:
  4813                           	opt callstack 0
  4814  00465E                     _remove_chain:
  4815                           	opt callstack 19
  4816                           
  4817                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;incstack = 0
  4821  00465E  505B               	movf	remove_chain@clst+3,w,c
  4822  004660  105A               	iorwf	remove_chain@clst+2,w,c
  4823  004662  1059               	iorwf	remove_chain@clst+1,w,c
  4824  004664  E104               	bnz	u7580
  4825  004666  0E02               	movlw	2
  4826  004668  5C58               	subwf	remove_chain@clst,w,c
  4827  00466A  A0D8               	btfss	status,0,c
  4828  00466C  D010               	goto	u7590
  4829  00466E                     u7580:
  4830  00466E  EE20 F012          	lfsr	2,18
  4831  004672  5056               	movf	remove_chain@fs,w,c
  4832  004674  26D9               	addwf	fsr2l,f,c
  4833  004676  5057               	movf	remove_chain@fs+1,w,c
  4834  004678  22DA               	addwfc	fsr2h,f,c
  4835  00467A  50DE               	movf	postinc2,w,c
  4836  00467C  5C58               	subwf	remove_chain@clst,w,c
  4837  00467E  50DE               	movf	postinc2,w,c
  4838  004680  5859               	subwfb	remove_chain@clst+1,w,c
  4839  004682  50DE               	movf	postinc2,w,c
  4840  004684  585A               	subwfb	remove_chain@clst+2,w,c
  4841  004686  50DE               	movf	postinc2,w,c
  4842  004688  585B               	subwfb	remove_chain@clst+3,w,c
  4843  00468A  A0D8               	btfss	status,0,c
  4844  00468C  D003               	goto	l5840
  4845  00468E                     u7590:
  4846                           
  4847                           ;ff.c: 949:   res = FR_INT_ERR;
  4848  00468E  0E02               	movlw	2
  4849  004690  0100               	movlb	0	; () banked
  4850  004692  D031               	goto	L7
  4851  004694                     l5840:
  4852                           
  4853                           ;ff.c: 952:   res = FR_OK;
  4854  004694  0E00               	movlw	0
  4855  004696  0100               	movlb	0	; () banked
  4856  004698  6F60               	movwf	remove_chain@res& (0+255),b
  4857                           
  4858                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4859  00469A  D074               	goto	l302
  4860  00469C                     l5842:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  4864  00469C  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  4865  0046A0  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  4866  0046A4  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  4867  0046A8  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  4868  0046AC  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  4869  0046B0  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  4870  0046B4  EC05  F016         	call	_get_fat	;wreg free
  4871  0046B8  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  4872  0046BC  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  4873  0046C0  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  4874  0046C4  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  4875                           
  4876                           ;ff.c: 955:    if (nxt == 0) break;
  4877  0046C8  0100               	movlb	0	; () banked
  4878  0046CA  5161               	movf	remove_chain@nxt& (0+255),w,b
  4879  0046CC  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4880  0046CE  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4881  0046D0  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4882  0046D2  B4D8               	btfsc	status,2,c
  4883  0046D4  D067               	goto	u7650
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  4887  0046D6  0561               	decf	remove_chain@nxt& (0+255),w,b
  4888  0046D8  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4889  0046DA  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4890  0046DC  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4891  0046DE  B4D8               	btfsc	status,2,c
  4892  0046E0  D7D6               	goto	u7590
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4896  0046E2  2961               	incf	remove_chain@nxt& (0+255),w,b
  4897  0046E4  E10A               	bnz	l5856
  4898  0046E6  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  4899  0046E8  E108               	bnz	l5856
  4900  0046EA  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  4901  0046EC  E106               	bnz	l5856
  4902  0046EE  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  4903  0046F0  A4D8               	btfss	status,2,c
  4904  0046F2  D003               	goto	l5856
  4905                           
  4906                           ; BSR set to: 0
  4907  0046F4  0E01               	movlw	1
  4908  0046F6                     L7:
  4909  0046F6  6F60               	movwf	remove_chain@res& (0+255),b
  4910  0046F8  D055               	goto	u7650
  4911  0046FA                     l5856:
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  4915  0046FA  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  4916  0046FE  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  4917  004702  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  4918  004706  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  4919  00470A  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  4920  00470E  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  4921  004712  0E00               	movlw	0
  4922  004714  6E41               	movwf	put_fat@val,c
  4923  004716  0E00               	movlw	0
  4924  004718  6E42               	movwf	put_fat@val+1,c
  4925  00471A  0E00               	movlw	0
  4926  00471C  6E43               	movwf	put_fat@val+2,c
  4927  00471E  0E00               	movlw	0
  4928  004720  6E44               	movwf	put_fat@val+3,c
  4929  004722  ECED  F011         	call	_put_fat	;wreg free
  4930  004726  0100               	movlb	0	; () banked
  4931  004728  6F60               	movwf	remove_chain@res& (0+255),b
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;ff.c: 959:    if (res != FR_OK) break;
  4935  00472A  5160               	movf	remove_chain@res& (0+255),w,b
  4936  00472C  A4D8               	btfss	status,2,c
  4937  00472E  D03A               	goto	u7650
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  4941  004730  EE20 F00E          	lfsr	2,14
  4942  004734  5056               	movf	remove_chain@fs,w,c
  4943  004736  26D9               	addwf	fsr2l,f,c
  4944  004738  5057               	movf	remove_chain@fs+1,w,c
  4945  00473A  22DA               	addwfc	fsr2h,f,c
  4946  00473C  28DE               	incf	postinc2,w,c
  4947  00473E  E107               	bnz	u7640
  4948  004740  28DE               	incf	postinc2,w,c
  4949  004742  E105               	bnz	u7640
  4950  004744  28DE               	incf	postinc2,w,c
  4951  004746  E103               	bnz	u7640
  4952  004748  28DE               	incf	postinc2,w,c
  4953  00474A  B4D8               	btfsc	status,2,c
  4954  00474C  D013               	goto	l5866
  4955  00474E                     u7640:
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;ff.c: 961:     fs->free_clust++;
  4959  00474E  EE20 F00E          	lfsr	2,14
  4960  004752  5056               	movf	remove_chain@fs,w,c
  4961  004754  26D9               	addwf	fsr2l,f,c
  4962  004756  5057               	movf	remove_chain@fs+1,w,c
  4963  004758  22DA               	addwfc	fsr2h,f,c
  4964  00475A  2ADE               	incf	postinc2,f,c
  4965  00475C  0E00               	movlw	0
  4966  00475E  22DE               	addwfc	postinc2,f,c
  4967  004760  22DE               	addwfc	postinc2,f,c
  4968  004762  22DE               	addwfc	postinc2,f,c
  4969                           
  4970                           ;ff.c: 962:     fs->fsi_flag |= 1;
  4971  004764  EE20 F005          	lfsr	2,5
  4972  004768  5056               	movf	remove_chain@fs,w,c
  4973  00476A  26D9               	addwf	fsr2l,f,c
  4974  00476C  5057               	movf	remove_chain@fs+1,w,c
  4975  00476E  22DA               	addwfc	fsr2h,f,c
  4976  004770  0E00               	movlw	0
  4977  004772  80DB               	bsf	plusw2,0,c
  4978  004774                     l5866:
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;ff.c: 974:    clst = nxt;
  4982  004774  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  4983  004778  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4984  00477C  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4985  004780  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4986  004784                     l302:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4990  004784  EE20 F012          	lfsr	2,18
  4991  004788  5056               	movf	remove_chain@fs,w,c
  4992  00478A  26D9               	addwf	fsr2l,f,c
  4993  00478C  5057               	movf	remove_chain@fs+1,w,c
  4994  00478E  22DA               	addwfc	fsr2h,f,c
  4995  004790  50DE               	movf	postinc2,w,c
  4996  004792  5C58               	subwf	remove_chain@clst,w,c
  4997  004794  50DE               	movf	postinc2,w,c
  4998  004796  5859               	subwfb	remove_chain@clst+1,w,c
  4999  004798  50DE               	movf	postinc2,w,c
  5000  00479A  585A               	subwfb	remove_chain@clst+2,w,c
  5001  00479C  50DE               	movf	postinc2,w,c
  5002  00479E  585B               	subwfb	remove_chain@clst+3,w,c
  5003  0047A0  A0D8               	btfss	status,0,c
  5004  0047A2  D77C               	goto	l5842
  5005  0047A4                     u7650:
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;ff.c: 978:  return res;
  5009  0047A4  5160               	movf	remove_chain@res& (0+255),w,b
  5010                           
  5011                           ; BSR set to: 0
  5012  0047A6  0012               	return		;funcret
  5013  0047A8                     __end_of_remove_chain:
  5014                           	opt callstack 0
  5015                           
  5016 ;; *************** function _follow_path *****************
  5017 ;; Defined at:
  5018 ;;		line 2052 in file "ff.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  dp              2   38[BANK0 ] PTR struct .
  5021 ;;		 -> f_open@dj(22), 
  5022 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  5023 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  5026 ;;		 -> FatFs(558), NULL(0), 
  5027 ;;  res             1   45[BANK0 ] enum E93
  5028 ;;  ns              1   44[BANK0 ] unsigned char 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  1    wreg      enum E93
  5031 ;; Registers used:
  5032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5038 ;;      Params:         0       4       0       0       0       0       0       0       0
  5039 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5040 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5041 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5042 ;;Total ram usage:        8 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; Hardware stack levels required when called:   12
  5045 ;; This function calls:
  5046 ;;		_create_name
  5047 ;;		_dir_find
  5048 ;;		_dir_sdi
  5049 ;;		_ld_clust
  5050 ;; This function is called by:
  5051 ;;		_f_open
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text13
  5056  0047A8                     __ptext13:
  5057                           	opt callstack 0
  5058  0047A8                     _follow_path:
  5059                           	opt callstack 16
  5060                           
  5061                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;incstack = 0
  5065  0047A8  C088  FFF6         	movff	follow_path@path,tblptrl
  5066  0047AC  C089  FFF7         	movff	follow_path@path+1,tblptrh
  5067  0047B0                     	if	0	;tblptru may be non-zero
  5068  0047B0                     	endif
  5069  0047B0                     	if	0	;tblptru may be non-zero
  5070  0047B0                     	endif
  5071  0047B0  0008               	tblrd		*
  5072  0047B2  50F5               	movf	tablat,w,c
  5073  0047B4  0A2F               	xorlw	47
  5074  0047B6  B4D8               	btfsc	status,2,c
  5075  0047B8  D009               	goto	u7690
  5076  0047BA  C088  FFF6         	movff	follow_path@path,tblptrl
  5077  0047BE  C089  FFF7         	movff	follow_path@path+1,tblptrh
  5078  0047C2                     	if	0	;tblptru may be non-zero
  5079  0047C2                     	endif
  5080  0047C2                     	if	0	;tblptru may be non-zero
  5081  0047C2                     	endif
  5082  0047C2  0008               	tblrd		*
  5083  0047C4  50F5               	movf	tablat,w,c
  5084  0047C6  0A5C               	xorlw	92
  5085  0047C8  A4D8               	btfss	status,2,c
  5086  0047CA  D003               	goto	l5896
  5087  0047CC                     u7690:
  5088                           
  5089                           ;ff.c: 2069:   path++;
  5090  0047CC  0100               	movlb	0	; () banked
  5091  0047CE  4B88               	infsnz	follow_path@path& (0+255),f,b
  5092  0047D0  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  5093  0047D2                     l5896:
  5094                           
  5095                           ;ff.c: 2070:  dp->sclust = 0;
  5096  0047D2  0100               	movlb	0	; () banked
  5097  0047D4  EE20 F006          	lfsr	2,6
  5098  0047D8  5186               	movf	follow_path@dp& (0+255),w,b
  5099  0047DA  26D9               	addwf	fsr2l,f,c
  5100  0047DC  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5101  0047DE  22DA               	addwfc	fsr2h,f,c
  5102  0047E0  6ADE               	clrf	postinc2,c
  5103  0047E2  6ADE               	clrf	postinc2,c
  5104  0047E4  6ADE               	clrf	postinc2,c
  5105  0047E6  6ADD               	clrf	postdec2,c
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  5109  0047E8  C088  FFF6         	movff	follow_path@path,tblptrl
  5110  0047EC  C089  FFF7         	movff	follow_path@path+1,tblptrh
  5111  0047F0                     	if	0	;tblptru may be non-zero
  5112  0047F0                     	endif
  5113  0047F0                     	if	0	;tblptru may be non-zero
  5114  0047F0                     	endif
  5115  0047F0  0E20               	movlw	32
  5116  0047F2  0008               	tblrd		*
  5117  0047F4  60F5               	cpfslt	tablat,c
  5118  0047F6  D017               	goto	l5904
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  5122  0047F8  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  5123  0047FC  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  5124  004800  0E00               	movlw	0
  5125  004802  6E59               	movwf	dir_sdi@idx+1,c
  5126  004804  0E00               	movlw	0
  5127  004806  6E58               	movwf	dir_sdi@idx,c
  5128  004808  ECC7  F01C         	call	_dir_sdi	;wreg free
  5129  00480C  0100               	movlb	0	; () banked
  5130  00480E  6F8D               	movwf	follow_path@res& (0+255),b
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;ff.c: 2075:   dp->dir = 0;
  5134  004810  EE20 F012          	lfsr	2,18
  5135  004814  5186               	movf	follow_path@dp& (0+255),w,b
  5136  004816  26D9               	addwf	fsr2l,f,c
  5137  004818  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5138  00481A  22DA               	addwfc	fsr2h,f,c
  5139  00481C  0E00               	movlw	0
  5140  00481E  6EDE               	movwf	postinc2,c
  5141  004820  0E00               	movlw	0
  5142  004822  6EDD               	movwf	postdec2,c
  5143                           
  5144                           ;ff.c: 2076:  } else {
  5145  004824  D062               	goto	l5940
  5146  004826                     l5904:
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;ff.c: 2078:    res = create_name(dp, &path);
  5150  004826  C086  F009         	movff	follow_path@dp,create_name@dp
  5151  00482A  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  5152  00482E  0E88               	movlw	low follow_path@path
  5153  004830  6E0B               	movwf	create_name@path,c
  5154  004832  0E00               	movlw	high follow_path@path
  5155  004834  6E0C               	movwf	create_name@path+1,c
  5156  004836  EC6C  F01F         	call	_create_name	;wreg free
  5157  00483A  0100               	movlb	0	; () banked
  5158  00483C  6F8D               	movwf	follow_path@res& (0+255),b
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;ff.c: 2079:    if (res != FR_OK) break;
  5162  00483E  518D               	movf	follow_path@res& (0+255),w,b
  5163  004840  A4D8               	btfss	status,2,c
  5164  004842  D053               	goto	l5940
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;ff.c: 2080:    res = dir_find(dp);
  5168  004844  C086  F080         	movff	follow_path@dp,dir_find@dp
  5169  004848  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  5170  00484C  ECD4  F027         	call	_dir_find	;wreg free
  5171  004850  0100               	movlb	0	; () banked
  5172  004852  6F8D               	movwf	follow_path@res& (0+255),b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;ff.c: 2081:    ns = dp->fn[11];
  5176  004854  EE20 F014          	lfsr	2,20
  5177  004858  5186               	movf	follow_path@dp& (0+255),w,b
  5178  00485A  26D9               	addwf	fsr2l,f,c
  5179  00485C  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5180  00485E  22DA               	addwfc	fsr2h,f,c
  5181  004860  EE10 F00B          	lfsr	1,11
  5182  004864  50DE               	movf	postinc2,w,c
  5183  004866  26E1               	addwf	fsr1l,f,c
  5184  004868  50DD               	movf	postdec2,w,c
  5185  00486A  22E2               	addwfc	fsr1h,f,c
  5186  00486C  50E7               	movf	indf1,w,c
  5187  00486E  6F8C               	movwf	follow_path@ns& (0+255),b
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;ff.c: 2082:    if (res != FR_OK) {
  5191  004870  518D               	movf	follow_path@res& (0+255),w,b
  5192  004872  B4D8               	btfsc	status,2,c
  5193  004874  D008               	goto	l469
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  5197  004876  0E04               	movlw	4
  5198  004878  198D               	xorwf	follow_path@res& (0+255),w,b
  5199  00487A  B4D8               	btfsc	status,2,c
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  5203  00487C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  5204  00487E  D035               	goto	l5940
  5205  004880                     u7740:
  5206                           
  5207                           ; BSR set to: 0
  5208  004880  0E05               	movlw	5
  5209  004882  6F8D               	movwf	follow_path@res& (0+255),b
  5210  004884  D032               	goto	l5940
  5211  004886                     l469:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;ff.c: 2094:    if (ns & 0x04) break;
  5215  004886  B58C               	btfsc	follow_path@ns& (0+255),2,b
  5216  004888  D030               	goto	l5940
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;ff.c: 2095:    dir = dp->dir;
  5220  00488A  EE20 F012          	lfsr	2,18
  5221  00488E  5186               	movf	follow_path@dp& (0+255),w,b
  5222  004890  26D9               	addwf	fsr2l,f,c
  5223  004892  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5224  004894  22DA               	addwfc	fsr2h,f,c
  5225  004896  CFDE F08A          	movff	postinc2,follow_path@dir
  5226  00489A  CFDD F08B          	movff	postdec2,follow_path@dir+1
  5227                           
  5228                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  5229  00489E  EE20 F00B          	lfsr	2,11
  5230  0048A2  518A               	movf	follow_path@dir& (0+255),w,b
  5231  0048A4  26D9               	addwf	fsr2l,f,c
  5232  0048A6  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  5233  0048A8  22DA               	addwfc	fsr2h,f,c
  5234  0048AA  A8DF               	btfss	indf2,4,c
  5235  0048AC  D7E9               	goto	u7740
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  5239  0048AE  C086  FFD9         	movff	follow_path@dp,fsr2l
  5240  0048B2  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  5241  0048B6  CFDE F001          	movff	postinc2,ld_clust@fs
  5242  0048BA  CFDD F002          	movff	postdec2,ld_clust@fs+1
  5243  0048BE  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  5244  0048C2  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  5245  0048C6  EC39  F02C         	call	_ld_clust	;wreg free
  5246  0048CA  0100               	movlb	0	; () banked
  5247  0048CC  EE20 F006          	lfsr	2,6
  5248  0048D0  5186               	movf	follow_path@dp& (0+255),w,b
  5249  0048D2  26D9               	addwf	fsr2l,f,c
  5250  0048D4  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5251  0048D6  22DA               	addwfc	fsr2h,f,c
  5252  0048D8  C001  FFDE         	movff	?_ld_clust,postinc2
  5253  0048DC  C002  FFDE         	movff	?_ld_clust+1,postinc2
  5254  0048E0  C003  FFDE         	movff	?_ld_clust+2,postinc2
  5255  0048E4  C004  FFDE         	movff	?_ld_clust+3,postinc2
  5256  0048E8  D79E               	goto	l5904
  5257  0048EA                     l5940:
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;ff.c: 2103:  return res;
  5261  0048EA  518D               	movf	follow_path@res& (0+255),w,b
  5262                           
  5263                           ; BSR set to: 0
  5264  0048EC  0012               	return		;funcret
  5265  0048EE                     __end_of_follow_path:
  5266                           	opt callstack 0
  5267                           
  5268 ;; *************** function _ld_clust *****************
  5269 ;; Defined at:
  5270 ;;		line 1235 in file "ff.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;  fs              2    0[COMRAM] PTR struct .
  5273 ;;		 -> FatFs(558), NULL(0), 
  5274 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  5275 ;;		 -> FatFs(558), NULL(0), 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  cl              4   10[COMRAM] unsigned long 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  4    0[COMRAM] unsigned long 
  5280 ;; Registers used:
  5281 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5287 ;;      Params:         4       0       0       0       0       0       0       0       0
  5288 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5289 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5290 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5291 ;;Total ram usage:       14 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; This function calls:
  5294 ;;		Nothing
  5295 ;; This function is called by:
  5296 ;;		_follow_path
  5297 ;;		_f_open
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	text14
  5302  005872                     __ptext14:
  5303                           	opt callstack 0
  5304  005872                     _ld_clust:
  5305                           	opt callstack 28
  5306                           
  5307                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;incstack = 0
  5311  005872  0E1A               	movlw	26
  5312  005874  2403               	addwf	ld_clust@dir,w,c
  5313  005876  6ED9               	movwf	fsr2l,c
  5314  005878  0E00               	movlw	0
  5315  00587A  2004               	addwfc	ld_clust@dir+1,w,c
  5316  00587C  6EDA               	movwf	fsr2h,c
  5317  00587E  CFDE F005          	movff	postinc2,??_ld_clust
  5318  005882  CFDD F006          	movff	postdec2,??_ld_clust+1
  5319  005886  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  5320  00588A  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  5321  00588E  6A0D               	clrf	ld_clust@cl+2,c
  5322  005890  6A0E               	clrf	ld_clust@cl+3,c
  5323                           
  5324                           ;ff.c: 1243:  if (fs->fs_type == 3)
  5325  005892  C001  FFD9         	movff	ld_clust@fs,fsr2l
  5326  005896  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  5327  00589A  0E03               	movlw	3
  5328  00589C  18DE               	xorwf	postinc2,w,c
  5329  00589E  A4D8               	btfss	status,2,c
  5330  0058A0  D01E               	goto	l5538
  5331                           
  5332                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  5333  0058A2  0E14               	movlw	20
  5334  0058A4  2403               	addwf	ld_clust@dir,w,c
  5335  0058A6  6ED9               	movwf	fsr2l,c
  5336  0058A8  0E00               	movlw	0
  5337  0058AA  2004               	addwfc	ld_clust@dir+1,w,c
  5338  0058AC  6EDA               	movwf	fsr2h,c
  5339  0058AE  CFDE F005          	movff	postinc2,??_ld_clust
  5340  0058B2  CFDD F006          	movff	postdec2,??_ld_clust+1
  5341  0058B6  5005               	movf	??_ld_clust,w,c
  5342  0058B8  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  5343  0058BA  5006               	movf	??_ld_clust+1,w,c
  5344  0058BC  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  5345  0058BE  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  5346  0058C0  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  5347  0058C2  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  5348  0058C6  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  5349  0058CA  6A08               	clrf	??_ld_clust+3,c
  5350  0058CC  6A07               	clrf	??_ld_clust+2,c
  5351  0058CE  5007               	movf	??_ld_clust+2,w,c
  5352  0058D0  120B               	iorwf	ld_clust@cl,f,c
  5353  0058D2  5008               	movf	??_ld_clust+3,w,c
  5354  0058D4  120C               	iorwf	ld_clust@cl+1,f,c
  5355  0058D6  5009               	movf	??_ld_clust+4,w,c
  5356  0058D8  120D               	iorwf	ld_clust@cl+2,f,c
  5357  0058DA  500A               	movf	??_ld_clust+5,w,c
  5358  0058DC  120E               	iorwf	ld_clust@cl+3,f,c
  5359  0058DE                     l5538:
  5360                           
  5361                           ;ff.c: 1246:  return cl;
  5362  0058DE  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  5363  0058E2  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  5364  0058E6  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  5365  0058EA  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  5366  0058EE  0012               	return		;funcret
  5367  0058F0                     __end_of_ld_clust:
  5368                           	opt callstack 0
  5369                           
  5370 ;; *************** function _dir_find *****************
  5371 ;; Defined at:
  5372 ;;		line 1458 in file "ff.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  dp              2   32[BANK0 ] PTR struct .
  5375 ;;		 -> f_open@dj(22), 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  5378 ;;		 -> FatFs(558), NULL(0), 
  5379 ;;  res             1   37[BANK0 ] enum E93
  5380 ;;  c               1   34[BANK0 ] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  1    wreg      enum E93
  5383 ;; Registers used:
  5384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5390 ;;      Params:         0       2       0       0       0       0       0       0       0
  5391 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5393 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5394 ;;Total ram usage:        6 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:   11
  5397 ;; This function calls:
  5398 ;;		_dir_next
  5399 ;;		_dir_sdi
  5400 ;;		_mem_cmp
  5401 ;;		_move_window
  5402 ;; This function is called by:
  5403 ;;		_follow_path
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text15
  5408  004FA8                     __ptext15:
  5409                           	opt callstack 0
  5410  004FA8                     _dir_find:
  5411                           	opt callstack 16
  5412                           
  5413                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  5414                           
  5415                           ;incstack = 0
  5416  004FA8  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  5417  004FAC  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  5418  004FB0  0E00               	movlw	0
  5419  004FB2  6E59               	movwf	dir_sdi@idx+1,c
  5420  004FB4  0E00               	movlw	0
  5421  004FB6  6E58               	movwf	dir_sdi@idx,c
  5422  004FB8  ECC7  F01C         	call	_dir_sdi	;wreg free
  5423  004FBC  0100               	movlb	0	; () banked
  5424  004FBE  6F85               	movwf	dir_find@res& (0+255),b
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;ff.c: 1469:  if (res != FR_OK) return res;
  5428  004FC0  5185               	movf	dir_find@res& (0+255),w,b
  5429  004FC2  B4D8               	btfsc	status,2,c
  5430  004FC4  D003               	goto	l5552
  5431  004FC6                     u7020:
  5432  004FC6  0100               	movlb	0	; () banked
  5433  004FC8  5185               	movf	dir_find@res& (0+255),w,b
  5434  004FCA  0012               	return	
  5435  004FCC                     l5552:
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  5439  004FCC  C080  FFD9         	movff	dir_find@dp,fsr2l
  5440  004FD0  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  5441  004FD4  CFDE F030          	movff	postinc2,move_window@fs
  5442  004FD8  CFDD F031          	movff	postdec2,move_window@fs+1
  5443  004FDC  EE20 F00E          	lfsr	2,14
  5444  004FE0  5180               	movf	dir_find@dp& (0+255),w,b
  5445  004FE2  26D9               	addwf	fsr2l,f,c
  5446  004FE4  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5447  004FE6  22DA               	addwfc	fsr2h,f,c
  5448  004FE8  CFDE F032          	movff	postinc2,move_window@sector
  5449  004FEC  CFDE F033          	movff	postinc2,move_window@sector+1
  5450  004FF0  CFDE F034          	movff	postinc2,move_window@sector+2
  5451  004FF4  CFDE F035          	movff	postinc2,move_window@sector+3
  5452  004FF8  EC1A  F02B         	call	_move_window	;wreg free
  5453  004FFC  0100               	movlb	0	; () banked
  5454  004FFE  6F85               	movwf	dir_find@res& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;ff.c: 1476:   if (res != FR_OK) break;
  5458  005000  5185               	movf	dir_find@res& (0+255),w,b
  5459  005002  A4D8               	btfss	status,2,c
  5460  005004  D7E0               	goto	u7020
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;ff.c: 1477:   dir = dp->dir;
  5464  005006  EE20 F012          	lfsr	2,18
  5465  00500A  5180               	movf	dir_find@dp& (0+255),w,b
  5466  00500C  26D9               	addwf	fsr2l,f,c
  5467  00500E  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5468  005010  22DA               	addwfc	fsr2h,f,c
  5469  005012  CFDE F083          	movff	postinc2,dir_find@dir
  5470  005016  CFDD F084          	movff	postdec2,dir_find@dir+1
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;ff.c: 1478:   c = dir[0];
  5474  00501A  C083  FFD9         	movff	dir_find@dir,fsr2l
  5475  00501E  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  5476  005022  50DF               	movf	indf2,w,c
  5477  005024  6F82               	movwf	dir_find@c& (0+255),b
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  5481  005026  5182               	movf	dir_find@c& (0+255),w,b
  5482  005028  A4D8               	btfss	status,2,c
  5483  00502A  D003               	goto	l5566
  5484                           
  5485                           ; BSR set to: 0
  5486  00502C  0E04               	movlw	4
  5487  00502E  6F85               	movwf	dir_find@res& (0+255),b
  5488  005030  D7CA               	goto	u7020
  5489  005032                     l5566:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5493  005032  EE20 F00B          	lfsr	2,11
  5494  005036  5183               	movf	dir_find@dir& (0+255),w,b
  5495  005038  26D9               	addwf	fsr2l,f,c
  5496  00503A  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  5497  00503C  22DA               	addwfc	fsr2h,f,c
  5498  00503E  B6DF               	btfsc	indf2,3,c
  5499  005040  D018               	goto	l5572
  5500                           
  5501                           ; BSR set to: 0
  5502  005042  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  5503  005046  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  5504  00504A  EE20 F014          	lfsr	2,20
  5505  00504E  5180               	movf	dir_find@dp& (0+255),w,b
  5506  005050  26D9               	addwf	fsr2l,f,c
  5507  005052  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5508  005054  22DA               	addwfc	fsr2h,f,c
  5509  005056  CFDE F003          	movff	postinc2,mem_cmp@src
  5510  00505A  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5511  00505E  0E00               	movlw	0
  5512  005060  6E06               	movwf	mem_cmp@cnt+1,c
  5513  005062  0E0B               	movlw	11
  5514  005064  6E05               	movwf	mem_cmp@cnt,c
  5515  005066  ECED  F02C         	call	_mem_cmp	;wreg free
  5516  00506A  5001               	movf	?_mem_cmp,w,c
  5517  00506C  1002               	iorwf	?_mem_cmp+1,w,c
  5518  00506E  B4D8               	btfsc	status,2,c
  5519  005070  D7AA               	goto	u7020
  5520  005072                     l5572:
  5521                           
  5522                           ;ff.c: 1505:   res = dir_next(dp, 0);
  5523  005072  C080  F06D         	movff	dir_find@dp,dir_next@dp
  5524  005076  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  5525  00507A  0E00               	movlw	0
  5526  00507C  0100               	movlb	0	; () banked
  5527  00507E  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5528  005080  0E00               	movlw	0
  5529  005082  6F6F               	movwf	dir_next@stretch& (0+255),b
  5530  005084  EC02  F014         	call	_dir_next	;wreg free
  5531  005088  0100               	movlb	0	; () banked
  5532  00508A  6F85               	movwf	dir_find@res& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;ff.c: 1506:  } while (res == FR_OK);
  5536  00508C  5185               	movf	dir_find@res& (0+255),w,b
  5537  00508E  A4D8               	btfss	status,2,c
  5538  005090  D79A               	goto	u7020
  5539  005092  D79C               	goto	l5552
  5540  005094                     __end_of_dir_find:
  5541                           	opt callstack 0
  5542                           
  5543 ;; *************** function _mem_cmp *****************
  5544 ;; Defined at:
  5545 ;;		line 533 in file "ff.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  dst             2    0[COMRAM] PTR const void 
  5548 ;;		 -> FatFs(558), NULL(0), 
  5549 ;;  src             2    2[COMRAM] PTR const void 
  5550 ;;		 -> f_open@sfn(12), 
  5551 ;;  cnt             2    4[COMRAM] unsigned short 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  r               2   12[COMRAM] int 
  5554 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5555 ;;		 -> f_open@sfn(12), 
  5556 ;;  d               2    8[COMRAM] PTR const unsigned char 
  5557 ;;		 -> FatFs(558), NULL(0), 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  2    0[COMRAM] int 
  5560 ;; Registers used:
  5561 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5567 ;;      Params:         6       0       0       0       0       0       0       0       0
  5568 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5569 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5570 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5571 ;;Total ram usage:       14 bytes
  5572 ;; Hardware stack levels used:    1
  5573 ;; This function calls:
  5574 ;;		Nothing
  5575 ;; This function is called by:
  5576 ;;		_dir_find
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text16
  5581  0059DA                     __ptext16:
  5582                           	opt callstack 0
  5583  0059DA                     _mem_cmp:
  5584                           	opt callstack 26
  5585                           
  5586                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;incstack = 0
  5590  0059DA  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  5591  0059DE  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5592  0059E2  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  5593  0059E6  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  5594                           
  5595                           ;ff.c: 535:  int r = 0;
  5596  0059EA  0E00               	movlw	0
  5597  0059EC  6E0E               	movwf	mem_cmp@r+1,c
  5598  0059EE  0E00               	movlw	0
  5599  0059F0  6E0D               	movwf	mem_cmp@r,c
  5600  0059F2                     l5162:
  5601  0059F2  0605               	decf	mem_cmp@cnt,f,c
  5602  0059F4  A0D8               	btfss	status,0,c
  5603  0059F6  0606               	decf	mem_cmp@cnt+1,f,c
  5604  0059F8  2805               	incf	mem_cmp@cnt,w,c
  5605  0059FA  E103               	bnz	u6330
  5606  0059FC  2806               	incf	mem_cmp@cnt+1,w,c
  5607  0059FE  B4D8               	btfsc	status,2,c
  5608  005A00  D01A               	goto	u6340
  5609  005A02                     u6330:
  5610  005A02  C009  FFD9         	movff	mem_cmp@d,fsr2l
  5611  005A06  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  5612  005A0A  4A09               	infsnz	mem_cmp@d,f,c
  5613  005A0C  2A0A               	incf	mem_cmp@d+1,f,c
  5614  005A0E  50DF               	movf	indf2,w,c
  5615  005A10  6E07               	movwf	??_mem_cmp& (0+255),c
  5616  005A12  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  5617  005A16  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  5618  005A1A  4A0B               	infsnz	mem_cmp@s,f,c
  5619  005A1C  2A0C               	incf	mem_cmp@s+1,f,c
  5620  005A1E  50DF               	movf	indf2,w,c
  5621  005A20  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  5622  005A22  5008               	movf	??_mem_cmp+1,w,c
  5623  005A24  5C07               	subwf	??_mem_cmp,w,c
  5624  005A26  6E0D               	movwf	mem_cmp@r,c
  5625  005A28  6A0E               	clrf	mem_cmp@r+1,c
  5626  005A2A  A0D8               	btfss	status,0,c
  5627  005A2C  060E               	decf	mem_cmp@r+1,f,c
  5628  005A2E  500D               	movf	mem_cmp@r,w,c
  5629  005A30  100E               	iorwf	mem_cmp@r+1,w,c
  5630  005A32  B4D8               	btfsc	status,2,c
  5631  005A34  D7DE               	goto	l5162
  5632  005A36                     u6340:
  5633                           
  5634                           ;ff.c: 538:  return r;
  5635  005A36  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  5636  005A3A  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5637  005A3E  0012               	return		;funcret
  5638  005A40                     __end_of_mem_cmp:
  5639                           	opt callstack 0
  5640                           
  5641 ;; *************** function _create_name *****************
  5642 ;; Defined at:
  5643 ;;		line 1843 in file "ff.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;  dp              2    8[COMRAM] PTR struct .
  5646 ;;		 -> f_open@dj(22), 
  5647 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  5648 ;;		 -> follow_path@path(2), 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  i               2   28[COMRAM] unsigned short 
  5651 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  5652 ;;		 -> f_open@sfn(12), 
  5653 ;;  p               2   23[COMRAM] PTR const unsigned char 
  5654 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  5655 ;;  ni              2   21[COMRAM] unsigned short 
  5656 ;;  si              2   18[COMRAM] unsigned short 
  5657 ;;  c               1   30[COMRAM] unsigned char 
  5658 ;;  d               1   25[COMRAM] unsigned char 
  5659 ;;  b               1   20[COMRAM] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      enum E93
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5669 ;;      Params:         4       0       0       0       0       0       0       0       0
  5670 ;;      Locals:        15       0       0       0       0       0       0       0       0
  5671 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5672 ;;      Totals:        23       0       0       0       0       0       0       0       0
  5673 ;;Total ram usage:       23 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    1
  5676 ;; This function calls:
  5677 ;;		_chk_chr
  5678 ;;		_mem_set
  5679 ;; This function is called by:
  5680 ;;		_follow_path
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text17
  5685  003ED8                     __ptext17:
  5686                           	opt callstack 0
  5687  003ED8                     _create_name:
  5688                           	opt callstack 26
  5689                           
  5690                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  5691                           
  5692                           ;incstack = 0
  5693  003ED8  C00B  FFD9         	movff	create_name@path,fsr2l
  5694  003EDC  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5695  003EE0  CFDE F018          	movff	postinc2,create_name@p
  5696  003EE4  CFDD F019          	movff	postdec2,create_name@p+1
  5697  003EE8  D002               	goto	l5584
  5698  003EEA                     l5582:
  5699  003EEA  4A18               	infsnz	create_name@p,f,c
  5700  003EEC  2A19               	incf	create_name@p+1,f,c
  5701  003EEE                     l5584:
  5702  003EEE  C018  FFF6         	movff	create_name@p,tblptrl
  5703  003EF2  C019  FFF7         	movff	create_name@p+1,tblptrh
  5704  003EF6                     	if	0	;tblptru may be non-zero
  5705  003EF6                     	endif
  5706  003EF6                     	if	0	;tblptru may be non-zero
  5707  003EF6                     	endif
  5708  003EF6  0008               	tblrd		*
  5709  003EF8  50F5               	movf	tablat,w,c
  5710  003EFA  0A2F               	xorlw	47
  5711  003EFC  B4D8               	btfsc	status,2,c
  5712  003EFE  D7F5               	goto	l5582
  5713  003F00  C018  FFF6         	movff	create_name@p,tblptrl
  5714  003F04  C019  FFF7         	movff	create_name@p+1,tblptrh
  5715  003F08                     	if	0	;tblptru may be non-zero
  5716  003F08                     	endif
  5717  003F08                     	if	0	;tblptru may be non-zero
  5718  003F08                     	endif
  5719  003F08  0008               	tblrd		*
  5720  003F0A  50F5               	movf	tablat,w,c
  5721  003F0C  0A5C               	xorlw	92
  5722  003F0E  B4D8               	btfsc	status,2,c
  5723  003F10  D7EC               	goto	l5582
  5724                           
  5725                           ;ff.c: 1975:  sfn = dp->fn;
  5726  003F12  EE20 F014          	lfsr	2,20
  5727  003F16  5009               	movf	create_name@dp,w,c
  5728  003F18  26D9               	addwf	fsr2l,f,c
  5729  003F1A  500A               	movf	create_name@dp+1,w,c
  5730  003F1C  22DA               	addwfc	fsr2h,f,c
  5731  003F1E  CFDE F01B          	movff	postinc2,create_name@sfn
  5732  003F22  CFDD F01C          	movff	postdec2,create_name@sfn+1
  5733                           
  5734                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  5735  003F26  C01B  F001         	movff	create_name@sfn,mem_set@dst
  5736  003F2A  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  5737  003F2E  0E00               	movlw	0
  5738  003F30  6E04               	movwf	mem_set@val+1,c
  5739  003F32  0E20               	movlw	32
  5740  003F34  6E03               	movwf	mem_set@val,c
  5741  003F36  0E00               	movlw	0
  5742  003F38  6E06               	movwf	mem_set@cnt+1,c
  5743  003F3A  0E0B               	movlw	11
  5744  003F3C  6E05               	movwf	mem_set@cnt,c
  5745  003F3E  EC81  F02E         	call	_mem_set	;wreg free
  5746                           
  5747                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  5748  003F42  0E00               	movlw	0
  5749  003F44  6E15               	movwf	create_name@b,c
  5750  003F46  C015  F01D         	movff	create_name@b,create_name@i
  5751  003F4A  6A1E               	clrf	create_name@i+1,c
  5752  003F4C  C01D  F013         	movff	create_name@i,create_name@si
  5753  003F50  C01E  F014         	movff	create_name@i+1,create_name@si+1
  5754  003F54  0E00               	movlw	0
  5755  003F56  6E17               	movwf	create_name@ni+1,c
  5756  003F58  0E08               	movlw	8
  5757  003F5A  6E16               	movwf	create_name@ni,c
  5758  003F5C                     l5596:
  5759                           
  5760                           ;ff.c: 1992:   c = (BYTE)p[si++];
  5761  003F5C  5013               	movf	create_name@si,w,c
  5762  003F5E  2418               	addwf	create_name@p,w,c
  5763  003F60  6E0D               	movwf	??_create_name& (0+255),c
  5764  003F62  5014               	movf	create_name@si+1,w,c
  5765  003F64  2019               	addwfc	create_name@p+1,w,c
  5766  003F66  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5767  003F68  C00D  FFF6         	movff	??_create_name,tblptrl
  5768  003F6C  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5769  003F70                     	if	0	;tblptru may be non-zero
  5770  003F70                     	endif
  5771  003F70                     	if	0	;tblptru may be non-zero
  5772  003F70                     	endif
  5773  003F70  0008               	tblrd		*
  5774  003F72  CFF5 F01F          	movff	tablat,create_name@c
  5775  003F76  4A13               	infsnz	create_name@si,f,c
  5776  003F78  2A14               	incf	create_name@si+1,f,c
  5777                           
  5778                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  5779  003F7A  0E20               	movlw	32
  5780  003F7C  641F               	cpfsgt	create_name@c,c
  5781  003F7E  D0A4               	goto	l5680
  5782  003F80  0E2F               	movlw	47
  5783  003F82  181F               	xorwf	create_name@c,w,c
  5784  003F84  B4D8               	btfsc	status,2,c
  5785  003F86  D0A0               	goto	l5680
  5786  003F88  0E5C               	movlw	92
  5787  003F8A  181F               	xorwf	create_name@c,w,c
  5788  003F8C  B4D8               	btfsc	status,2,c
  5789  003F8E  D09C               	goto	l5680
  5790                           
  5791                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  5792  003F90  0E2E               	movlw	46
  5793  003F92  181F               	xorwf	create_name@c,w,c
  5794  003F94  B4D8               	btfsc	status,2,c
  5795  003F96  D006               	goto	u7140
  5796  003F98  5016               	movf	create_name@ni,w,c
  5797  003F9A  5C1D               	subwf	create_name@i,w,c
  5798  003F9C  5017               	movf	create_name@ni+1,w,c
  5799  003F9E  581E               	subwfb	create_name@i+1,w,c
  5800  003FA0  A0D8               	btfss	status,0,c
  5801  003FA2  D018               	goto	l5622
  5802  003FA4                     u7140:
  5803                           
  5804                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5805  003FA4  0E08               	movlw	8
  5806  003FA6  1816               	xorwf	create_name@ni,w,c
  5807  003FA8  1017               	iorwf	create_name@ni+1,w,c
  5808  003FAA  A4D8               	btfss	status,2,c
  5809  003FAC  D004               	goto	u7160
  5810  003FAE  0E2E               	movlw	46
  5811  003FB0  181F               	xorwf	create_name@c,w,c
  5812  003FB2  B4D8               	btfsc	status,2,c
  5813  003FB4  D002               	goto	l5618
  5814  003FB6                     u7160:
  5815  003FB6  0E06               	movlw	6
  5816  003FB8  0012               	return	
  5817  003FBA                     l5618:
  5818                           
  5819                           ;ff.c: 1996:    i = 8; ni = 11;
  5820  003FBA  0E00               	movlw	0
  5821  003FBC  6E1E               	movwf	create_name@i+1,c
  5822  003FBE  0E08               	movlw	8
  5823  003FC0  6E1D               	movwf	create_name@i,c
  5824  003FC2  0E00               	movlw	0
  5825  003FC4  6E17               	movwf	create_name@ni+1,c
  5826  003FC6  0E0B               	movlw	11
  5827  003FC8  6E16               	movwf	create_name@ni,c
  5828                           
  5829                           ;ff.c: 1997:    b <<= 2; continue;
  5830  003FCA  90D8               	bcf	status,0,c
  5831  003FCC  3615               	rlcf	create_name@b,f,c
  5832  003FCE  90D8               	bcf	status,0,c
  5833  003FD0  3615               	rlcf	create_name@b,f,c
  5834  003FD2  D7C4               	goto	l5596
  5835  003FD4                     l5622:
  5836                           
  5837                           ;ff.c: 1999:   if (c >= 0x80) {
  5838  003FD4  0E7F               	movlw	127
  5839  003FD6  641F               	cpfsgt	create_name@c,c
  5840  003FD8  D002               	goto	l432
  5841                           
  5842                           ;ff.c: 2000:    b |= 3;
  5843  003FDA  0E03               	movlw	3
  5844  003FDC  1215               	iorwf	create_name@b,f,c
  5845  003FDE                     l432:
  5846                           
  5847                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  5848  003FDE  0E80               	movlw	128
  5849  003FE0  641F               	cpfsgt	create_name@c,c
  5850  003FE2  D003               	goto	u7190
  5851  003FE4  0E9F               	movlw	159
  5852  003FE6  641F               	cpfsgt	create_name@c,c
  5853  003FE8  D006               	goto	u7210
  5854  003FEA                     u7190:
  5855  003FEA  0EDF               	movlw	223
  5856  003FEC  641F               	cpfsgt	create_name@c,c
  5857  003FEE  D043               	goto	l5656
  5858  003FF0  0EFD               	movlw	253
  5859  003FF2  601F               	cpfslt	create_name@c,c
  5860  003FF4  D040               	goto	l5656
  5861  003FF6                     u7210:
  5862                           
  5863                           ;ff.c: 2010:    d = (BYTE)p[si++];
  5864  003FF6  5013               	movf	create_name@si,w,c
  5865  003FF8  2418               	addwf	create_name@p,w,c
  5866  003FFA  6E0D               	movwf	??_create_name& (0+255),c
  5867  003FFC  5014               	movf	create_name@si+1,w,c
  5868  003FFE  2019               	addwfc	create_name@p+1,w,c
  5869  004000  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5870  004002  C00D  FFF6         	movff	??_create_name,tblptrl
  5871  004006  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5872  00400A                     	if	0	;tblptru may be non-zero
  5873  00400A                     	endif
  5874  00400A                     	if	0	;tblptru may be non-zero
  5875  00400A                     	endif
  5876  00400A  0008               	tblrd		*
  5877  00400C  CFF5 F01A          	movff	tablat,create_name@d
  5878  004010  4A13               	infsnz	create_name@si,f,c
  5879  004012  2A14               	incf	create_name@si+1,f,c
  5880                           
  5881                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  5882  004014  0E3F               	movlw	63
  5883  004016  641A               	cpfsgt	create_name@d,c
  5884  004018  D003               	goto	u7230
  5885  00401A  0E7E               	movlw	126
  5886  00401C  641A               	cpfsgt	create_name@d,c
  5887  00401E  D006               	goto	u7250
  5888  004020                     u7230:
  5889  004020  0E7F               	movlw	127
  5890  004022  641A               	cpfsgt	create_name@d,c
  5891  004024  D7C8               	goto	u7160
  5892  004026  0EFD               	movlw	253
  5893  004028  601A               	cpfslt	create_name@d,c
  5894  00402A  D7C5               	goto	u7160
  5895  00402C                     u7250:
  5896  00402C  0EFF               	movlw	255
  5897  00402E  6E0D               	movwf	??_create_name& (0+255),c
  5898  004030  0EFF               	movlw	255
  5899  004032  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5900  004034  C016  F00F         	movff	create_name@ni,??_create_name+2
  5901  004038  C017  F010         	movff	create_name@ni+1,??_create_name+3
  5902  00403C  500D               	movf	??_create_name,w,c
  5903  00403E  260F               	addwf	??_create_name+2,f,c
  5904  004040  500E               	movf	??_create_name+1,w,c
  5905  004042  2210               	addwfc	??_create_name+3,f,c
  5906  004044  500F               	movf	??_create_name+2,w,c
  5907  004046  5C1D               	subwf	create_name@i,w,c
  5908  004048  5010               	movf	??_create_name+3,w,c
  5909  00404A  581E               	subwfb	create_name@i+1,w,c
  5910  00404C  B0D8               	btfsc	status,0,c
  5911  00404E  D7B3               	goto	u7160
  5912                           
  5913                           ;ff.c: 2013:    sfn[i++] = c;
  5914  004050  501D               	movf	create_name@i,w,c
  5915  004052  241B               	addwf	create_name@sfn,w,c
  5916  004054  6ED9               	movwf	fsr2l,c
  5917  004056  501E               	movf	create_name@i+1,w,c
  5918  004058  201C               	addwfc	create_name@sfn+1,w,c
  5919  00405A  6EDA               	movwf	fsr2h,c
  5920  00405C  C01F  FFDF         	movff	create_name@c,indf2
  5921  004060  4A1D               	infsnz	create_name@i,f,c
  5922  004062  2A1E               	incf	create_name@i+1,f,c
  5923                           
  5924                           ;ff.c: 2014:    sfn[i++] = d;
  5925  004064  501D               	movf	create_name@i,w,c
  5926  004066  241B               	addwf	create_name@sfn,w,c
  5927  004068  6ED9               	movwf	fsr2l,c
  5928  00406A  501E               	movf	create_name@i+1,w,c
  5929  00406C  201C               	addwfc	create_name@sfn+1,w,c
  5930  00406E  6EDA               	movwf	fsr2h,c
  5931  004070  C01A  FFDF         	movff	create_name@d,indf2
  5932  004074  D026               	goto	l5678
  5933  004076                     l5656:
  5934                           
  5935                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5936  004076  0E01               	movlw	low STR_1
  5937  004078  6E01               	movwf	chk_chr@str,c
  5938  00407A  0E08               	movlw	high STR_1
  5939  00407C  6E02               	movwf	chk_chr@str+1,c
  5940  00407E  C01F  F003         	movff	create_name@c,chk_chr@chr
  5941  004082  6A04               	clrf	chk_chr@chr+1,c
  5942  004084  ECA9  F02D         	call	_chk_chr	;wreg free
  5943  004088  5001               	movf	?_chk_chr,w,c
  5944  00408A  1002               	iorwf	?_chk_chr+1,w,c
  5945  00408C  A4D8               	btfss	status,2,c
  5946  00408E  D793               	goto	u7160
  5947                           
  5948                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  5949  004090  0E40               	movlw	64
  5950  004092  641F               	cpfsgt	create_name@c,c
  5951  004094  D005               	goto	l5668
  5952  004096  0E5B               	movlw	91
  5953  004098  601F               	cpfslt	create_name@c,c
  5954  00409A  D002               	goto	l5668
  5955                           
  5956                           ;ff.c: 2019:     b |= 2;
  5957  00409C  8215               	bsf	create_name@b,1,c
  5958                           
  5959                           ;ff.c: 2020:    } else {
  5960  00409E  D009               	goto	l5676
  5961  0040A0                     l5668:
  5962                           
  5963                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  5964  0040A0  0E60               	movlw	96
  5965  0040A2  641F               	cpfsgt	create_name@c,c
  5966  0040A4  D006               	goto	l5676
  5967  0040A6  0E7B               	movlw	123
  5968  0040A8  601F               	cpfslt	create_name@c,c
  5969  0040AA  D003               	goto	l5676
  5970                           
  5971                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  5972  0040AC  8015               	bsf	create_name@b,0,c
  5973  0040AE  0E20               	movlw	32
  5974  0040B0  5E1F               	subwf	create_name@c,f,c
  5975  0040B2                     l5676:
  5976                           
  5977                           ;ff.c: 2025:    sfn[i++] = c;
  5978  0040B2  501D               	movf	create_name@i,w,c
  5979  0040B4  241B               	addwf	create_name@sfn,w,c
  5980  0040B6  6ED9               	movwf	fsr2l,c
  5981  0040B8  501E               	movf	create_name@i+1,w,c
  5982  0040BA  201C               	addwfc	create_name@sfn+1,w,c
  5983  0040BC  6EDA               	movwf	fsr2h,c
  5984  0040BE  C01F  FFDF         	movff	create_name@c,indf2
  5985  0040C2                     l5678:
  5986  0040C2  4A1D               	infsnz	create_name@i,f,c
  5987  0040C4  2A1E               	incf	create_name@i+1,f,c
  5988  0040C6  D74A               	goto	l5596
  5989  0040C8                     l5680:
  5990                           
  5991                           ;ff.c: 2028:  *path = &p[si];
  5992  0040C8  5013               	movf	create_name@si,w,c
  5993  0040CA  2418               	addwf	create_name@p,w,c
  5994  0040CC  6E0D               	movwf	??_create_name& (0+255),c
  5995  0040CE  5014               	movf	create_name@si+1,w,c
  5996  0040D0  2019               	addwfc	create_name@p+1,w,c
  5997  0040D2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5998  0040D4  C00B  FFD9         	movff	create_name@path,fsr2l
  5999  0040D8  C00C  FFDA         	movff	create_name@path+1,fsr2h
  6000  0040DC  C00D  FFDE         	movff	??_create_name,postinc2
  6001  0040E0  C00E  FFDD         	movff	??_create_name+1,postdec2
  6002                           
  6003                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  6004  0040E4  0E20               	movlw	32
  6005  0040E6  641F               	cpfsgt	create_name@c,c
  6006  0040E8  D004               	goto	l5686
  6007  0040EA  0E00               	movlw	0
  6008  0040EC  6E12               	movwf	_create_name$624+1,c
  6009  0040EE  0E00               	movlw	0
  6010  0040F0  D003               	goto	L8
  6011  0040F2                     l5686:
  6012  0040F2  0E00               	movlw	0
  6013  0040F4  6E12               	movwf	_create_name$624+1,c
  6014  0040F6  0E04               	movlw	4
  6015  0040F8                     L8:
  6016  0040F8  6E11               	movwf	_create_name$624,c
  6017  0040FA  C011  F01F         	movff	_create_name$624,create_name@c
  6018                           
  6019                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  6020  0040FE  501D               	movf	create_name@i,w,c
  6021  004100  101E               	iorwf	create_name@i+1,w,c
  6022  004102  B4D8               	btfsc	status,2,c
  6023  004104  D758               	goto	u7160
  6024                           
  6025                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  6026  004106  C01B  FFD9         	movff	create_name@sfn,fsr2l
  6027  00410A  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  6028  00410E  0EE5               	movlw	229
  6029  004110  18DE               	xorwf	postinc2,w,c
  6030  004112  A4D8               	btfss	status,2,c
  6031  004114  D006               	goto	l5700
  6032  004116  C01B  FFD9         	movff	create_name@sfn,fsr2l
  6033  00411A  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  6034  00411E  0E05               	movlw	5
  6035  004120  6EDF               	movwf	indf2,c
  6036  004122                     l5700:
  6037                           
  6038                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  6039  004122  0E08               	movlw	8
  6040  004124  1816               	xorwf	create_name@ni,w,c
  6041  004126  1017               	iorwf	create_name@ni+1,w,c
  6042  004128  A4D8               	btfss	status,2,c
  6043  00412A  D004               	goto	l456
  6044  00412C  90D8               	bcf	status,0,c
  6045  00412E  3615               	rlcf	create_name@b,f,c
  6046  004130  90D8               	bcf	status,0,c
  6047  004132  3615               	rlcf	create_name@b,f,c
  6048  004134                     l456:
  6049                           
  6050                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  6051  004134  5015               	movf	create_name@b,w,c
  6052  004136  0B03               	andlw	3
  6053  004138  06E8               	decf	wreg,f,c
  6054  00413A  B4D8               	btfsc	status,2,c
  6055  00413C  881F               	bsf	create_name@c,4,c
  6056                           
  6057                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  6058  00413E  5015               	movf	create_name@b,w,c
  6059  004140  0B0C               	andlw	12
  6060  004142  0A04               	xorlw	4
  6061  004144  B4D8               	btfsc	status,2,c
  6062  004146  861F               	bsf	create_name@c,3,c
  6063                           
  6064                           ;ff.c: 2038:  sfn[11] = c;
  6065  004148  EE20 F00B          	lfsr	2,11
  6066  00414C  501B               	movf	create_name@sfn,w,c
  6067  00414E  26D9               	addwf	fsr2l,f,c
  6068  004150  501C               	movf	create_name@sfn+1,w,c
  6069  004152  22DA               	addwfc	fsr2h,f,c
  6070  004154  C01F  FFDF         	movff	create_name@c,indf2
  6071                           
  6072                           ;ff.c: 2040:  return FR_OK;
  6073  004158  0E00               	movlw	0
  6074  00415A  0012               	return		;funcret
  6075  00415C                     __end_of_create_name:
  6076                           	opt callstack 0
  6077                           
  6078 ;; *************** function _chk_chr *****************
  6079 ;; Defined at:
  6080 ;;		line 543 in file "ff.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  str             2    0[COMRAM] PTR const unsigned char 
  6083 ;;		 -> STR_2(15), 
  6084 ;;  chr             2    2[COMRAM] int 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  2    0[COMRAM] int 
  6089 ;; Registers used:
  6090 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6096 ;;      Params:         4       0       0       0       0       0       0       0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6098 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6099 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6100 ;;Total ram usage:        6 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_create_name
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text18
  6110  005B52                     __ptext18:
  6111                           	opt callstack 0
  6112  005B52                     _chk_chr:
  6113                           	opt callstack 26
  6114                           
  6115                           ;ff.c: 544:  while (*str && *str != chr) str++;
  6116                           
  6117                           ;incstack = 0
  6118  005B52  D002               	goto	l5170
  6119  005B54                     l5168:
  6120  005B54  4A01               	infsnz	chk_chr@str,f,c
  6121  005B56  2A02               	incf	chk_chr@str+1,f,c
  6122  005B58                     l5170:
  6123  005B58  C001  FFF6         	movff	chk_chr@str,tblptrl
  6124  005B5C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  6125  005B60                     	if	0	;tblptru may be non-zero
  6126  005B60                     	endif
  6127  005B60                     	if	0	;tblptru may be non-zero
  6128  005B60                     	endif
  6129  005B60  0008               	tblrd		*
  6130  005B62  50F5               	movf	tablat,w,c
  6131  005B64  0900               	iorlw	0
  6132  005B66  B4D8               	btfsc	status,2,c
  6133  005B68  D00F               	goto	u6360
  6134  005B6A  C001  FFF6         	movff	chk_chr@str,tblptrl
  6135  005B6E  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  6136  005B72                     	if	0	;tblptru may be non-zero
  6137  005B72                     	endif
  6138  005B72                     	if	0	;tblptru may be non-zero
  6139  005B72                     	endif
  6140  005B72  0008               	tblrd		*
  6141  005B74  50F5               	movf	tablat,w,c
  6142  005B76  6E05               	movwf	??_chk_chr& (0+255),c
  6143  005B78  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  6144  005B7A  5003               	movf	chk_chr@chr,w,c
  6145  005B7C  1805               	xorwf	??_chk_chr,w,c
  6146  005B7E  E1EA               	bnz	l5168
  6147  005B80  5004               	movf	chk_chr@chr+1,w,c
  6148  005B82  1806               	xorwf	??_chk_chr+1,w,c
  6149  005B84  A4D8               	btfss	status,2,c
  6150  005B86  D7E6               	goto	l5168
  6151  005B88                     u6360:
  6152                           
  6153                           ;ff.c: 545:  return *str;
  6154  005B88  C001  FFF6         	movff	chk_chr@str,tblptrl
  6155  005B8C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  6156  005B90                     	if	0	;tblptru may be non-zero
  6157  005B90                     	endif
  6158  005B90                     	if	0	;tblptru may be non-zero
  6159  005B90                     	endif
  6160  005B90  0008               	tblrd		*
  6161  005B92  50F5               	movf	tablat,w,c
  6162  005B94  6E01               	movwf	?_chk_chr,c
  6163  005B96  6A02               	clrf	?_chk_chr+1,c
  6164  005B98  0012               	return		;funcret
  6165  005B9A                     __end_of_chk_chr:
  6166                           	opt callstack 0
  6167                           
  6168 ;; *************** function _dir_register *****************
  6169 ;; Defined at:
  6170 ;;		line 1578 in file "ff.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  dp              2   42[BANK0 ] PTR struct .
  6173 ;;		 -> f_open@dj(22), 
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  res             1   44[BANK0 ] enum E93
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  1    wreg      enum E93
  6178 ;; Registers used:
  6179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6185 ;;      Params:         0       2       0       0       0       0       0       0       0
  6186 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6188 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6189 ;;Total ram usage:        3 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:   12
  6192 ;; This function calls:
  6193 ;;		_dir_alloc
  6194 ;;		_mem_cpy
  6195 ;;		_mem_set
  6196 ;;		_move_window
  6197 ;; This function is called by:
  6198 ;;		_f_open
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text19
  6203  00525E                     __ptext19:
  6204                           	opt callstack 0
  6205  00525E                     _dir_register:
  6206                           	opt callstack 16
  6207                           
  6208                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  6209                           
  6210                           ;incstack = 0
  6211  00525E  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  6212  005262  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  6213  005266  0E00               	movlw	0
  6214  005268  0100               	movlb	0	; () banked
  6215  00526A  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  6216  00526C  0E01               	movlw	1
  6217  00526E  6F82               	movwf	dir_alloc@nent& (0+255),b
  6218  005270  EC5C  F027         	call	_dir_alloc	;wreg free
  6219  005274  0100               	movlb	0	; () banked
  6220  005276  6F8C               	movwf	dir_register@res& (0+255),b
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;ff.c: 1632:  if (res == FR_OK) {
  6224  005278  518C               	movf	dir_register@res& (0+255),w,b
  6225  00527A  A4D8               	btfss	status,2,c
  6226  00527C  D058               	goto	l5886
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  6230  00527E  C08A  FFD9         	movff	dir_register@dp,fsr2l
  6231  005282  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  6232  005286  CFDE F030          	movff	postinc2,move_window@fs
  6233  00528A  CFDD F031          	movff	postdec2,move_window@fs+1
  6234  00528E  EE20 F00E          	lfsr	2,14
  6235  005292  518A               	movf	dir_register@dp& (0+255),w,b
  6236  005294  26D9               	addwf	fsr2l,f,c
  6237  005296  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6238  005298  22DA               	addwfc	fsr2h,f,c
  6239  00529A  CFDE F032          	movff	postinc2,move_window@sector
  6240  00529E  CFDE F033          	movff	postinc2,move_window@sector+1
  6241  0052A2  CFDE F034          	movff	postinc2,move_window@sector+2
  6242  0052A6  CFDE F035          	movff	postinc2,move_window@sector+3
  6243  0052AA  EC1A  F02B         	call	_move_window	;wreg free
  6244  0052AE  0100               	movlb	0	; () banked
  6245  0052B0  6F8C               	movwf	dir_register@res& (0+255),b
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;ff.c: 1634:   if (res == FR_OK) {
  6249  0052B2  518C               	movf	dir_register@res& (0+255),w,b
  6250  0052B4  A4D8               	btfss	status,2,c
  6251  0052B6  D03B               	goto	l5886
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  6255  0052B8  EE20 F012          	lfsr	2,18
  6256  0052BC  518A               	movf	dir_register@dp& (0+255),w,b
  6257  0052BE  26D9               	addwf	fsr2l,f,c
  6258  0052C0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6259  0052C2  22DA               	addwfc	fsr2h,f,c
  6260  0052C4  CFDE F001          	movff	postinc2,mem_set@dst
  6261  0052C8  CFDD F002          	movff	postdec2,mem_set@dst+1
  6262  0052CC  0E00               	movlw	0
  6263  0052CE  6E04               	movwf	mem_set@val+1,c
  6264  0052D0  0E00               	movlw	0
  6265  0052D2  6E03               	movwf	mem_set@val,c
  6266  0052D4  0E00               	movlw	0
  6267  0052D6  6E06               	movwf	mem_set@cnt+1,c
  6268  0052D8  0E20               	movlw	32
  6269  0052DA  6E05               	movwf	mem_set@cnt,c
  6270  0052DC  EC81  F02E         	call	_mem_set	;wreg free
  6271                           
  6272                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  6273  0052E0  0100               	movlb	0	; () banked
  6274  0052E2  EE20 F012          	lfsr	2,18
  6275  0052E6  518A               	movf	dir_register@dp& (0+255),w,b
  6276  0052E8  26D9               	addwf	fsr2l,f,c
  6277  0052EA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6278  0052EC  22DA               	addwfc	fsr2h,f,c
  6279  0052EE  CFDE F001          	movff	postinc2,mem_cpy@dst
  6280  0052F2  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  6281  0052F6  EE20 F014          	lfsr	2,20
  6282  0052FA  518A               	movf	dir_register@dp& (0+255),w,b
  6283  0052FC  26D9               	addwf	fsr2l,f,c
  6284  0052FE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6285  005300  22DA               	addwfc	fsr2h,f,c
  6286  005302  CFDE F003          	movff	postinc2,mem_cpy@src
  6287  005306  CFDD F004          	movff	postdec2,mem_cpy@src+1
  6288  00530A  0E00               	movlw	0
  6289  00530C  6E06               	movwf	mem_cpy@cnt+1,c
  6290  00530E  0E0B               	movlw	11
  6291  005310  6E05               	movwf	mem_cpy@cnt,c
  6292  005312  EC78  F02C         	call	_mem_cpy	;wreg free
  6293                           
  6294                           ;ff.c: 1640:    dp->fs->wflag = 1;
  6295  005316  C08A  FFD9         	movff	dir_register@dp,fsr2l
  6296  00531A  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  6297  00531E  EE10 F004          	lfsr	1,4
  6298  005322  50DE               	movf	postinc2,w,c
  6299  005324  26E1               	addwf	fsr1l,f,c
  6300  005326  50DD               	movf	postdec2,w,c
  6301  005328  22E2               	addwfc	fsr1h,f,c
  6302  00532A  0E01               	movlw	1
  6303  00532C  6EE7               	movwf	indf1,c
  6304  00532E                     l5886:
  6305                           
  6306                           ;ff.c: 1644:  return res;
  6307  00532E  0100               	movlb	0	; () banked
  6308  005330  518C               	movf	dir_register@res& (0+255),w,b
  6309                           
  6310                           ; BSR set to: 0
  6311  005332  0012               	return		;funcret
  6312  005334                     __end_of_dir_register:
  6313                           	opt callstack 0
  6314                           
  6315 ;; *************** function _mem_cpy *****************
  6316 ;; Defined at:
  6317 ;;		line 507 in file "ff.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  dst             2    0[COMRAM] PTR void 
  6320 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  6321 ;;  src             2    2[COMRAM] PTR const void 
  6322 ;;		 -> FatFs(558), ND(2), f_open@sfn(12), NULL(0), 
  6323 ;;  cnt             2    4[COMRAM] unsigned short 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6326 ;;		 -> FatFs(558), ND(2), f_open@sfn(12), NULL(0), 
  6327 ;;  d               2    6[COMRAM] PTR unsigned char 
  6328 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6338 ;;      Params:         6       0       0       0       0       0       0       0       0
  6339 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6341 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6342 ;;Total ram usage:       10 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; This function calls:
  6345 ;;		Nothing
  6346 ;; This function is called by:
  6347 ;;		_dir_register
  6348 ;;		_f_write
  6349 ;;		_f_read
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text20
  6354  0058F0                     __ptext20:
  6355                           	opt callstack 0
  6356  0058F0                     _mem_cpy:
  6357                           	opt callstack 27
  6358                           
  6359                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;incstack = 0
  6363  0058F0  C001  F007         	movff	mem_cpy@dst,mem_cpy@d
  6364  0058F4  C002  F008         	movff	mem_cpy@dst+1,mem_cpy@d+1
  6365                           
  6366                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  6367  0058F8  C003  F009         	movff	mem_cpy@src,mem_cpy@s
  6368  0058FC  C004  F00A         	movff	mem_cpy@src+1,mem_cpy@s+1
  6369                           
  6370                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6371  005900  D018               	goto	l5462
  6372  005902                     l5454:
  6373                           
  6374                           ;ff.c: 513:   *(int*)d = *(int*)s;
  6375  005902  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6376  005906  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6377  00590A  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6378  00590E  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6379  005912  CFDE FFE6          	movff	postinc2,postinc1
  6380  005916  CFDD FFE5          	movff	postdec2,postdec1
  6381                           
  6382                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  6383  00591A  0E02               	movlw	2
  6384  00591C  2607               	addwf	mem_cpy@d,f,c
  6385  00591E  0E00               	movlw	0
  6386  005920  2208               	addwfc	mem_cpy@d+1,f,c
  6387  005922  0E02               	movlw	2
  6388  005924  2609               	addwf	mem_cpy@s,f,c
  6389  005926  0E00               	movlw	0
  6390  005928  220A               	addwfc	mem_cpy@s+1,f,c
  6391                           
  6392                           ;ff.c: 515:   cnt -= sizeof (int);
  6393  00592A  0E02               	movlw	2
  6394  00592C  5E05               	subwf	mem_cpy@cnt,f,c
  6395  00592E  0E00               	movlw	0
  6396  005930  5A06               	subwfb	mem_cpy@cnt+1,f,c
  6397  005932                     l5462:
  6398                           
  6399                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6400  005932  5006               	movf	mem_cpy@cnt+1,w,c
  6401  005934  E1E6               	bnz	l5454
  6402  005936  0E02               	movlw	2
  6403  005938  5C05               	subwf	mem_cpy@cnt,w,c
  6404  00593A  A0D8               	btfss	status,0,c
  6405  00593C  D00F               	goto	l5470
  6406  00593E  D7E1               	goto	l5454
  6407  005940                     l5464:
  6408                           
  6409                           ;ff.c: 519:   *d++ = *s++;
  6410  005940  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6411  005944  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6412  005948  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6413  00594C  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6414  005950  CFDF FFE7          	movff	indf2,indf1
  6415  005954  4A09               	infsnz	mem_cpy@s,f,c
  6416  005956  2A0A               	incf	mem_cpy@s+1,f,c
  6417  005958  4A07               	infsnz	mem_cpy@d,f,c
  6418  00595A  2A08               	incf	mem_cpy@d+1,f,c
  6419  00595C                     l5470:
  6420                           
  6421                           ;ff.c: 518:  while (cnt--)
  6422  00595C  0605               	decf	mem_cpy@cnt,f,c
  6423  00595E  A0D8               	btfss	status,0,c
  6424  005960  0606               	decf	mem_cpy@cnt+1,f,c
  6425  005962  2805               	incf	mem_cpy@cnt,w,c
  6426  005964  E1ED               	bnz	l5464
  6427  005966  2806               	incf	mem_cpy@cnt+1,w,c
  6428  005968  B4D8               	btfsc	status,2,c
  6429  00596A  0012               	return	
  6430  00596C  D7E9               	goto	l5464
  6431  00596E                     __end_of_mem_cpy:
  6432                           	opt callstack 0
  6433                           
  6434 ;; *************** function _dir_alloc *****************
  6435 ;; Defined at:
  6436 ;;		line 1199 in file "ff.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  dp              2   32[BANK0 ] PTR struct .
  6439 ;;		 -> f_open@dj(22), 
  6440 ;;  nent            2   34[BANK0 ] unsigned short 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  n               2   39[BANK0 ] unsigned short 
  6443 ;;  res             1   41[BANK0 ] enum E93
  6444 ;; Return value:  Size  Location     Type
  6445 ;;                  1    wreg      enum E93
  6446 ;; Registers used:
  6447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6453 ;;      Params:         0       4       0       0       0       0       0       0       0
  6454 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6455 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6456 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6457 ;;Total ram usage:       10 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:   11
  6460 ;; This function calls:
  6461 ;;		_dir_next
  6462 ;;		_dir_sdi
  6463 ;;		_move_window
  6464 ;; This function is called by:
  6465 ;;		_dir_register
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text21
  6470  004EB8                     __ptext21:
  6471                           	opt callstack 0
  6472  004EB8                     _dir_alloc:
  6473                           	opt callstack 16
  6474                           
  6475                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  6476                           
  6477                           ;incstack = 0
  6478  004EB8  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  6479  004EBC  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  6480  004EC0  0E00               	movlw	0
  6481  004EC2  6E59               	movwf	dir_sdi@idx+1,c
  6482  004EC4  0E00               	movlw	0
  6483  004EC6  6E58               	movwf	dir_sdi@idx,c
  6484  004EC8  ECC7  F01C         	call	_dir_sdi	;wreg free
  6485  004ECC  0100               	movlb	0	; () banked
  6486  004ECE  6F89               	movwf	dir_alloc@res& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;ff.c: 1209:  if (res == FR_OK) {
  6490  004ED0  5189               	movf	dir_alloc@res& (0+255),w,b
  6491  004ED2  A4D8               	btfss	status,2,c
  6492  004ED4  D061               	goto	u6990
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;ff.c: 1210:   n = 0;
  6496  004ED6  0E00               	movlw	0
  6497  004ED8  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6498  004EDA  0E00               	movlw	0
  6499  004EDC  6F87               	movwf	dir_alloc@n& (0+255),b
  6500  004EDE                     l5508:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  6504  004EDE  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  6505  004EE2  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  6506  004EE6  CFDE F030          	movff	postinc2,move_window@fs
  6507  004EEA  CFDD F031          	movff	postdec2,move_window@fs+1
  6508  004EEE  EE20 F00E          	lfsr	2,14
  6509  004EF2  5180               	movf	dir_alloc@dp& (0+255),w,b
  6510  004EF4  26D9               	addwf	fsr2l,f,c
  6511  004EF6  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6512  004EF8  22DA               	addwfc	fsr2h,f,c
  6513  004EFA  CFDE F032          	movff	postinc2,move_window@sector
  6514  004EFE  CFDE F033          	movff	postinc2,move_window@sector+1
  6515  004F02  CFDE F034          	movff	postinc2,move_window@sector+2
  6516  004F06  CFDE F035          	movff	postinc2,move_window@sector+3
  6517  004F0A  EC1A  F02B         	call	_move_window	;wreg free
  6518  004F0E  0100               	movlb	0	; () banked
  6519  004F10  6F89               	movwf	dir_alloc@res& (0+255),b
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;ff.c: 1213:    if (res != FR_OK) break;
  6523  004F12  5189               	movf	dir_alloc@res& (0+255),w,b
  6524  004F14  A4D8               	btfss	status,2,c
  6525  004F16  D040               	goto	u6990
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  6529  004F18  EE20 F012          	lfsr	2,18
  6530  004F1C  5180               	movf	dir_alloc@dp& (0+255),w,b
  6531  004F1E  26D9               	addwf	fsr2l,f,c
  6532  004F20  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6533  004F22  22DA               	addwfc	fsr2h,f,c
  6534  004F24  CFDE F084          	movff	postinc2,??_dir_alloc
  6535  004F28  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6536  004F2C  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6537  004F30  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6538  004F34  0EE5               	movlw	229
  6539  004F36  18DE               	xorwf	postinc2,w,c
  6540  004F38  B4D8               	btfsc	status,2,c
  6541  004F3A  D011               	goto	u6970
  6542                           
  6543                           ; BSR set to: 0
  6544  004F3C  EE20 F012          	lfsr	2,18
  6545  004F40  5180               	movf	dir_alloc@dp& (0+255),w,b
  6546  004F42  26D9               	addwf	fsr2l,f,c
  6547  004F44  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6548  004F46  22DA               	addwfc	fsr2h,f,c
  6549  004F48  CFDE F084          	movff	postinc2,??_dir_alloc
  6550  004F4C  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6551  004F50  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6552  004F54  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6553  004F58  50DF               	movf	indf2,w,c
  6554  004F5A  A4D8               	btfss	status,2,c
  6555  004F5C  D00A               	goto	l5522
  6556  004F5E                     u6970:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;ff.c: 1215:     if (++n == nent) break;
  6560  004F5E  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  6561  004F60  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  6562  004F62  5182               	movf	dir_alloc@nent& (0+255),w,b
  6563  004F64  1987               	xorwf	dir_alloc@n& (0+255),w,b
  6564  004F66  E109               	bnz	l5524
  6565  004F68  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6566  004F6A  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6567  004F6C  B4D8               	btfsc	status,2,c
  6568  004F6E  D014               	goto	u6990
  6569  004F70  D004               	goto	l5524
  6570  004F72                     l5522:
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;ff.c: 1217:     n = 0;
  6574  004F72  0E00               	movlw	0
  6575  004F74  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6576  004F76  0E00               	movlw	0
  6577  004F78  6F87               	movwf	dir_alloc@n& (0+255),b
  6578  004F7A                     l5524:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;ff.c: 1219:    res = dir_next(dp, 1);
  6582  004F7A  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  6583  004F7E  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  6584  004F82  0E00               	movlw	0
  6585  004F84  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  6586  004F86  0E01               	movlw	1
  6587  004F88  6F6F               	movwf	dir_next@stretch& (0+255),b
  6588  004F8A  EC02  F014         	call	_dir_next	;wreg free
  6589  004F8E  0100               	movlb	0	; () banked
  6590  004F90  6F89               	movwf	dir_alloc@res& (0+255),b
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;ff.c: 1220:   } while (res == FR_OK);
  6594  004F92  5189               	movf	dir_alloc@res& (0+255),w,b
  6595  004F94  B4D8               	btfsc	status,2,c
  6596  004F96  D7A3               	goto	l5508
  6597  004F98                     u6990:
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  6601  004F98  0E04               	movlw	4
  6602  004F9A  1989               	xorwf	dir_alloc@res& (0+255),w,b
  6603  004F9C  A4D8               	btfss	status,2,c
  6604  004F9E  D002               	goto	l391
  6605                           
  6606                           ; BSR set to: 0
  6607  004FA0  0E07               	movlw	7
  6608  004FA2  6F89               	movwf	dir_alloc@res& (0+255),b
  6609  004FA4                     l391:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;ff.c: 1223:  return res;
  6613  004FA4  5189               	movf	dir_alloc@res& (0+255),w,b
  6614                           
  6615                           ; BSR set to: 0
  6616  004FA6  0012               	return		;funcret
  6617  004FA8                     __end_of_dir_alloc:
  6618                           	opt callstack 0
  6619                           
  6620 ;; *************** function _dir_sdi *****************
  6621 ;; Defined at:
  6622 ;;		line 1080 in file "ff.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  dp              2   85[COMRAM] PTR struct .
  6625 ;;		 -> f_open@dj(22), 
  6626 ;;  idx             2   87[COMRAM] unsigned short 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  clst            4   13[BANK0 ] unsigned long 
  6629 ;;  sect            4    9[BANK0 ] unsigned long 
  6630 ;;  ic              2    7[BANK0 ] unsigned short 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      enum E93
  6633 ;; Registers used:
  6634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6640 ;;      Params:         4       0       0       0       0       0       0       0       0
  6641 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6642 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6643 ;;      Totals:         4      17       0       0       0       0       0       0       0
  6644 ;;Total ram usage:       21 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    9
  6647 ;; This function calls:
  6648 ;;		_clust2sect
  6649 ;;		_get_fat
  6650 ;; This function is called by:
  6651 ;;		_dir_alloc
  6652 ;;		_dir_find
  6653 ;;		_follow_path
  6654 ;; This function uses a non-reentrant model
  6655 ;;
  6656                           
  6657                           	psect	text22
  6658  00398E                     __ptext22:
  6659                           	opt callstack 0
  6660  00398E                     _dir_sdi:
  6661                           	opt callstack 18
  6662                           
  6663                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;incstack = 0
  6667  00398E  EE20 F004          	lfsr	2,4
  6668  003992  5056               	movf	dir_sdi@dp,w,c
  6669  003994  26D9               	addwf	fsr2l,f,c
  6670  003996  5057               	movf	dir_sdi@dp+1,w,c
  6671  003998  22DA               	addwfc	fsr2h,f,c
  6672  00399A  C058  FFDE         	movff	dir_sdi@idx,postinc2
  6673  00399E  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  6674                           
  6675                           ;ff.c: 1090:  clst = dp->sclust;
  6676  0039A2  EE20 F006          	lfsr	2,6
  6677  0039A6  5056               	movf	dir_sdi@dp,w,c
  6678  0039A8  26D9               	addwf	fsr2l,f,c
  6679  0039AA  5057               	movf	dir_sdi@dp+1,w,c
  6680  0039AC  22DA               	addwfc	fsr2h,f,c
  6681  0039AE  CFDE F06D          	movff	postinc2,dir_sdi@clst
  6682  0039B2  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  6683  0039B6  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  6684  0039BA  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  6685                           
  6686                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  6687  0039BE  0100               	movlb	0	; () banked
  6688  0039C0  056D               	decf	dir_sdi@clst& (0+255),w,b
  6689  0039C2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6690  0039C4  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6691  0039C6  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6692  0039C8  B4D8               	btfsc	status,2,c
  6693  0039CA  D014               	goto	u6380
  6694                           
  6695                           ; BSR set to: 0
  6696  0039CC  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6697  0039D0  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6698  0039D4  EE10 F012          	lfsr	1,18
  6699  0039D8  50DE               	movf	postinc2,w,c
  6700  0039DA  26E1               	addwf	fsr1l,f,c
  6701  0039DC  50DD               	movf	postdec2,w,c
  6702  0039DE  22E2               	addwfc	fsr1h,f,c
  6703  0039E0  50E6               	movf	postinc1,w,c
  6704  0039E2  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6705  0039E4  50E6               	movf	postinc1,w,c
  6706  0039E6  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6707  0039E8  50E6               	movf	postinc1,w,c
  6708  0039EA  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6709  0039EC  50E6               	movf	postinc1,w,c
  6710  0039EE  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6711  0039F0  A0D8               	btfss	status,0,c
  6712  0039F2  D002               	goto	l5188
  6713  0039F4                     u6380:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;ff.c: 1092:   return FR_INT_ERR;
  6717  0039F4  0E02               	movlw	2
  6718  0039F6  0012               	return	
  6719  0039F8                     l5188:
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  6723  0039F8  516D               	movf	dir_sdi@clst& (0+255),w,b
  6724  0039FA  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6725  0039FC  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6726  0039FE  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6727  003A00  A4D8               	btfss	status,2,c
  6728  003A02  D022               	goto	l5194
  6729                           
  6730                           ; BSR set to: 0
  6731  003A04  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6732  003A08  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6733  003A0C  CFDE F060          	movff	postinc2,??_dir_sdi
  6734  003A10  CFDD F061          	movff	postdec2,??_dir_sdi+1
  6735  003A14  C060  FFD9         	movff	??_dir_sdi,fsr2l
  6736  003A18  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  6737  003A1C  0E03               	movlw	3
  6738  003A1E  18DE               	xorwf	postinc2,w,c
  6739  003A20  A4D8               	btfss	status,2,c
  6740  003A22  D012               	goto	l5194
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  6744  003A24  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6745  003A28  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6746  003A2C  EE10 F022          	lfsr	1,34
  6747  003A30  50DE               	movf	postinc2,w,c
  6748  003A32  26E1               	addwf	fsr1l,f,c
  6749  003A34  50DD               	movf	postdec2,w,c
  6750  003A36  22E2               	addwfc	fsr1h,f,c
  6751  003A38  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  6752  003A3C  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  6753  003A40  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  6754  003A44  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  6755  003A48                     l5194:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;ff.c: 1096:  if (clst == 0) {
  6759  003A48  516D               	movf	dir_sdi@clst& (0+255),w,b
  6760  003A4A  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6761  003A4C  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6762  003A4E  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6763  003A50  A4D8               	btfss	status,2,c
  6764  003A52  D023               	goto	l5204
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  6768  003A54  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6769  003A58  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6770  003A5C  EE10 F008          	lfsr	1,8
  6771  003A60  50DE               	movf	postinc2,w,c
  6772  003A62  26E1               	addwf	fsr1l,f,c
  6773  003A64  50DD               	movf	postdec2,w,c
  6774  003A66  22E2               	addwfc	fsr1h,f,c
  6775  003A68  50E6               	movf	postinc1,w,c
  6776  003A6A  5C58               	subwf	dir_sdi@idx,w,c
  6777  003A6C  50E6               	movf	postinc1,w,c
  6778  003A6E  5859               	subwfb	dir_sdi@idx+1,w,c
  6779  003A70  B0D8               	btfsc	status,0,c
  6780  003A72  D7C0               	goto	u6380
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  6784  003A74  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6785  003A78  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6786  003A7C  EE10 F022          	lfsr	1,34
  6787  003A80  50DE               	movf	postinc2,w,c
  6788  003A82  26E1               	addwf	fsr1l,f,c
  6789  003A84  50DD               	movf	postdec2,w,c
  6790  003A86  22E2               	addwfc	fsr1h,f,c
  6791  003A88  CFE6 F069          	movff	postinc1,dir_sdi@sect
  6792  003A8C  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  6793  003A90  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  6794  003A94  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  6795                           
  6796                           ;ff.c: 1100:  }
  6797  003A98  D079               	goto	l5226
  6798  003A9A                     l5204:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  6802  003A9A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6803  003A9E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6804  003AA2  EE10 F002          	lfsr	1,2
  6805  003AA6  50DE               	movf	postinc2,w,c
  6806  003AA8  26E1               	addwf	fsr1l,f,c
  6807  003AAA  50DD               	movf	postdec2,w,c
  6808  003AAC  22E2               	addwfc	fsr1h,f,c
  6809  003AAE  50E7               	movf	indf1,w,c
  6810  003AB0  6F60               	movwf	??_dir_sdi& (0+255),b
  6811  003AB2  5160               	movf	??_dir_sdi& (0+255),w,b
  6812  003AB4  0D10               	mullw	16
  6813  003AB6  CFF3 F067          	movff	prodl,dir_sdi@ic
  6814  003ABA  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  6815                           
  6816                           ;ff.c: 1103:   while (idx >= ic) {
  6817  003ABE  D046               	goto	l349
  6818  003AC0                     l5206:
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  6822  003AC0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6823  003AC4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6824  003AC8  CFDE F03B          	movff	postinc2,get_fat@fs
  6825  003ACC  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6826  003AD0  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  6827  003AD4  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  6828  003AD8  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  6829  003ADC  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  6830  003AE0  EC05  F016         	call	_get_fat	;wreg free
  6831  003AE4  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  6832  003AE8  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  6833  003AEC  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  6834  003AF0  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  6835                           
  6836                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6837  003AF4  0100               	movlb	0	; () banked
  6838  003AF6  296D               	incf	dir_sdi@clst& (0+255),w,b
  6839  003AF8  E109               	bnz	l5214
  6840  003AFA  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6841  003AFC  E107               	bnz	l5214
  6842  003AFE  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6843  003B00  E105               	bnz	l5214
  6844  003B02  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6845  003B04  A4D8               	btfss	status,2,c
  6846  003B06  D002               	goto	l5214
  6847                           
  6848                           ; BSR set to: 0
  6849  003B08  0E01               	movlw	1
  6850  003B0A  0012               	return	
  6851  003B0C                     l5214:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  6855  003B0C  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6856  003B0E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6857  003B10  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6858  003B12  E104               	bnz	u6440
  6859  003B14  0E02               	movlw	2
  6860  003B16  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6861  003B18  A0D8               	btfss	status,0,c
  6862  003B1A  D76C               	goto	u6380
  6863  003B1C                     u6440:
  6864                           
  6865                           ; BSR set to: 0
  6866  003B1C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6867  003B20  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6868  003B24  EE10 F012          	lfsr	1,18
  6869  003B28  50DE               	movf	postinc2,w,c
  6870  003B2A  26E1               	addwf	fsr1l,f,c
  6871  003B2C  50DD               	movf	postdec2,w,c
  6872  003B2E  22E2               	addwfc	fsr1h,f,c
  6873  003B30  50E6               	movf	postinc1,w,c
  6874  003B32  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6875  003B34  50E6               	movf	postinc1,w,c
  6876  003B36  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6877  003B38  50E6               	movf	postinc1,w,c
  6878  003B3A  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6879  003B3C  50E6               	movf	postinc1,w,c
  6880  003B3E  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6881  003B40  B0D8               	btfsc	status,0,c
  6882  003B42  D758               	goto	u6380
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;ff.c: 1108:    idx -= ic;
  6886  003B44  5167               	movf	dir_sdi@ic& (0+255),w,b
  6887  003B46  5E58               	subwf	dir_sdi@idx,f,c
  6888  003B48  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6889  003B4A  5A59               	subwfb	dir_sdi@idx+1,f,c
  6890  003B4C                     l349:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;ff.c: 1103:   while (idx >= ic) {
  6894  003B4C  5167               	movf	dir_sdi@ic& (0+255),w,b
  6895  003B4E  5C58               	subwf	dir_sdi@idx,w,c
  6896  003B50  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6897  003B52  5859               	subwfb	dir_sdi@idx+1,w,c
  6898  003B54  B0D8               	btfsc	status,0,c
  6899  003B56  D7B4               	goto	l5206
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  6903  003B58  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6904  003B5C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6905  003B60  CFDE F00D          	movff	postinc2,clust2sect@fs
  6906  003B64  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6907  003B68  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6908  003B6C  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6909  003B70  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6910  003B74  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6911  003B78  EC65  F02A         	call	_clust2sect	;wreg free
  6912  003B7C  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  6913  003B80  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  6914  003B84  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  6915  003B88  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  6916  003B8C                     l5226:
  6917                           
  6918                           ;ff.c: 1112:  dp->clust = clst;
  6919  003B8C  EE20 F00A          	lfsr	2,10
  6920  003B90  5056               	movf	dir_sdi@dp,w,c
  6921  003B92  26D9               	addwf	fsr2l,f,c
  6922  003B94  5057               	movf	dir_sdi@dp+1,w,c
  6923  003B96  22DA               	addwfc	fsr2h,f,c
  6924  003B98  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  6925  003B9C  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  6926  003BA0  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  6927  003BA4  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  6928                           
  6929                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  6930  003BA8  0100               	movlb	0	; () banked
  6931  003BAA  5169               	movf	dir_sdi@sect& (0+255),w,b
  6932  003BAC  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6933  003BAE  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6934  003BB0  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6935  003BB2  B4D8               	btfsc	status,2,c
  6936  003BB4  D71F               	goto	u6380
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  6940  003BB6  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  6941  003BBA  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6942  003BBE  0E04               	movlw	4
  6943  003BC0  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  6944  003BC2                     u6485:
  6945  003BC2  90D8               	bcf	status,0,c
  6946  003BC4  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  6947  003BC6  3360               	rrcf	??_dir_sdi& (0+255),f,b
  6948  003BC8  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  6949  003BCA  D7FB               	goto	u6485
  6950  003BCC  5160               	movf	??_dir_sdi& (0+255),w,b
  6951  003BCE  2569               	addwf	dir_sdi@sect& (0+255),w,b
  6952  003BD0  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  6953  003BD2  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6954  003BD4  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6955  003BD6  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  6956  003BD8  0E00               	movlw	0
  6957  003BDA  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6958  003BDC  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  6959  003BDE  0E00               	movlw	0
  6960  003BE0  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6961  003BE2  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  6962  003BE4  EE20 F00E          	lfsr	2,14
  6963  003BE8  5056               	movf	dir_sdi@dp,w,c
  6964  003BEA  26D9               	addwf	fsr2l,f,c
  6965  003BEC  5057               	movf	dir_sdi@dp+1,w,c
  6966  003BEE  22DA               	addwfc	fsr2h,f,c
  6967  003BF0  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  6968  003BF4  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  6969  003BF8  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  6970  003BFC  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  6971                           
  6972                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6973  003C00  0E0F               	movlw	15
  6974  003C02  1458               	andwf	dir_sdi@idx,w,c
  6975  003C04  6F60               	movwf	??_dir_sdi& (0+255),b
  6976  003C06  0E00               	movlw	0
  6977  003C08  1459               	andwf	dir_sdi@idx+1,w,c
  6978  003C0A  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  6979  003C0C  0E05               	movlw	5
  6980  003C0E                     u6495:
  6981  003C0E  90D8               	bcf	status,0,c
  6982  003C10  3760               	rlcf	??_dir_sdi& (0+255),f,b
  6983  003C12  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  6984  003C14  2EE8               	decfsz	wreg,f,c
  6985  003C16  D7FB               	goto	u6495
  6986  003C18  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6987  003C1C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6988  003C20  CFDE F062          	movff	postinc2,??_dir_sdi+2
  6989  003C24  CFDD F063          	movff	postdec2,??_dir_sdi+3
  6990  003C28  5160               	movf	??_dir_sdi& (0+255),w,b
  6991  003C2A  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6992  003C2C  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6993  003C2E  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6994  003C30  0E2E               	movlw	46
  6995  003C32  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6996  003C34  0E00               	movlw	0
  6997  003C36  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6998  003C38  EE20 F012          	lfsr	2,18
  6999  003C3C  5056               	movf	dir_sdi@dp,w,c
  7000  003C3E  26D9               	addwf	fsr2l,f,c
  7001  003C40  5057               	movf	dir_sdi@dp+1,w,c
  7002  003C42  22DA               	addwfc	fsr2h,f,c
  7003  003C44  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  7004  003C48  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;ff.c: 1117:  return FR_OK;
  7008  003C4C  0E00               	movlw	0
  7009                           
  7010                           ; BSR set to: 0
  7011  003C4E  0012               	return		;funcret
  7012  003C50                     __end_of_dir_sdi:
  7013                           	opt callstack 0
  7014                           
  7015 ;; *************** function _dir_next *****************
  7016 ;; Defined at:
  7017 ;;		line 1128 in file "ff.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  dp              2   13[BANK0 ] PTR struct .
  7020 ;;		 -> f_open@dj(22), 
  7021 ;;  stretch         2   15[BANK0 ] int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  clst            4   28[BANK0 ] unsigned long 
  7024 ;;  i               2   26[BANK0 ] unsigned short 
  7025 ;;  c               2   24[BANK0 ] unsigned short 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      enum E93
  7028 ;; Registers used:
  7029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7035 ;;      Params:         0       4       0       0       0       0       0       0       0
  7036 ;;      Locals:         0       8       0       0       0       0       0       0       0
  7037 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7038 ;;      Totals:         0      19       0       0       0       0       0       0       0
  7039 ;;Total ram usage:       19 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:   10
  7042 ;; This function calls:
  7043 ;;		_clust2sect
  7044 ;;		_create_chain
  7045 ;;		_get_fat
  7046 ;;		_mem_set
  7047 ;;		_sync_window
  7048 ;; This function is called by:
  7049 ;;		_dir_alloc
  7050 ;;		_dir_find
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text23
  7055  002804                     __ptext23:
  7056                           	opt callstack 0
  7057  002804                     _dir_next:
  7058                           	opt callstack 16
  7059                           
  7060                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;incstack = 0
  7064  002804  0100               	movlb	0	; () banked
  7065  002806  EE20 F004          	lfsr	2,4
  7066  00280A  516D               	movf	dir_next@dp& (0+255),w,b
  7067  00280C  26D9               	addwf	fsr2l,f,c
  7068  00280E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7069  002810  22DA               	addwfc	fsr2h,f,c
  7070  002812  CFDE F071          	movff	postinc2,??_dir_next
  7071  002816  CFDD F072          	movff	postdec2,??_dir_next+1
  7072  00281A  0E01               	movlw	1
  7073  00281C  2571               	addwf	??_dir_next& (0+255),w,b
  7074  00281E  6F7A               	movwf	dir_next@i& (0+255),b
  7075  002820  0E00               	movlw	0
  7076  002822  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  7077  002824  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  7081  002826  517A               	movf	dir_next@i& (0+255),w,b
  7082  002828  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  7083  00282A  B4D8               	btfsc	status,2,c
  7084  00282C  D00C               	goto	u6510
  7085                           
  7086                           ; BSR set to: 0
  7087  00282E  EE20 F00E          	lfsr	2,14
  7088  002832  516D               	movf	dir_next@dp& (0+255),w,b
  7089  002834  26D9               	addwf	fsr2l,f,c
  7090  002836  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7091  002838  22DA               	addwfc	fsr2h,f,c
  7092  00283A  50DE               	movf	postinc2,w,c
  7093  00283C  10DE               	iorwf	postinc2,w,c
  7094  00283E  10DE               	iorwf	postinc2,w,c
  7095  002840  10DE               	iorwf	postinc2,w,c
  7096  002842  A4D8               	btfss	status,2,c
  7097  002844  D002               	goto	l5250
  7098  002846                     u6510:
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;ff.c: 1142:   return FR_NO_FILE;
  7102  002846  0E04               	movlw	4
  7103  002848  0012               	return	
  7104  00284A                     l5250:
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  7108  00284A  0E0F               	movlw	15
  7109  00284C  157A               	andwf	dir_next@i& (0+255),w,b
  7110  00284E  6F71               	movwf	??_dir_next& (0+255),b
  7111  002850  0E00               	movlw	0
  7112  002852  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  7113  002854  6F72               	movwf	(??_dir_next+1)& (0+255),b
  7114  002856  5171               	movf	??_dir_next& (0+255),w,b
  7115  002858  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  7116  00285A  A4D8               	btfss	status,2,c
  7117  00285C  D1A4               	goto	l5336
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;ff.c: 1145:   dp->sect++;
  7121  00285E  EE20 F00E          	lfsr	2,14
  7122  002862  516D               	movf	dir_next@dp& (0+255),w,b
  7123  002864  26D9               	addwf	fsr2l,f,c
  7124  002866  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7125  002868  22DA               	addwfc	fsr2h,f,c
  7126  00286A  2ADE               	incf	postinc2,f,c
  7127  00286C  0E00               	movlw	0
  7128  00286E  22DE               	addwfc	postinc2,f,c
  7129  002870  22DE               	addwfc	postinc2,f,c
  7130  002872  22DE               	addwfc	postinc2,f,c
  7131                           
  7132                           ;ff.c: 1147:   if (!dp->clust) {
  7133  002874  EE20 F00A          	lfsr	2,10
  7134  002878  516D               	movf	dir_next@dp& (0+255),w,b
  7135  00287A  26D9               	addwf	fsr2l,f,c
  7136  00287C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7137  00287E  22DA               	addwfc	fsr2h,f,c
  7138  002880  50DE               	movf	postinc2,w,c
  7139  002882  10DE               	iorwf	postinc2,w,c
  7140  002884  10DE               	iorwf	postinc2,w,c
  7141  002886  10DE               	iorwf	postinc2,w,c
  7142  002888  A4D8               	btfss	status,2,c
  7143  00288A  D011               	goto	l5260
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  7147  00288C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7148  002890  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7149  002894  EE10 F008          	lfsr	1,8
  7150  002898  50DE               	movf	postinc2,w,c
  7151  00289A  26E1               	addwf	fsr1l,f,c
  7152  00289C  50DD               	movf	postdec2,w,c
  7153  00289E  22E2               	addwfc	fsr1h,f,c
  7154  0028A0  50E6               	movf	postinc1,w,c
  7155  0028A2  5D7A               	subwf	dir_next@i& (0+255),w,b
  7156  0028A4  50E6               	movf	postinc1,w,c
  7157  0028A6  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  7158  0028A8  B0D8               	btfsc	status,0,c
  7159  0028AA  D7CD               	goto	u6510
  7160  0028AC  D17C               	goto	l5336
  7161  0028AE                     l5260:
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  7165  0028AE  C07A  F071         	movff	dir_next@i,??_dir_next
  7166  0028B2  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  7167  0028B6  0E04               	movlw	4
  7168  0028B8  6F73               	movwf	(??_dir_next+2)& (0+255),b
  7169  0028BA                     u6555:
  7170  0028BA  90D8               	bcf	status,0,c
  7171  0028BC  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  7172  0028BE  3371               	rrcf	??_dir_next& (0+255),f,b
  7173  0028C0  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  7174  0028C2  D7FB               	goto	u6555
  7175  0028C4  0EFF               	movlw	255
  7176  0028C6  6F74               	movwf	(??_dir_next+3)& (0+255),b
  7177  0028C8  0EFF               	movlw	255
  7178  0028CA  6F75               	movwf	(??_dir_next+4)& (0+255),b
  7179  0028CC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7180  0028D0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7181  0028D4  EE10 F002          	lfsr	1,2
  7182  0028D8  50DE               	movf	postinc2,w,c
  7183  0028DA  26E1               	addwf	fsr1l,f,c
  7184  0028DC  50DD               	movf	postdec2,w,c
  7185  0028DE  22E2               	addwfc	fsr1h,f,c
  7186  0028E0  50E7               	movf	indf1,w,c
  7187  0028E2  6F76               	movwf	(??_dir_next+5)& (0+255),b
  7188  0028E4  6B77               	clrf	(??_dir_next+6)& (0+255),b
  7189  0028E6  5174               	movf	(??_dir_next+3)& (0+255),w,b
  7190  0028E8  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  7191  0028EA  5175               	movf	(??_dir_next+4)& (0+255),w,b
  7192  0028EC  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  7193  0028EE  5171               	movf	??_dir_next& (0+255),w,b
  7194  0028F0  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  7195  0028F2  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7196  0028F4  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  7197  0028F6  5176               	movf	(??_dir_next+5)& (0+255),w,b
  7198  0028F8  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  7199  0028FA  A4D8               	btfss	status,2,c
  7200  0028FC  D154               	goto	l5336
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  7204  0028FE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7205  002902  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7206  002906  CFDE F03B          	movff	postinc2,get_fat@fs
  7207  00290A  CFDD F03C          	movff	postdec2,get_fat@fs+1
  7208  00290E  EE20 F00A          	lfsr	2,10
  7209  002912  516D               	movf	dir_next@dp& (0+255),w,b
  7210  002914  26D9               	addwf	fsr2l,f,c
  7211  002916  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7212  002918  22DA               	addwfc	fsr2h,f,c
  7213  00291A  CFDE F03D          	movff	postinc2,get_fat@clst
  7214  00291E  CFDE F03E          	movff	postinc2,get_fat@clst+1
  7215  002922  CFDE F03F          	movff	postinc2,get_fat@clst+2
  7216  002926  CFDE F040          	movff	postinc2,get_fat@clst+3
  7217  00292A  EC05  F016         	call	_get_fat	;wreg free
  7218  00292E  C03B  F07C         	movff	?_get_fat,dir_next@clst
  7219  002932  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  7220  002936  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  7221  00293A  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  7222                           
  7223                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  7224  00293E  0100               	movlb	0	; () banked
  7225  002940  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  7226  002942  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7227  002944  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7228  002946  E106               	bnz	l5270
  7229  002948  0E02               	movlw	2
  7230  00294A  5D7C               	subwf	dir_next@clst& (0+255),w,b
  7231  00294C  B0D8               	btfsc	status,0,c
  7232  00294E  D002               	goto	l5270
  7233  002950                     u6570:
  7234                           
  7235                           ; BSR set to: 0
  7236  002950  0E02               	movlw	2
  7237  002952  0012               	return	
  7238  002954                     l5270:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7242  002954  297C               	incf	dir_next@clst& (0+255),w,b
  7243  002956  E109               	bnz	l5276
  7244  002958  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  7245  00295A  E107               	bnz	l5276
  7246  00295C  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  7247  00295E  E105               	bnz	l5276
  7248  002960  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  7249  002962  A4D8               	btfss	status,2,c
  7250  002964  D002               	goto	l5276
  7251  002966                     u6580:
  7252  002966  0E01               	movlw	1
  7253  002968  0012               	return	
  7254  00296A                     l5276:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  7258  00296A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7259  00296E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7260  002972  EE10 F012          	lfsr	1,18
  7261  002976  50DE               	movf	postinc2,w,c
  7262  002978  26E1               	addwf	fsr1l,f,c
  7263  00297A  50DD               	movf	postdec2,w,c
  7264  00297C  22E2               	addwfc	fsr1h,f,c
  7265  00297E  50E6               	movf	postinc1,w,c
  7266  002980  5D7C               	subwf	dir_next@clst& (0+255),w,b
  7267  002982  50E6               	movf	postinc1,w,c
  7268  002984  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7269  002986  50E6               	movf	postinc1,w,c
  7270  002988  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7271  00298A  50E6               	movf	postinc1,w,c
  7272  00298C  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7273  00298E  A0D8               	btfss	status,0,c
  7274  002990  D0DB               	goto	l5332
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  7278  002992  516F               	movf	dir_next@stretch& (0+255),w,b
  7279  002994  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  7280  002996  B4D8               	btfsc	status,2,c
  7281  002998  D756               	goto	u6510
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  7285  00299A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7286  00299E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7287  0029A2  CFDE F056          	movff	postinc2,create_chain@fs
  7288  0029A6  CFDD F057          	movff	postdec2,create_chain@fs+1
  7289  0029AA  EE20 F00A          	lfsr	2,10
  7290  0029AE  516D               	movf	dir_next@dp& (0+255),w,b
  7291  0029B0  26D9               	addwf	fsr2l,f,c
  7292  0029B2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7293  0029B4  22DA               	addwfc	fsr2h,f,c
  7294  0029B6  CFDE F058          	movff	postinc2,create_chain@clst
  7295  0029BA  CFDE F059          	movff	postinc2,create_chain@clst+1
  7296  0029BE  CFDE F05A          	movff	postinc2,create_chain@clst+2
  7297  0029C2  CFDE F05B          	movff	postinc2,create_chain@clst+3
  7298  0029C6  EC4A  F01B         	call	_create_chain	;wreg free
  7299  0029CA  C056  F07C         	movff	?_create_chain,dir_next@clst
  7300  0029CE  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  7301  0029D2  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  7302  0029D6  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  7303                           
  7304                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  7305  0029DA  0100               	movlb	0	; () banked
  7306  0029DC  517C               	movf	dir_next@clst& (0+255),w,b
  7307  0029DE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7308  0029E0  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7309  0029E2  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7310  0029E4  A4D8               	btfss	status,2,c
  7311  0029E6  D002               	goto	l5292
  7312                           
  7313                           ; BSR set to: 0
  7314  0029E8  0E07               	movlw	7
  7315  0029EA  0012               	return	
  7316  0029EC                     l5292:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  7320  0029EC  057C               	decf	dir_next@clst& (0+255),w,b
  7321  0029EE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7322  0029F0  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7323  0029F2  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7324  0029F4  B4D8               	btfsc	status,2,c
  7325  0029F6  D7AC               	goto	u6570
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7329  0029F8  297C               	incf	dir_next@clst& (0+255),w,b
  7330  0029FA  E107               	bnz	l5304
  7331  0029FC  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  7332  0029FE  E105               	bnz	l5304
  7333  002A00  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  7334  002A02  E103               	bnz	l5304
  7335  002A04  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  7336  002A06  B4D8               	btfsc	status,2,c
  7337  002A08  D7AE               	goto	u6580
  7338  002A0A                     l5304:
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  7342  002A0A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7343  002A0E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7344  002A12  CFDE F01B          	movff	postinc2,sync_window@fs
  7345  002A16  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7346  002A1A  EC83  F022         	call	_sync_window	;wreg free
  7347  002A1E  0900               	iorlw	0
  7348  002A20  A4D8               	btfss	status,2,c
  7349  002A22  D7A1               	goto	u6580
  7350                           
  7351                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  7352  002A24  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7353  002A28  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7354  002A2C  CFDE F071          	movff	postinc2,??_dir_next
  7355  002A30  CFDD F072          	movff	postdec2,??_dir_next+1
  7356  002A34  0E2E               	movlw	46
  7357  002A36  0100               	movlb	0	; () banked
  7358  002A38  2571               	addwf	??_dir_next& (0+255),w,b
  7359  002A3A  6E01               	movwf	mem_set@dst,c
  7360  002A3C  0E00               	movlw	0
  7361  002A3E  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  7362  002A40  6E02               	movwf	mem_set@dst+1,c
  7363  002A42  0E00               	movlw	0
  7364  002A44  6E04               	movwf	mem_set@val+1,c
  7365  002A46  0E00               	movlw	0
  7366  002A48  6E03               	movwf	mem_set@val,c
  7367  002A4A  0E02               	movlw	2
  7368  002A4C  6E06               	movwf	mem_set@cnt+1,c
  7369  002A4E  0E00               	movlw	0
  7370  002A50  6E05               	movwf	mem_set@cnt,c
  7371  002A52  EC81  F02E         	call	_mem_set	;wreg free
  7372                           
  7373                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  7374  002A56  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7375  002A5A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7376  002A5E  CFDE F00D          	movff	postinc2,clust2sect@fs
  7377  002A62  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7378  002A66  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7379  002A6A  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7380  002A6E  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7381  002A72  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7382  002A76  EC65  F02A         	call	_clust2sect	;wreg free
  7383  002A7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7384  002A7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7385  002A82  EE10 F02A          	lfsr	1,42
  7386  002A86  50DE               	movf	postinc2,w,c
  7387  002A88  26E1               	addwf	fsr1l,f,c
  7388  002A8A  50DD               	movf	postdec2,w,c
  7389  002A8C  22E2               	addwfc	fsr1h,f,c
  7390  002A8E  C00D  FFE6         	movff	?_clust2sect,postinc1
  7391  002A92  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  7392  002A96  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  7393  002A9A  C010  FFE6         	movff	?_clust2sect+3,postinc1
  7394                           
  7395                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  7396  002A9E  0E00               	movlw	0
  7397  002AA0  0100               	movlb	0	; () banked
  7398  002AA2  6F79               	movwf	(dir_next@c+1)& (0+255),b
  7399  002AA4  0E00               	movlw	0
  7400  002AA6  6F78               	movwf	dir_next@c& (0+255),b
  7401  002AA8  D02B               	goto	l5328
  7402  002AAA                     l5316:
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;ff.c: 1168:       dp->fs->wflag = 1;
  7406  002AAA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7407  002AAE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7408  002AB2  EE10 F004          	lfsr	1,4
  7409  002AB6  50DE               	movf	postinc2,w,c
  7410  002AB8  26E1               	addwf	fsr1l,f,c
  7411  002ABA  50DD               	movf	postdec2,w,c
  7412  002ABC  22E2               	addwfc	fsr1h,f,c
  7413  002ABE  0E01               	movlw	1
  7414  002AC0  6EE7               	movwf	indf1,c
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  7418  002AC2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7419  002AC6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7420  002ACA  CFDE F01B          	movff	postinc2,sync_window@fs
  7421  002ACE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7422  002AD2  EC83  F022         	call	_sync_window	;wreg free
  7423  002AD6  0900               	iorlw	0
  7424  002AD8  A4D8               	btfss	status,2,c
  7425  002ADA  D745               	goto	u6580
  7426                           
  7427                           ;ff.c: 1170:       dp->fs->winsect++;
  7428  002ADC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7429  002AE0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7430  002AE4  EE10 F02A          	lfsr	1,42
  7431  002AE8  50DE               	movf	postinc2,w,c
  7432  002AEA  26E1               	addwf	fsr1l,f,c
  7433  002AEC  50DD               	movf	postdec2,w,c
  7434  002AEE  22E2               	addwfc	fsr1h,f,c
  7435  002AF0  2AE6               	incf	postinc1,f,c
  7436  002AF2  0E00               	movlw	0
  7437  002AF4  22E6               	addwfc	postinc1,f,c
  7438  002AF6  22E6               	addwfc	postinc1,f,c
  7439  002AF8  22E6               	addwfc	postinc1,f,c
  7440                           
  7441                           ;ff.c: 1171:      }
  7442  002AFA  0100               	movlb	0	; () banked
  7443  002AFC  4B78               	infsnz	dir_next@c& (0+255),f,b
  7444  002AFE  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  7445  002B00                     l5328:
  7446                           
  7447                           ; BSR set to: 0
  7448  002B00  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7449  002B04  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7450  002B08  EE10 F002          	lfsr	1,2
  7451  002B0C  50DE               	movf	postinc2,w,c
  7452  002B0E  26E1               	addwf	fsr1l,f,c
  7453  002B10  50DD               	movf	postdec2,w,c
  7454  002B12  22E2               	addwfc	fsr1h,f,c
  7455  002B14  50E7               	movf	indf1,w,c
  7456  002B16  6F71               	movwf	??_dir_next& (0+255),b
  7457  002B18  6B72               	clrf	(??_dir_next+1)& (0+255),b
  7458  002B1A  5171               	movf	??_dir_next& (0+255),w,b
  7459  002B1C  5D78               	subwf	dir_next@c& (0+255),w,b
  7460  002B1E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7461  002B20  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  7462  002B22  A0D8               	btfss	status,0,c
  7463  002B24  D7C2               	goto	l5316
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;ff.c: 1172:      dp->fs->winsect -= c;
  7467  002B26  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7468  002B2A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7469  002B2E  EE10 F02A          	lfsr	1,42
  7470  002B32  50DE               	movf	postinc2,w,c
  7471  002B34  26E1               	addwf	fsr1l,f,c
  7472  002B36  50DD               	movf	postdec2,w,c
  7473  002B38  22E2               	addwfc	fsr1h,f,c
  7474  002B3A  5178               	movf	dir_next@c& (0+255),w,b
  7475  002B3C  5EE6               	subwf	postinc1,f,c
  7476  002B3E  5179               	movf	(dir_next@c+1)& (0+255),w,b
  7477  002B40  5AE6               	subwfb	postinc1,f,c
  7478  002B42  0E00               	movlw	0
  7479  002B44  5AE6               	subwfb	postinc1,f,c
  7480  002B46  5AE6               	subwfb	postinc1,f,c
  7481  002B48                     l5332:
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;ff.c: 1178:     dp->clust = clst;
  7485  002B48  EE20 F00A          	lfsr	2,10
  7486  002B4C  516D               	movf	dir_next@dp& (0+255),w,b
  7487  002B4E  26D9               	addwf	fsr2l,f,c
  7488  002B50  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7489  002B52  22DA               	addwfc	fsr2h,f,c
  7490  002B54  C07C  FFDE         	movff	dir_next@clst,postinc2
  7491  002B58  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  7492  002B5C  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  7493  002B60  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  7497  002B64  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7498  002B68  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7499  002B6C  CFDE F00D          	movff	postinc2,clust2sect@fs
  7500  002B70  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7501  002B74  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7502  002B78  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7503  002B7C  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7504  002B80  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7505  002B84  EC65  F02A         	call	_clust2sect	;wreg free
  7506  002B88  0100               	movlb	0	; () banked
  7507  002B8A  EE20 F00E          	lfsr	2,14
  7508  002B8E  516D               	movf	dir_next@dp& (0+255),w,b
  7509  002B90  26D9               	addwf	fsr2l,f,c
  7510  002B92  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7511  002B94  22DA               	addwfc	fsr2h,f,c
  7512  002B96  C00D  FFDE         	movff	?_clust2sect,postinc2
  7513  002B9A  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  7514  002B9E  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  7515  002BA2  C010  FFDE         	movff	?_clust2sect+3,postinc2
  7516  002BA6                     l5336:
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;ff.c: 1184:  dp->index = (WORD)i;
  7520  002BA6  EE20 F004          	lfsr	2,4
  7521  002BAA  516D               	movf	dir_next@dp& (0+255),w,b
  7522  002BAC  26D9               	addwf	fsr2l,f,c
  7523  002BAE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7524  002BB0  22DA               	addwfc	fsr2h,f,c
  7525  002BB2  C07A  FFDE         	movff	dir_next@i,postinc2
  7526  002BB6  C07B  FFDD         	movff	dir_next@i+1,postdec2
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7530  002BBA  0E0F               	movlw	15
  7531  002BBC  157A               	andwf	dir_next@i& (0+255),w,b
  7532  002BBE  6F71               	movwf	??_dir_next& (0+255),b
  7533  002BC0  0E00               	movlw	0
  7534  002BC2  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  7535  002BC4  6F72               	movwf	(??_dir_next+1)& (0+255),b
  7536  002BC6  0E05               	movlw	5
  7537  002BC8                     u6675:
  7538  002BC8  90D8               	bcf	status,0,c
  7539  002BCA  3771               	rlcf	??_dir_next& (0+255),f,b
  7540  002BCC  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  7541  002BCE  2EE8               	decfsz	wreg,f,c
  7542  002BD0  D7FB               	goto	u6675
  7543  002BD2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7544  002BD6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7545  002BDA  CFDE F073          	movff	postinc2,??_dir_next+2
  7546  002BDE  CFDD F074          	movff	postdec2,??_dir_next+3
  7547  002BE2  5171               	movf	??_dir_next& (0+255),w,b
  7548  002BE4  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7549  002BE6  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7550  002BE8  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7551  002BEA  0E2E               	movlw	46
  7552  002BEC  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7553  002BEE  0E00               	movlw	0
  7554  002BF0  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7555  002BF2  EE20 F012          	lfsr	2,18
  7556  002BF6  516D               	movf	dir_next@dp& (0+255),w,b
  7557  002BF8  26D9               	addwf	fsr2l,f,c
  7558  002BFA  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7559  002BFC  22DA               	addwfc	fsr2h,f,c
  7560  002BFE  C073  FFDE         	movff	??_dir_next+2,postinc2
  7561  002C02  C074  FFDD         	movff	??_dir_next+3,postdec2
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;ff.c: 1187:  return FR_OK;
  7565  002C06  0E00               	movlw	0
  7566  002C08  0012               	return		;funcret
  7567  002C0A                     __end_of_dir_next:
  7568                           	opt callstack 0
  7569                           
  7570 ;; *************** function _f_mount *****************
  7571 ;; Defined at:
  7572 ;;		line 2402 in file "ff.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  fs              2   81[COMRAM] PTR struct .
  7575 ;;		 -> FatFs(558), NULL(0), 
  7576 ;;  path            2   83[COMRAM] PTR const unsigned char 
  7577 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7578 ;;  opt             1   85[COMRAM] unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  vol             2   91[COMRAM] int 
  7581 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  7582 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7583 ;;  cfs             2   87[COMRAM] PTR struct .
  7584 ;;		 -> FatFs(558), NULL(0), 
  7585 ;;  res             1   86[COMRAM] enum E93
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      enum E93
  7588 ;; Registers used:
  7589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7595 ;;      Params:         5       0       0       0       0       0       0       0       0
  7596 ;;      Locals:         7       0       0       0       0       0       0       0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7598 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7599 ;;Total ram usage:       12 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:   10
  7602 ;; This function calls:
  7603 ;;		_find_volume
  7604 ;;		_get_ldnumber
  7605 ;; This function is called by:
  7606 ;;		_guardar
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text24
  7611  005584                     __ptext24:
  7612                           	opt callstack 0
  7613  005584                     _f_mount:
  7614                           	opt callstack 19
  7615                           
  7616                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  7617                           
  7618                           ;incstack = 0
  7619  005584  C054  F05A         	movff	f_mount@path,f_mount@rp
  7620  005588  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  7621                           
  7622                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  7623  00558C  0E5A               	movlw	low f_mount@rp
  7624  00558E  6E01               	movwf	get_ldnumber@path,c
  7625  005590  0E00               	movlw	high f_mount@rp
  7626  005592  6E02               	movwf	get_ldnumber@path+1,c
  7627  005594  ECC0  F028         	call	_get_ldnumber	;wreg free
  7628  005598  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  7629  00559C  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  7630                           
  7631                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  7632  0055A0  AE5D               	btfss	f_mount@vol+1,7,c
  7633  0055A2  D002               	goto	l6776
  7634  0055A4  0E0B               	movlw	11
  7635  0055A6  0012               	return	
  7636  0055A8                     l6776:
  7637                           
  7638                           ;ff.c: 2416:  cfs = FatFs[vol];
  7639  0055A8  90D8               	bcf	status,0,c
  7640  0055AA  345C               	rlcf	f_mount@vol,w,c
  7641  0055AC  6ED9               	movwf	fsr2l,c
  7642  0055AE  345D               	rlcf	f_mount@vol+1,w,c
  7643  0055B0  6EDA               	movwf	fsr2h,c
  7644  0055B2  0EDC               	movlw	low ff@FatFs
  7645  0055B4  26D9               	addwf	fsr2l,f,c
  7646  0055B6  0E00               	movlw	high ff@FatFs
  7647  0055B8  22DA               	addwfc	fsr2h,f,c
  7648  0055BA  CFDE F058          	movff	postinc2,f_mount@cfs
  7649  0055BE  CFDD F059          	movff	postdec2,f_mount@cfs+1
  7650                           
  7651                           ;ff.c: 2418:  if (cfs) {
  7652  0055C2  5058               	movf	f_mount@cfs,w,c
  7653  0055C4  1059               	iorwf	f_mount@cfs+1,w,c
  7654  0055C6  B4D8               	btfsc	status,2,c
  7655  0055C8  D006               	goto	l6782
  7656                           
  7657                           ;ff.c: 2425:   cfs->fs_type = 0;
  7658  0055CA  C058  FFD9         	movff	f_mount@cfs,fsr2l
  7659  0055CE  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  7660  0055D2  0E00               	movlw	0
  7661  0055D4  6EDF               	movwf	indf2,c
  7662  0055D6                     l6782:
  7663                           
  7664                           ;ff.c: 2428:  if (fs) {
  7665  0055D6  5052               	movf	f_mount@fs,w,c
  7666  0055D8  1053               	iorwf	f_mount@fs+1,w,c
  7667  0055DA  B4D8               	btfsc	status,2,c
  7668  0055DC  D006               	goto	l6786
  7669                           
  7670                           ;ff.c: 2429:   fs->fs_type = 0;
  7671  0055DE  C052  FFD9         	movff	f_mount@fs,fsr2l
  7672  0055E2  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  7673  0055E6  0E00               	movlw	0
  7674  0055E8  6EDF               	movwf	indf2,c
  7675  0055EA                     l6786:
  7676                           
  7677                           ;ff.c: 2434:  FatFs[vol] = fs;
  7678  0055EA  90D8               	bcf	status,0,c
  7679  0055EC  345C               	rlcf	f_mount@vol,w,c
  7680  0055EE  6ED9               	movwf	fsr2l,c
  7681  0055F0  345D               	rlcf	f_mount@vol+1,w,c
  7682  0055F2  6EDA               	movwf	fsr2h,c
  7683  0055F4  0EDC               	movlw	low ff@FatFs
  7684  0055F6  26D9               	addwf	fsr2l,f,c
  7685  0055F8  0E00               	movlw	high ff@FatFs
  7686  0055FA  22DA               	addwfc	fsr2h,f,c
  7687  0055FC  C052  FFDE         	movff	f_mount@fs,postinc2
  7688  005600  C053  FFDD         	movff	f_mount@fs+1,postdec2
  7689                           
  7690                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  7691  005604  5052               	movf	f_mount@fs,w,c
  7692  005606  1053               	iorwf	f_mount@fs+1,w,c
  7693  005608  B4D8               	btfsc	status,2,c
  7694  00560A  D003               	goto	u9170
  7695  00560C  0456               	decf	f_mount@opt,w,c
  7696  00560E  B4D8               	btfsc	status,2,c
  7697  005610  D002               	goto	l6796
  7698  005612                     u9170:
  7699  005612  0E00               	movlw	0
  7700  005614  0012               	return	
  7701  005616                     l6796:
  7702                           
  7703                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  7704  005616  0E52               	movlw	low f_mount@fs
  7705  005618  6E45               	movwf	find_volume@rfs,c
  7706  00561A  0E00               	movlw	high f_mount@fs
  7707  00561C  6E46               	movwf	find_volume@rfs+1,c
  7708  00561E  0E54               	movlw	low f_mount@path
  7709  005620  6E47               	movwf	find_volume@path,c
  7710  005622  0E00               	movlw	high f_mount@path
  7711  005624  6E48               	movwf	find_volume@path+1,c
  7712  005626  0E00               	movlw	0
  7713  005628  6E49               	movwf	find_volume@wmode,c
  7714  00562A  EC0E  F004         	call	_find_volume	;wreg free
  7715  00562E  6E57               	movwf	f_mount@res,c
  7716                           
  7717                           ;ff.c: 2439:  return res;
  7718  005630  5057               	movf	f_mount@res,w,c
  7719  005632  0012               	return		;funcret
  7720  005634                     __end_of_f_mount:
  7721                           	opt callstack 0
  7722                           
  7723 ;; *************** function _find_volume *****************
  7724 ;; Defined at:
  7725 ;;		line 2203 in file "ff.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  7728 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7729 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  7730 ;;		 -> f_open@path(2), f_mount@path(2), 
  7731 ;;  wmode           1   72[COMRAM] unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  br             16    0[BANK0 ] unsigned long [4]
  7734 ;;  bsect           4   49[BANK0 ] unsigned long 
  7735 ;;  fasize          4   45[BANK0 ] unsigned long 
  7736 ;;  nclst           4   40[BANK0 ] unsigned long 
  7737 ;;  tsect           4   36[BANK0 ] unsigned long 
  7738 ;;  sysect          4   28[BANK0 ] unsigned long 
  7739 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7740 ;;  fs              2   56[BANK0 ] PTR struct .
  7741 ;;		 -> FatFs(558), NULL(0), 
  7742 ;;  i               2   53[BANK0 ] unsigned short 
  7743 ;;  nrsv            2   34[BANK0 ] unsigned short 
  7744 ;;  vol             2   32[BANK0 ] int 
  7745 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7746 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  7747 ;;  fmt             1   55[BANK0 ] unsigned char 
  7748 ;;  stat            1   44[BANK0 ] unsigned char 
  7749 ;; Return value:  Size  Location     Type
  7750 ;;                  1    wreg      enum E93
  7751 ;; Registers used:
  7752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7753 ;; Tracked objects:
  7754 ;;		On entry : 0/0
  7755 ;;		On exit  : 0/0
  7756 ;;		Unchanged: 0/0
  7757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7758 ;;      Params:         5       0       0       0       0       0       0       0       0
  7759 ;;      Locals:         0      58       0       0       0       0       0       0       0
  7760 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7761 ;;      Totals:        13      58       0       0       0       0       0       0       0
  7762 ;;Total ram usage:       71 bytes
  7763 ;; Hardware stack levels used:    1
  7764 ;; Hardware stack levels required when called:    9
  7765 ;; This function calls:
  7766 ;;		___lldiv
  7767 ;;		___lmul
  7768 ;;		_check_fs
  7769 ;;		_disk_initialize
  7770 ;;		_disk_status
  7771 ;;		_get_ldnumber
  7772 ;;		_move_window
  7773 ;; This function is called by:
  7774 ;;		_f_mount
  7775 ;;		_f_open
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text25
  7780  00081C                     __ptext25:
  7781                           	opt callstack 0
  7782  00081C                     _find_volume:
  7783                           	opt callstack 19
  7784                           
  7785                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  7786                           
  7787                           ;incstack = 0
  7788  00081C  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7789  000820  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7790  000824  0E00               	movlw	0
  7791  000826  6EDE               	movwf	postinc2,c
  7792  000828  0E00               	movlw	0
  7793  00082A  6EDD               	movwf	postdec2,c
  7794                           
  7795                           ;ff.c: 2220:  vol = get_ldnumber(path);
  7796  00082C  C047  F001         	movff	find_volume@path,get_ldnumber@path
  7797  000830  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7798  000834  ECC0  F028         	call	_get_ldnumber	;wreg free
  7799  000838  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7800  00083C  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7801                           
  7802                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  7803  000840  0100               	movlb	0	; () banked
  7804  000842  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7805  000844  D002               	goto	l5954
  7806                           
  7807                           ; BSR set to: 0
  7808  000846  0E0B               	movlw	11
  7809  000848  0012               	return	
  7810  00084A                     l5954:
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;ff.c: 2224:  fs = FatFs[vol];
  7814  00084A  90D8               	bcf	status,0,c
  7815  00084C  3580               	rlcf	find_volume@vol& (0+255),w,b
  7816  00084E  6ED9               	movwf	fsr2l,c
  7817  000850  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7818  000852  6EDA               	movwf	fsr2h,c
  7819  000854  0EDC               	movlw	low ff@FatFs
  7820  000856  26D9               	addwf	fsr2l,f,c
  7821  000858  0E00               	movlw	high ff@FatFs
  7822  00085A  22DA               	addwfc	fsr2h,f,c
  7823  00085C  CFDE F098          	movff	postinc2,find_volume@fs
  7824  000860  CFDD F099          	movff	postdec2,find_volume@fs+1
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  7828  000864  5198               	movf	find_volume@fs& (0+255),w,b
  7829  000866  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7830  000868  A4D8               	btfss	status,2,c
  7831  00086A  D002               	goto	l5962
  7832                           
  7833                           ; BSR set to: 0
  7834  00086C  0E0C               	movlw	12
  7835  00086E  0012               	return	
  7836  000870                     l5962:
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;ff.c: 2228:  *rfs = fs;
  7840  000870  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7841  000874  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7842  000878  C098  FFDE         	movff	find_volume@fs,postinc2
  7843  00087C  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;ff.c: 2230:  if (fs->fs_type) {
  7847  000880  C098  FFD9         	movff	find_volume@fs,fsr2l
  7848  000884  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7849  000888  50DF               	movf	indf2,w,c
  7850  00088A  B4D8               	btfsc	status,2,c
  7851  00088C  D015               	goto	l5982
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  7855  00088E  EE20 F001          	lfsr	2,1
  7856  000892  5198               	movf	find_volume@fs& (0+255),w,b
  7857  000894  26D9               	addwf	fsr2l,f,c
  7858  000896  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7859  000898  22DA               	addwfc	fsr2h,f,c
  7860  00089A  50DF               	movf	indf2,w,c
  7861  00089C  ECFC  F02E         	call	_disk_status
  7862  0008A0  0100               	movlb	0	; () banked
  7863  0008A2  6F8C               	movwf	find_volume@stat& (0+255),b
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  7867  0008A4  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7868  0008A6  D008               	goto	l5982
  7869                           
  7870                           ; BSR set to: 0
  7871  0008A8  5049               	movf	find_volume@wmode,w,c
  7872  0008AA  A4D8               	btfss	status,2,c
  7873                           
  7874                           ; BSR set to: 0
  7875  0008AC  A58C               	btfss	find_volume@stat& (0+255),2,b
  7876  0008AE  D002               	goto	l5978
  7877  0008B0                     u7820:
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  7881  0008B0  0E0A               	movlw	10
  7882  0008B2  0012               	return	
  7883  0008B4                     l5978:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;ff.c: 2235:    return FR_OK;
  7887  0008B4  0E00               	movlw	0
  7888  0008B6  0012               	return	
  7889  0008B8                     l5982:
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;ff.c: 2242:  fs->fs_type = 0;
  7893  0008B8  C098  FFD9         	movff	find_volume@fs,fsr2l
  7894  0008BC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7895  0008C0  0E00               	movlw	0
  7896  0008C2  6EDF               	movwf	indf2,c
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  7900  0008C4  EE20 F001          	lfsr	2,1
  7901  0008C8  5198               	movf	find_volume@fs& (0+255),w,b
  7902  0008CA  26D9               	addwf	fsr2l,f,c
  7903  0008CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7904  0008CE  22DA               	addwfc	fsr2h,f,c
  7905  0008D0  C080  FFDF         	movff	find_volume@vol,indf2
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  7909  0008D4  EE20 F001          	lfsr	2,1
  7910  0008D8  5198               	movf	find_volume@fs& (0+255),w,b
  7911  0008DA  26D9               	addwf	fsr2l,f,c
  7912  0008DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7913  0008DE  22DA               	addwfc	fsr2h,f,c
  7914  0008E0  50DF               	movf	indf2,w,c
  7915  0008E2  ECAE  F020         	call	_disk_initialize
  7916  0008E6  0100               	movlb	0	; () banked
  7917  0008E8  6F8C               	movwf	find_volume@stat& (0+255),b
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;ff.c: 2245:  if (stat & 0x01)
  7921  0008EA  A18C               	btfss	find_volume@stat& (0+255),0,b
  7922  0008EC  D002               	goto	l5994
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;ff.c: 2246:   return FR_NOT_READY;
  7926  0008EE  0E03               	movlw	3
  7927  0008F0  0012               	return	
  7928  0008F2                     l5994:
  7929                           
  7930                           ; BSR set to: 0
  7931  0008F2  5049               	movf	find_volume@wmode,w,c
  7932  0008F4  B4D8               	btfsc	status,2,c
  7933  0008F6  D002               	goto	l6002
  7934                           
  7935                           ; BSR set to: 0
  7936  0008F8  B58C               	btfsc	find_volume@stat& (0+255),2,b
  7937  0008FA  D7DA               	goto	u7820
  7938  0008FC                     l6002:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;ff.c: 2254:  bsect = 0;
  7942  0008FC  0E00               	movlw	0
  7943  0008FE  6F91               	movwf	find_volume@bsect& (0+255),b
  7944  000900  0E00               	movlw	0
  7945  000902  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7946  000904  0E00               	movlw	0
  7947  000906  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7948  000908  0E00               	movlw	0
  7949  00090A  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  7953  00090C  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7954  000910  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7955  000914  0E00               	movlw	0
  7956  000916  6E3D               	movwf	check_fs@sect,c
  7957  000918  0E00               	movlw	0
  7958  00091A  6E3E               	movwf	check_fs@sect+1,c
  7959  00091C  0E00               	movlw	0
  7960  00091E  6E3F               	movwf	check_fs@sect+2,c
  7961  000920  0E00               	movlw	0
  7962  000922  6E40               	movwf	check_fs@sect+3,c
  7963  000924  EC4A  F028         	call	_check_fs	;wreg free
  7964  000928  0100               	movlb	0	; () banked
  7965  00092A  6F97               	movwf	find_volume@fmt& (0+255),b
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  7969  00092C  0597               	decf	find_volume@fmt& (0+255),w,b
  7970  00092E  A4D8               	btfss	status,2,c
  7971  000930  D0AE               	goto	u7920
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  7975  000932  0E00               	movlw	0
  7976  000934  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7977  000936  0E00               	movlw	0
  7978  000938  6F95               	movwf	find_volume@i& (0+255),b
  7979  00093A                     l6014:
  7980                           
  7981                           ; BSR set to: 0
  7982  00093A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7983  00093C  E15A               	bnz	l6030
  7984  00093E  0E04               	movlw	4
  7985  000940  5D95               	subwf	find_volume@i& (0+255),w,b
  7986  000942  B0D8               	btfsc	status,0,c
  7987  000944  D056               	goto	l6030
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  7991  000946  C095  F04A         	movff	find_volume@i,??_find_volume
  7992  00094A  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  7993  00094E  3A4A               	swapf	??_find_volume,f,c
  7994  000950  3A4B               	swapf	??_find_volume+1,f,c
  7995  000952  0EF0               	movlw	240
  7996  000954  164B               	andwf	??_find_volume+1,f,c
  7997  000956  504A               	movf	??_find_volume,w,c
  7998  000958  0B0F               	andlw	15
  7999  00095A  124B               	iorwf	??_find_volume+1,f,c
  8000  00095C  0EF0               	movlw	240
  8001  00095E  164A               	andwf	??_find_volume,f,c
  8002  000960  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  8003  000964  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  8004  000968  504A               	movf	??_find_volume,w,c
  8005  00096A  264C               	addwf	??_find_volume+2,f,c
  8006  00096C  504B               	movf	??_find_volume+1,w,c
  8007  00096E  224D               	addwfc	??_find_volume+3,f,c
  8008  000970  0EEC               	movlw	236
  8009  000972  244C               	addwf	??_find_volume+2,w,c
  8010  000974  6F7A               	movwf	find_volume@pt& (0+255),b
  8011  000976  0E01               	movlw	1
  8012  000978  204D               	addwfc	??_find_volume+3,w,c
  8013  00097A  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  8017  00097C  EE20 F004          	lfsr	2,4
  8018  000980  517A               	movf	find_volume@pt& (0+255),w,b
  8019  000982  26D9               	addwf	fsr2l,f,c
  8020  000984  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  8021  000986  22DA               	addwfc	fsr2h,f,c
  8022  000988  50DF               	movf	indf2,w,c
  8023  00098A  A4D8               	btfss	status,2,c
  8024  00098C  D009               	goto	l6024
  8025                           
  8026                           ; BSR set to: 0
  8027  00098E  0E00               	movlw	0
  8028  000990  6F70               	movwf	_find_volume$728& (0+255),b
  8029  000992  0E00               	movlw	0
  8030  000994  6F71               	movwf	(_find_volume$728+1)& (0+255),b
  8031  000996  0E00               	movlw	0
  8032  000998  6F72               	movwf	(_find_volume$728+2)& (0+255),b
  8033  00099A  0E00               	movlw	0
  8034  00099C  6F73               	movwf	(_find_volume$728+3)& (0+255),b
  8035  00099E  D00E               	goto	l520
  8036  0009A0                     l6024:
  8037                           
  8038                           ; BSR set to: 0
  8039  0009A0  EE20 F008          	lfsr	2,8
  8040  0009A4  517A               	movf	find_volume@pt& (0+255),w,b
  8041  0009A6  26D9               	addwf	fsr2l,f,c
  8042  0009A8  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  8043  0009AA  22DA               	addwfc	fsr2h,f,c
  8044  0009AC  CFDE F070          	movff	postinc2,_find_volume$728
  8045  0009B0  CFDE F071          	movff	postinc2,_find_volume$728+1
  8046  0009B4  CFDE F072          	movff	postinc2,_find_volume$728+2
  8047  0009B8  CFDE F073          	movff	postinc2,_find_volume$728+3
  8048  0009BC                     l520:
  8049                           
  8050                           ; BSR set to: 0
  8051  0009BC  0E60               	movlw	low find_volume@br
  8052  0009BE  6E4A               	movwf	??_find_volume& (0+255),c
  8053  0009C0  0E00               	movlw	high find_volume@br
  8054  0009C2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8055  0009C4  90D8               	bcf	status,0,c
  8056  0009C6  3595               	rlcf	find_volume@i& (0+255),w,b
  8057  0009C8  6ED9               	movwf	fsr2l,c
  8058  0009CA  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  8059  0009CC  6EDA               	movwf	fsr2h,c
  8060  0009CE  90D8               	bcf	status,0,c
  8061  0009D0  36D9               	rlcf	fsr2l,f,c
  8062  0009D2  36DA               	rlcf	fsr2h,f,c
  8063  0009D4  504A               	movf	??_find_volume,w,c
  8064  0009D6  26D9               	addwf	fsr2l,f,c
  8065  0009D8  504B               	movf	??_find_volume+1,w,c
  8066  0009DA  22DA               	addwfc	fsr2h,f,c
  8067  0009DC  C070  FFDE         	movff	_find_volume$728,postinc2
  8068  0009E0  C071  FFDE         	movff	_find_volume$728+1,postinc2
  8069  0009E4  C072  FFDE         	movff	_find_volume$728+2,postinc2
  8070  0009E8  C073  FFDE         	movff	_find_volume$728+3,postinc2
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;ff.c: 2260:   }
  8074  0009EC  4B95               	infsnz	find_volume@i& (0+255),f,b
  8075  0009EE  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  8076  0009F0  D7A4               	goto	l6014
  8077  0009F2                     l6030:
  8078                           
  8079                           ; BSR set to: 0
  8080                           ;ff.c: 2261:   i = 0;
  8081  0009F2  0E00               	movlw	0
  8082  0009F4  6F96               	movwf	(find_volume@i+1)& (0+255),b
  8083  0009F6  0E00               	movlw	0
  8084  0009F8  6F95               	movwf	find_volume@i& (0+255),b
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;ff.c: 2262:   if (i) i--;
  8088  0009FA  5195               	movf	find_volume@i& (0+255),w,b
  8089  0009FC  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  8090  0009FE  B4D8               	btfsc	status,2,c
  8091  000A00  D003               	goto	l6036
  8092                           
  8093                           ; BSR set to: 0
  8094  000A02  0795               	decf	find_volume@i& (0+255),f,b
  8095  000A04  A0D8               	btfss	status,0,c
  8096  000A06  0796               	decf	(find_volume@i+1)& (0+255),f,b
  8097  000A08                     l6036:
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;ff.c: 2264:    bsect = br[i];
  8101  000A08  0E60               	movlw	low find_volume@br
  8102  000A0A  6E4A               	movwf	??_find_volume& (0+255),c
  8103  000A0C  0E00               	movlw	high find_volume@br
  8104  000A0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8105  000A10  90D8               	bcf	status,0,c
  8106  000A12  3595               	rlcf	find_volume@i& (0+255),w,b
  8107  000A14  6ED9               	movwf	fsr2l,c
  8108  000A16  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  8109  000A18  6EDA               	movwf	fsr2h,c
  8110  000A1A  90D8               	bcf	status,0,c
  8111  000A1C  36D9               	rlcf	fsr2l,f,c
  8112  000A1E  36DA               	rlcf	fsr2h,f,c
  8113  000A20  504A               	movf	??_find_volume,w,c
  8114  000A22  26D9               	addwf	fsr2l,f,c
  8115  000A24  504B               	movf	??_find_volume+1,w,c
  8116  000A26  22DA               	addwfc	fsr2h,f,c
  8117  000A28  CFDE F091          	movff	postinc2,find_volume@bsect
  8118  000A2C  CFDE F092          	movff	postinc2,find_volume@bsect+1
  8119  000A30  CFDE F093          	movff	postinc2,find_volume@bsect+2
  8120  000A34  CFDE F094          	movff	postinc2,find_volume@bsect+3
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  8124  000A38  5191               	movf	find_volume@bsect& (0+255),w,b
  8125  000A3A  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  8126  000A3C  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  8127  000A3E  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  8128  000A40  A4D8               	btfss	status,2,c
  8129  000A42  D005               	goto	l6042
  8130                           
  8131                           ; BSR set to: 0
  8132  000A44  0E00               	movlw	0
  8133  000A46  6F75               	movwf	(_find_volume$729+1)& (0+255),b
  8134  000A48  0E02               	movlw	2
  8135  000A4A  6F74               	movwf	_find_volume$729& (0+255),b
  8136  000A4C  D013               	goto	l6044
  8137  000A4E                     l6042:
  8138                           
  8139                           ; BSR set to: 0
  8140  000A4E  C098  F03B         	movff	find_volume@fs,check_fs@fs
  8141  000A52  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  8142  000A56  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  8143  000A5A  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  8144  000A5E  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  8145  000A62  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  8146  000A66  EC4A  F028         	call	_check_fs	;wreg free
  8147  000A6A  6E4A               	movwf	??_find_volume& (0+255),c
  8148  000A6C  504A               	movf	??_find_volume,w,c
  8149  000A6E  0100               	movlb	0	; () banked
  8150  000A70  6F74               	movwf	_find_volume$729& (0+255),b
  8151  000A72  6B75               	clrf	(_find_volume$729+1)& (0+255),b
  8152  000A74                     l6044:
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  8156  000A74  C074  F097         	movff	_find_volume$729,find_volume@fmt
  8157                           
  8158                           ; BSR set to: 0
  8159  000A78  5197               	movf	find_volume@fmt& (0+255),w,b
  8160  000A7A  B4D8               	btfsc	status,2,c
  8161  000A7C  D008               	goto	u7920
  8162                           
  8163                           ; BSR set to: 0
  8164  000A7E  4B95               	infsnz	find_volume@i& (0+255),f,b
  8165  000A80  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  8166  000A82  5196               	movf	(find_volume@i+1)& (0+255),w,b
  8167  000A84  E104               	bnz	u7920
  8168  000A86  0E04               	movlw	4
  8169  000A88  5D95               	subwf	find_volume@i& (0+255),w,b
  8170  000A8A  A0D8               	btfss	status,0,c
  8171  000A8C  D7BD               	goto	l6036
  8172  000A8E                     u7920:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  8176  000A8E  0E03               	movlw	3
  8177  000A90  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8178  000A92  A4D8               	btfss	status,2,c
  8179  000A94  D002               	goto	l6056
  8180                           
  8181                           ; BSR set to: 0
  8182  000A96  0E01               	movlw	1
  8183  000A98  0012               	return	
  8184  000A9A                     l6056:
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  8188  000A9A  5197               	movf	find_volume@fmt& (0+255),w,b
  8189  000A9C  B4D8               	btfsc	status,2,c
  8190  000A9E  D002               	goto	l6062
  8191  000AA0                     u7940:
  8192  000AA0                     l6058:
  8193                           
  8194                           ; BSR set to: 0
  8195  000AA0  0E0D               	movlw	13
  8196  000AA2  0012               	return	
  8197  000AA4                     l6062:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  8201  000AA4  EE20 F039          	lfsr	2,57
  8202  000AA8  5198               	movf	find_volume@fs& (0+255),w,b
  8203  000AAA  26D9               	addwf	fsr2l,f,c
  8204  000AAC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8205  000AAE  22DA               	addwfc	fsr2h,f,c
  8206  000AB0  50DE               	movf	postinc2,w,c
  8207  000AB2  E1F6               	bnz	l6058
  8208  000AB4  0E02               	movlw	2
  8209  000AB6  18DE               	xorwf	postinc2,w,c
  8210  000AB8  A4D8               	btfss	status,2,c
  8211  000ABA  D7F2               	goto	u7940
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  8215  000ABC  EE20 F044          	lfsr	2,68
  8216  000AC0  5198               	movf	find_volume@fs& (0+255),w,b
  8217  000AC2  26D9               	addwf	fsr2l,f,c
  8218  000AC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8219  000AC6  22DA               	addwfc	fsr2h,f,c
  8220  000AC8  CFDE F04A          	movff	postinc2,??_find_volume
  8221  000ACC  CFDD F04B          	movff	postdec2,??_find_volume+1
  8222  000AD0  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  8223  000AD4  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  8224  000AD8  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  8225  000ADA  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  8229  000ADC  518D               	movf	find_volume@fasize& (0+255),w,b
  8230  000ADE  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  8231  000AE0  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  8232  000AE2  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  8233  000AE4  A4D8               	btfss	status,2,c
  8234  000AE6  D00E               	goto	l533
  8235                           
  8236                           ; BSR set to: 0
  8237  000AE8  EE20 F052          	lfsr	2,82
  8238  000AEC  5198               	movf	find_volume@fs& (0+255),w,b
  8239  000AEE  26D9               	addwf	fsr2l,f,c
  8240  000AF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8241  000AF2  22DA               	addwfc	fsr2h,f,c
  8242  000AF4  CFDE F08D          	movff	postinc2,find_volume@fasize
  8243  000AF8  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  8244  000AFC  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  8245  000B00  CFDE F090          	movff	postinc2,find_volume@fasize+3
  8246  000B04                     l533:
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;ff.c: 2278:  fs->fsize = fasize;
  8250  000B04  EE20 F016          	lfsr	2,22
  8251  000B08  5198               	movf	find_volume@fs& (0+255),w,b
  8252  000B0A  26D9               	addwf	fsr2l,f,c
  8253  000B0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8254  000B0E  22DA               	addwfc	fsr2h,f,c
  8255  000B10  C08D  FFDE         	movff	find_volume@fasize,postinc2
  8256  000B14  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  8257  000B18  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  8258  000B1C  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  8262  000B20  EE20 F03E          	lfsr	2,62
  8263  000B24  5198               	movf	find_volume@fs& (0+255),w,b
  8264  000B26  26D9               	addwf	fsr2l,f,c
  8265  000B28  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8266  000B2A  22DA               	addwfc	fsr2h,f,c
  8267  000B2C  EE10 F003          	lfsr	1,3
  8268  000B30  5198               	movf	find_volume@fs& (0+255),w,b
  8269  000B32  26E1               	addwf	fsr1l,f,c
  8270  000B34  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8271  000B36  22E2               	addwfc	fsr1h,f,c
  8272  000B38  CFDF FFE7          	movff	indf2,indf1
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  8276  000B3C  EE20 F003          	lfsr	2,3
  8277  000B40  5198               	movf	find_volume@fs& (0+255),w,b
  8278  000B42  26D9               	addwf	fsr2l,f,c
  8279  000B44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8280  000B46  22DA               	addwfc	fsr2h,f,c
  8281  000B48  04DE               	decf	postinc2,w,c
  8282  000B4A  B4D8               	btfsc	status,2,c
  8283  000B4C  D00A               	goto	l6084
  8284                           
  8285                           ; BSR set to: 0
  8286  000B4E  EE20 F003          	lfsr	2,3
  8287  000B52  5198               	movf	find_volume@fs& (0+255),w,b
  8288  000B54  26D9               	addwf	fsr2l,f,c
  8289  000B56  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8290  000B58  22DA               	addwfc	fsr2h,f,c
  8291  000B5A  0E02               	movlw	2
  8292  000B5C  18DE               	xorwf	postinc2,w,c
  8293  000B5E  A4D8               	btfss	status,2,c
  8294  000B60  D79F               	goto	u7940
  8295  000B62                     l6084:
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;ff.c: 2283:  fasize *= fs->n_fats;
  8299  000B62  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  8300  000B66  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  8301  000B6A  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  8302  000B6E  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  8303  000B72  EE20 F003          	lfsr	2,3
  8304  000B76  5198               	movf	find_volume@fs& (0+255),w,b
  8305  000B78  26D9               	addwf	fsr2l,f,c
  8306  000B7A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8307  000B7C  22DA               	addwfc	fsr2h,f,c
  8308  000B7E  50DF               	movf	indf2,w,c
  8309  000B80  6E4A               	movwf	??_find_volume& (0+255),c
  8310  000B82  504A               	movf	??_find_volume,w,c
  8311  000B84  6E05               	movwf	___lmul@multiplicand,c
  8312  000B86  6A06               	clrf	___lmul@multiplicand+1,c
  8313  000B88  6A07               	clrf	___lmul@multiplicand+2,c
  8314  000B8A  6A08               	clrf	___lmul@multiplicand+3,c
  8315  000B8C  EC7E  F02D         	call	___lmul	;wreg free
  8316  000B90  C001  F08D         	movff	?___lmul,find_volume@fasize
  8317  000B94  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  8318  000B98  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  8319  000B9C  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  8320                           
  8321                           ;ff.c: 2285:  fs->csize = fs->win[13];
  8322  000BA0  0100               	movlb	0	; () banked
  8323  000BA2  EE20 F03B          	lfsr	2,59
  8324  000BA6  5198               	movf	find_volume@fs& (0+255),w,b
  8325  000BA8  26D9               	addwf	fsr2l,f,c
  8326  000BAA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8327  000BAC  22DA               	addwfc	fsr2h,f,c
  8328  000BAE  EE10 F002          	lfsr	1,2
  8329  000BB2  5198               	movf	find_volume@fs& (0+255),w,b
  8330  000BB4  26E1               	addwf	fsr1l,f,c
  8331  000BB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8332  000BB8  22E2               	addwfc	fsr1h,f,c
  8333  000BBA  CFDF FFE7          	movff	indf2,indf1
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  8337  000BBE  EE20 F002          	lfsr	2,2
  8338  000BC2  5198               	movf	find_volume@fs& (0+255),w,b
  8339  000BC4  26D9               	addwf	fsr2l,f,c
  8340  000BC6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8341  000BC8  22DA               	addwfc	fsr2h,f,c
  8342  000BCA  50DF               	movf	indf2,w,c
  8343  000BCC  B4D8               	btfsc	status,2,c
  8344  000BCE  D768               	goto	u7940
  8345                           
  8346                           ; BSR set to: 0
  8347  000BD0  0EFF               	movlw	255
  8348  000BD2  6E4A               	movwf	??_find_volume& (0+255),c
  8349  000BD4  0EFF               	movlw	255
  8350  000BD6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8351  000BD8  EE20 F002          	lfsr	2,2
  8352  000BDC  5198               	movf	find_volume@fs& (0+255),w,b
  8353  000BDE  26D9               	addwf	fsr2l,f,c
  8354  000BE0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8355  000BE2  22DA               	addwfc	fsr2h,f,c
  8356  000BE4  50DF               	movf	indf2,w,c
  8357  000BE6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8358  000BE8  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  8359  000BEA  504A               	movf	??_find_volume,w,c
  8360  000BEC  264C               	addwf	??_find_volume+2,f,c
  8361  000BEE  504B               	movf	??_find_volume+1,w,c
  8362  000BF0  224D               	addwfc	??_find_volume+3,f,c
  8363  000BF2  EE20 F002          	lfsr	2,2
  8364  000BF6  5198               	movf	find_volume@fs& (0+255),w,b
  8365  000BF8  26D9               	addwf	fsr2l,f,c
  8366  000BFA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8367  000BFC  22DA               	addwfc	fsr2h,f,c
  8368  000BFE  50DF               	movf	indf2,w,c
  8369  000C00  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8370  000C02  504E               	movf	??_find_volume+4,w,c
  8371  000C04  164C               	andwf	??_find_volume+2,f,c
  8372  000C06  0E00               	movlw	0
  8373  000C08  164D               	andwf	??_find_volume+3,f,c
  8374  000C0A  504C               	movf	??_find_volume+2,w,c
  8375  000C0C  104D               	iorwf	??_find_volume+3,w,c
  8376  000C0E  A4D8               	btfss	status,2,c
  8377  000C10  D747               	goto	u7940
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  8381  000C12  EE20 F03F          	lfsr	2,63
  8382  000C16  5198               	movf	find_volume@fs& (0+255),w,b
  8383  000C18  26D9               	addwf	fsr2l,f,c
  8384  000C1A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8385  000C1C  22DA               	addwfc	fsr2h,f,c
  8386  000C1E  EE10 F008          	lfsr	1,8
  8387  000C22  5198               	movf	find_volume@fs& (0+255),w,b
  8388  000C24  26E1               	addwf	fsr1l,f,c
  8389  000C26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8390  000C28  22E2               	addwfc	fsr1h,f,c
  8391  000C2A  CFDE FFE6          	movff	postinc2,postinc1
  8392  000C2E  CFDD FFE5          	movff	postdec2,postdec1
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  8396  000C32  EE20 F008          	lfsr	2,8
  8397  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  8398  000C38  26D9               	addwf	fsr2l,f,c
  8399  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8400  000C3C  22DA               	addwfc	fsr2h,f,c
  8401  000C3E  CFDE F04A          	movff	postinc2,??_find_volume
  8402  000C42  CFDD F04B          	movff	postdec2,??_find_volume+1
  8403  000C46  0E0F               	movlw	15
  8404  000C48  164A               	andwf	??_find_volume,f,c
  8405  000C4A  0E00               	movlw	0
  8406  000C4C  164B               	andwf	??_find_volume+1,f,c
  8407  000C4E  504A               	movf	??_find_volume,w,c
  8408  000C50  104B               	iorwf	??_find_volume+1,w,c
  8409  000C52  A4D8               	btfss	status,2,c
  8410  000C54  D725               	goto	u7940
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8414  000C56  EE20 F041          	lfsr	2,65
  8415  000C5A  5198               	movf	find_volume@fs& (0+255),w,b
  8416  000C5C  26D9               	addwf	fsr2l,f,c
  8417  000C5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8418  000C60  22DA               	addwfc	fsr2h,f,c
  8419  000C62  CFDE F04A          	movff	postinc2,??_find_volume
  8420  000C66  CFDD F04B          	movff	postdec2,??_find_volume+1
  8421  000C6A  C04A  F084         	movff	??_find_volume,find_volume@tsect
  8422  000C6E  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  8423  000C72  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  8424  000C74  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8428  000C76  5184               	movf	find_volume@tsect& (0+255),w,b
  8429  000C78  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8430  000C7A  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8431  000C7C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8432  000C7E  A4D8               	btfss	status,2,c
  8433  000C80  D00E               	goto	l539
  8434                           
  8435                           ; BSR set to: 0
  8436  000C82  EE20 F04E          	lfsr	2,78
  8437  000C86  5198               	movf	find_volume@fs& (0+255),w,b
  8438  000C88  26D9               	addwf	fsr2l,f,c
  8439  000C8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8440  000C8C  22DA               	addwfc	fsr2h,f,c
  8441  000C8E  CFDE F084          	movff	postinc2,find_volume@tsect
  8442  000C92  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8443  000C96  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8444  000C9A  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8445  000C9E                     l539:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8449  000C9E  EE20 F03C          	lfsr	2,60
  8450  000CA2  5198               	movf	find_volume@fs& (0+255),w,b
  8451  000CA4  26D9               	addwf	fsr2l,f,c
  8452  000CA6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8453  000CA8  22DA               	addwfc	fsr2h,f,c
  8454  000CAA  CFDE F082          	movff	postinc2,find_volume@nrsv
  8455  000CAE  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  8459  000CB2  5182               	movf	find_volume@nrsv& (0+255),w,b
  8460  000CB4  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8461  000CB6  B4D8               	btfsc	status,2,c
  8462  000CB8  D6F3               	goto	u7940
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8466  000CBA  EE20 F008          	lfsr	2,8
  8467  000CBE  5198               	movf	find_volume@fs& (0+255),w,b
  8468  000CC0  26D9               	addwf	fsr2l,f,c
  8469  000CC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8470  000CC4  22DA               	addwfc	fsr2h,f,c
  8471  000CC6  CFDE F04A          	movff	postinc2,??_find_volume
  8472  000CCA  CFDD F04B          	movff	postdec2,??_find_volume+1
  8473  000CCE  0E04               	movlw	4
  8474  000CD0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8475  000CD2                     u8045:
  8476  000CD2  90D8               	bcf	status,0,c
  8477  000CD4  324B               	rrcf	??_find_volume+1,f,c
  8478  000CD6  324A               	rrcf	??_find_volume,f,c
  8479  000CD8  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  8480  000CDA  D7FB               	goto	u8045
  8481  000CDC  5182               	movf	find_volume@nrsv& (0+255),w,b
  8482  000CDE  244A               	addwf	??_find_volume,w,c
  8483  000CE0  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8484  000CE2  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8485  000CE4  204B               	addwfc	??_find_volume+1,w,c
  8486  000CE6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8487  000CE8  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  8488  000CEA  B0D8               	btfsc	status,0,c
  8489  000CEC  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  8490  000CEE  6A50               	clrf	(??_find_volume+6)& (0+255),c
  8491  000CF0  518D               	movf	find_volume@fasize& (0+255),w,b
  8492  000CF2  244D               	addwf	??_find_volume+3,w,c
  8493  000CF4  6F7C               	movwf	find_volume@sysect& (0+255),b
  8494  000CF6  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8495  000CF8  204E               	addwfc	??_find_volume+4,w,c
  8496  000CFA  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8497  000CFC  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8498  000CFE  204F               	addwfc	??_find_volume+5,w,c
  8499  000D00  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8500  000D02  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8501  000D04  2050               	addwfc	??_find_volume+6,w,c
  8502  000D06  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  8506  000D08  517C               	movf	find_volume@sysect& (0+255),w,b
  8507  000D0A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8508  000D0C  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8509  000D0E  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8510  000D10  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8511  000D12  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8512  000D14  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8513  000D16  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8514  000D18  A0D8               	btfss	status,0,c
  8515  000D1A  D6C2               	goto	u7940
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  8519  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  8520  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8521  000D20  6E01               	movwf	___lldiv@dividend,c
  8522  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8523  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8524  000D26  6E02               	movwf	___lldiv@dividend+1,c
  8525  000D28  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8526  000D2A  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8527  000D2C  6E03               	movwf	___lldiv@dividend+2,c
  8528  000D2E  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8529  000D30  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8530  000D32  6E04               	movwf	___lldiv@dividend+3,c
  8531  000D34  EE20 F002          	lfsr	2,2
  8532  000D38  5198               	movf	find_volume@fs& (0+255),w,b
  8533  000D3A  26D9               	addwf	fsr2l,f,c
  8534  000D3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8535  000D3E  22DA               	addwfc	fsr2h,f,c
  8536  000D40  50DF               	movf	indf2,w,c
  8537  000D42  6E4A               	movwf	??_find_volume& (0+255),c
  8538  000D44  504A               	movf	??_find_volume,w,c
  8539  000D46  6E05               	movwf	___lldiv@divisor,c
  8540  000D48  6A06               	clrf	___lldiv@divisor+1,c
  8541  000D4A  6A07               	clrf	___lldiv@divisor+2,c
  8542  000D4C  6A08               	clrf	___lldiv@divisor+3,c
  8543  000D4E  ECB7  F02B         	call	___lldiv	;wreg free
  8544  000D52  C001  F088         	movff	?___lldiv,find_volume@nclst
  8545  000D56  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8546  000D5A  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8547  000D5E  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8548                           
  8549                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  8550  000D62  0100               	movlb	0	; () banked
  8551  000D64  5188               	movf	find_volume@nclst& (0+255),w,b
  8552  000D66  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8553  000D68  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8554  000D6A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8555  000D6C  B4D8               	btfsc	status,2,c
  8556  000D6E  D698               	goto	u7940
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;ff.c: 2304:  fmt = 1;
  8560  000D70  0E01               	movlw	1
  8561  000D72  6F97               	movwf	find_volume@fmt& (0+255),b
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  8565  000D74  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8566  000D76  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8567  000D78  E106               	bnz	u8070
  8568  000D7A  0EF6               	movlw	246
  8569  000D7C  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8570  000D7E  0E0F               	movlw	15
  8571  000D80  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8572  000D82  A0D8               	btfss	status,0,c
  8573  000D84  D002               	goto	l6138
  8574  000D86                     u8070:
  8575                           
  8576                           ; BSR set to: 0
  8577  000D86  0E02               	movlw	2
  8578  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  8579  000D8A                     l6138:
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  8583  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8584  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8585  000D8E  E106               	bnz	u8080
  8586  000D90  0EF6               	movlw	246
  8587  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8588  000D94  0EFF               	movlw	255
  8589  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8590  000D98  A0D8               	btfss	status,0,c
  8591  000D9A  D002               	goto	l6142
  8592  000D9C                     u8080:
  8593                           
  8594                           ; BSR set to: 0
  8595  000D9C  0E03               	movlw	3
  8596  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  8597  000DA0                     l6142:
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  8601  000DA0  0E02               	movlw	2
  8602  000DA2  2588               	addwf	find_volume@nclst& (0+255),w,b
  8603  000DA4  6E4A               	movwf	??_find_volume& (0+255),c
  8604  000DA6  0E00               	movlw	0
  8605  000DA8  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8606  000DAA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8607  000DAC  0E00               	movlw	0
  8608  000DAE  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8609  000DB0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8610  000DB2  0E00               	movlw	0
  8611  000DB4  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8612  000DB6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8613  000DB8  EE20 F012          	lfsr	2,18
  8614  000DBC  5198               	movf	find_volume@fs& (0+255),w,b
  8615  000DBE  26D9               	addwf	fsr2l,f,c
  8616  000DC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8617  000DC2  22DA               	addwfc	fsr2h,f,c
  8618  000DC4  C04A  FFDE         	movff	??_find_volume,postinc2
  8619  000DC8  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8620  000DCC  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8621  000DD0  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;ff.c: 2310:  fs->volbase = bsect;
  8625  000DD4  EE20 F01A          	lfsr	2,26
  8626  000DD8  5198               	movf	find_volume@fs& (0+255),w,b
  8627  000DDA  26D9               	addwf	fsr2l,f,c
  8628  000DDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8629  000DDE  22DA               	addwfc	fsr2h,f,c
  8630  000DE0  C091  FFDE         	movff	find_volume@bsect,postinc2
  8631  000DE4  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8632  000DE8  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8633  000DEC  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  8637  000DF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  8638  000DF2  2591               	addwf	find_volume@bsect& (0+255),w,b
  8639  000DF4  6E4A               	movwf	??_find_volume& (0+255),c
  8640  000DF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8641  000DF8  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8642  000DFA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8643  000DFC  0E00               	movlw	0
  8644  000DFE  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8645  000E00  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8646  000E02  0E00               	movlw	0
  8647  000E04  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8648  000E06  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8649  000E08  EE20 F01E          	lfsr	2,30
  8650  000E0C  5198               	movf	find_volume@fs& (0+255),w,b
  8651  000E0E  26D9               	addwf	fsr2l,f,c
  8652  000E10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8653  000E12  22DA               	addwfc	fsr2h,f,c
  8654  000E14  C04A  FFDE         	movff	??_find_volume,postinc2
  8655  000E18  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8656  000E1C  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8657  000E20  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;ff.c: 2312:  fs->database = bsect + sysect;
  8661  000E24  517C               	movf	find_volume@sysect& (0+255),w,b
  8662  000E26  2591               	addwf	find_volume@bsect& (0+255),w,b
  8663  000E28  6E4A               	movwf	??_find_volume& (0+255),c
  8664  000E2A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8665  000E2C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8666  000E2E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8667  000E30  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8668  000E32  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8669  000E34  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8670  000E36  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8671  000E38  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8672  000E3A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8673  000E3C  EE20 F026          	lfsr	2,38
  8674  000E40  5198               	movf	find_volume@fs& (0+255),w,b
  8675  000E42  26D9               	addwf	fsr2l,f,c
  8676  000E44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8677  000E46  22DA               	addwfc	fsr2h,f,c
  8678  000E48  C04A  FFDE         	movff	??_find_volume,postinc2
  8679  000E4C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8680  000E50  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8681  000E54  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;ff.c: 2313:  if (fmt == 3) {
  8685  000E58  0E03               	movlw	3
  8686  000E5A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8687  000E5C  A4D8               	btfss	status,2,c
  8688  000E5E  D03D               	goto	l6162
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8692  000E60  EE20 F008          	lfsr	2,8
  8693  000E64  5198               	movf	find_volume@fs& (0+255),w,b
  8694  000E66  26D9               	addwf	fsr2l,f,c
  8695  000E68  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8696  000E6A  22DA               	addwfc	fsr2h,f,c
  8697  000E6C  50DE               	movf	postinc2,w,c
  8698  000E6E  10DE               	iorwf	postinc2,w,c
  8699  000E70  A4D8               	btfss	status,2,c
  8700  000E72  D616               	goto	u7940
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8704  000E74  EE20 F05A          	lfsr	2,90
  8705  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  8706  000E7A  26D9               	addwf	fsr2l,f,c
  8707  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8708  000E7E  22DA               	addwfc	fsr2h,f,c
  8709  000E80  EE10 F022          	lfsr	1,34
  8710  000E84  5198               	movf	find_volume@fs& (0+255),w,b
  8711  000E86  26E1               	addwf	fsr1l,f,c
  8712  000E88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8713  000E8A  22E2               	addwfc	fsr1h,f,c
  8714  000E8C  CFDE FFE6          	movff	postinc2,postinc1
  8715  000E90  CFDE FFE6          	movff	postinc2,postinc1
  8716  000E94  CFDE FFE6          	movff	postinc2,postinc1
  8717  000E98  CFDE FFE6          	movff	postinc2,postinc1
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  8721  000E9C  EE20 F012          	lfsr	2,18
  8722  000EA0  5198               	movf	find_volume@fs& (0+255),w,b
  8723  000EA2  26D9               	addwf	fsr2l,f,c
  8724  000EA4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8725  000EA6  22DA               	addwfc	fsr2h,f,c
  8726  000EA8  CFDE F04A          	movff	postinc2,??_find_volume
  8727  000EAC  CFDE F04B          	movff	postinc2,??_find_volume+1
  8728  000EB0  CFDE F04C          	movff	postinc2,??_find_volume+2
  8729  000EB4  CFDE F04D          	movff	postinc2,??_find_volume+3
  8730  000EB8  0E02               	movlw	2
  8731  000EBA                     u8115:
  8732  000EBA  90D8               	bcf	status,0,c
  8733  000EBC  364A               	rlcf	??_find_volume,f,c
  8734  000EBE  364B               	rlcf	??_find_volume+1,f,c
  8735  000EC0  364C               	rlcf	??_find_volume+2,f,c
  8736  000EC2  364D               	rlcf	??_find_volume+3,f,c
  8737  000EC4  2EE8               	decfsz	wreg,f,c
  8738  000EC6  D7F9               	goto	u8115
  8739  000EC8  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  8740  000ECC  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8741  000ED0  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8742  000ED4  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8743                           
  8744                           ;ff.c: 2317:  } else {
  8745  000ED8  D091               	goto	l547
  8746  000EDA                     l6162:
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8750  000EDA  EE20 F008          	lfsr	2,8
  8751  000EDE  5198               	movf	find_volume@fs& (0+255),w,b
  8752  000EE0  26D9               	addwf	fsr2l,f,c
  8753  000EE2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8754  000EE4  22DA               	addwfc	fsr2h,f,c
  8755  000EE6  50DE               	movf	postinc2,w,c
  8756  000EE8  10DE               	iorwf	postinc2,w,c
  8757  000EEA  B4D8               	btfsc	status,2,c
  8758  000EEC  D5D9               	goto	u7940
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  8762  000EEE  EE20 F01E          	lfsr	2,30
  8763  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  8764  000EF4  26D9               	addwf	fsr2l,f,c
  8765  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8766  000EF8  22DA               	addwfc	fsr2h,f,c
  8767  000EFA  CFDE F04A          	movff	postinc2,??_find_volume
  8768  000EFE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8769  000F02  CFDE F04C          	movff	postinc2,??_find_volume+2
  8770  000F06  CFDE F04D          	movff	postinc2,??_find_volume+3
  8771  000F0A  518D               	movf	find_volume@fasize& (0+255),w,b
  8772  000F0C  244A               	addwf	??_find_volume,w,c
  8773  000F0E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8774  000F10  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8775  000F12  204B               	addwfc	??_find_volume+1,w,c
  8776  000F14  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8777  000F16  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8778  000F18  204C               	addwfc	??_find_volume+2,w,c
  8779  000F1A  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8780  000F1C  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8781  000F1E  204D               	addwfc	??_find_volume+3,w,c
  8782  000F20  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8783  000F22  EE20 F022          	lfsr	2,34
  8784  000F26  5198               	movf	find_volume@fs& (0+255),w,b
  8785  000F28  26D9               	addwf	fsr2l,f,c
  8786  000F2A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8787  000F2C  22DA               	addwfc	fsr2h,f,c
  8788  000F2E  C04E  FFDE         	movff	??_find_volume+4,postinc2
  8789  000F32  C04F  FFDE         	movff	??_find_volume+5,postinc2
  8790  000F36  C050  FFDE         	movff	??_find_volume+6,postinc2
  8791  000F3A  C051  FFDE         	movff	??_find_volume+7,postinc2
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  8795  000F3E  0E02               	movlw	2
  8796  000F40  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8797  000F42  B4D8               	btfsc	status,2,c
  8798  000F44  D044               	goto	l6174
  8799                           
  8800                           ; BSR set to: 0
  8801  000F46  EE20 F012          	lfsr	2,18
  8802  000F4A  5198               	movf	find_volume@fs& (0+255),w,b
  8803  000F4C  26D9               	addwf	fsr2l,f,c
  8804  000F4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8805  000F50  22DA               	addwfc	fsr2h,f,c
  8806  000F52  CFDE F04A          	movff	postinc2,??_find_volume
  8807  000F56  CFDE F04B          	movff	postinc2,??_find_volume+1
  8808  000F5A  CFDE F04C          	movff	postinc2,??_find_volume+2
  8809  000F5E  CFDE F04D          	movff	postinc2,??_find_volume+3
  8810  000F62  0E01               	movlw	1
  8811  000F64  144A               	andwf	??_find_volume,w,c
  8812  000F66  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8813  000F68  0E00               	movlw	0
  8814  000F6A  144B               	andwf	??_find_volume+1,w,c
  8815  000F6C  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8816  000F6E  0E00               	movlw	0
  8817  000F70  144C               	andwf	??_find_volume+2,w,c
  8818  000F72  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8819  000F74  0E00               	movlw	0
  8820  000F76  144D               	andwf	??_find_volume+3,w,c
  8821  000F78  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8822  000F7A  EE20 F012          	lfsr	2,18
  8823  000F7E  5198               	movf	find_volume@fs& (0+255),w,b
  8824  000F80  26D9               	addwf	fsr2l,f,c
  8825  000F82  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8826  000F84  22DA               	addwfc	fsr2h,f,c
  8827  000F86  CFDE F001          	movff	postinc2,___lmul@multiplier
  8828  000F8A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8829  000F8E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8830  000F92  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8831  000F96  0E03               	movlw	3
  8832  000F98  6E05               	movwf	___lmul@multiplicand,c
  8833  000F9A  0E00               	movlw	0
  8834  000F9C  6E06               	movwf	___lmul@multiplicand+1,c
  8835  000F9E  0E00               	movlw	0
  8836  000FA0  6E07               	movwf	___lmul@multiplicand+2,c
  8837  000FA2  0E00               	movlw	0
  8838  000FA4  6E08               	movwf	___lmul@multiplicand+3,c
  8839  000FA6  EC7E  F02D         	call	___lmul	;wreg free
  8840  000FAA  90D8               	bcf	status,0,c
  8841  000FAC  3204               	rrcf	?___lmul+3,f,c
  8842  000FAE  3203               	rrcf	?___lmul+2,f,c
  8843  000FB0  3202               	rrcf	?___lmul+1,f,c
  8844  000FB2  3201               	rrcf	?___lmul,f,c
  8845  000FB4  504E               	movf	??_find_volume+4,w,c
  8846  000FB6  2401               	addwf	?___lmul,w,c
  8847  000FB8  0100               	movlb	0	; () banked
  8848  000FBA  6F76               	movwf	find_volume@szbfat& (0+255),b
  8849  000FBC  504F               	movf	??_find_volume+5,w,c
  8850  000FBE  2002               	addwfc	?___lmul+1,w,c
  8851  000FC0  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8852  000FC2  5050               	movf	??_find_volume+6,w,c
  8853  000FC4  2003               	addwfc	?___lmul+2,w,c
  8854  000FC6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8855  000FC8  5051               	movf	??_find_volume+7,w,c
  8856  000FCA  2004               	addwfc	?___lmul+3,w,c
  8857  000FCC  D016               	goto	L9
  8858  000FCE                     l6174:
  8859                           
  8860                           ; BSR set to: 0
  8861  000FCE  EE20 F012          	lfsr	2,18
  8862  000FD2  5198               	movf	find_volume@fs& (0+255),w,b
  8863  000FD4  26D9               	addwf	fsr2l,f,c
  8864  000FD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8865  000FD8  22DA               	addwfc	fsr2h,f,c
  8866  000FDA  CFDE F04A          	movff	postinc2,??_find_volume
  8867  000FDE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8868  000FE2  CFDE F04C          	movff	postinc2,??_find_volume+2
  8869  000FE6  CFDE F04D          	movff	postinc2,??_find_volume+3
  8870  000FEA  90D8               	bcf	status,0,c
  8871  000FEC  344A               	rlcf	??_find_volume,w,c
  8872  000FEE  6F76               	movwf	find_volume@szbfat& (0+255),b
  8873  000FF0  344B               	rlcf	??_find_volume+1,w,c
  8874  000FF2  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8875  000FF4  344C               	rlcf	??_find_volume+2,w,c
  8876  000FF6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8877  000FF8  344D               	rlcf	??_find_volume+3,w,c
  8878  000FFA                     L9:
  8879  000FFA  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8880  000FFC                     l547:
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8884  000FFC  0EFF               	movlw	255
  8885  000FFE  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8886  001000  6E4A               	movwf	??_find_volume& (0+255),c
  8887  001002  0E01               	movlw	1
  8888  001004  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8889  001006  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8890  001008  0E00               	movlw	0
  8891  00100A  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8892  00100C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8893  00100E  0E00               	movlw	0
  8894  001010  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8895  001012  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8896  001014  0E0A               	movlw	10
  8897  001016  D005               	goto	u8140
  8898  001018                     u8145:
  8899  001018  90D8               	bcf	status,0,c
  8900  00101A  324D               	rrcf	??_find_volume+3,f,c
  8901  00101C  324C               	rrcf	??_find_volume+2,f,c
  8902  00101E  324B               	rrcf	??_find_volume+1,f,c
  8903  001020  324A               	rrcf	??_find_volume,f,c
  8904  001022                     u8140:
  8905  001022  2EE8               	decfsz	wreg,f,c
  8906  001024  D7F9               	goto	u8145
  8907  001026  EE20 F016          	lfsr	2,22
  8908  00102A  5198               	movf	find_volume@fs& (0+255),w,b
  8909  00102C  26D9               	addwf	fsr2l,f,c
  8910  00102E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8911  001030  22DA               	addwfc	fsr2h,f,c
  8912  001032  504A               	movf	??_find_volume,w,c
  8913  001034  5CDE               	subwf	postinc2,w,c
  8914  001036  504B               	movf	??_find_volume+1,w,c
  8915  001038  58DE               	subwfb	postinc2,w,c
  8916  00103A  504C               	movf	??_find_volume+2,w,c
  8917  00103C  58DE               	subwfb	postinc2,w,c
  8918  00103E  504D               	movf	??_find_volume+3,w,c
  8919  001040  58DE               	subwfb	postinc2,w,c
  8920  001042  A0D8               	btfss	status,0,c
  8921  001044  D52D               	goto	u7940
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8925  001046  EE20 F00E          	lfsr	2,14
  8926  00104A  5198               	movf	find_volume@fs& (0+255),w,b
  8927  00104C  26D9               	addwf	fsr2l,f,c
  8928  00104E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8929  001050  22DA               	addwfc	fsr2h,f,c
  8930  001052  0EFF               	movlw	255
  8931  001054  6EDE               	movwf	postinc2,c
  8932  001056  0EFF               	movlw	255
  8933  001058  6EDE               	movwf	postinc2,c
  8934  00105A  0EFF               	movlw	255
  8935  00105C  6EDE               	movwf	postinc2,c
  8936  00105E  0EFF               	movlw	255
  8937  001060  6EDD               	movwf	postdec2,c
  8938  001062  52DD               	movf	postdec2,f,c
  8939  001064  52DD               	movf	postdec2,f,c
  8940  001066  EE10 F00A          	lfsr	1,10
  8941  00106A  5198               	movf	find_volume@fs& (0+255),w,b
  8942  00106C  26E1               	addwf	fsr1l,f,c
  8943  00106E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8944  001070  22E2               	addwfc	fsr1h,f,c
  8945  001072  CFDE FFE6          	movff	postinc2,postinc1
  8946  001076  CFDE FFE6          	movff	postinc2,postinc1
  8947  00107A  CFDE FFE6          	movff	postinc2,postinc1
  8948  00107E  CFDE FFE6          	movff	postinc2,postinc1
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  8952  001082  EE20 F005          	lfsr	2,5
  8953  001086  5198               	movf	find_volume@fs& (0+255),w,b
  8954  001088  26D9               	addwf	fsr2l,f,c
  8955  00108A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8956  00108C  22DA               	addwfc	fsr2h,f,c
  8957  00108E  0E80               	movlw	128
  8958  001090  6EDF               	movwf	indf2,c
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;ff.c: 2333:  if (fmt == 3
  8962  001092  0E03               	movlw	3
  8963  001094  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8964  001096  A4D8               	btfss	status,2,c
  8965  001098  D083               	goto	l6198
  8966                           
  8967                           ; BSR set to: 0
  8968  00109A  EE20 F05E          	lfsr	2,94
  8969  00109E  5198               	movf	find_volume@fs& (0+255),w,b
  8970  0010A0  26D9               	addwf	fsr2l,f,c
  8971  0010A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8972  0010A4  22DA               	addwfc	fsr2h,f,c
  8973  0010A6  04DE               	decf	postinc2,w,c
  8974  0010A8  10DE               	iorwf	postinc2,w,c
  8975  0010AA  A4D8               	btfss	status,2,c
  8976  0010AC  D079               	goto	l6198
  8977                           
  8978                           ; BSR set to: 0
  8979  0010AE  C098  F030         	movff	find_volume@fs,move_window@fs
  8980  0010B2  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  8981  0010B6  0E01               	movlw	1
  8982  0010B8  2591               	addwf	find_volume@bsect& (0+255),w,b
  8983  0010BA  6E32               	movwf	move_window@sector,c
  8984  0010BC  0E00               	movlw	0
  8985  0010BE  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8986  0010C0  6E33               	movwf	move_window@sector+1,c
  8987  0010C2  0E00               	movlw	0
  8988  0010C4  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8989  0010C6  6E34               	movwf	move_window@sector+2,c
  8990  0010C8  0E00               	movlw	0
  8991  0010CA  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8992  0010CC  6E35               	movwf	move_window@sector+3,c
  8993  0010CE  EC1A  F02B         	call	_move_window	;wreg free
  8994  0010D2  0900               	iorlw	0
  8995  0010D4  A4D8               	btfss	status,2,c
  8996  0010D6  D064               	goto	l6198
  8997                           
  8998                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  8999  0010D8  0100               	movlb	0	; () banked
  9000  0010DA  EE20 F005          	lfsr	2,5
  9001  0010DE  5198               	movf	find_volume@fs& (0+255),w,b
  9002  0010E0  26D9               	addwf	fsr2l,f,c
  9003  0010E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9004  0010E4  22DA               	addwfc	fsr2h,f,c
  9005  0010E6  0E00               	movlw	0
  9006  0010E8  6EDF               	movwf	indf2,c
  9007                           
  9008                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  9009  0010EA  EE22 F02C          	lfsr	2,556
  9010  0010EE  5198               	movf	find_volume@fs& (0+255),w,b
  9011  0010F0  26D9               	addwf	fsr2l,f,c
  9012  0010F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9013  0010F4  22DA               	addwfc	fsr2h,f,c
  9014  0010F6  0E55               	movlw	85
  9015  0010F8  18DE               	xorwf	postinc2,w,c
  9016  0010FA  E152               	bnz	l6198
  9017  0010FC  0EAA               	movlw	170
  9018  0010FE  18DE               	xorwf	postinc2,w,c
  9019  001100  A4D8               	btfss	status,2,c
  9020  001102  D04E               	goto	l6198
  9021                           
  9022                           ; BSR set to: 0
  9023  001104  EE20 F02E          	lfsr	2,46
  9024  001108  5198               	movf	find_volume@fs& (0+255),w,b
  9025  00110A  26D9               	addwf	fsr2l,f,c
  9026  00110C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9027  00110E  22DA               	addwfc	fsr2h,f,c
  9028  001110  0E52               	movlw	82
  9029  001112  18DE               	xorwf	postinc2,w,c
  9030  001114  E145               	bnz	l6198
  9031  001116  0E52               	movlw	82
  9032  001118  18DE               	xorwf	postinc2,w,c
  9033  00111A  E142               	bnz	l6198
  9034  00111C  0E61               	movlw	97
  9035  00111E  18DE               	xorwf	postinc2,w,c
  9036  001120  E13F               	bnz	l6198
  9037  001122  0E41               	movlw	65
  9038  001124  18DE               	xorwf	postinc2,w,c
  9039  001126  A4D8               	btfss	status,2,c
  9040  001128  D03B               	goto	l6198
  9041                           
  9042                           ; BSR set to: 0
  9043  00112A  EE22 F012          	lfsr	2,530
  9044  00112E  5198               	movf	find_volume@fs& (0+255),w,b
  9045  001130  26D9               	addwf	fsr2l,f,c
  9046  001132  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9047  001134  22DA               	addwfc	fsr2h,f,c
  9048  001136  0E72               	movlw	114
  9049  001138  18DE               	xorwf	postinc2,w,c
  9050  00113A  E132               	bnz	l6198
  9051  00113C  0E72               	movlw	114
  9052  00113E  18DE               	xorwf	postinc2,w,c
  9053  001140  E12F               	bnz	l6198
  9054  001142  0E41               	movlw	65
  9055  001144  18DE               	xorwf	postinc2,w,c
  9056  001146  E12C               	bnz	l6198
  9057  001148  0E61               	movlw	97
  9058  00114A  18DE               	xorwf	postinc2,w,c
  9059  00114C  A4D8               	btfss	status,2,c
  9060  00114E  D028               	goto	l6198
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  9064  001150  EE22 F016          	lfsr	2,534
  9065  001154  5198               	movf	find_volume@fs& (0+255),w,b
  9066  001156  26D9               	addwf	fsr2l,f,c
  9067  001158  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9068  00115A  22DA               	addwfc	fsr2h,f,c
  9069  00115C  EE10 F00E          	lfsr	1,14
  9070  001160  5198               	movf	find_volume@fs& (0+255),w,b
  9071  001162  26E1               	addwf	fsr1l,f,c
  9072  001164  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9073  001166  22E2               	addwfc	fsr1h,f,c
  9074  001168  CFDE FFE6          	movff	postinc2,postinc1
  9075  00116C  CFDE FFE6          	movff	postinc2,postinc1
  9076  001170  CFDE FFE6          	movff	postinc2,postinc1
  9077  001174  CFDE FFE6          	movff	postinc2,postinc1
  9078                           
  9079                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  9080  001178  EE22 F01A          	lfsr	2,538
  9081  00117C  5198               	movf	find_volume@fs& (0+255),w,b
  9082  00117E  26D9               	addwf	fsr2l,f,c
  9083  001180  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9084  001182  22DA               	addwfc	fsr2h,f,c
  9085  001184  EE10 F00A          	lfsr	1,10
  9086  001188  5198               	movf	find_volume@fs& (0+255),w,b
  9087  00118A  26E1               	addwf	fsr1l,f,c
  9088  00118C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9089  00118E  22E2               	addwfc	fsr1h,f,c
  9090  001190  CFDE FFE6          	movff	postinc2,postinc1
  9091  001194  CFDE FFE6          	movff	postinc2,postinc1
  9092  001198  CFDE FFE6          	movff	postinc2,postinc1
  9093  00119C  CFDE FFE6          	movff	postinc2,postinc1
  9094  0011A0                     l6198:
  9095                           
  9096                           ;ff.c: 2352:  fs->fs_type = fmt;
  9097  0011A0  C098  FFD9         	movff	find_volume@fs,fsr2l
  9098  0011A4  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  9099  0011A8  C097  FFDF         	movff	find_volume@fmt,indf2
  9100                           
  9101                           ;ff.c: 2353:  fs->id = ++Fsid;
  9102  0011AC  0100               	movlb	0	; () banked
  9103  0011AE  4BDA               	infsnz	_Fsid& (0+255),f,b
  9104  0011B0  2BDB               	incf	(_Fsid+1)& (0+255),f,b
  9105  0011B2  EE20 F006          	lfsr	2,6
  9106  0011B6  5198               	movf	find_volume@fs& (0+255),w,b
  9107  0011B8  26D9               	addwf	fsr2l,f,c
  9108  0011BA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  9109  0011BC  22DA               	addwfc	fsr2h,f,c
  9110  0011BE  C0DA  FFDE         	movff	_Fsid,postinc2
  9111  0011C2  C0DB  FFDD         	movff	_Fsid+1,postdec2
  9112  0011C6  EF5A  F004         	goto	l5978
  9113  0011CA                     __end_of_find_volume:
  9114                           	opt callstack 0
  9115                           
  9116 ;; *************** function _get_ldnumber *****************
  9117 ;; Defined at:
  9118 ;;		line 2114 in file "ff.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  9121 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  9124 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  9125 ;;  i               2   10[COMRAM] unsigned short 
  9126 ;;  vol             2    8[COMRAM] int 
  9127 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  9128 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  2    0[COMRAM] int 
  9131 ;; Registers used:
  9132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9138 ;;      Params:         2       0       0       0       0       0       0       0       0
  9139 ;;      Locals:        10       0       0       0       0       0       0       0       0
  9140 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9141 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9142 ;;Total ram usage:       14 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; This function calls:
  9145 ;;		Nothing
  9146 ;; This function is called by:
  9147 ;;		_find_volume
  9148 ;;		_f_mount
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           	psect	text26
  9153  005180                     __ptext26:
  9154                           	opt callstack 0
  9155  005180                     _get_ldnumber:
  9156                           	opt callstack 27
  9157                           
  9158                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;incstack = 0
  9162  005180  6809               	setf	get_ldnumber@vol,c
  9163  005182  680A               	setf	get_ldnumber@vol+1,c
  9164                           
  9165                           ;ff.c: 2129:  if (*path) {
  9166  005184  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9167  005188  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9168  00518C  50DE               	movf	postinc2,w,c
  9169  00518E  10DE               	iorwf	postinc2,w,c
  9170  005190  B4D8               	btfsc	status,2,c
  9171  005192  D05B               	goto	l5750
  9172                           
  9173                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  9174  005194  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9175  005198  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9176  00519C  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  9177  0051A0  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  9178  0051A4  D002               	goto	l5724
  9179  0051A6                     l5722:
  9180  0051A6  4A0D               	infsnz	get_ldnumber@tt,f,c
  9181  0051A8  2A0E               	incf	get_ldnumber@tt+1,f,c
  9182  0051AA                     l5724:
  9183  0051AA  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9184  0051AE  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9185  0051B2                     	if	0	;tblptru may be non-zero
  9186  0051B2                     	endif
  9187  0051B2                     	if	0	;tblptru may be non-zero
  9188  0051B2                     	endif
  9189  0051B2  0E20               	movlw	32
  9190  0051B4  0008               	tblrd		*
  9191  0051B6  64F5               	cpfsgt	tablat,c
  9192  0051B8  D009               	goto	u7400
  9193  0051BA  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9194  0051BE  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9195  0051C2                     	if	0	;tblptru may be non-zero
  9196  0051C2                     	endif
  9197  0051C2                     	if	0	;tblptru may be non-zero
  9198  0051C2                     	endif
  9199  0051C2  0008               	tblrd		*
  9200  0051C4  50F5               	movf	tablat,w,c
  9201  0051C6  0A3A               	xorlw	58
  9202  0051C8  A4D8               	btfss	status,2,c
  9203  0051CA  D7ED               	goto	l5722
  9204  0051CC                     u7400:
  9205                           
  9206                           ;ff.c: 2131:   if (*tt == ':') {
  9207  0051CC  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9208  0051D0  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9209  0051D4                     	if	0	;tblptru may be non-zero
  9210  0051D4                     	endif
  9211  0051D4                     	if	0	;tblptru may be non-zero
  9212  0051D4                     	endif
  9213  0051D4  0008               	tblrd		*
  9214  0051D6  50F5               	movf	tablat,w,c
  9215  0051D8  0A3A               	xorlw	58
  9216  0051DA  A4D8               	btfss	status,2,c
  9217  0051DC  D03B               	goto	l5754
  9218                           
  9219                           ;ff.c: 2132:    tp = *path;
  9220  0051DE  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9221  0051E2  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9222  0051E6  CFDE F007          	movff	postinc2,get_ldnumber@tp
  9223  0051EA  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  9224                           
  9225                           ;ff.c: 2133:    i = *tp++ - '0';
  9226  0051EE  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  9227  0051F2  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  9228  0051F6                     	if	0	;tblptru may be non-zero
  9229  0051F6                     	endif
  9230  0051F6                     	if	0	;tblptru may be non-zero
  9231  0051F6                     	endif
  9232  0051F6  0008               	tblrd		*
  9233  0051F8  CFF5 F003          	movff	tablat,??_get_ldnumber
  9234  0051FC  0ED0               	movlw	208
  9235  0051FE  2403               	addwf	??_get_ldnumber,w,c
  9236  005200  6E0B               	movwf	get_ldnumber@i,c
  9237  005202  6A0C               	clrf	get_ldnumber@i+1,c
  9238  005204  0EFF               	movlw	255
  9239  005206  220C               	addwfc	get_ldnumber@i+1,f,c
  9240  005208  4A07               	infsnz	get_ldnumber@tp,f,c
  9241  00520A  2A08               	incf	get_ldnumber@tp+1,f,c
  9242                           
  9243                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  9244  00520C  500C               	movf	get_ldnumber@i+1,w,c
  9245  00520E  E11D               	bnz	l5750
  9246  005210  0E0A               	movlw	10
  9247  005212  5C0B               	subwf	get_ldnumber@i,w,c
  9248  005214  B0D8               	btfsc	status,0,c
  9249  005216  D019               	goto	l5750
  9250  005218  500D               	movf	get_ldnumber@tt,w,c
  9251  00521A  1807               	xorwf	get_ldnumber@tp,w,c
  9252  00521C  E116               	bnz	l5750
  9253  00521E  500E               	movf	get_ldnumber@tt+1,w,c
  9254  005220  1808               	xorwf	get_ldnumber@tp+1,w,c
  9255  005222  A4D8               	btfss	status,2,c
  9256  005224  D012               	goto	l5750
  9257                           
  9258                           ;ff.c: 2135:     if (i < 1) {
  9259  005226  500B               	movf	get_ldnumber@i,w,c
  9260  005228  100C               	iorwf	get_ldnumber@i+1,w,c
  9261  00522A  A4D8               	btfss	status,2,c
  9262  00522C  D00E               	goto	l5750
  9263                           
  9264                           ;ff.c: 2136:      vol = (int)i;
  9265  00522E  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  9266  005232  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9267                           
  9268                           ;ff.c: 2137:      *path = ++tt;
  9269  005236  4A0D               	infsnz	get_ldnumber@tt,f,c
  9270  005238  2A0E               	incf	get_ldnumber@tt+1,f,c
  9271  00523A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9272  00523E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9273  005242  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  9274  005246  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  9275  00524A                     l5750:
  9276                           
  9277                           ;ff.c: 2156:    return vol;
  9278  00524A  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9279  00524E  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9280  005252  0012               	return	
  9281  005254                     l5754:
  9282                           
  9283                           ;ff.c: 2161:   vol = 0;
  9284  005254  0E00               	movlw	0
  9285  005256  6E0A               	movwf	get_ldnumber@vol+1,c
  9286  005258  0E00               	movlw	0
  9287  00525A  6E09               	movwf	get_ldnumber@vol,c
  9288  00525C  D7F6               	goto	l5750
  9289  00525E                     __end_of_get_ldnumber:
  9290                           	opt callstack 0
  9291                           
  9292 ;; *************** function _disk_initialize *****************
  9293 ;; Defined at:
  9294 ;;		line 296 in file "diskio.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;  pdrv            1    wreg     unsigned char 
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;  pdrv            1   17[COMRAM] unsigned char 
  9299 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9300 ;;  tmr             2   26[COMRAM] unsigned short 
  9301 ;;  n               1   28[COMRAM] unsigned char 
  9302 ;;  ty              1   25[COMRAM] unsigned char 
  9303 ;;  cmd             1   24[COMRAM] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      unsigned char 
  9306 ;; Registers used:
  9307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0
  9314 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9315 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9316 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9317 ;;Total ram usage:       13 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    5
  9320 ;; This function calls:
  9321 ;;		_SPI1_Exchange8bit
  9322 ;;		_SPI1_Initialize
  9323 ;;		_SPI1_Open
  9324 ;;		_deselect
  9325 ;;		_send_cmd
  9326 ;; This function is called by:
  9327 ;;		_find_volume
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text27
  9332  00415C                     __ptext27:
  9333                           	opt callstack 0
  9334  00415C                     _disk_initialize:
  9335                           	opt callstack 22
  9336                           
  9337                           ;incstack = 0
  9338                           ;disk_initialize@pdrv stored from wreg
  9339  00415C  6E12               	movwf	disk_initialize@pdrv,c
  9340                           
  9341                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  9342  00415E  5012               	movf	disk_initialize@pdrv,w,c
  9343  004160  B4D8               	btfsc	status,2,c
  9344  004162  D002               	goto	l70
  9345  004164  0E01               	movlw	1
  9346  004166  0012               	return	
  9347  004168                     l70:
  9348                           
  9349                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  9350  004168  0100               	movlb	0	; () banked
  9351  00416A  A3F0               	btfss	_Stat& (0+255),1,b
  9352  00416C  D003               	goto	l5354
  9353  00416E                     u6690:
  9354  00416E  0100               	movlb	0	; () banked
  9355  004170  51F0               	movf	_Stat& (0+255),w,b
  9356  004172  0012               	return	
  9357  004174                     l5354:
  9358                           
  9359                           ; BSR set to: 0
  9360                           ;diskio.c: 308:  SPI1_Initialize();
  9361  004174  EC2E  F02F         	call	_SPI1_Initialize	;wreg free
  9362                           
  9363                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  9364  004178  0E0A               	movlw	10
  9365  00417A  6E1D               	movwf	disk_initialize@n,c
  9366  00417C  D004               	goto	l5362
  9367  00417E                     l5358:
  9368  00417E  0EFF               	movlw	255
  9369  004180  EC17  F02F         	call	_SPI1_Exchange8bit
  9370  004184  061D               	decf	disk_initialize@n,f,c
  9371  004186                     l5362:
  9372  004186  501D               	movf	disk_initialize@n,w,c
  9373  004188  A4D8               	btfss	status,2,c
  9374  00418A  D7F9               	goto	l5358
  9375                           
  9376                           ;diskio.c: 311:  ty = 0;
  9377  00418C  0E00               	movlw	0
  9378  00418E  6E1A               	movwf	disk_initialize@ty,c
  9379                           
  9380                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  9381  004190  0E00               	movlw	0
  9382  004192  6E0B               	movwf	send_cmd@arg,c
  9383  004194  0E00               	movlw	0
  9384  004196  6E0C               	movwf	send_cmd@arg+1,c
  9385  004198  0E00               	movlw	0
  9386  00419A  6E0D               	movwf	send_cmd@arg+2,c
  9387  00419C  0E00               	movlw	0
  9388  00419E  6E0E               	movwf	send_cmd@arg+3,c
  9389  0041A0  0E00               	movlw	0
  9390  0041A2  ECF0  F02D         	call	_send_cmd
  9391  0041A6  06E8               	decf	wreg,f,c
  9392  0041A8  A4D8               	btfss	status,2,c
  9393  0041AA  D0C1               	goto	l92
  9394                           
  9395                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  9396  0041AC  0EAA               	movlw	170
  9397  0041AE  6E0B               	movwf	send_cmd@arg,c
  9398  0041B0  0E01               	movlw	1
  9399  0041B2  6E0C               	movwf	send_cmd@arg+1,c
  9400  0041B4  0E00               	movlw	0
  9401  0041B6  6E0D               	movwf	send_cmd@arg+2,c
  9402  0041B8  0E00               	movlw	0
  9403  0041BA  6E0E               	movwf	send_cmd@arg+3,c
  9404  0041BC  0E08               	movlw	8
  9405  0041BE  ECF0  F02D         	call	_send_cmd
  9406  0041C2  06E8               	decf	wreg,f,c
  9407  0041C4  A4D8               	btfss	status,2,c
  9408  0041C6  D067               	goto	l5418
  9409                           
  9410                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9411  0041C8  0E00               	movlw	0
  9412  0041CA  6E1D               	movwf	disk_initialize@n,c
  9413  0041CC                     l5376:
  9414  0041CC  0E13               	movlw	low disk_initialize@ocr
  9415  0041CE  241D               	addwf	disk_initialize@n,w,c
  9416  0041D0  6ED9               	movwf	fsr2l,c
  9417  0041D2  6ADA               	clrf	fsr2h,c
  9418  0041D4  0E00               	movlw	high disk_initialize@ocr
  9419  0041D6  22DA               	addwfc	fsr2h,f,c
  9420  0041D8  0EFF               	movlw	255
  9421  0041DA  EC17  F02F         	call	_SPI1_Exchange8bit
  9422  0041DE  6EDF               	movwf	indf2,c
  9423  0041E0  2A1D               	incf	disk_initialize@n,f,c
  9424  0041E2  0E03               	movlw	3
  9425  0041E4  641D               	cpfsgt	disk_initialize@n,c
  9426  0041E6  D7F2               	goto	l5376
  9427                           
  9428                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9429  0041E8  0415               	decf	disk_initialize@ocr+2,w,c
  9430  0041EA  A4D8               	btfss	status,2,c
  9431  0041EC  D0A0               	goto	l92
  9432  0041EE  0EAA               	movlw	170
  9433  0041F0  1816               	xorwf	disk_initialize@ocr+3,w,c
  9434  0041F2  A4D8               	btfss	status,2,c
  9435  0041F4  D09C               	goto	l92
  9436                           
  9437                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  9438  0041F6  0E03               	movlw	3
  9439  0041F8  6E1C               	movwf	disk_initialize@tmr+1,c
  9440  0041FA  0EE8               	movlw	232
  9441  0041FC  6E1B               	movwf	disk_initialize@tmr,c
  9442  0041FE  D018               	goto	l81
  9443  004200                     l5388:
  9444                           
  9445                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9446  004200  0E00               	movlw	0
  9447  004202  6E0B               	movwf	send_cmd@arg,c
  9448  004204  0E00               	movlw	0
  9449  004206  6E0C               	movwf	send_cmd@arg+1,c
  9450  004208  0E00               	movlw	0
  9451  00420A  6E0D               	movwf	send_cmd@arg+2,c
  9452  00420C  0E40               	movlw	64
  9453  00420E  6E0E               	movwf	send_cmd@arg+3,c
  9454  004210  0EA9               	movlw	169
  9455  004212  ECF0  F02D         	call	_send_cmd
  9456  004216  0900               	iorlw	0
  9457  004218  B4D8               	btfsc	status,2,c
  9458  00421A  D00E               	goto	u6770
  9459                           
  9460                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  9461  00421C  0E03               	movlw	3
  9462  00421E  6E11               	movwf	??_disk_initialize& (0+255),c
  9463  004220  0E98               	movlw	152
  9464  004222                     u10037:
  9465  004222  2EE8               	decfsz	wreg,f,c
  9466  004224  D7FE               	bra	u10037
  9467  004226  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9468  004228  D7FC               	bra	u10037
  9469                           
  9470                           ;diskio.c: 319:     }
  9471  00422A  061B               	decf	disk_initialize@tmr,f,c
  9472  00422C  A0D8               	btfss	status,0,c
  9473  00422E  061C               	decf	disk_initialize@tmr+1,f,c
  9474  004230                     l81:
  9475  004230  501B               	movf	disk_initialize@tmr,w,c
  9476  004232  101C               	iorwf	disk_initialize@tmr+1,w,c
  9477  004234  A4D8               	btfss	status,2,c
  9478  004236  D7E4               	goto	l5388
  9479  004238                     u6770:
  9480                           
  9481                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  9482  004238  501B               	movf	disk_initialize@tmr,w,c
  9483  00423A  101C               	iorwf	disk_initialize@tmr+1,w,c
  9484  00423C  B4D8               	btfsc	status,2,c
  9485  00423E  D077               	goto	l92
  9486  004240  0E00               	movlw	0
  9487  004242  6E0B               	movwf	send_cmd@arg,c
  9488  004244  0E00               	movlw	0
  9489  004246  6E0C               	movwf	send_cmd@arg+1,c
  9490  004248  0E00               	movlw	0
  9491  00424A  6E0D               	movwf	send_cmd@arg+2,c
  9492  00424C  0E00               	movlw	0
  9493  00424E  6E0E               	movwf	send_cmd@arg+3,c
  9494  004250  0E3A               	movlw	58
  9495  004252  ECF0  F02D         	call	_send_cmd
  9496  004256  0900               	iorlw	0
  9497  004258  A4D8               	btfss	status,2,c
  9498  00425A  D069               	goto	l92
  9499                           
  9500                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9501  00425C  0E00               	movlw	0
  9502  00425E  6E1D               	movwf	disk_initialize@n,c
  9503  004260                     l5406:
  9504  004260  0E13               	movlw	low disk_initialize@ocr
  9505  004262  241D               	addwf	disk_initialize@n,w,c
  9506  004264  6ED9               	movwf	fsr2l,c
  9507  004266  6ADA               	clrf	fsr2h,c
  9508  004268  0E00               	movlw	high disk_initialize@ocr
  9509  00426A  22DA               	addwfc	fsr2h,f,c
  9510  00426C  0EFF               	movlw	255
  9511  00426E  EC17  F02F         	call	_SPI1_Exchange8bit
  9512  004272  6EDF               	movwf	indf2,c
  9513  004274  2A1D               	incf	disk_initialize@n,f,c
  9514  004276  0E03               	movlw	3
  9515  004278  641D               	cpfsgt	disk_initialize@n,c
  9516  00427A  D7F2               	goto	l5406
  9517                           
  9518                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9519  00427C  BC13               	btfsc	disk_initialize@ocr,6,c
  9520  00427E  D004               	goto	l5414
  9521  004280  0E00               	movlw	0
  9522  004282  6E18               	movwf	_disk_initialize$134+1,c
  9523  004284  0E04               	movlw	4
  9524  004286  D003               	goto	L10
  9525  004288                     l5414:
  9526  004288  0E00               	movlw	0
  9527  00428A  6E18               	movwf	_disk_initialize$134+1,c
  9528  00428C  0E0C               	movlw	12
  9529  00428E                     L10:
  9530  00428E  6E17               	movwf	_disk_initialize$134,c
  9531  004290  C017  F01A         	movff	_disk_initialize$134,disk_initialize@ty
  9532  004294  D04C               	goto	l92
  9533  004296                     l5418:
  9534                           
  9535                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  9536  004296  0E00               	movlw	0
  9537  004298  6E0B               	movwf	send_cmd@arg,c
  9538  00429A  0E00               	movlw	0
  9539  00429C  6E0C               	movwf	send_cmd@arg+1,c
  9540  00429E  0E00               	movlw	0
  9541  0042A0  6E0D               	movwf	send_cmd@arg+2,c
  9542  0042A2  0E00               	movlw	0
  9543  0042A4  6E0E               	movwf	send_cmd@arg+3,c
  9544  0042A6  0EA9               	movlw	169
  9545  0042A8  ECF0  F02D         	call	_send_cmd
  9546  0042AC  6E11               	movwf	??_disk_initialize& (0+255),c
  9547  0042AE  0E02               	movlw	2
  9548  0042B0  6011               	cpfslt	??_disk_initialize,c
  9549  0042B2  D004               	goto	l5422
  9550                           
  9551                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  9552  0042B4  0E02               	movlw	2
  9553  0042B6  6E1A               	movwf	disk_initialize@ty,c
  9554  0042B8  0EA9               	movlw	169
  9555  0042BA  D003               	goto	L11
  9556  0042BC                     l5422:
  9557                           
  9558                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  9559  0042BC  0E01               	movlw	1
  9560  0042BE  6E1A               	movwf	disk_initialize@ty,c
  9561  0042C0  0E01               	movlw	1
  9562  0042C2                     L11:
  9563  0042C2  6E19               	movwf	disk_initialize@cmd,c
  9564                           
  9565                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  9566                           
  9567                           ;diskio.c: 330:    }
  9568  0042C4  0E03               	movlw	3
  9569  0042C6  6E1C               	movwf	disk_initialize@tmr+1,c
  9570  0042C8  0EE8               	movlw	232
  9571  0042CA  6E1B               	movwf	disk_initialize@tmr,c
  9572  0042CC  D018               	goto	l95
  9573  0042CE                     l5424:
  9574                           
  9575                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  9576  0042CE  0E00               	movlw	0
  9577  0042D0  6E0B               	movwf	send_cmd@arg,c
  9578  0042D2  0E00               	movlw	0
  9579  0042D4  6E0C               	movwf	send_cmd@arg+1,c
  9580  0042D6  0E00               	movlw	0
  9581  0042D8  6E0D               	movwf	send_cmd@arg+2,c
  9582  0042DA  0E00               	movlw	0
  9583  0042DC  6E0E               	movwf	send_cmd@arg+3,c
  9584  0042DE  5019               	movf	disk_initialize@cmd,w,c
  9585  0042E0  ECF0  F02D         	call	_send_cmd
  9586  0042E4  0900               	iorlw	0
  9587  0042E6  B4D8               	btfsc	status,2,c
  9588  0042E8  D00E               	goto	u6840
  9589                           
  9590                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  9591  0042EA  0E03               	movlw	3
  9592  0042EC  6E11               	movwf	??_disk_initialize& (0+255),c
  9593  0042EE  0E98               	movlw	152
  9594  0042F0                     u10047:
  9595  0042F0  2EE8               	decfsz	wreg,f,c
  9596  0042F2  D7FE               	bra	u10047
  9597  0042F4  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9598  0042F6  D7FC               	bra	u10047
  9599                           
  9600                           ;diskio.c: 334:    }
  9601  0042F8  061B               	decf	disk_initialize@tmr,f,c
  9602  0042FA  A0D8               	btfss	status,0,c
  9603  0042FC  061C               	decf	disk_initialize@tmr+1,f,c
  9604  0042FE                     l95:
  9605  0042FE  501B               	movf	disk_initialize@tmr,w,c
  9606  004300  101C               	iorwf	disk_initialize@tmr+1,w,c
  9607  004302  A4D8               	btfss	status,2,c
  9608  004304  D7E4               	goto	l5424
  9609  004306                     u6840:
  9610                           
  9611                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  9612  004306  501B               	movf	disk_initialize@tmr,w,c
  9613  004308  101C               	iorwf	disk_initialize@tmr+1,w,c
  9614  00430A  B4D8               	btfsc	status,2,c
  9615  00430C  D00E               	goto	u6860
  9616  00430E  0E00               	movlw	0
  9617  004310  6E0B               	movwf	send_cmd@arg,c
  9618  004312  0E02               	movlw	2
  9619  004314  6E0C               	movwf	send_cmd@arg+1,c
  9620  004316  0E00               	movlw	0
  9621  004318  6E0D               	movwf	send_cmd@arg+2,c
  9622  00431A  0E00               	movlw	0
  9623  00431C  6E0E               	movwf	send_cmd@arg+3,c
  9624  00431E  0E10               	movlw	16
  9625  004320  ECF0  F02D         	call	_send_cmd
  9626  004324  0900               	iorlw	0
  9627  004326  B4D8               	btfsc	status,2,c
  9628  004328  D002               	goto	l92
  9629  00432A                     u6860:
  9630                           
  9631                           ;diskio.c: 336:     ty = 0;
  9632  00432A  0E00               	movlw	0
  9633  00432C  6E1A               	movwf	disk_initialize@ty,c
  9634  00432E                     l92:
  9635                           
  9636                           ;diskio.c: 339:  CardType = ty;
  9637  00432E  C01A  F0DF         	movff	disk_initialize@ty,_CardType
  9638                           
  9639                           ;diskio.c: 340:  deselect();
  9640  004332  EC42  F02F         	call	_deselect	;wreg free
  9641                           
  9642                           ;diskio.c: 342:  if (ty) {
  9643  004336  501A               	movf	disk_initialize@ty,w,c
  9644  004338  B4D8               	btfsc	status,2,c
  9645  00433A  D719               	goto	u6690
  9646                           
  9647                           ;diskio.c: 343:   Stat &= ~0x01;
  9648  00433C  0100               	movlb	0	; () banked
  9649  00433E  91F0               	bcf	_Stat& (0+255),0,b
  9650                           
  9651                           ; BSR set to: 0
  9652                           ;diskio.c: 344:   SPI1_Open();
  9653  004340  EC27  F02F         	call	_SPI1_Open	;wreg free
  9654  004344  D714               	goto	u6690
  9655  004346                     __end_of_disk_initialize:
  9656                           	opt callstack 0
  9657                           
  9658 ;; *************** function _SPI1_Open *****************
  9659 ;; Defined at:
  9660 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      void 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0
  9675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9677 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9678 ;;Total ram usage:        0 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; This function calls:
  9681 ;;		Nothing
  9682 ;; This function is called by:
  9683 ;;		_disk_initialize
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           	psect	text28
  9688  005E4E                     __ptext28:
  9689                           	opt callstack 0
  9690  005E4E                     _SPI1_Open:
  9691                           	opt callstack 26
  9692                           
  9693                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  9694                           
  9695                           ;incstack = 0
  9696  005E4E  0E40               	movlw	64
  9697  005E50  6EC7               	movwf	4039,c	;volatile
  9698                           
  9699                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  9700  005E52  0E20               	movlw	32
  9701  005E54  6EC6               	movwf	4038,c	;volatile
  9702                           
  9703                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  9704  005E56  0E00               	movlw	0
  9705  005E58  6EC8               	movwf	4040,c	;volatile
  9706  005E5A  0012               	return		;funcret
  9707  005E5C                     __end_of_SPI1_Open:
  9708                           	opt callstack 0
  9709                           
  9710 ;; *************** function _check_fs *****************
  9711 ;; Defined at:
  9712 ;;		line 2175 in file "ff.c"
  9713 ;; Parameters:    Size  Location     Type
  9714 ;;  fs              2   58[COMRAM] PTR struct .
  9715 ;;		 -> FatFs(558), NULL(0), 
  9716 ;;  sect            4   60[COMRAM] unsigned long 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  1    wreg      unsigned char 
  9721 ;; Registers used:
  9722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9728 ;;      Params:         6       0       0       0       0       0       0       0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9730 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9731 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9732 ;;Total ram usage:       10 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    8
  9735 ;; This function calls:
  9736 ;;		_move_window
  9737 ;; This function is called by:
  9738 ;;		_find_volume
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           	psect	text29
  9743  005094                     __ptext29:
  9744                           	opt callstack 0
  9745  005094                     _check_fs:
  9746                           	opt callstack 19
  9747                           
  9748                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  9749                           
  9750                           ;incstack = 0
  9751  005094  EE20 F004          	lfsr	2,4
  9752  005098  503B               	movf	check_fs@fs,w,c
  9753  00509A  26D9               	addwf	fsr2l,f,c
  9754  00509C  503C               	movf	check_fs@fs+1,w,c
  9755  00509E  22DA               	addwfc	fsr2h,f,c
  9756  0050A0  0E00               	movlw	0
  9757  0050A2  6EDF               	movwf	indf2,c
  9758  0050A4  EE20 F02A          	lfsr	2,42
  9759  0050A8  503B               	movf	check_fs@fs,w,c
  9760  0050AA  26D9               	addwf	fsr2l,f,c
  9761  0050AC  503C               	movf	check_fs@fs+1,w,c
  9762  0050AE  22DA               	addwfc	fsr2h,f,c
  9763  0050B0  0EFF               	movlw	255
  9764  0050B2  6EDE               	movwf	postinc2,c
  9765  0050B4  0EFF               	movlw	255
  9766  0050B6  6EDE               	movwf	postinc2,c
  9767  0050B8  0EFF               	movlw	255
  9768  0050BA  6EDE               	movwf	postinc2,c
  9769  0050BC  0EFF               	movlw	255
  9770  0050BE  6EDD               	movwf	postdec2,c
  9771                           
  9772                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  9773  0050C0  C03B  F030         	movff	check_fs@fs,move_window@fs
  9774  0050C4  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9775  0050C8  C03D  F032         	movff	check_fs@sect,move_window@sector
  9776  0050CC  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9777  0050D0  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9778  0050D4  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9779  0050D8  EC1A  F02B         	call	_move_window	;wreg free
  9780  0050DC  0900               	iorlw	0
  9781  0050DE  B4D8               	btfsc	status,2,c
  9782  0050E0  D002               	goto	l5768
  9783                           
  9784                           ;ff.c: 2182:   return 3;
  9785  0050E2  0E03               	movlw	3
  9786  0050E4  0012               	return	
  9787  0050E6                     l5768:
  9788                           
  9789                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9790  0050E6  EE22 F02C          	lfsr	2,556
  9791  0050EA  503B               	movf	check_fs@fs,w,c
  9792  0050EC  26D9               	addwf	fsr2l,f,c
  9793  0050EE  503C               	movf	check_fs@fs+1,w,c
  9794  0050F0  22DA               	addwfc	fsr2h,f,c
  9795  0050F2  0E55               	movlw	85
  9796  0050F4  18DE               	xorwf	postinc2,w,c
  9797  0050F6  E104               	bnz	u7460
  9798  0050F8  0EAA               	movlw	170
  9799  0050FA  18DE               	xorwf	postinc2,w,c
  9800  0050FC  B4D8               	btfsc	status,2,c
  9801  0050FE  D002               	goto	l5774
  9802  005100                     u7460:
  9803                           
  9804                           ;ff.c: 2185:   return 2;
  9805  005100  0E02               	movlw	2
  9806  005102  0012               	return	
  9807  005104                     l5774:
  9808                           
  9809                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9810  005104  EE20 F064          	lfsr	2,100
  9811  005108  503B               	movf	check_fs@fs,w,c
  9812  00510A  26D9               	addwf	fsr2l,f,c
  9813  00510C  503C               	movf	check_fs@fs+1,w,c
  9814  00510E  22DA               	addwfc	fsr2h,f,c
  9815  005110  0EFF               	movlw	255
  9816  005112  14DE               	andwf	postinc2,w,c
  9817  005114  6E41               	movwf	??_check_fs& (0+255),c
  9818  005116  0EFF               	movlw	255
  9819  005118  14DE               	andwf	postinc2,w,c
  9820  00511A  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9821  00511C  0EFF               	movlw	255
  9822  00511E  14DE               	andwf	postinc2,w,c
  9823  005120  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9824  005122  0E00               	movlw	0
  9825  005124  14DE               	andwf	postinc2,w,c
  9826  005126  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9827  005128  0E46               	movlw	70
  9828  00512A  1841               	xorwf	??_check_fs,w,c
  9829  00512C  E10A               	bnz	l5780
  9830  00512E  0E41               	movlw	65
  9831  005130  1842               	xorwf	??_check_fs+1,w,c
  9832  005132  E107               	bnz	l5780
  9833  005134  0E54               	movlw	84
  9834  005136  1843               	xorwf	??_check_fs+2,w,c
  9835  005138  1044               	iorwf	??_check_fs+3,w,c
  9836  00513A  A4D8               	btfss	status,2,c
  9837  00513C  D002               	goto	l5780
  9838  00513E                     u7470:
  9839                           
  9840                           ;ff.c: 2188:   return 0;
  9841  00513E  0E00               	movlw	0
  9842  005140  0012               	return	
  9843  005142                     l5780:
  9844                           
  9845                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9846  005142  EE20 F080          	lfsr	2,128
  9847  005146  503B               	movf	check_fs@fs,w,c
  9848  005148  26D9               	addwf	fsr2l,f,c
  9849  00514A  503C               	movf	check_fs@fs+1,w,c
  9850  00514C  22DA               	addwfc	fsr2h,f,c
  9851  00514E  0EFF               	movlw	255
  9852  005150  14DE               	andwf	postinc2,w,c
  9853  005152  6E41               	movwf	??_check_fs& (0+255),c
  9854  005154  0EFF               	movlw	255
  9855  005156  14DE               	andwf	postinc2,w,c
  9856  005158  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9857  00515A  0EFF               	movlw	255
  9858  00515C  14DE               	andwf	postinc2,w,c
  9859  00515E  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9860  005160  0E00               	movlw	0
  9861  005162  14DE               	andwf	postinc2,w,c
  9862  005164  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9863  005166  0E46               	movlw	70
  9864  005168  1841               	xorwf	??_check_fs,w,c
  9865  00516A  E108               	bnz	l5786
  9866  00516C  0E41               	movlw	65
  9867  00516E  1842               	xorwf	??_check_fs+1,w,c
  9868  005170  E105               	bnz	l5786
  9869  005172  0E54               	movlw	84
  9870  005174  1843               	xorwf	??_check_fs+2,w,c
  9871  005176  1044               	iorwf	??_check_fs+3,w,c
  9872  005178  B4D8               	btfsc	status,2,c
  9873  00517A  D7E1               	goto	u7470
  9874  00517C                     l5786:
  9875                           
  9876                           ;ff.c: 2192:  return 1;
  9877  00517C  0E01               	movlw	1
  9878  00517E  0012               	return		;funcret
  9879  005180                     __end_of_check_fs:
  9880                           	opt callstack 0
  9881                           
  9882 ;; *************** function _f_lseek *****************
  9883 ;; Defined at:
  9884 ;;		line 3033 in file "ff.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;  fp              2   13[BANK0 ] PTR struct .
  9887 ;;		 -> Fil(32), 
  9888 ;;  ofs             4   15[BANK0 ] unsigned long 
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;  clst            4   48[BANK0 ] unsigned long 
  9891 ;;  bcs             4   44[BANK0 ] unsigned long 
  9892 ;;  nsect           4   40[BANK0 ] unsigned long 
  9893 ;;  ifptr           4   35[BANK0 ] unsigned long 
  9894 ;;  res             1   39[BANK0 ] enum E93
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  1    wreg      enum E93
  9897 ;; Registers used:
  9898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9904 ;;      Params:         0       6       0       0       0       0       0       0       0
  9905 ;;      Locals:         0      17       0       0       0       0       0       0       0
  9906 ;;      Temps:          0      16       0       0       0       0       0       0       0
  9907 ;;      Totals:         0      39       0       0       0       0       0       0       0
  9908 ;;Total ram usage:       39 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:   10
  9911 ;; This function calls:
  9912 ;;		___lldiv
  9913 ;;		_clust2sect
  9914 ;;		_create_chain
  9915 ;;		_get_fat
  9916 ;;		_validate
  9917 ;; This function is called by:
  9918 ;;		_guardar
  9919 ;; This function uses a non-reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text30
  9923  00192E                     __ptext30:
  9924                           	opt callstack 0
  9925  00192E                     _f_lseek:
  9926                           	opt callstack 19
  9927                           
  9928                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  9929                           
  9930                           ;incstack = 0
  9931  00192E  C06D  F002         	movff	f_lseek@fp,validate@obj
  9932  001932  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9933  001936  EC6D  F02B         	call	_validate	;wreg free
  9934  00193A  0100               	movlb	0	; () banked
  9935  00193C  6F87               	movwf	f_lseek@res& (0+255),b
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;ff.c: 3046:  if (res != FR_OK) return res;
  9939  00193E  5187               	movf	f_lseek@res& (0+255),w,b
  9940  001940  B4D8               	btfsc	status,2,c
  9941  001942  D002               	goto	l6936
  9942  001944                     u9400:
  9943                           
  9944                           ; BSR set to: 0
  9945  001944  5187               	movf	f_lseek@res& (0+255),w,b
  9946  001946  0012               	return	
  9947  001948                     l6936:
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;ff.c: 3047:  if (fp->err)
  9951  001948  EE20 F005          	lfsr	2,5
  9952  00194C  516D               	movf	f_lseek@fp& (0+255),w,b
  9953  00194E  26D9               	addwf	fsr2l,f,c
  9954  001950  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9955  001952  22DA               	addwfc	fsr2h,f,c
  9956  001954  50DF               	movf	indf2,w,c
  9957  001956  B4D8               	btfsc	status,2,c
  9958  001958  D008               	goto	l6942
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;ff.c: 3048:   return (FRESULT)fp->err;
  9962  00195A  EE20 F005          	lfsr	2,5
  9963  00195E  516D               	movf	f_lseek@fp& (0+255),w,b
  9964  001960  26D9               	addwf	fsr2l,f,c
  9965  001962  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9966  001964  22DA               	addwfc	fsr2h,f,c
  9967  001966  50DF               	movf	indf2,w,c
  9968  001968  0012               	return	
  9969  00196A                     l6942:
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  9973  00196A  EE20 F00A          	lfsr	2,10
  9974  00196E  516D               	movf	f_lseek@fp& (0+255),w,b
  9975  001970  26D9               	addwf	fsr2l,f,c
  9976  001972  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9977  001974  22DA               	addwfc	fsr2h,f,c
  9978  001976  516F               	movf	f_lseek@ofs& (0+255),w,b
  9979  001978  5CDE               	subwf	postinc2,w,c
  9980  00197A  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9981  00197C  58DE               	subwfb	postinc2,w,c
  9982  00197E  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9983  001980  58DE               	subwfb	postinc2,w,c
  9984  001982  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9985  001984  58DE               	subwfb	postinc2,w,c
  9986  001986  B0D8               	btfsc	status,0,c
  9987  001988  D016               	goto	l667
  9988                           
  9989                           ; BSR set to: 0
  9990  00198A  EE20 F004          	lfsr	2,4
  9991  00198E  516D               	movf	f_lseek@fp& (0+255),w,b
  9992  001990  26D9               	addwf	fsr2l,f,c
  9993  001992  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9994  001994  22DA               	addwfc	fsr2h,f,c
  9995  001996  B2DF               	btfsc	indf2,1,c
  9996  001998  D00E               	goto	l667
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;ff.c: 3111:    ) ofs = fp->fsize;
 10000  00199A  EE20 F00A          	lfsr	2,10
 10001  00199E  516D               	movf	f_lseek@fp& (0+255),w,b
 10002  0019A0  26D9               	addwf	fsr2l,f,c
 10003  0019A2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10004  0019A4  22DA               	addwfc	fsr2h,f,c
 10005  0019A6  CFDE F06F          	movff	postinc2,f_lseek@ofs
 10006  0019AA  CFDE F070          	movff	postinc2,f_lseek@ofs+1
 10007  0019AE  CFDE F071          	movff	postinc2,f_lseek@ofs+2
 10008  0019B2  CFDE F072          	movff	postinc2,f_lseek@ofs+3
 10009  0019B6                     l667:
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;ff.c: 3113:   ifptr = fp->fptr;
 10013  0019B6  EE20 F006          	lfsr	2,6
 10014  0019BA  516D               	movf	f_lseek@fp& (0+255),w,b
 10015  0019BC  26D9               	addwf	fsr2l,f,c
 10016  0019BE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10017  0019C0  22DA               	addwfc	fsr2h,f,c
 10018  0019C2  CFDE F083          	movff	postinc2,f_lseek@ifptr
 10019  0019C6  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
 10020  0019CA  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
 10021  0019CE  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
 10022                           
 10023                           ;ff.c: 3114:   fp->fptr = nsect = 0;
 10024  0019D2  0E00               	movlw	0
 10025  0019D4  6F88               	movwf	f_lseek@nsect& (0+255),b
 10026  0019D6  0E00               	movlw	0
 10027  0019D8  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
 10028  0019DA  0E00               	movlw	0
 10029  0019DC  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
 10030  0019DE  0E00               	movlw	0
 10031  0019E0  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
 10032  0019E2  EE20 F006          	lfsr	2,6
 10033  0019E6  516D               	movf	f_lseek@fp& (0+255),w,b
 10034  0019E8  26D9               	addwf	fsr2l,f,c
 10035  0019EA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10036  0019EC  22DA               	addwfc	fsr2h,f,c
 10037  0019EE  C088  FFDE         	movff	f_lseek@nsect,postinc2
 10038  0019F2  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
 10039  0019F6  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
 10040  0019FA  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;ff.c: 3115:   if (ofs) {
 10044  0019FE  516F               	movf	f_lseek@ofs& (0+255),w,b
 10045  001A00  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
 10046  001A02  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
 10047  001A04  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
 10048  001A06  B4D8               	btfsc	status,2,c
 10049  001A08  D22D               	goto	l7036
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
 10053  001A0A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10054  001A0E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10055  001A12  EE10 F002          	lfsr	1,2
 10056  001A16  50DE               	movf	postinc2,w,c
 10057  001A18  26E1               	addwf	fsr1l,f,c
 10058  001A1A  50DD               	movf	postdec2,w,c
 10059  001A1C  22E2               	addwfc	fsr1h,f,c
 10060  001A1E  50E7               	movf	indf1,w,c
 10061  001A20  6F73               	movwf	??_f_lseek& (0+255),b
 10062  001A22  C073  F074         	movff	??_f_lseek,??_f_lseek+1
 10063  001A26  6B75               	clrf	(??_f_lseek+2)& (0+255),b
 10064  001A28  6B76               	clrf	(??_f_lseek+3)& (0+255),b
 10065  001A2A  6B77               	clrf	(??_f_lseek+4)& (0+255),b
 10066  001A2C  0E09               	movlw	9
 10067  001A2E                     u9455:
 10068  001A2E  90D8               	bcf	status,0,c
 10069  001A30  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
 10070  001A32  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
 10071  001A34  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
 10072  001A36  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
 10073  001A38  2EE8               	decfsz	wreg,f,c
 10074  001A3A  D7F9               	goto	u9455
 10075  001A3C  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
 10076  001A40  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
 10077  001A44  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
 10078  001A48  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;ff.c: 3117:    if (ifptr > 0 &&
 10082  001A4C  5183               	movf	f_lseek@ifptr& (0+255),w,b
 10083  001A4E  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
 10084  001A50  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
 10085  001A52  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
 10086  001A54  B4D8               	btfsc	status,2,c
 10087  001A56  D097               	goto	l6958
 10088                           
 10089                           ; BSR set to: 0
 10090  001A58  0EFF               	movlw	255
 10091  001A5A  256F               	addwf	f_lseek@ofs& (0+255),w,b
 10092  001A5C  6E01               	movwf	___lldiv@dividend,c
 10093  001A5E  0EFF               	movlw	255
 10094  001A60  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
 10095  001A62  6E02               	movwf	___lldiv@dividend+1,c
 10096  001A64  0EFF               	movlw	255
 10097  001A66  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
 10098  001A68  6E03               	movwf	___lldiv@dividend+2,c
 10099  001A6A  0EFF               	movlw	255
 10100  001A6C  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
 10101  001A6E  6E04               	movwf	___lldiv@dividend+3,c
 10102  001A70  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10103  001A74  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10104  001A78  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10105  001A7C  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10106  001A80  ECB7  F02B         	call	___lldiv	;wreg free
 10107  001A84  C001  F073         	movff	?___lldiv,??_f_lseek
 10108  001A88  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
 10109  001A8C  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
 10110  001A90  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
 10111  001A94  0EFF               	movlw	255
 10112  001A96  0100               	movlb	0	; () banked
 10113  001A98  2583               	addwf	f_lseek@ifptr& (0+255),w,b
 10114  001A9A  6E01               	movwf	___lldiv@dividend,c
 10115  001A9C  0EFF               	movlw	255
 10116  001A9E  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10117  001AA0  6E02               	movwf	___lldiv@dividend+1,c
 10118  001AA2  0EFF               	movlw	255
 10119  001AA4  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10120  001AA6  6E03               	movwf	___lldiv@dividend+2,c
 10121  001AA8  0EFF               	movlw	255
 10122  001AAA  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10123  001AAC  6E04               	movwf	___lldiv@dividend+3,c
 10124  001AAE  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
 10125  001AB2  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
 10126  001AB6  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
 10127  001ABA  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
 10128  001ABE  ECB7  F02B         	call	___lldiv	;wreg free
 10129  001AC2  5001               	movf	?___lldiv,w,c
 10130  001AC4  0100               	movlb	0	; () banked
 10131  001AC6  5D73               	subwf	??_f_lseek& (0+255),w,b
 10132  001AC8  5002               	movf	?___lldiv+1,w,c
 10133  001ACA  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
 10134  001ACC  5003               	movf	?___lldiv+2,w,c
 10135  001ACE  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
 10136  001AD0  5004               	movf	?___lldiv+3,w,c
 10137  001AD2  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
 10138  001AD4  A0D8               	btfss	status,0,c
 10139  001AD6  D057               	goto	l6958
 10140                           
 10141                           ; BSR set to: 0
 10142                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
 10143  001AD8  0EFF               	movlw	255
 10144  001ADA  258C               	addwf	f_lseek@bcs& (0+255),w,b
 10145  001ADC  6F73               	movwf	??_f_lseek& (0+255),b
 10146  001ADE  0EFF               	movlw	255
 10147  001AE0  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
 10148  001AE2  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10149  001AE4  0EFF               	movlw	255
 10150  001AE6  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
 10151  001AE8  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10152  001AEA  0EFF               	movlw	255
 10153  001AEC  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
 10154  001AEE  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10155  001AF0  1D73               	comf	??_f_lseek& (0+255),w,b
 10156  001AF2  6F77               	movwf	(??_f_lseek+4)& (0+255),b
 10157  001AF4  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
 10158  001AF6  6F78               	movwf	(??_f_lseek+5)& (0+255),b
 10159  001AF8  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
 10160  001AFA  6F79               	movwf	(??_f_lseek+6)& (0+255),b
 10161  001AFC  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
 10162  001AFE  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
 10163  001B00  0EFF               	movlw	255
 10164  001B02  2583               	addwf	f_lseek@ifptr& (0+255),w,b
 10165  001B04  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
 10166  001B06  0EFF               	movlw	255
 10167  001B08  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10168  001B0A  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
 10169  001B0C  0EFF               	movlw	255
 10170  001B0E  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10171  001B10  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
 10172  001B12  0EFF               	movlw	255
 10173  001B14  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10174  001B16  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
 10175  001B18  5177               	movf	(??_f_lseek+4)& (0+255),w,b
 10176  001B1A  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
 10177  001B1C  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
 10178  001B1E  5178               	movf	(??_f_lseek+5)& (0+255),w,b
 10179  001B20  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
 10180  001B22  6F80               	movwf	(??_f_lseek+13)& (0+255),b
 10181  001B24  5179               	movf	(??_f_lseek+6)& (0+255),w,b
 10182  001B26  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
 10183  001B28  6F81               	movwf	(??_f_lseek+14)& (0+255),b
 10184  001B2A  517A               	movf	(??_f_lseek+7)& (0+255),w,b
 10185  001B2C  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
 10186  001B2E  6F82               	movwf	(??_f_lseek+15)& (0+255),b
 10187  001B30  EE20 F006          	lfsr	2,6
 10188  001B34  516D               	movf	f_lseek@fp& (0+255),w,b
 10189  001B36  26D9               	addwf	fsr2l,f,c
 10190  001B38  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10191  001B3A  22DA               	addwfc	fsr2h,f,c
 10192  001B3C  C07F  FFDE         	movff	??_f_lseek+12,postinc2
 10193  001B40  C080  FFDE         	movff	??_f_lseek+13,postinc2
 10194  001B44  C081  FFDE         	movff	??_f_lseek+14,postinc2
 10195  001B48  C082  FFDE         	movff	??_f_lseek+15,postinc2
 10196                           
 10197                           ;ff.c: 3120:     ofs -= fp->fptr;
 10198  001B4C  EE20 F006          	lfsr	2,6
 10199  001B50  516D               	movf	f_lseek@fp& (0+255),w,b
 10200  001B52  26D9               	addwf	fsr2l,f,c
 10201  001B54  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10202  001B56  22DA               	addwfc	fsr2h,f,c
 10203  001B58  50DE               	movf	postinc2,w,c
 10204  001B5A  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10205  001B5C  50DE               	movf	postinc2,w,c
 10206  001B5E  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10207  001B60  50DE               	movf	postinc2,w,c
 10208  001B62  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10209  001B64  50DD               	movf	postdec2,w,c
 10210  001B66  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10211                           
 10212                           ;ff.c: 3121:     clst = fp->clust;
 10213  001B68  EE20 F012          	lfsr	2,18
 10214  001B6C  516D               	movf	f_lseek@fp& (0+255),w,b
 10215  001B6E  26D9               	addwf	fsr2l,f,c
 10216  001B70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10217  001B72  22DA               	addwfc	fsr2h,f,c
 10218  001B74  CFDE F090          	movff	postinc2,f_lseek@clst
 10219  001B78  CFDE F091          	movff	postinc2,f_lseek@clst+1
 10220  001B7C  CFDE F092          	movff	postinc2,f_lseek@clst+2
 10221  001B80  CFDE F093          	movff	postinc2,f_lseek@clst+3
 10222                           
 10223                           ;ff.c: 3122:    } else {
 10224  001B84  D06E               	goto	l6982
 10225  001B86                     l6958:
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;ff.c: 3123:     clst = fp->sclust;
 10229  001B86  EE20 F00E          	lfsr	2,14
 10230  001B8A  516D               	movf	f_lseek@fp& (0+255),w,b
 10231  001B8C  26D9               	addwf	fsr2l,f,c
 10232  001B8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10233  001B90  22DA               	addwfc	fsr2h,f,c
 10234  001B92  CFDE F090          	movff	postinc2,f_lseek@clst
 10235  001B96  CFDE F091          	movff	postinc2,f_lseek@clst+1
 10236  001B9A  CFDE F092          	movff	postinc2,f_lseek@clst+2
 10237  001B9E  CFDE F093          	movff	postinc2,f_lseek@clst+3
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;ff.c: 3125:     if (clst == 0) {
 10241  001BA2  5190               	movf	f_lseek@clst& (0+255),w,b
 10242  001BA4  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10243  001BA6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10244  001BA8  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10245  001BAA  A4D8               	btfss	status,2,c
 10246  001BAC  D04C               	goto	l671
 10247                           
 10248                           ; BSR set to: 0
 10249                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
 10250  001BAE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10251  001BB2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10252  001BB6  CFDE F056          	movff	postinc2,create_chain@fs
 10253  001BBA  CFDD F057          	movff	postdec2,create_chain@fs+1
 10254  001BBE  0E00               	movlw	0
 10255  001BC0  6E58               	movwf	create_chain@clst,c
 10256  001BC2  0E00               	movlw	0
 10257  001BC4  6E59               	movwf	create_chain@clst+1,c
 10258  001BC6  0E00               	movlw	0
 10259  001BC8  6E5A               	movwf	create_chain@clst+2,c
 10260  001BCA  0E00               	movlw	0
 10261  001BCC  6E5B               	movwf	create_chain@clst+3,c
 10262  001BCE  EC4A  F01B         	call	_create_chain	;wreg free
 10263  001BD2  C056  F090         	movff	?_create_chain,f_lseek@clst
 10264  001BD6  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
 10265  001BDA  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
 10266  001BDE  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
 10267                           
 10268                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10269  001BE2  0100               	movlb	0	; () banked
 10270  001BE4  0590               	decf	f_lseek@clst& (0+255),w,b
 10271  001BE6  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10272  001BE8  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10273  001BEA  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10274  001BEC  A4D8               	btfss	status,2,c
 10275  001BEE  D00A               	goto	l6972
 10276  001BF0                     u9490:
 10277                           
 10278                           ; BSR set to: 0
 10279  001BF0  EE20 F005          	lfsr	2,5
 10280  001BF4  516D               	movf	f_lseek@fp& (0+255),w,b
 10281  001BF6  26D9               	addwf	fsr2l,f,c
 10282  001BF8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10283  001BFA  22DA               	addwfc	fsr2h,f,c
 10284  001BFC  0E02               	movlw	2
 10285  001BFE  6EDF               	movwf	indf2,c
 10286                           
 10287                           ; BSR set to: 0
 10288  001C00  0E02               	movlw	2
 10289  001C02  0012               	return	
 10290  001C04                     l6972:
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10294  001C04  2990               	incf	f_lseek@clst& (0+255),w,b
 10295  001C06  E111               	bnz	l6980
 10296  001C08  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
 10297  001C0A  E10F               	bnz	l6980
 10298  001C0C  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
 10299  001C0E  E10D               	bnz	l6980
 10300  001C10  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
 10301  001C12  A4D8               	btfss	status,2,c
 10302  001C14  D00A               	goto	l6980
 10303  001C16                     u9500:
 10304                           
 10305                           ; BSR set to: 0
 10306  001C16  EE20 F005          	lfsr	2,5
 10307  001C1A  516D               	movf	f_lseek@fp& (0+255),w,b
 10308  001C1C  26D9               	addwf	fsr2l,f,c
 10309  001C1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10310  001C20  22DA               	addwfc	fsr2h,f,c
 10311  001C22  0E01               	movlw	1
 10312  001C24  6EDF               	movwf	indf2,c
 10313                           
 10314                           ; BSR set to: 0
 10315  001C26  0E01               	movlw	1
 10316  001C28  0012               	return	
 10317  001C2A                     l6980:
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;ff.c: 3129:      fp->sclust = clst;
 10321  001C2A  EE20 F00E          	lfsr	2,14
 10322  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
 10323  001C30  26D9               	addwf	fsr2l,f,c
 10324  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10325  001C34  22DA               	addwfc	fsr2h,f,c
 10326  001C36  C090  FFDE         	movff	f_lseek@clst,postinc2
 10327  001C3A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10328  001C3E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10329  001C42  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10330  001C46                     l671:
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;ff.c: 3132:     fp->clust = clst;
 10334  001C46  EE20 F012          	lfsr	2,18
 10335  001C4A  516D               	movf	f_lseek@fp& (0+255),w,b
 10336  001C4C  26D9               	addwf	fsr2l,f,c
 10337  001C4E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10338  001C50  22DA               	addwfc	fsr2h,f,c
 10339  001C52  C090  FFDE         	movff	f_lseek@clst,postinc2
 10340  001C56  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10341  001C5A  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10342  001C5E  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10343  001C62                     l6982:
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;ff.c: 3134:    if (clst != 0) {
 10347  001C62  5190               	movf	f_lseek@clst& (0+255),w,b
 10348  001C64  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10349  001C66  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10350  001C68  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10351  001C6A  A4D8               	btfss	status,2,c
 10352  001C6C  D097               	goto	l7018
 10353  001C6E  D0FA               	goto	l7036
 10354  001C70                     l6986:
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;ff.c: 3137:      if (fp->flag & 0x02) {
 10358  001C70  EE20 F004          	lfsr	2,4
 10359  001C74  516D               	movf	f_lseek@fp& (0+255),w,b
 10360  001C76  26D9               	addwf	fsr2l,f,c
 10361  001C78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10362  001C7A  22DA               	addwfc	fsr2h,f,c
 10363  001C7C  A2DF               	btfss	indf2,1,c
 10364  001C7E  D02A               	goto	l6994
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
 10368  001C80  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10369  001C84  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10370  001C88  CFDE F056          	movff	postinc2,create_chain@fs
 10371  001C8C  CFDD F057          	movff	postdec2,create_chain@fs+1
 10372  001C90  C090  F058         	movff	f_lseek@clst,create_chain@clst
 10373  001C94  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 10374  001C98  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 10375  001C9C  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 10376  001CA0  EC4A  F01B         	call	_create_chain	;wreg free
 10377  001CA4  C056  F090         	movff	?_create_chain,f_lseek@clst
 10378  001CA8  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
 10379  001CAC  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
 10380  001CB0  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
 10381                           
 10382                           ;ff.c: 3139:       if (clst == 0) {
 10383  001CB4  0100               	movlb	0	; () banked
 10384  001CB6  5190               	movf	f_lseek@clst& (0+255),w,b
 10385  001CB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10386  001CBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10387  001CBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10388  001CBE  A4D8               	btfss	status,2,c
 10389  001CC0  D023               	goto	l6996
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;ff.c: 3140:        ofs = bcs; break;
 10393  001CC2  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 10394  001CC6  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10395  001CCA  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10396  001CCE  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10397  001CD2  D06E               	goto	u9570
 10398  001CD4                     l6994:
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
 10402  001CD4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10403  001CD8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10404  001CDC  CFDE F03B          	movff	postinc2,get_fat@fs
 10405  001CE0  CFDD F03C          	movff	postdec2,get_fat@fs+1
 10406  001CE4  C090  F03D         	movff	f_lseek@clst,get_fat@clst
 10407  001CE8  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 10408  001CEC  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 10409  001CF0  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 10410  001CF4  EC05  F016         	call	_get_fat	;wreg free
 10411  001CF8  C03B  F090         	movff	?_get_fat,f_lseek@clst
 10412  001CFC  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
 10413  001D00  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
 10414  001D04  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
 10415  001D08                     l6996:
 10416                           
 10417                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10418  001D08  0100               	movlb	0	; () banked
 10419  001D0A  2990               	incf	f_lseek@clst& (0+255),w,b
 10420  001D0C  E107               	bnz	l7004
 10421  001D0E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
 10422  001D10  E105               	bnz	l7004
 10423  001D12  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
 10424  001D14  E103               	bnz	l7004
 10425  001D16  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
 10426  001D18  B4D8               	btfsc	status,2,c
 10427  001D1A  D77D               	goto	u9500
 10428  001D1C                     l7004:
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
 10432  001D1C  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
 10433  001D1E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10434  001D20  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10435  001D22  E104               	bnz	u9550
 10436  001D24  0E02               	movlw	2
 10437  001D26  5D90               	subwf	f_lseek@clst& (0+255),w,b
 10438  001D28  A0D8               	btfss	status,0,c
 10439  001D2A  D762               	goto	u9490
 10440  001D2C                     u9550:
 10441                           
 10442                           ; BSR set to: 0
 10443  001D2C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10444  001D30  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10445  001D34  EE10 F012          	lfsr	1,18
 10446  001D38  50DE               	movf	postinc2,w,c
 10447  001D3A  26E1               	addwf	fsr1l,f,c
 10448  001D3C  50DD               	movf	postdec2,w,c
 10449  001D3E  22E2               	addwfc	fsr1h,f,c
 10450  001D40  50E6               	movf	postinc1,w,c
 10451  001D42  5D90               	subwf	f_lseek@clst& (0+255),w,b
 10452  001D44  50E6               	movf	postinc1,w,c
 10453  001D46  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10454  001D48  50E6               	movf	postinc1,w,c
 10455  001D4A  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10456  001D4C  50E6               	movf	postinc1,w,c
 10457  001D4E  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10458  001D50  B0D8               	btfsc	status,0,c
 10459  001D52  D74E               	goto	u9490
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;ff.c: 3147:      fp->clust = clst;
 10463                           
 10464                           ; BSR set to: 0
 10465  001D54  EE20 F012          	lfsr	2,18
 10466  001D58  516D               	movf	f_lseek@fp& (0+255),w,b
 10467  001D5A  26D9               	addwf	fsr2l,f,c
 10468  001D5C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10469  001D5E  22DA               	addwfc	fsr2h,f,c
 10470  001D60  C090  FFDE         	movff	f_lseek@clst,postinc2
 10471  001D64  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10472  001D68  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10473  001D6C  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10474                           
 10475                           ;ff.c: 3148:      fp->fptr += bcs;
 10476  001D70  EE20 F006          	lfsr	2,6
 10477  001D74  516D               	movf	f_lseek@fp& (0+255),w,b
 10478  001D76  26D9               	addwf	fsr2l,f,c
 10479  001D78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10480  001D7A  22DA               	addwfc	fsr2h,f,c
 10481  001D7C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10482  001D7E  26DE               	addwf	postinc2,f,c
 10483  001D80  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10484  001D82  22DE               	addwfc	postinc2,f,c
 10485  001D84  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10486  001D86  22DE               	addwfc	postinc2,f,c
 10487  001D88  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10488  001D8A  22DE               	addwfc	postinc2,f,c
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;ff.c: 3149:      ofs -= bcs;
 10492  001D8C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10493  001D8E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10494  001D90  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10495  001D92  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10496  001D94  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10497  001D96  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10498  001D98  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10499  001D9A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10500  001D9C                     l7018:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;ff.c: 3135:     while (ofs > bcs) {
 10504  001D9C  516F               	movf	f_lseek@ofs& (0+255),w,b
 10505  001D9E  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
 10506  001DA0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10507  001DA2  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10508  001DA4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10509  001DA6  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10510  001DA8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10511  001DAA  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10512  001DAC  A0D8               	btfss	status,0,c
 10513  001DAE  D760               	goto	l6986
 10514  001DB0                     u9570:
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;ff.c: 3151:     fp->fptr += ofs;
 10518  001DB0  EE20 F006          	lfsr	2,6
 10519  001DB4  516D               	movf	f_lseek@fp& (0+255),w,b
 10520  001DB6  26D9               	addwf	fsr2l,f,c
 10521  001DB8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10522  001DBA  22DA               	addwfc	fsr2h,f,c
 10523  001DBC  516F               	movf	f_lseek@ofs& (0+255),w,b
 10524  001DBE  26DE               	addwf	postinc2,f,c
 10525  001DC0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10526  001DC2  22DE               	addwfc	postinc2,f,c
 10527  001DC4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10528  001DC6  22DE               	addwfc	postinc2,f,c
 10529  001DC8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10530  001DCA  22DE               	addwfc	postinc2,f,c
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 10534  001DCC  0EFF               	movlw	255
 10535  001DCE  156F               	andwf	f_lseek@ofs& (0+255),w,b
 10536  001DD0  6F73               	movwf	??_f_lseek& (0+255),b
 10537  001DD2  0E01               	movlw	1
 10538  001DD4  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10539  001DD6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10540  001DD8  0E00               	movlw	0
 10541  001DDA  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10542  001DDC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10543  001DDE  0E00               	movlw	0
 10544  001DE0  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10545  001DE2  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10546  001DE4  5173               	movf	??_f_lseek& (0+255),w,b
 10547  001DE6  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10548  001DE8  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10549  001DEA  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10550  001DEC  B4D8               	btfsc	status,2,c
 10551  001DEE  D03A               	goto	l7036
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 10555  001DF0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10556  001DF4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10557  001DF8  CFDE F00D          	movff	postinc2,clust2sect@fs
 10558  001DFC  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10559  001E00  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
 10560  001E04  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10561  001E08  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10562  001E0C  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10563  001E10  EC65  F02A         	call	_clust2sect	;wreg free
 10564  001E14  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
 10565  001E18  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
 10566  001E1C  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
 10567  001E20  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
 10568                           
 10569                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10570  001E24  0100               	movlb	0	; () banked
 10571  001E26  5188               	movf	f_lseek@nsect& (0+255),w,b
 10572  001E28  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10573  001E2A  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10574  001E2C  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10575  001E2E  B4D8               	btfsc	status,2,c
 10576  001E30  D6DF               	goto	u9490
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 10580                           
 10581                           ; BSR set to: 0
 10582  001E32  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
 10583  001E36  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
 10584  001E3A  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
 10585  001E3E  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
 10586  001E42  0E0A               	movlw	10
 10587  001E44  D005               	goto	u9600
 10588  001E46                     u9605:
 10589  001E46  90D8               	bcf	status,0,c
 10590  001E48  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10591  001E4A  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10592  001E4C  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10593  001E4E  3373               	rrcf	??_f_lseek& (0+255),f,b
 10594  001E50                     u9600:
 10595  001E50  2EE8               	decfsz	wreg,f,c
 10596  001E52  D7F9               	goto	u9605
 10597  001E54  5173               	movf	??_f_lseek& (0+255),w,b
 10598  001E56  2788               	addwf	f_lseek@nsect& (0+255),f,b
 10599  001E58  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10600  001E5A  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10601  001E5C  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10602  001E5E  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10603  001E60  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10604  001E62  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10605  001E64                     l7036:
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10609  001E64  EE20 F006          	lfsr	2,6
 10610  001E68  516D               	movf	f_lseek@fp& (0+255),w,b
 10611  001E6A  26D9               	addwf	fsr2l,f,c
 10612  001E6C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10613  001E6E  22DA               	addwfc	fsr2h,f,c
 10614  001E70  0EFF               	movlw	255
 10615  001E72  14DE               	andwf	postinc2,w,c
 10616  001E74  6F73               	movwf	??_f_lseek& (0+255),b
 10617  001E76  0E01               	movlw	1
 10618  001E78  14DE               	andwf	postinc2,w,c
 10619  001E7A  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10620  001E7C  0E00               	movlw	0
 10621  001E7E  14DE               	andwf	postinc2,w,c
 10622  001E80  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10623  001E82  0E00               	movlw	0
 10624  001E84  14DE               	andwf	postinc2,w,c
 10625  001E86  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10626  001E88  5173               	movf	??_f_lseek& (0+255),w,b
 10627  001E8A  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10628  001E8C  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10629  001E8E  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10630  001E90  B4D8               	btfsc	status,2,c
 10631  001E92  D021               	goto	l7042
 10632                           
 10633                           ; BSR set to: 0
 10634  001E94  EE20 F016          	lfsr	2,22
 10635  001E98  516D               	movf	f_lseek@fp& (0+255),w,b
 10636  001E9A  26D9               	addwf	fsr2l,f,c
 10637  001E9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10638  001E9E  22DA               	addwfc	fsr2h,f,c
 10639  001EA0  5188               	movf	f_lseek@nsect& (0+255),w,b
 10640  001EA2  18DE               	xorwf	postinc2,w,c
 10641  001EA4  E10A               	bnz	u9620
 10642  001EA6  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10643  001EA8  18DE               	xorwf	postinc2,w,c
 10644  001EAA  E107               	bnz	u9620
 10645  001EAC  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10646  001EAE  18DE               	xorwf	postinc2,w,c
 10647  001EB0  E104               	bnz	u9620
 10648  001EB2  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10649  001EB4  18DE               	xorwf	postinc2,w,c
 10650  001EB6  B4D8               	btfsc	status,2,c
 10651  001EB8  D00E               	goto	l7042
 10652  001EBA                     u9620:
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;ff.c: 3171:    fp->dsect = nsect;
 10656  001EBA  EE20 F016          	lfsr	2,22
 10657  001EBE  516D               	movf	f_lseek@fp& (0+255),w,b
 10658  001EC0  26D9               	addwf	fsr2l,f,c
 10659  001EC2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10660  001EC4  22DA               	addwfc	fsr2h,f,c
 10661  001EC6  C088  FFDE         	movff	f_lseek@nsect,postinc2
 10662  001ECA  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
 10663  001ECE  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
 10664  001ED2  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
 10665  001ED6                     l7042:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 10669  001ED6  EE20 F006          	lfsr	2,6
 10670  001EDA  516D               	movf	f_lseek@fp& (0+255),w,b
 10671  001EDC  26D9               	addwf	fsr2l,f,c
 10672  001EDE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10673  001EE0  22DA               	addwfc	fsr2h,f,c
 10674  001EE2  EE10 F00A          	lfsr	1,10
 10675  001EE6  516D               	movf	f_lseek@fp& (0+255),w,b
 10676  001EE8  26E1               	addwf	fsr1l,f,c
 10677  001EEA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10678  001EEC  22E2               	addwfc	fsr1h,f,c
 10679  001EEE  50DE               	movf	postinc2,w,c
 10680  001EF0  5CE6               	subwf	postinc1,w,c
 10681  001EF2  50DE               	movf	postinc2,w,c
 10682  001EF4  58E6               	subwfb	postinc1,w,c
 10683  001EF6  50DE               	movf	postinc2,w,c
 10684  001EF8  58E6               	subwfb	postinc1,w,c
 10685  001EFA  50DE               	movf	postinc2,w,c
 10686  001EFC  58E6               	subwfb	postinc1,w,c
 10687  001EFE  B0D8               	btfsc	status,0,c
 10688  001F00  D521               	goto	u9400
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 10692  001F02  EE20 F006          	lfsr	2,6
 10693  001F06  516D               	movf	f_lseek@fp& (0+255),w,b
 10694  001F08  26D9               	addwf	fsr2l,f,c
 10695  001F0A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10696  001F0C  22DA               	addwfc	fsr2h,f,c
 10697  001F0E  EE10 F00A          	lfsr	1,10
 10698  001F12  516D               	movf	f_lseek@fp& (0+255),w,b
 10699  001F14  26E1               	addwf	fsr1l,f,c
 10700  001F16  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10701  001F18  22E2               	addwfc	fsr1h,f,c
 10702  001F1A  CFDE FFE6          	movff	postinc2,postinc1
 10703  001F1E  CFDE FFE6          	movff	postinc2,postinc1
 10704  001F22  CFDE FFE6          	movff	postinc2,postinc1
 10705  001F26  CFDE FFE6          	movff	postinc2,postinc1
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;ff.c: 3176:    fp->flag |= 0x20;
 10709  001F2A  EE20 F004          	lfsr	2,4
 10710  001F2E  516D               	movf	f_lseek@fp& (0+255),w,b
 10711  001F30  26D9               	addwf	fsr2l,f,c
 10712  001F32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10713  001F34  22DA               	addwfc	fsr2h,f,c
 10714  001F36  0E00               	movlw	0
 10715  001F38  8ADB               	bsf	plusw2,5,c
 10716  001F3A  D504               	goto	u9400
 10717  001F3C                     __end_of_f_lseek:
 10718                           	opt callstack 0
 10719                           
 10720 ;; *************** function _create_chain *****************
 10721 ;; Defined at:
 10722 ;;		line 990 in file "ff.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  fs              2   85[COMRAM] PTR struct .
 10725 ;;		 -> FatFs(558), NULL(0), 
 10726 ;;  clst            4   87[COMRAM] unsigned long 
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;  cs              4    9[BANK0 ] unsigned long 
 10729 ;;  ncl             4    5[BANK0 ] unsigned long 
 10730 ;;  scl             4    1[BANK0 ] unsigned long 
 10731 ;;  res             1    0[BANK0 ] enum E93
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  4   85[COMRAM] unsigned long 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10741 ;;      Params:         6       0       0       0       0       0       0       0       0
 10742 ;;      Locals:         0      13       0       0       0       0       0       0       0
 10743 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10744 ;;      Totals:        10      13       0       0       0       0       0       0       0
 10745 ;;Total ram usage:       23 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    9
 10748 ;; This function calls:
 10749 ;;		_get_fat
 10750 ;;		_put_fat
 10751 ;; This function is called by:
 10752 ;;		_dir_next
 10753 ;;		_f_write
 10754 ;;		_f_lseek
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           	psect	text31
 10759  003694                     __ptext31:
 10760                           	opt callstack 0
 10761  003694                     _create_chain:
 10762                           	opt callstack 18
 10763                           
 10764                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;incstack = 0
 10768  003694  5058               	movf	create_chain@clst,w,c
 10769  003696  1059               	iorwf	create_chain@clst+1,w,c
 10770  003698  105A               	iorwf	create_chain@clst+2,w,c
 10771  00369A  105B               	iorwf	create_chain@clst+3,w,c
 10772  00369C  A4D8               	btfss	status,2,c
 10773  00369E  D02E               	goto	l4954
 10774                           
 10775                           ;ff.c: 1000:   scl = fs->last_clust;
 10776  0036A0  EE20 F00A          	lfsr	2,10
 10777  0036A4  5056               	movf	create_chain@fs,w,c
 10778  0036A6  26D9               	addwf	fsr2l,f,c
 10779  0036A8  5057               	movf	create_chain@fs+1,w,c
 10780  0036AA  22DA               	addwfc	fsr2h,f,c
 10781  0036AC  CFDE F061          	movff	postinc2,create_chain@scl
 10782  0036B0  CFDE F062          	movff	postinc2,create_chain@scl+1
 10783  0036B4  CFDE F063          	movff	postinc2,create_chain@scl+2
 10784  0036B8  CFDE F064          	movff	postinc2,create_chain@scl+3
 10785                           
 10786                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 10787  0036BC  0100               	movlb	0	; () banked
 10788  0036BE  5161               	movf	create_chain@scl& (0+255),w,b
 10789  0036C0  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10790  0036C2  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10791  0036C4  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10792  0036C6  B4D8               	btfsc	status,2,c
 10793  0036C8  D010               	goto	u5870
 10794                           
 10795                           ; BSR set to: 0
 10796  0036CA  EE20 F012          	lfsr	2,18
 10797  0036CE  5056               	movf	create_chain@fs,w,c
 10798  0036D0  26D9               	addwf	fsr2l,f,c
 10799  0036D2  5057               	movf	create_chain@fs+1,w,c
 10800  0036D4  22DA               	addwfc	fsr2h,f,c
 10801  0036D6  50DE               	movf	postinc2,w,c
 10802  0036D8  5D61               	subwf	create_chain@scl& (0+255),w,b
 10803  0036DA  50DE               	movf	postinc2,w,c
 10804  0036DC  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10805  0036DE  50DE               	movf	postinc2,w,c
 10806  0036E0  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10807  0036E2  50DE               	movf	postinc2,w,c
 10808  0036E4  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10809  0036E6  A0D8               	btfss	status,0,c
 10810  0036E8  D05B               	goto	l317
 10811  0036EA                     u5870:
 10812                           
 10813                           ; BSR set to: 0
 10814  0036EA  0E01               	movlw	1
 10815  0036EC  6F61               	movwf	create_chain@scl& (0+255),b
 10816  0036EE  0E00               	movlw	0
 10817  0036F0  6F62               	movwf	(create_chain@scl+1)& (0+255),b
 10818  0036F2  0E00               	movlw	0
 10819  0036F4  6F63               	movwf	(create_chain@scl+2)& (0+255),b
 10820  0036F6  0E00               	movlw	0
 10821  0036F8  6F64               	movwf	(create_chain@scl+3)& (0+255),b
 10822  0036FA  D052               	goto	l317
 10823  0036FC                     l4954:
 10824                           
 10825                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 10826  0036FC  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10827  003700  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10828  003704  C058  F03D         	movff	create_chain@clst,get_fat@clst
 10829  003708  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 10830  00370C  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 10831  003710  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 10832  003714  EC05  F016         	call	_get_fat	;wreg free
 10833  003718  C03B  F069         	movff	?_get_fat,create_chain@cs
 10834  00371C  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10835  003720  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10836  003724  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10837                           
 10838                           ;ff.c: 1005:   if (cs < 2) return 1;
 10839  003728  0100               	movlb	0	; () banked
 10840  00372A  516C               	movf	(create_chain@cs+3)& (0+255),w,b
 10841  00372C  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10842  00372E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10843  003730  E10D               	bnz	l4962
 10844  003732  0E02               	movlw	2
 10845  003734  5D69               	subwf	create_chain@cs& (0+255),w,b
 10846  003736  B0D8               	btfsc	status,0,c
 10847  003738  D009               	goto	l4962
 10848                           
 10849                           ; BSR set to: 0
 10850  00373A  0E01               	movlw	1
 10851  00373C  6E56               	movwf	?_create_chain,c
 10852  00373E  0E00               	movlw	0
 10853  003740  6E57               	movwf	?_create_chain+1,c
 10854  003742  0E00               	movlw	0
 10855  003744  6E58               	movwf	?_create_chain+2,c
 10856  003746  0E00               	movlw	0
 10857  003748  6E59               	movwf	?_create_chain+3,c
 10858  00374A  0012               	return	
 10859  00374C                     l4962:
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 10863  00374C  2969               	incf	create_chain@cs& (0+255),w,b
 10864  00374E  E110               	bnz	l4966
 10865  003750  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 10866  003752  E10E               	bnz	l4966
 10867  003754  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 10868  003756  E10C               	bnz	l4966
 10869  003758  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 10870  00375A  A4D8               	btfss	status,2,c
 10871  00375C  D009               	goto	l4966
 10872  00375E                     u5890:
 10873                           
 10874                           ; BSR set to: 0
 10875  00375E  C069  F056         	movff	create_chain@cs,?_create_chain
 10876  003762  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 10877  003766  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 10878  00376A  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 10879  00376E  0012               	return	
 10880  003770                     l4966:
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 10884  003770  EE20 F012          	lfsr	2,18
 10885  003774  5056               	movf	create_chain@fs,w,c
 10886  003776  26D9               	addwf	fsr2l,f,c
 10887  003778  5057               	movf	create_chain@fs+1,w,c
 10888  00377A  22DA               	addwfc	fsr2h,f,c
 10889  00377C  50DE               	movf	postinc2,w,c
 10890  00377E  5D69               	subwf	create_chain@cs& (0+255),w,b
 10891  003780  50DE               	movf	postinc2,w,c
 10892  003782  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10893  003784  50DE               	movf	postinc2,w,c
 10894  003786  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10895  003788  50DE               	movf	postinc2,w,c
 10896  00378A  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10897  00378C  A0D8               	btfss	status,0,c
 10898  00378E  D7E7               	goto	u5890
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;ff.c: 1008:   scl = clst;
 10902  003790  C058  F061         	movff	create_chain@clst,create_chain@scl
 10903  003794  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 10904  003798  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 10905  00379C  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 10906  0037A0                     l317:
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;ff.c: 1011:  ncl = scl;
 10910  0037A0  C061  F065         	movff	create_chain@scl,create_chain@ncl
 10911  0037A4  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 10912  0037A8  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 10913  0037AC  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 10914  0037B0                     l4970:
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;ff.c: 1013:   ncl++;
 10918  0037B0  0E01               	movlw	1
 10919  0037B2  2765               	addwf	create_chain@ncl& (0+255),f,b
 10920  0037B4  0E00               	movlw	0
 10921  0037B6  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10922  0037B8  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10923  0037BA  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 10927  0037BC  EE20 F012          	lfsr	2,18
 10928  0037C0  5056               	movf	create_chain@fs,w,c
 10929  0037C2  26D9               	addwf	fsr2l,f,c
 10930  0037C4  5057               	movf	create_chain@fs+1,w,c
 10931  0037C6  22DA               	addwfc	fsr2h,f,c
 10932  0037C8  50DE               	movf	postinc2,w,c
 10933  0037CA  5D65               	subwf	create_chain@ncl& (0+255),w,b
 10934  0037CC  50DE               	movf	postinc2,w,c
 10935  0037CE  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10936  0037D0  50DE               	movf	postinc2,w,c
 10937  0037D2  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10938  0037D4  50DE               	movf	postinc2,w,c
 10939  0037D6  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10940  0037D8  A0D8               	btfss	status,0,c
 10941  0037DA  D019               	goto	l4982
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;ff.c: 1015:    ncl = 2;
 10945  0037DC  0E02               	movlw	2
 10946  0037DE  6F65               	movwf	create_chain@ncl& (0+255),b
 10947  0037E0  0E00               	movlw	0
 10948  0037E2  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 10949  0037E4  0E00               	movlw	0
 10950  0037E6  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 10951  0037E8  0E00               	movlw	0
 10952  0037EA  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;ff.c: 1016:    if (ncl > scl) return 0;
 10956  0037EC  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 10957  0037EE  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10958  0037F0  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10959  0037F2  E10D               	bnz	l4982
 10960  0037F4  0E02               	movlw	2
 10961  0037F6  5D61               	subwf	create_chain@scl& (0+255),w,b
 10962  0037F8  B0D8               	btfsc	status,0,c
 10963  0037FA  D009               	goto	l4982
 10964  0037FC                     u5920:
 10965                           
 10966                           ; BSR set to: 0
 10967  0037FC  0E00               	movlw	0
 10968  0037FE  6E56               	movwf	?_create_chain,c
 10969  003800  0E00               	movlw	0
 10970  003802  6E57               	movwf	?_create_chain+1,c
 10971  003804  0E00               	movlw	0
 10972  003806  6E58               	movwf	?_create_chain+2,c
 10973  003808  0E00               	movlw	0
 10974  00380A  6E59               	movwf	?_create_chain+3,c
 10975  00380C  0012               	return	
 10976  00380E                     l4982:
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 10980  00380E  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10981  003812  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10982  003816  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 10983  00381A  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 10984  00381E  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 10985  003822  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 10986  003826  EC05  F016         	call	_get_fat	;wreg free
 10987  00382A  C03B  F069         	movff	?_get_fat,create_chain@cs
 10988  00382E  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10989  003832  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10990  003836  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10991                           
 10992                           ;ff.c: 1019:   if (cs == 0) break;
 10993  00383A  0100               	movlb	0	; () banked
 10994  00383C  5169               	movf	create_chain@cs& (0+255),w,b
 10995  00383E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10996  003840  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10997  003842  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10998  003844  B4D8               	btfsc	status,2,c
 10999  003846  D01D               	goto	l4998
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 11003  003848  2969               	incf	create_chain@cs& (0+255),w,b
 11004  00384A  E107               	bnz	u5940
 11005  00384C  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 11006  00384E  E105               	bnz	u5940
 11007  003850  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 11008  003852  E103               	bnz	u5940
 11009  003854  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 11010  003856  B4D8               	btfsc	status,2,c
 11011  003858  D782               	goto	u5890
 11012  00385A                     u5940:
 11013                           
 11014                           ; BSR set to: 0
 11015  00385A  0569               	decf	create_chain@cs& (0+255),w,b
 11016  00385C  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 11017  00385E  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 11018  003860  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 11019  003862  B4D8               	btfsc	status,2,c
 11020  003864  D77C               	goto	u5890
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;ff.c: 1022:   if (ncl == scl) return 0;
 11024  003866  5161               	movf	create_chain@scl& (0+255),w,b
 11025  003868  1965               	xorwf	create_chain@ncl& (0+255),w,b
 11026  00386A  E1A2               	bnz	l4970
 11027  00386C  5162               	movf	(create_chain@scl+1)& (0+255),w,b
 11028  00386E  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 11029  003870  E19F               	bnz	l4970
 11030  003872  5163               	movf	(create_chain@scl+2)& (0+255),w,b
 11031  003874  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 11032  003876  E19C               	bnz	l4970
 11033  003878  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 11034  00387A  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 11035  00387C  B4D8               	btfsc	status,2,c
 11036  00387E  D7BE               	goto	u5920
 11037  003880  D797               	goto	l4970
 11038  003882                     l4998:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 11042  003882  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11043  003886  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11044  00388A  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 11045  00388E  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 11046  003892  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 11047  003896  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 11048  00389A  0EFF               	movlw	255
 11049  00389C  6E41               	movwf	put_fat@val,c
 11050  00389E  0EFF               	movlw	255
 11051  0038A0  6E42               	movwf	put_fat@val+1,c
 11052  0038A2  0EFF               	movlw	255
 11053  0038A4  6E43               	movwf	put_fat@val+2,c
 11054  0038A6  0E0F               	movlw	15
 11055  0038A8  6E44               	movwf	put_fat@val+3,c
 11056  0038AA  ECED  F011         	call	_put_fat	;wreg free
 11057  0038AE  0100               	movlb	0	; () banked
 11058  0038B0  6F60               	movwf	create_chain@res& (0+255),b
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 11062  0038B2  5160               	movf	create_chain@res& (0+255),w,b
 11063  0038B4  A4D8               	btfss	status,2,c
 11064  0038B6  D01E               	goto	l5006
 11065                           
 11066                           ; BSR set to: 0
 11067  0038B8  5058               	movf	create_chain@clst,w,c
 11068  0038BA  1059               	iorwf	create_chain@clst+1,w,c
 11069  0038BC  105A               	iorwf	create_chain@clst+2,w,c
 11070  0038BE  105B               	iorwf	create_chain@clst+3,w,c
 11071  0038C0  B4D8               	btfsc	status,2,c
 11072  0038C2  D018               	goto	l5006
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 11076  0038C4  C056  F03B         	movff	create_chain@fs,put_fat@fs
 11077  0038C8  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 11078  0038CC  C058  F03D         	movff	create_chain@clst,put_fat@clst
 11079  0038D0  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 11080  0038D4  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 11081  0038D8  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 11082  0038DC  C065  F041         	movff	create_chain@ncl,put_fat@val
 11083  0038E0  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 11084  0038E4  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 11085  0038E8  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 11086  0038EC  ECED  F011         	call	_put_fat	;wreg free
 11087  0038F0  0100               	movlb	0	; () banked
 11088  0038F2  6F60               	movwf	create_chain@res& (0+255),b
 11089  0038F4                     l5006:
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;ff.c: 1029:  if (res == FR_OK) {
 11093  0038F4  5160               	movf	create_chain@res& (0+255),w,b
 11094  0038F6  A4D8               	btfss	status,2,c
 11095  0038F8  D031               	goto	l5012
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;ff.c: 1030:   fs->last_clust = ncl;
 11099  0038FA  EE20 F00A          	lfsr	2,10
 11100  0038FE  5056               	movf	create_chain@fs,w,c
 11101  003900  26D9               	addwf	fsr2l,f,c
 11102  003902  5057               	movf	create_chain@fs+1,w,c
 11103  003904  22DA               	addwfc	fsr2h,f,c
 11104  003906  C065  FFDE         	movff	create_chain@ncl,postinc2
 11105  00390A  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 11106  00390E  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 11107  003912  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 11108                           
 11109                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 11110  003916  EE20 F00E          	lfsr	2,14
 11111  00391A  5056               	movf	create_chain@fs,w,c
 11112  00391C  26D9               	addwf	fsr2l,f,c
 11113  00391E  5057               	movf	create_chain@fs+1,w,c
 11114  003920  22DA               	addwfc	fsr2h,f,c
 11115  003922  28DE               	incf	postinc2,w,c
 11116  003924  E107               	bnz	u6000
 11117  003926  28DE               	incf	postinc2,w,c
 11118  003928  E105               	bnz	u6000
 11119  00392A  28DE               	incf	postinc2,w,c
 11120  00392C  E103               	bnz	u6000
 11121  00392E  28DE               	incf	postinc2,w,c
 11122  003930  B4D8               	btfsc	status,2,c
 11123  003932  D024               	goto	l334
 11124  003934                     u6000:
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;ff.c: 1032:    fs->free_clust--;
 11128  003934  EE20 F00E          	lfsr	2,14
 11129  003938  5056               	movf	create_chain@fs,w,c
 11130  00393A  26D9               	addwf	fsr2l,f,c
 11131  00393C  5057               	movf	create_chain@fs+1,w,c
 11132  00393E  22DA               	addwfc	fsr2h,f,c
 11133  003940  06DE               	decf	postinc2,f,c
 11134  003942  0E00               	movlw	0
 11135  003944  5ADE               	subwfb	postinc2,f,c
 11136  003946  5ADE               	subwfb	postinc2,f,c
 11137  003948  5ADE               	subwfb	postinc2,f,c
 11138                           
 11139                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 11140  00394A  EE20 F005          	lfsr	2,5
 11141  00394E  5056               	movf	create_chain@fs,w,c
 11142  003950  26D9               	addwf	fsr2l,f,c
 11143  003952  5057               	movf	create_chain@fs+1,w,c
 11144  003954  22DA               	addwfc	fsr2h,f,c
 11145  003956  0E00               	movlw	0
 11146  003958  80DB               	bsf	plusw2,0,c
 11147  00395A  D010               	goto	l334
 11148  00395C                     l5012:
 11149                           
 11150                           ; BSR set to: 0
 11151                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 11152  00395C  0560               	decf	create_chain@res& (0+255),w,b
 11153  00395E  B4D8               	btfsc	status,2,c
 11154  003960  D009               	goto	l336
 11155                           
 11156                           ; BSR set to: 0
 11157  003962  0E01               	movlw	1
 11158  003964  6F65               	movwf	create_chain@ncl& (0+255),b
 11159  003966  0E00               	movlw	0
 11160  003968  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 11161  00396A  0E00               	movlw	0
 11162  00396C  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 11163  00396E  0E00               	movlw	0
 11164  003970  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11165  003972  D004               	goto	l334
 11166  003974                     l336:
 11167                           
 11168                           ; BSR set to: 0
 11169  003974  6965               	setf	create_chain@ncl& (0+255),b
 11170  003976  6966               	setf	(create_chain@ncl+1)& (0+255),b
 11171  003978  6967               	setf	(create_chain@ncl+2)& (0+255),b
 11172  00397A  6968               	setf	(create_chain@ncl+3)& (0+255),b
 11173  00397C                     l334:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;ff.c: 1039:  return ncl;
 11177  00397C  C065  F056         	movff	create_chain@ncl,?_create_chain
 11178  003980  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 11179  003984  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 11180  003988  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 11181                           
 11182                           ; BSR set to: 0
 11183  00398C  0012               	return		;funcret
 11184  00398E                     __end_of_create_chain:
 11185                           	opt callstack 0
 11186                           
 11187 ;; *************** function _put_fat *****************
 11188 ;; Defined at:
 11189 ;;		line 873 in file "ff.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  fs              2   58[COMRAM] PTR struct .
 11192 ;;		 -> FatFs(558), NULL(0), 
 11193 ;;  clst            4   60[COMRAM] unsigned long 
 11194 ;;  val             4   64[COMRAM] unsigned long 
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;  p               2   83[COMRAM] PTR unsigned char 
 11197 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11198 ;;  bc              2   80[COMRAM] unsigned short 
 11199 ;;  res             1   82[COMRAM] enum E93
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      enum E93
 11202 ;; Registers used:
 11203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11209 ;;      Params:        10       0       0       0       0       0       0       0       0
 11210 ;;      Locals:         9       0       0       0       0       0       0       0       0
 11211 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11212 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11213 ;;Total ram usage:       27 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    8
 11216 ;; This function calls:
 11217 ;;		_move_window
 11218 ;; This function is called by:
 11219 ;;		_remove_chain
 11220 ;;		_create_chain
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           	psect	text32
 11225  0023DA                     __ptext32:
 11226                           	opt callstack 0
 11227  0023DA                     _put_fat:
 11228                           	opt callstack 18
 11229                           
 11230                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;incstack = 0
 11234  0023DA  5040               	movf	put_fat@clst+3,w,c
 11235  0023DC  103F               	iorwf	put_fat@clst+2,w,c
 11236  0023DE  103E               	iorwf	put_fat@clst+1,w,c
 11237  0023E0  E104               	bnz	u5690
 11238  0023E2  0E02               	movlw	2
 11239  0023E4  5C3D               	subwf	put_fat@clst,w,c
 11240  0023E6  A0D8               	btfss	status,0,c
 11241  0023E8  D010               	goto	u5700
 11242  0023EA                     u5690:
 11243  0023EA  EE20 F012          	lfsr	2,18
 11244  0023EE  503B               	movf	put_fat@fs,w,c
 11245  0023F0  26D9               	addwf	fsr2l,f,c
 11246  0023F2  503C               	movf	put_fat@fs+1,w,c
 11247  0023F4  22DA               	addwfc	fsr2h,f,c
 11248  0023F6  50DE               	movf	postinc2,w,c
 11249  0023F8  5C3D               	subwf	put_fat@clst,w,c
 11250  0023FA  50DE               	movf	postinc2,w,c
 11251  0023FC  583E               	subwfb	put_fat@clst+1,w,c
 11252  0023FE  50DE               	movf	postinc2,w,c
 11253  002400  583F               	subwfb	put_fat@clst+2,w,c
 11254  002402  50DE               	movf	postinc2,w,c
 11255  002404  5840               	subwfb	put_fat@clst+3,w,c
 11256  002406  A0D8               	btfss	status,0,c
 11257  002408  D1E5               	goto	l4904
 11258  00240A                     u5700:
 11259                           
 11260                           ;ff.c: 885:   res = FR_INT_ERR;
 11261  00240A  0E02               	movlw	2
 11262  00240C  6E53               	movwf	put_fat@res,c
 11263                           
 11264                           ;ff.c: 887:  } else {
 11265  00240E  D1F8               	goto	l4906
 11266  002410                     l278:
 11267                           
 11268                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 11269  002410  C03D  F051         	movff	put_fat@clst,put_fat@bc
 11270  002414  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 11271  002418  90D8               	bcf	status,0,c
 11272  00241A  3052               	rrcf	put_fat@bc+1,w,c
 11273  00241C  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11274  00241E  3051               	rrcf	put_fat@bc,w,c
 11275  002420  6E45               	movwf	??_put_fat& (0+255),c
 11276  002422  5045               	movf	??_put_fat,w,c
 11277  002424  2651               	addwf	put_fat@bc,f,c
 11278  002426  5046               	movf	??_put_fat+1,w,c
 11279  002428  2252               	addwfc	put_fat@bc+1,f,c
 11280                           
 11281                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11282  00242A  C03B  F030         	movff	put_fat@fs,move_window@fs
 11283  00242E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11284  002432  EE20 F01E          	lfsr	2,30
 11285  002436  503B               	movf	put_fat@fs,w,c
 11286  002438  26D9               	addwf	fsr2l,f,c
 11287  00243A  503C               	movf	put_fat@fs+1,w,c
 11288  00243C  22DA               	addwfc	fsr2h,f,c
 11289  00243E  CFDE F045          	movff	postinc2,??_put_fat
 11290  002442  CFDE F046          	movff	postinc2,??_put_fat+1
 11291  002446  CFDE F047          	movff	postinc2,??_put_fat+2
 11292  00244A  CFDE F048          	movff	postinc2,??_put_fat+3
 11293  00244E  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11294  002452  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11295  002456  0E09               	movlw	9
 11296  002458  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11297  00245A                     u5715:
 11298  00245A  90D8               	bcf	status,0,c
 11299  00245C  324A               	rrcf	??_put_fat+5,f,c
 11300  00245E  3249               	rrcf	??_put_fat+4,f,c
 11301  002460  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11302  002462  D7FB               	goto	u5715
 11303  002464  5049               	movf	??_put_fat+4,w,c
 11304  002466  2445               	addwf	??_put_fat,w,c
 11305  002468  6E32               	movwf	move_window@sector,c
 11306  00246A  504A               	movf	??_put_fat+5,w,c
 11307  00246C  2046               	addwfc	??_put_fat+1,w,c
 11308  00246E  6E33               	movwf	move_window@sector+1,c
 11309  002470  0E00               	movlw	0
 11310  002472  2047               	addwfc	??_put_fat+2,w,c
 11311  002474  6E34               	movwf	move_window@sector+2,c
 11312  002476  0E00               	movlw	0
 11313  002478  2048               	addwfc	??_put_fat+3,w,c
 11314  00247A  6E35               	movwf	move_window@sector+3,c
 11315  00247C  EC1A  F02B         	call	_move_window	;wreg free
 11316  002480  6E53               	movwf	put_fat@res,c
 11317                           
 11318                           ;ff.c: 892:    if (res != FR_OK) break;
 11319  002482  5053               	movf	put_fat@res,w,c
 11320  002484  A4D8               	btfss	status,2,c
 11321  002486  D1BC               	goto	l4906
 11322                           
 11323                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 11324  002488  0EFF               	movlw	255
 11325  00248A  6E45               	movwf	??_put_fat& (0+255),c
 11326  00248C  0E01               	movlw	1
 11327  00248E  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11328  002490  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11329  002494  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11330  002498  5045               	movf	??_put_fat,w,c
 11331  00249A  1647               	andwf	??_put_fat+2,f,c
 11332  00249C  5046               	movf	??_put_fat+1,w,c
 11333  00249E  1648               	andwf	??_put_fat+3,f,c
 11334  0024A0  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11335  0024A4  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11336  0024A8  5047               	movf	??_put_fat+2,w,c
 11337  0024AA  2649               	addwf	??_put_fat+4,f,c
 11338  0024AC  5048               	movf	??_put_fat+3,w,c
 11339  0024AE  224A               	addwfc	??_put_fat+5,f,c
 11340  0024B0  0E2E               	movlw	46
 11341  0024B2  2449               	addwf	??_put_fat+4,w,c
 11342  0024B4  6E54               	movwf	put_fat@p,c
 11343  0024B6  0E00               	movlw	0
 11344  0024B8  204A               	addwfc	??_put_fat+5,w,c
 11345  0024BA  6E55               	movwf	put_fat@p+1,c
 11346  0024BC  4A51               	infsnz	put_fat@bc,f,c
 11347  0024BE  2A52               	incf	put_fat@bc+1,f,c
 11348                           
 11349                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11350  0024C0  B03D               	btfsc	put_fat@clst,0,c
 11351  0024C2  D004               	goto	l4858
 11352  0024C4  C041  F04D         	movff	put_fat@val,_put_fat$400
 11353  0024C8  6A4E               	clrf	_put_fat$400+1,c
 11354  0024CA  D01A               	goto	l4860
 11355  0024CC                     l4858:
 11356  0024CC  5041               	movf	put_fat@val,w,c
 11357  0024CE  6E45               	movwf	??_put_fat& (0+255),c
 11358  0024D0  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11359  0024D2  3A45               	swapf	??_put_fat,f,c
 11360  0024D4  3A46               	swapf	??_put_fat+1,f,c
 11361  0024D6  0EF0               	movlw	240
 11362  0024D8  1646               	andwf	??_put_fat+1,f,c
 11363  0024DA  5045               	movf	??_put_fat,w,c
 11364  0024DC  0B0F               	andlw	15
 11365  0024DE  1246               	iorwf	??_put_fat+1,f,c
 11366  0024E0  0EF0               	movlw	240
 11367  0024E2  1645               	andwf	??_put_fat,f,c
 11368  0024E4  C054  FFD9         	movff	put_fat@p,fsr2l
 11369  0024E8  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11370  0024EC  50DF               	movf	indf2,w,c
 11371  0024EE  0B0F               	andlw	15
 11372  0024F0  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11373  0024F2  6A48               	clrf	(??_put_fat+3)& (0+255),c
 11374  0024F4  5045               	movf	??_put_fat,w,c
 11375  0024F6  1047               	iorwf	??_put_fat+2,w,c
 11376  0024F8  6E4D               	movwf	_put_fat$400,c
 11377  0024FA  5046               	movf	??_put_fat+1,w,c
 11378  0024FC  1048               	iorwf	??_put_fat+3,w,c
 11379  0024FE  6E4E               	movwf	_put_fat$400+1,c
 11380  002500                     l4860:
 11381  002500  C054  FFD9         	movff	put_fat@p,fsr2l
 11382  002504  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11383  002508  C04D  FFDF         	movff	_put_fat$400,indf2
 11384                           
 11385                           ;ff.c: 895:    fs->wflag = 1;
 11386  00250C  EE20 F004          	lfsr	2,4
 11387  002510  503B               	movf	put_fat@fs,w,c
 11388  002512  26D9               	addwf	fsr2l,f,c
 11389  002514  503C               	movf	put_fat@fs+1,w,c
 11390  002516  22DA               	addwfc	fsr2h,f,c
 11391  002518  0E01               	movlw	1
 11392  00251A  6EDF               	movwf	indf2,c
 11393                           
 11394                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11395  00251C  C03B  F030         	movff	put_fat@fs,move_window@fs
 11396  002520  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11397  002524  EE20 F01E          	lfsr	2,30
 11398  002528  503B               	movf	put_fat@fs,w,c
 11399  00252A  26D9               	addwf	fsr2l,f,c
 11400  00252C  503C               	movf	put_fat@fs+1,w,c
 11401  00252E  22DA               	addwfc	fsr2h,f,c
 11402  002530  CFDE F045          	movff	postinc2,??_put_fat
 11403  002534  CFDE F046          	movff	postinc2,??_put_fat+1
 11404  002538  CFDE F047          	movff	postinc2,??_put_fat+2
 11405  00253C  CFDE F048          	movff	postinc2,??_put_fat+3
 11406  002540  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11407  002544  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11408  002548  0E09               	movlw	9
 11409  00254A  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11410  00254C                     u5745:
 11411  00254C  90D8               	bcf	status,0,c
 11412  00254E  324A               	rrcf	??_put_fat+5,f,c
 11413  002550  3249               	rrcf	??_put_fat+4,f,c
 11414  002552  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11415  002554  D7FB               	goto	u5745
 11416  002556  5049               	movf	??_put_fat+4,w,c
 11417  002558  2445               	addwf	??_put_fat,w,c
 11418  00255A  6E32               	movwf	move_window@sector,c
 11419  00255C  504A               	movf	??_put_fat+5,w,c
 11420  00255E  2046               	addwfc	??_put_fat+1,w,c
 11421  002560  6E33               	movwf	move_window@sector+1,c
 11422  002562  0E00               	movlw	0
 11423  002564  2047               	addwfc	??_put_fat+2,w,c
 11424  002566  6E34               	movwf	move_window@sector+2,c
 11425  002568  0E00               	movlw	0
 11426  00256A  2048               	addwfc	??_put_fat+3,w,c
 11427  00256C  6E35               	movwf	move_window@sector+3,c
 11428  00256E  EC1A  F02B         	call	_move_window	;wreg free
 11429  002572  6E53               	movwf	put_fat@res,c
 11430                           
 11431                           ;ff.c: 897:    if (res != FR_OK) break;
 11432  002574  5053               	movf	put_fat@res,w,c
 11433  002576  A4D8               	btfss	status,2,c
 11434  002578  D143               	goto	l4906
 11435                           
 11436                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 11437  00257A  0EFF               	movlw	255
 11438  00257C  6E45               	movwf	??_put_fat& (0+255),c
 11439  00257E  0E01               	movlw	1
 11440  002580  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11441  002582  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11442  002586  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11443  00258A  5045               	movf	??_put_fat,w,c
 11444  00258C  1647               	andwf	??_put_fat+2,f,c
 11445  00258E  5046               	movf	??_put_fat+1,w,c
 11446  002590  1648               	andwf	??_put_fat+3,f,c
 11447  002592  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11448  002596  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11449  00259A  5047               	movf	??_put_fat+2,w,c
 11450  00259C  2649               	addwf	??_put_fat+4,f,c
 11451  00259E  5048               	movf	??_put_fat+3,w,c
 11452  0025A0  224A               	addwfc	??_put_fat+5,f,c
 11453  0025A2  0E2E               	movlw	46
 11454  0025A4  2449               	addwf	??_put_fat+4,w,c
 11455  0025A6  6E54               	movwf	put_fat@p,c
 11456  0025A8  0E00               	movlw	0
 11457  0025AA  204A               	addwfc	??_put_fat+5,w,c
 11458  0025AC  6E55               	movwf	put_fat@p+1,c
 11459                           
 11460                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 11461  0025AE  B03D               	btfsc	put_fat@clst,0,c
 11462  0025B0  D01B               	goto	l4876
 11463  0025B2  C041  F045         	movff	put_fat@val,??_put_fat
 11464  0025B6  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11465  0025BA  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11466  0025BE  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11467  0025C2  C046  F045         	movff	??_put_fat+1,??_put_fat
 11468  0025C6  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11469  0025CA  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11470  0025CE  6A48               	clrf	??_put_fat+3,c
 11471  0025D0  0E0F               	movlw	15
 11472  0025D2  1645               	andwf	??_put_fat,f,c
 11473  0025D4  C054  FFD9         	movff	put_fat@p,fsr2l
 11474  0025D8  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11475  0025DC  50DF               	movf	indf2,w,c
 11476  0025DE  0BF0               	andlw	240
 11477  0025E0  1045               	iorwf	??_put_fat,w,c
 11478  0025E2  6E49               	movwf	(??_put_fat+4)& (0+255),c
 11479  0025E4  5049               	movf	??_put_fat+4,w,c
 11480  0025E6  D012               	goto	L12
 11481  0025E8                     l4876:
 11482  0025E8  C041  F045         	movff	put_fat@val,??_put_fat
 11483  0025EC  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11484  0025F0  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11485  0025F4  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11486  0025F8  0E05               	movlw	5
 11487  0025FA  D005               	goto	u5770
 11488  0025FC                     u5775:
 11489  0025FC  90D8               	bcf	status,0,c
 11490  0025FE  3248               	rrcf	??_put_fat+3,f,c
 11491  002600  3247               	rrcf	??_put_fat+2,f,c
 11492  002602  3246               	rrcf	??_put_fat+1,f,c
 11493  002604  3245               	rrcf	??_put_fat,f,c
 11494  002606                     u5770:
 11495  002606  2EE8               	decfsz	wreg,f,c
 11496  002608  D7F9               	goto	u5775
 11497  00260A  5045               	movf	??_put_fat,w,c
 11498  00260C                     L12:
 11499  00260C  6E4F               	movwf	_put_fat$401,c
 11500  00260E  6A50               	clrf	_put_fat$401+1,c
 11501  002610  C054  FFD9         	movff	put_fat@p,fsr2l
 11502  002614  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11503  002618  C04F  FFDF         	movff	_put_fat$401,indf2
 11504  00261C  D0D2               	goto	l4900
 11505  00261E                     l4880:
 11506                           
 11507                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11508  00261E  C03B  F030         	movff	put_fat@fs,move_window@fs
 11509  002622  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11510  002626  EE20 F01E          	lfsr	2,30
 11511  00262A  503B               	movf	put_fat@fs,w,c
 11512  00262C  26D9               	addwf	fsr2l,f,c
 11513  00262E  503C               	movf	put_fat@fs+1,w,c
 11514  002630  22DA               	addwfc	fsr2h,f,c
 11515  002632  CFDE F045          	movff	postinc2,??_put_fat
 11516  002636  CFDE F046          	movff	postinc2,??_put_fat+1
 11517  00263A  CFDE F047          	movff	postinc2,??_put_fat+2
 11518  00263E  CFDE F048          	movff	postinc2,??_put_fat+3
 11519  002642  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11520  002646  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11521  00264A  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11522  00264E  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11523  002652  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11524  002656  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11525  00265A  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11526  00265E  6A4C               	clrf	??_put_fat+7,c
 11527  002660  5045               	movf	??_put_fat,w,c
 11528  002662  2449               	addwf	??_put_fat+4,w,c
 11529  002664  6E32               	movwf	move_window@sector,c
 11530  002666  5046               	movf	??_put_fat+1,w,c
 11531  002668  204A               	addwfc	??_put_fat+5,w,c
 11532  00266A  6E33               	movwf	move_window@sector+1,c
 11533  00266C  5047               	movf	??_put_fat+2,w,c
 11534  00266E  204B               	addwfc	??_put_fat+6,w,c
 11535  002670  6E34               	movwf	move_window@sector+2,c
 11536  002672  5048               	movf	??_put_fat+3,w,c
 11537  002674  204C               	addwfc	??_put_fat+7,w,c
 11538  002676  6E35               	movwf	move_window@sector+3,c
 11539  002678  EC1A  F02B         	call	_move_window	;wreg free
 11540  00267C  6E53               	movwf	put_fat@res,c
 11541                           
 11542                           ;ff.c: 905:    if (res != FR_OK) break;
 11543  00267E  5053               	movf	put_fat@res,w,c
 11544  002680  A4D8               	btfss	status,2,c
 11545  002682  D0BE               	goto	l4906
 11546                           
 11547                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 11548  002684  0EFF               	movlw	255
 11549  002686  6E45               	movwf	??_put_fat& (0+255),c
 11550  002688  0E01               	movlw	1
 11551  00268A  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11552  00268C  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11553  002690  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11554  002694  90D8               	bcf	status,0,c
 11555  002696  3647               	rlcf	??_put_fat+2,f,c
 11556  002698  3648               	rlcf	??_put_fat+3,f,c
 11557  00269A  5045               	movf	??_put_fat,w,c
 11558  00269C  1647               	andwf	??_put_fat+2,f,c
 11559  00269E  5046               	movf	??_put_fat+1,w,c
 11560  0026A0  1648               	andwf	??_put_fat+3,f,c
 11561  0026A2  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11562  0026A6  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11563  0026AA  5047               	movf	??_put_fat+2,w,c
 11564  0026AC  2649               	addwf	??_put_fat+4,f,c
 11565  0026AE  5048               	movf	??_put_fat+3,w,c
 11566  0026B0  224A               	addwfc	??_put_fat+5,f,c
 11567  0026B2  0E2E               	movlw	46
 11568  0026B4  2449               	addwf	??_put_fat+4,w,c
 11569  0026B6  6E54               	movwf	put_fat@p,c
 11570  0026B8  0E00               	movlw	0
 11571  0026BA  204A               	addwfc	??_put_fat+5,w,c
 11572  0026BC  6E55               	movwf	put_fat@p+1,c
 11573                           
 11574                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11575  0026BE  C054  FFD9         	movff	put_fat@p,fsr2l
 11576  0026C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11577  0026C6  C041  FFDE         	movff	put_fat@val,postinc2
 11578  0026CA  C042  FFDD         	movff	put_fat@val+1,postdec2
 11579  0026CE  D079               	goto	l4900
 11580  0026D0                     l4890:
 11581                           
 11582                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11583  0026D0  C03B  F030         	movff	put_fat@fs,move_window@fs
 11584  0026D4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11585  0026D8  EE20 F01E          	lfsr	2,30
 11586  0026DC  503B               	movf	put_fat@fs,w,c
 11587  0026DE  26D9               	addwf	fsr2l,f,c
 11588  0026E0  503C               	movf	put_fat@fs+1,w,c
 11589  0026E2  22DA               	addwfc	fsr2h,f,c
 11590  0026E4  CFDE F045          	movff	postinc2,??_put_fat
 11591  0026E8  CFDE F046          	movff	postinc2,??_put_fat+1
 11592  0026EC  CFDE F047          	movff	postinc2,??_put_fat+2
 11593  0026F0  CFDE F048          	movff	postinc2,??_put_fat+3
 11594  0026F4  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11595  0026F8  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11596  0026FC  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11597  002700  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11598  002704  0E08               	movlw	8
 11599  002706  D005               	goto	u5790
 11600  002708                     u5795:
 11601  002708  90D8               	bcf	status,0,c
 11602  00270A  324C               	rrcf	??_put_fat+7,f,c
 11603  00270C  324B               	rrcf	??_put_fat+6,f,c
 11604  00270E  324A               	rrcf	??_put_fat+5,f,c
 11605  002710  3249               	rrcf	??_put_fat+4,f,c
 11606  002712                     u5790:
 11607  002712  2EE8               	decfsz	wreg,f,c
 11608  002714  D7F9               	goto	u5795
 11609  002716  5045               	movf	??_put_fat,w,c
 11610  002718  2449               	addwf	??_put_fat+4,w,c
 11611  00271A  6E32               	movwf	move_window@sector,c
 11612  00271C  5046               	movf	??_put_fat+1,w,c
 11613  00271E  204A               	addwfc	??_put_fat+5,w,c
 11614  002720  6E33               	movwf	move_window@sector+1,c
 11615  002722  5047               	movf	??_put_fat+2,w,c
 11616  002724  204B               	addwfc	??_put_fat+6,w,c
 11617  002726  6E34               	movwf	move_window@sector+2,c
 11618  002728  5048               	movf	??_put_fat+3,w,c
 11619  00272A  204C               	addwfc	??_put_fat+7,w,c
 11620  00272C  6E35               	movwf	move_window@sector+3,c
 11621  00272E  EC1A  F02B         	call	_move_window	;wreg free
 11622  002732  6E53               	movwf	put_fat@res,c
 11623                           
 11624                           ;ff.c: 913:    if (res != FR_OK) break;
 11625  002734  5053               	movf	put_fat@res,w,c
 11626  002736  A4D8               	btfss	status,2,c
 11627  002738  D063               	goto	l4906
 11628                           
 11629                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 11630  00273A  0EFF               	movlw	255
 11631  00273C  6E45               	movwf	??_put_fat& (0+255),c
 11632  00273E  0E01               	movlw	1
 11633  002740  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11634  002742  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11635  002746  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11636  00274A  90D8               	bcf	status,0,c
 11637  00274C  3647               	rlcf	??_put_fat+2,f,c
 11638  00274E  3648               	rlcf	??_put_fat+3,f,c
 11639  002750  90D8               	bcf	status,0,c
 11640  002752  3647               	rlcf	??_put_fat+2,f,c
 11641  002754  3648               	rlcf	??_put_fat+3,f,c
 11642  002756  5045               	movf	??_put_fat,w,c
 11643  002758  1647               	andwf	??_put_fat+2,f,c
 11644  00275A  5046               	movf	??_put_fat+1,w,c
 11645  00275C  1648               	andwf	??_put_fat+3,f,c
 11646  00275E  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11647  002762  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11648  002766  5047               	movf	??_put_fat+2,w,c
 11649  002768  2649               	addwf	??_put_fat+4,f,c
 11650  00276A  5048               	movf	??_put_fat+3,w,c
 11651  00276C  224A               	addwfc	??_put_fat+5,f,c
 11652  00276E  0E2E               	movlw	46
 11653  002770  2449               	addwf	??_put_fat+4,w,c
 11654  002772  6E54               	movwf	put_fat@p,c
 11655  002774  0E00               	movlw	0
 11656  002776  204A               	addwfc	??_put_fat+5,w,c
 11657  002778  6E55               	movwf	put_fat@p+1,c
 11658                           
 11659                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 11660  00277A  C054  FFD9         	movff	put_fat@p,fsr2l
 11661  00277E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11662  002782  0E00               	movlw	0
 11663  002784  14DE               	andwf	postinc2,w,c
 11664  002786  6E45               	movwf	??_put_fat& (0+255),c
 11665  002788  0E00               	movlw	0
 11666  00278A  14DE               	andwf	postinc2,w,c
 11667  00278C  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11668  00278E  0E00               	movlw	0
 11669  002790  14DE               	andwf	postinc2,w,c
 11670  002792  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11671  002794  0EF0               	movlw	240
 11672  002796  14DE               	andwf	postinc2,w,c
 11673  002798  6E48               	movwf	(??_put_fat+3)& (0+255),c
 11674  00279A  5045               	movf	??_put_fat,w,c
 11675  00279C  1241               	iorwf	put_fat@val,f,c
 11676  00279E  5046               	movf	??_put_fat+1,w,c
 11677  0027A0  1242               	iorwf	put_fat@val+1,f,c
 11678  0027A2  5047               	movf	??_put_fat+2,w,c
 11679  0027A4  1243               	iorwf	put_fat@val+2,f,c
 11680  0027A6  5048               	movf	??_put_fat+3,w,c
 11681  0027A8  1244               	iorwf	put_fat@val+3,f,c
 11682                           
 11683                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 11684  0027AA  C054  FFD9         	movff	put_fat@p,fsr2l
 11685  0027AE  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11686  0027B2  C041  FFDE         	movff	put_fat@val,postinc2
 11687  0027B6  C042  FFDE         	movff	put_fat@val+1,postinc2
 11688  0027BA  C043  FFDE         	movff	put_fat@val+2,postinc2
 11689  0027BE  C044  FFDE         	movff	put_fat@val+3,postinc2
 11690  0027C2                     l4900:
 11691                           
 11692                           ;ff.c: 917:    fs->wflag = 1;
 11693  0027C2  EE20 F004          	lfsr	2,4
 11694  0027C6  503B               	movf	put_fat@fs,w,c
 11695  0027C8  26D9               	addwf	fsr2l,f,c
 11696  0027CA  503C               	movf	put_fat@fs+1,w,c
 11697  0027CC  22DA               	addwfc	fsr2h,f,c
 11698  0027CE  0E01               	movlw	1
 11699  0027D0  6EDF               	movwf	indf2,c
 11700                           
 11701                           ;ff.c: 918:    break;
 11702  0027D2  D016               	goto	l4906
 11703  0027D4                     l4904:
 11704  0027D4  C03B  FFD9         	movff	put_fat@fs,fsr2l
 11705  0027D8  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 11706  0027DC  50DF               	movf	indf2,w,c
 11707  0027DE  6E45               	movwf	??_put_fat& (0+255),c
 11708  0027E0  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11709                           
 11710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11711                           ; Switch size 1, requested type "simple"
 11712                           ; Number of cases is 1, Range of values is 0 to 0
 11713                           ; switch strategies available:
 11714                           ; Name         Instructions Cycles
 11715                           ; simple_byte            4     3 (average)
 11716                           ;	Chosen strategy is simple_byte
 11717  0027E2  5046               	movf	??_put_fat+1,w,c
 11718  0027E4  0A00               	xorlw	0	; case 0
 11719  0027E6  A4D8               	btfss	status,2,c
 11720  0027E8  D610               	goto	u5700
 11721                           
 11722                           ; Switch size 1, requested type "simple"
 11723                           ; Number of cases is 3, Range of values is 1 to 3
 11724                           ; switch strategies available:
 11725                           ; Name         Instructions Cycles
 11726                           ; simple_byte           10     6 (average)
 11727                           ;	Chosen strategy is simple_byte
 11728  0027EA  5045               	movf	??_put_fat,w,c
 11729  0027EC  0A01               	xorlw	1	; case 1
 11730  0027EE  B4D8               	btfsc	status,2,c
 11731  0027F0  D60F               	goto	l278
 11732  0027F2  0A03               	xorlw	3	; case 2
 11733  0027F4  B4D8               	btfsc	status,2,c
 11734  0027F6  D713               	goto	l4880
 11735  0027F8  0A01               	xorlw	1	; case 3
 11736  0027FA  B4D8               	btfsc	status,2,c
 11737  0027FC  D769               	goto	l4890
 11738  0027FE  D605               	goto	u5700
 11739  002800                     l4906:
 11740                           
 11741                           ;ff.c: 925:  return res;
 11742  002800  5053               	movf	put_fat@res,w,c
 11743  002802  0012               	return		;funcret
 11744  002804                     __end_of_put_fat:
 11745                           	opt callstack 0
 11746                           
 11747 ;; *************** function _get_fat *****************
 11748 ;; Defined at:
 11749 ;;		line 818 in file "ff.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;  fs              2   58[COMRAM] PTR struct .
 11752 ;;		 -> FatFs(558), NULL(0), 
 11753 ;;  clst            4   60[COMRAM] unsigned long 
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;  val             4   75[COMRAM] unsigned long 
 11756 ;;  bc              2   83[COMRAM] unsigned short 
 11757 ;;  p               2   81[COMRAM] PTR unsigned char 
 11758 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11759 ;;  wc              2   79[COMRAM] unsigned short 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  4   58[COMRAM] unsigned long 
 11762 ;; Registers used:
 11763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11769 ;;      Params:         6       0       0       0       0       0       0       0       0
 11770 ;;      Locals:        12       0       0       0       0       0       0       0       0
 11771 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11772 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11773 ;;Total ram usage:       27 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    8
 11776 ;; This function calls:
 11777 ;;		_move_window
 11778 ;; This function is called by:
 11779 ;;		_remove_chain
 11780 ;;		_create_chain
 11781 ;;		_dir_sdi
 11782 ;;		_dir_next
 11783 ;;		_f_lseek
 11784 ;;		_f_read
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           	psect	text33
 11789  002C0A                     __ptext33:
 11790                           	opt callstack 0
 11791  002C0A                     _get_fat:
 11792                           	opt callstack 18
 11793                           
 11794                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 11795                           
 11796                           ;incstack = 0
 11797  002C0A  5040               	movf	get_fat@clst+3,w,c
 11798  002C0C  103F               	iorwf	get_fat@clst+2,w,c
 11799  002C0E  103E               	iorwf	get_fat@clst+1,w,c
 11800  002C10  E104               	bnz	u5580
 11801  002C12  0E02               	movlw	2
 11802  002C14  5C3D               	subwf	get_fat@clst,w,c
 11803  002C16  A0D8               	btfss	status,0,c
 11804  002C18  D010               	goto	u5590
 11805  002C1A                     u5580:
 11806  002C1A  EE20 F012          	lfsr	2,18
 11807  002C1E  503B               	movf	get_fat@fs,w,c
 11808  002C20  26D9               	addwf	fsr2l,f,c
 11809  002C22  503C               	movf	get_fat@fs+1,w,c
 11810  002C24  22DA               	addwfc	fsr2h,f,c
 11811  002C26  50DE               	movf	postinc2,w,c
 11812  002C28  5C3D               	subwf	get_fat@clst,w,c
 11813  002C2A  50DE               	movf	postinc2,w,c
 11814  002C2C  583E               	subwfb	get_fat@clst+1,w,c
 11815  002C2E  50DE               	movf	postinc2,w,c
 11816  002C30  583F               	subwfb	get_fat@clst+2,w,c
 11817  002C32  50DE               	movf	postinc2,w,c
 11818  002C34  5840               	subwfb	get_fat@clst+3,w,c
 11819  002C36  A0D8               	btfss	status,0,c
 11820  002C38  D008               	goto	l252
 11821  002C3A                     u5590:
 11822                           
 11823                           ;ff.c: 829:   val = 1;
 11824  002C3A  0E01               	movlw	1
 11825  002C3C  6E4C               	movwf	get_fat@val,c
 11826  002C3E  0E00               	movlw	0
 11827  002C40  6E4D               	movwf	get_fat@val+1,c
 11828  002C42  0E00               	movlw	0
 11829  002C44  6E4E               	movwf	get_fat@val+2,c
 11830  002C46  0E00               	movlw	0
 11831  002C48  D190               	goto	L14
 11832  002C4A                     l252:
 11833                           
 11834                           ;ff.c: 832:   val = 0xFFFFFFFF;
 11835  002C4A  684C               	setf	get_fat@val,c
 11836  002C4C  684D               	setf	get_fat@val+1,c
 11837  002C4E  684E               	setf	get_fat@val+2,c
 11838  002C50  684F               	setf	get_fat@val+3,c
 11839                           
 11840                           ;ff.c: 834:   switch (fs->fs_type) {
 11841  002C52  D18D               	goto	l4830
 11842  002C54                     l257:
 11843                           
 11844                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 11845  002C54  C03D  F054         	movff	get_fat@clst,get_fat@bc
 11846  002C58  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 11847  002C5C  90D8               	bcf	status,0,c
 11848  002C5E  3055               	rrcf	get_fat@bc+1,w,c
 11849  002C60  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11850  002C62  3054               	rrcf	get_fat@bc,w,c
 11851  002C64  6E41               	movwf	??_get_fat& (0+255),c
 11852  002C66  5041               	movf	??_get_fat,w,c
 11853  002C68  2654               	addwf	get_fat@bc,f,c
 11854  002C6A  5042               	movf	??_get_fat+1,w,c
 11855  002C6C  2255               	addwfc	get_fat@bc+1,f,c
 11856                           
 11857                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11858  002C6E  C03B  F030         	movff	get_fat@fs,move_window@fs
 11859  002C72  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11860  002C76  EE20 F01E          	lfsr	2,30
 11861  002C7A  503B               	movf	get_fat@fs,w,c
 11862  002C7C  26D9               	addwf	fsr2l,f,c
 11863  002C7E  503C               	movf	get_fat@fs+1,w,c
 11864  002C80  22DA               	addwfc	fsr2h,f,c
 11865  002C82  CFDE F041          	movff	postinc2,??_get_fat
 11866  002C86  CFDE F042          	movff	postinc2,??_get_fat+1
 11867  002C8A  CFDE F043          	movff	postinc2,??_get_fat+2
 11868  002C8E  CFDE F044          	movff	postinc2,??_get_fat+3
 11869  002C92  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11870  002C96  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11871  002C9A  0E09               	movlw	9
 11872  002C9C  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11873  002C9E                     u5605:
 11874  002C9E  90D8               	bcf	status,0,c
 11875  002CA0  3246               	rrcf	??_get_fat+5,f,c
 11876  002CA2  3245               	rrcf	??_get_fat+4,f,c
 11877  002CA4  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11878  002CA6  D7FB               	goto	u5605
 11879  002CA8  5045               	movf	??_get_fat+4,w,c
 11880  002CAA  2441               	addwf	??_get_fat,w,c
 11881  002CAC  6E32               	movwf	move_window@sector,c
 11882  002CAE  5046               	movf	??_get_fat+5,w,c
 11883  002CB0  2042               	addwfc	??_get_fat+1,w,c
 11884  002CB2  6E33               	movwf	move_window@sector+1,c
 11885  002CB4  0E00               	movlw	0
 11886  002CB6  2043               	addwfc	??_get_fat+2,w,c
 11887  002CB8  6E34               	movwf	move_window@sector+2,c
 11888  002CBA  0E00               	movlw	0
 11889  002CBC  2044               	addwfc	??_get_fat+3,w,c
 11890  002CBE  6E35               	movwf	move_window@sector+3,c
 11891  002CC0  EC1A  F02B         	call	_move_window	;wreg free
 11892  002CC4  0900               	iorlw	0
 11893  002CC6  A4D8               	btfss	status,2,c
 11894  002CC8  D168               	goto	l255
 11895                           
 11896                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 11897  002CCA  0EFF               	movlw	255
 11898  002CCC  6E41               	movwf	??_get_fat& (0+255),c
 11899  002CCE  0E01               	movlw	1
 11900  002CD0  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11901  002CD2  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11902  002CD6  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11903  002CDA  5041               	movf	??_get_fat,w,c
 11904  002CDC  1643               	andwf	??_get_fat+2,f,c
 11905  002CDE  5042               	movf	??_get_fat+1,w,c
 11906  002CE0  1644               	andwf	??_get_fat+3,f,c
 11907  002CE2  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11908  002CE6  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11909  002CEA  5043               	movf	??_get_fat+2,w,c
 11910  002CEC  2645               	addwf	??_get_fat+4,f,c
 11911  002CEE  5044               	movf	??_get_fat+3,w,c
 11912  002CF0  2246               	addwfc	??_get_fat+5,f,c
 11913  002CF2  0E2E               	movlw	46
 11914  002CF4  2445               	addwf	??_get_fat+4,w,c
 11915  002CF6  6ED9               	movwf	fsr2l,c
 11916  002CF8  0E00               	movlw	0
 11917  002CFA  2046               	addwfc	??_get_fat+5,w,c
 11918  002CFC  6EDA               	movwf	fsr2h,c
 11919  002CFE  50DF               	movf	indf2,w,c
 11920  002D00  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11921  002D02  5047               	movf	??_get_fat+6,w,c
 11922  002D04  6E50               	movwf	get_fat@wc,c
 11923  002D06  6A51               	clrf	get_fat@wc+1,c
 11924  002D08  4A54               	infsnz	get_fat@bc,f,c
 11925  002D0A  2A55               	incf	get_fat@bc+1,f,c
 11926                           
 11927                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11928  002D0C  C03B  F030         	movff	get_fat@fs,move_window@fs
 11929  002D10  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11930  002D14  EE20 F01E          	lfsr	2,30
 11931  002D18  503B               	movf	get_fat@fs,w,c
 11932  002D1A  26D9               	addwf	fsr2l,f,c
 11933  002D1C  503C               	movf	get_fat@fs+1,w,c
 11934  002D1E  22DA               	addwfc	fsr2h,f,c
 11935  002D20  CFDE F041          	movff	postinc2,??_get_fat
 11936  002D24  CFDE F042          	movff	postinc2,??_get_fat+1
 11937  002D28  CFDE F043          	movff	postinc2,??_get_fat+2
 11938  002D2C  CFDE F044          	movff	postinc2,??_get_fat+3
 11939  002D30  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11940  002D34  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11941  002D38  0E09               	movlw	9
 11942  002D3A  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11943  002D3C                     u5625:
 11944  002D3C  90D8               	bcf	status,0,c
 11945  002D3E  3246               	rrcf	??_get_fat+5,f,c
 11946  002D40  3245               	rrcf	??_get_fat+4,f,c
 11947  002D42  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11948  002D44  D7FB               	goto	u5625
 11949  002D46  5045               	movf	??_get_fat+4,w,c
 11950  002D48  2441               	addwf	??_get_fat,w,c
 11951  002D4A  6E32               	movwf	move_window@sector,c
 11952  002D4C  5046               	movf	??_get_fat+5,w,c
 11953  002D4E  2042               	addwfc	??_get_fat+1,w,c
 11954  002D50  6E33               	movwf	move_window@sector+1,c
 11955  002D52  0E00               	movlw	0
 11956  002D54  2043               	addwfc	??_get_fat+2,w,c
 11957  002D56  6E34               	movwf	move_window@sector+2,c
 11958  002D58  0E00               	movlw	0
 11959  002D5A  2044               	addwfc	??_get_fat+3,w,c
 11960  002D5C  6E35               	movwf	move_window@sector+3,c
 11961  002D5E  EC1A  F02B         	call	_move_window	;wreg free
 11962  002D62  0900               	iorlw	0
 11963  002D64  A4D8               	btfss	status,2,c
 11964  002D66  D119               	goto	l255
 11965                           
 11966                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 11967  002D68  0EFF               	movlw	255
 11968  002D6A  6E41               	movwf	??_get_fat& (0+255),c
 11969  002D6C  0E01               	movlw	1
 11970  002D6E  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11971  002D70  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11972  002D74  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11973  002D78  5041               	movf	??_get_fat,w,c
 11974  002D7A  1643               	andwf	??_get_fat+2,f,c
 11975  002D7C  5042               	movf	??_get_fat+1,w,c
 11976  002D7E  1644               	andwf	??_get_fat+3,f,c
 11977  002D80  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11978  002D84  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11979  002D88  5043               	movf	??_get_fat+2,w,c
 11980  002D8A  2645               	addwf	??_get_fat+4,f,c
 11981  002D8C  5044               	movf	??_get_fat+3,w,c
 11982  002D8E  2246               	addwfc	??_get_fat+5,f,c
 11983  002D90  0E2E               	movlw	46
 11984  002D92  2445               	addwf	??_get_fat+4,w,c
 11985  002D94  6ED9               	movwf	fsr2l,c
 11986  002D96  0E00               	movlw	0
 11987  002D98  2046               	addwfc	??_get_fat+5,w,c
 11988  002D9A  6EDA               	movwf	fsr2h,c
 11989  002D9C  50DF               	movf	indf2,w,c
 11990  002D9E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11991  002DA0  5047               	movf	??_get_fat+6,w,c
 11992  002DA2  6E49               	movwf	(??_get_fat+8)& (0+255),c
 11993  002DA4  6A48               	clrf	(??_get_fat+7)& (0+255),c
 11994  002DA6  5048               	movf	??_get_fat+7,w,c
 11995  002DA8  1250               	iorwf	get_fat@wc,f,c
 11996  002DAA  5049               	movf	??_get_fat+8,w,c
 11997  002DAC  1251               	iorwf	get_fat@wc+1,f,c
 11998                           
 11999                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 12000  002DAE  B03D               	btfsc	get_fat@clst,0,c
 12001  002DB0  D007               	goto	l4808
 12002  002DB2  0EFF               	movlw	255
 12003  002DB4  1450               	andwf	get_fat@wc,w,c
 12004  002DB6  6E4A               	movwf	_get_fat$374,c
 12005  002DB8  0E0F               	movlw	15
 12006  002DBA  1451               	andwf	get_fat@wc+1,w,c
 12007  002DBC  6E4B               	movwf	_get_fat$374+1,c
 12008  002DBE  D00F               	goto	l4810
 12009  002DC0                     l4808:
 12010  002DC0  C050  F041         	movff	get_fat@wc,??_get_fat
 12011  002DC4  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 12012  002DC8  0E04               	movlw	4
 12013  002DCA  6E43               	movwf	(??_get_fat+2)& (0+255),c
 12014  002DCC                     u5655:
 12015  002DCC  90D8               	bcf	status,0,c
 12016  002DCE  3242               	rrcf	??_get_fat+1,f,c
 12017  002DD0  3241               	rrcf	??_get_fat,f,c
 12018  002DD2  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 12019  002DD4  D7FB               	goto	u5655
 12020  002DD6  C041  F04A         	movff	??_get_fat,_get_fat$374
 12021  002DDA  C042  F04B         	movff	??_get_fat+1,_get_fat$374+1
 12022  002DDE                     l4810:
 12023  002DDE  C04A  F04C         	movff	_get_fat$374,get_fat@val
 12024  002DE2  C04B  F04D         	movff	_get_fat$374+1,get_fat@val+1
 12025  002DE6  D05B               	goto	L15
 12026  002DE8                     l4812:
 12027                           
 12028                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 12029  002DE8  C03B  F030         	movff	get_fat@fs,move_window@fs
 12030  002DEC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12031  002DF0  EE20 F01E          	lfsr	2,30
 12032  002DF4  503B               	movf	get_fat@fs,w,c
 12033  002DF6  26D9               	addwf	fsr2l,f,c
 12034  002DF8  503C               	movf	get_fat@fs+1,w,c
 12035  002DFA  22DA               	addwfc	fsr2h,f,c
 12036  002DFC  CFDE F041          	movff	postinc2,??_get_fat
 12037  002E00  CFDE F042          	movff	postinc2,??_get_fat+1
 12038  002E04  CFDE F043          	movff	postinc2,??_get_fat+2
 12039  002E08  CFDE F044          	movff	postinc2,??_get_fat+3
 12040  002E0C  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12041  002E10  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12042  002E14  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12043  002E18  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12044  002E1C  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 12045  002E20  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 12046  002E24  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 12047  002E28  6A48               	clrf	??_get_fat+7,c
 12048  002E2A  5041               	movf	??_get_fat,w,c
 12049  002E2C  2445               	addwf	??_get_fat+4,w,c
 12050  002E2E  6E32               	movwf	move_window@sector,c
 12051  002E30  5042               	movf	??_get_fat+1,w,c
 12052  002E32  2046               	addwfc	??_get_fat+5,w,c
 12053  002E34  6E33               	movwf	move_window@sector+1,c
 12054  002E36  5043               	movf	??_get_fat+2,w,c
 12055  002E38  2047               	addwfc	??_get_fat+6,w,c
 12056  002E3A  6E34               	movwf	move_window@sector+2,c
 12057  002E3C  5044               	movf	??_get_fat+3,w,c
 12058  002E3E  2048               	addwfc	??_get_fat+7,w,c
 12059  002E40  6E35               	movwf	move_window@sector+3,c
 12060  002E42  EC1A  F02B         	call	_move_window	;wreg free
 12061  002E46  0900               	iorlw	0
 12062  002E48  A4D8               	btfss	status,2,c
 12063  002E4A  D0A7               	goto	l255
 12064                           
 12065                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 12066  002E4C  0EFF               	movlw	255
 12067  002E4E  6E41               	movwf	??_get_fat& (0+255),c
 12068  002E50  0E01               	movlw	1
 12069  002E52  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12070  002E54  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12071  002E58  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12072  002E5C  90D8               	bcf	status,0,c
 12073  002E5E  3643               	rlcf	??_get_fat+2,f,c
 12074  002E60  3644               	rlcf	??_get_fat+3,f,c
 12075  002E62  5041               	movf	??_get_fat,w,c
 12076  002E64  1643               	andwf	??_get_fat+2,f,c
 12077  002E66  5042               	movf	??_get_fat+1,w,c
 12078  002E68  1644               	andwf	??_get_fat+3,f,c
 12079  002E6A  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 12080  002E6E  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 12081  002E72  5043               	movf	??_get_fat+2,w,c
 12082  002E74  2645               	addwf	??_get_fat+4,f,c
 12083  002E76  5044               	movf	??_get_fat+3,w,c
 12084  002E78  2246               	addwfc	??_get_fat+5,f,c
 12085  002E7A  0E2E               	movlw	46
 12086  002E7C  2445               	addwf	??_get_fat+4,w,c
 12087  002E7E  6E52               	movwf	get_fat@p,c
 12088  002E80  0E00               	movlw	0
 12089  002E82  2046               	addwfc	??_get_fat+5,w,c
 12090  002E84  6E53               	movwf	get_fat@p+1,c
 12091                           
 12092                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 12093  002E86  C052  FFD9         	movff	get_fat@p,fsr2l
 12094  002E8A  C053  FFDA         	movff	get_fat@p+1,fsr2h
 12095  002E8E  CFDE F041          	movff	postinc2,??_get_fat
 12096  002E92  CFDD F042          	movff	postdec2,??_get_fat+1
 12097  002E96  C041  F04C         	movff	??_get_fat,get_fat@val
 12098  002E9A  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 12099  002E9E                     L15:
 12100  002E9E  6A4E               	clrf	get_fat@val+2,c
 12101  002EA0  6A4F               	clrf	get_fat@val+3,c
 12102                           
 12103                           ;ff.c: 848:    break;
 12104  002EA2  D07B               	goto	l255
 12105  002EA4                     l4820:
 12106                           
 12107                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 12108  002EA4  C03B  F030         	movff	get_fat@fs,move_window@fs
 12109  002EA8  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 12110  002EAC  EE20 F01E          	lfsr	2,30
 12111  002EB0  503B               	movf	get_fat@fs,w,c
 12112  002EB2  26D9               	addwf	fsr2l,f,c
 12113  002EB4  503C               	movf	get_fat@fs+1,w,c
 12114  002EB6  22DA               	addwfc	fsr2h,f,c
 12115  002EB8  CFDE F041          	movff	postinc2,??_get_fat
 12116  002EBC  CFDE F042          	movff	postinc2,??_get_fat+1
 12117  002EC0  CFDE F043          	movff	postinc2,??_get_fat+2
 12118  002EC4  CFDE F044          	movff	postinc2,??_get_fat+3
 12119  002EC8  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 12120  002ECC  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 12121  002ED0  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 12122  002ED4  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 12123  002ED8  0E08               	movlw	8
 12124  002EDA  D005               	goto	u5670
 12125  002EDC                     u5675:
 12126  002EDC  90D8               	bcf	status,0,c
 12127  002EDE  3248               	rrcf	??_get_fat+7,f,c
 12128  002EE0  3247               	rrcf	??_get_fat+6,f,c
 12129  002EE2  3246               	rrcf	??_get_fat+5,f,c
 12130  002EE4  3245               	rrcf	??_get_fat+4,f,c
 12131  002EE6                     u5670:
 12132  002EE6  2EE8               	decfsz	wreg,f,c
 12133  002EE8  D7F9               	goto	u5675
 12134  002EEA  5041               	movf	??_get_fat,w,c
 12135  002EEC  2445               	addwf	??_get_fat+4,w,c
 12136  002EEE  6E32               	movwf	move_window@sector,c
 12137  002EF0  5042               	movf	??_get_fat+1,w,c
 12138  002EF2  2046               	addwfc	??_get_fat+5,w,c
 12139  002EF4  6E33               	movwf	move_window@sector+1,c
 12140  002EF6  5043               	movf	??_get_fat+2,w,c
 12141  002EF8  2047               	addwfc	??_get_fat+6,w,c
 12142  002EFA  6E34               	movwf	move_window@sector+2,c
 12143  002EFC  5044               	movf	??_get_fat+3,w,c
 12144  002EFE  2048               	addwfc	??_get_fat+7,w,c
 12145  002F00  6E35               	movwf	move_window@sector+3,c
 12146  002F02  EC1A  F02B         	call	_move_window	;wreg free
 12147  002F06  0900               	iorlw	0
 12148  002F08  A4D8               	btfss	status,2,c
 12149  002F0A  D047               	goto	l255
 12150                           
 12151                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 12152  002F0C  0EFF               	movlw	255
 12153  002F0E  6E41               	movwf	??_get_fat& (0+255),c
 12154  002F10  0E01               	movlw	1
 12155  002F12  6E42               	movwf	(??_get_fat+1)& (0+255),c
 12156  002F14  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 12157  002F18  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 12158  002F1C  90D8               	bcf	status,0,c
 12159  002F1E  3643               	rlcf	??_get_fat+2,f,c
 12160  002F20  3644               	rlcf	??_get_fat+3,f,c
 12161  002F22  90D8               	bcf	status,0,c
 12162  002F24  3643               	rlcf	??_get_fat+2,f,c
 12163  002F26  3644               	rlcf	??_get_fat+3,f,c
 12164  002F28  5041               	movf	??_get_fat,w,c
 12165  002F2A  1643               	andwf	??_get_fat+2,f,c
 12166  002F2C  5042               	movf	??_get_fat+1,w,c
 12167  002F2E  1644               	andwf	??_get_fat+3,f,c
 12168  002F30  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 12169  002F34  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 12170  002F38  5043               	movf	??_get_fat+2,w,c
 12171  002F3A  2645               	addwf	??_get_fat+4,f,c
 12172  002F3C  5044               	movf	??_get_fat+3,w,c
 12173  002F3E  2246               	addwfc	??_get_fat+5,f,c
 12174  002F40  0E2E               	movlw	46
 12175  002F42  2445               	addwf	??_get_fat+4,w,c
 12176  002F44  6E52               	movwf	get_fat@p,c
 12177  002F46  0E00               	movlw	0
 12178  002F48  2046               	addwfc	??_get_fat+5,w,c
 12179  002F4A  6E53               	movwf	get_fat@p+1,c
 12180                           
 12181                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12182  002F4C  C052  FFD9         	movff	get_fat@p,fsr2l
 12183  002F50  C053  FFDA         	movff	get_fat@p+1,fsr2h
 12184  002F54  0EFF               	movlw	255
 12185  002F56  14DE               	andwf	postinc2,w,c
 12186  002F58  6E4C               	movwf	get_fat@val,c
 12187  002F5A  0EFF               	movlw	255
 12188  002F5C  14DE               	andwf	postinc2,w,c
 12189  002F5E  6E4D               	movwf	get_fat@val+1,c
 12190  002F60  0EFF               	movlw	255
 12191  002F62  14DE               	andwf	postinc2,w,c
 12192  002F64  6E4E               	movwf	get_fat@val+2,c
 12193  002F66  0E0F               	movlw	15
 12194  002F68  14DE               	andwf	postinc2,w,c
 12195  002F6A                     L14:
 12196  002F6A  6E4F               	movwf	get_fat@val+3,c
 12197                           
 12198                           ;ff.c: 854:    break;
 12199  002F6C  D016               	goto	l255
 12200  002F6E                     l4830:
 12201  002F6E  C03B  FFD9         	movff	get_fat@fs,fsr2l
 12202  002F72  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 12203  002F76  50DF               	movf	indf2,w,c
 12204  002F78  6E41               	movwf	??_get_fat& (0+255),c
 12205  002F7A  6A42               	clrf	(??_get_fat+1)& (0+255),c
 12206                           
 12207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12208                           ; Switch size 1, requested type "simple"
 12209                           ; Number of cases is 1, Range of values is 0 to 0
 12210                           ; switch strategies available:
 12211                           ; Name         Instructions Cycles
 12212                           ; simple_byte            4     3 (average)
 12213                           ;	Chosen strategy is simple_byte
 12214  002F7C  5042               	movf	??_get_fat+1,w,c
 12215  002F7E  0A00               	xorlw	0	; case 0
 12216  002F80  A4D8               	btfss	status,2,c
 12217  002F82  D65B               	goto	u5590
 12218                           
 12219                           ; Switch size 1, requested type "simple"
 12220                           ; Number of cases is 3, Range of values is 1 to 3
 12221                           ; switch strategies available:
 12222                           ; Name         Instructions Cycles
 12223                           ; simple_byte           10     6 (average)
 12224                           ;	Chosen strategy is simple_byte
 12225  002F84  5041               	movf	??_get_fat,w,c
 12226  002F86  0A01               	xorlw	1	; case 1
 12227  002F88  B4D8               	btfsc	status,2,c
 12228  002F8A  D664               	goto	l257
 12229  002F8C  0A03               	xorlw	3	; case 2
 12230  002F8E  B4D8               	btfsc	status,2,c
 12231  002F90  D72B               	goto	l4812
 12232  002F92  0A01               	xorlw	1	; case 3
 12233  002F94  B4D8               	btfsc	status,2,c
 12234  002F96  D786               	goto	l4820
 12235  002F98  D650               	goto	u5590
 12236  002F9A                     l255:
 12237                           
 12238                           ;ff.c: 861:  return val;
 12239  002F9A  C04C  F03B         	movff	get_fat@val,?_get_fat
 12240  002F9E  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 12241  002FA2  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 12242  002FA6  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 12243  002FAA  0012               	return		;funcret
 12244  002FAC                     __end_of_get_fat:
 12245                           	opt callstack 0
 12246                           
 12247 ;; *************** function _clust2sect *****************
 12248 ;; Defined at:
 12249 ;;		line 800 in file "ff.c"
 12250 ;; Parameters:    Size  Location     Type
 12251 ;;  fs              2   12[COMRAM] PTR struct .
 12252 ;;		 -> FatFs(558), NULL(0), 
 12253 ;;  clst            4   14[COMRAM] unsigned long 
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  4   12[COMRAM] unsigned long 
 12258 ;; Registers used:
 12259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12265 ;;      Params:         6       0       0       0       0       0       0       0       0
 12266 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12267 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12268 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12269 ;;Total ram usage:       11 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:    1
 12272 ;; This function calls:
 12273 ;;		___lmul
 12274 ;; This function is called by:
 12275 ;;		_dir_sdi
 12276 ;;		_dir_next
 12277 ;;		_f_write
 12278 ;;		_f_lseek
 12279 ;;		_f_read
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           	psect	text34
 12284  0054CA                     __ptext34:
 12285                           	opt callstack 0
 12286  0054CA                     _clust2sect:
 12287                           	opt callstack 26
 12288                           
 12289                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 12290                           
 12291                           ;incstack = 0
 12292  0054CA  0E02               	movlw	2
 12293  0054CC  5E0F               	subwf	clust2sect@clst,f,c
 12294  0054CE  0E00               	movlw	0
 12295  0054D0  5A10               	subwfb	clust2sect@clst+1,f,c
 12296  0054D2  5A11               	subwfb	clust2sect@clst+2,f,c
 12297  0054D4  5A12               	subwfb	clust2sect@clst+3,f,c
 12298                           
 12299                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 12300  0054D6  EE20 F012          	lfsr	2,18
 12301  0054DA  500D               	movf	clust2sect@fs,w,c
 12302  0054DC  26D9               	addwf	fsr2l,f,c
 12303  0054DE  500E               	movf	clust2sect@fs+1,w,c
 12304  0054E0  22DA               	addwfc	fsr2h,f,c
 12305  0054E2  0EFE               	movlw	254
 12306  0054E4  24DE               	addwf	postinc2,w,c
 12307  0054E6  6E13               	movwf	??_clust2sect& (0+255),c
 12308  0054E8  0EFF               	movlw	255
 12309  0054EA  20DE               	addwfc	postinc2,w,c
 12310  0054EC  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 12311  0054EE  0EFF               	movlw	255
 12312  0054F0  20DE               	addwfc	postinc2,w,c
 12313  0054F2  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 12314  0054F4  0EFF               	movlw	255
 12315  0054F6  20DE               	addwfc	postinc2,w,c
 12316  0054F8  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 12317  0054FA  5013               	movf	??_clust2sect,w,c
 12318  0054FC  5C0F               	subwf	clust2sect@clst,w,c
 12319  0054FE  5014               	movf	??_clust2sect+1,w,c
 12320  005500  5810               	subwfb	clust2sect@clst+1,w,c
 12321  005502  5015               	movf	??_clust2sect+2,w,c
 12322  005504  5811               	subwfb	clust2sect@clst+2,w,c
 12323  005506  5016               	movf	??_clust2sect+3,w,c
 12324  005508  5812               	subwfb	clust2sect@clst+3,w,c
 12325  00550A  A0D8               	btfss	status,0,c
 12326  00550C  D009               	goto	l4940
 12327  00550E  0E00               	movlw	0
 12328  005510  6E0D               	movwf	?_clust2sect,c
 12329  005512  0E00               	movlw	0
 12330  005514  6E0E               	movwf	?_clust2sect+1,c
 12331  005516  0E00               	movlw	0
 12332  005518  6E0F               	movwf	?_clust2sect+2,c
 12333  00551A  0E00               	movlw	0
 12334  00551C  6E10               	movwf	?_clust2sect+3,c
 12335  00551E  0012               	return	
 12336  005520                     l4940:
 12337                           
 12338                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 12339  005520  EE20 F026          	lfsr	2,38
 12340  005524  500D               	movf	clust2sect@fs,w,c
 12341  005526  26D9               	addwf	fsr2l,f,c
 12342  005528  500E               	movf	clust2sect@fs+1,w,c
 12343  00552A  22DA               	addwfc	fsr2h,f,c
 12344  00552C  CFDE F013          	movff	postinc2,??_clust2sect
 12345  005530  CFDE F014          	movff	postinc2,??_clust2sect+1
 12346  005534  CFDE F015          	movff	postinc2,??_clust2sect+2
 12347  005538  CFDE F016          	movff	postinc2,??_clust2sect+3
 12348  00553C  EE20 F002          	lfsr	2,2
 12349  005540  500D               	movf	clust2sect@fs,w,c
 12350  005542  26D9               	addwf	fsr2l,f,c
 12351  005544  500E               	movf	clust2sect@fs+1,w,c
 12352  005546  22DA               	addwfc	fsr2h,f,c
 12353  005548  50DF               	movf	indf2,w,c
 12354  00554A  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 12355  00554C  5017               	movf	??_clust2sect+4,w,c
 12356  00554E  6E01               	movwf	___lmul@multiplier,c
 12357  005550  6A02               	clrf	___lmul@multiplier+1,c
 12358  005552  6A03               	clrf	___lmul@multiplier+2,c
 12359  005554  6A04               	clrf	___lmul@multiplier+3,c
 12360  005556  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 12361  00555A  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 12362  00555E  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 12363  005562  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 12364  005566  EC7E  F02D         	call	___lmul	;wreg free
 12365  00556A  5013               	movf	??_clust2sect,w,c
 12366  00556C  2401               	addwf	?___lmul,w,c
 12367  00556E  6E0D               	movwf	?_clust2sect,c
 12368  005570  5014               	movf	??_clust2sect+1,w,c
 12369  005572  2002               	addwfc	?___lmul+1,w,c
 12370  005574  6E0E               	movwf	?_clust2sect+1,c
 12371  005576  5015               	movf	??_clust2sect+2,w,c
 12372  005578  2003               	addwfc	?___lmul+2,w,c
 12373  00557A  6E0F               	movwf	?_clust2sect+2,c
 12374  00557C  5016               	movf	??_clust2sect+3,w,c
 12375  00557E  2004               	addwfc	?___lmul+3,w,c
 12376  005580  6E10               	movwf	?_clust2sect+3,c
 12377  005582  0012               	return		;funcret
 12378  005584                     __end_of_clust2sect:
 12379                           	opt callstack 0
 12380                           
 12381 ;; *************** function ___lmul *****************
 12382 ;; Defined at:
 12383 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 12384 ;; Parameters:    Size  Location     Type
 12385 ;;  multiplier      4    0[COMRAM] unsigned long 
 12386 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12387 ;; Auto vars:     Size  Location     Type
 12388 ;;  product         4    8[COMRAM] unsigned long 
 12389 ;; Return value:  Size  Location     Type
 12390 ;;                  4    0[COMRAM] unsigned long 
 12391 ;; Registers used:
 12392 ;;		wreg, status,2, status,0
 12393 ;; Tracked objects:
 12394 ;;		On entry : 0/0
 12395 ;;		On exit  : 0/0
 12396 ;;		Unchanged: 0/0
 12397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12398 ;;      Params:         8       0       0       0       0       0       0       0       0
 12399 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12400 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12401 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12402 ;;Total ram usage:       12 bytes
 12403 ;; Hardware stack levels used:    1
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_clust2sect
 12408 ;;		_find_volume
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text35
 12413  005AFC                     __ptext35:
 12414                           	opt callstack 0
 12415  005AFC                     ___lmul:
 12416                           	opt callstack 26
 12417                           
 12418                           ;incstack = 0
 12419  005AFC  0E00               	movlw	0
 12420  005AFE  6E09               	movwf	___lmul@product,c
 12421  005B00  0E00               	movlw	0
 12422  005B02  6E0A               	movwf	___lmul@product+1,c
 12423  005B04  0E00               	movlw	0
 12424  005B06  6E0B               	movwf	___lmul@product+2,c
 12425  005B08  0E00               	movlw	0
 12426  005B0A  6E0C               	movwf	___lmul@product+3,c
 12427  005B0C                     l4916:
 12428  005B0C  A001               	btfss	___lmul@multiplier,0,c
 12429  005B0E  D008               	goto	l4920
 12430  005B10  5005               	movf	___lmul@multiplicand,w,c
 12431  005B12  2609               	addwf	___lmul@product,f,c
 12432  005B14  5006               	movf	___lmul@multiplicand+1,w,c
 12433  005B16  220A               	addwfc	___lmul@product+1,f,c
 12434  005B18  5007               	movf	___lmul@multiplicand+2,w,c
 12435  005B1A  220B               	addwfc	___lmul@product+2,f,c
 12436  005B1C  5008               	movf	___lmul@multiplicand+3,w,c
 12437  005B1E  220C               	addwfc	___lmul@product+3,f,c
 12438  005B20                     l4920:
 12439  005B20  90D8               	bcf	status,0,c
 12440  005B22  3605               	rlcf	___lmul@multiplicand,f,c
 12441  005B24  3606               	rlcf	___lmul@multiplicand+1,f,c
 12442  005B26  3607               	rlcf	___lmul@multiplicand+2,f,c
 12443  005B28  3608               	rlcf	___lmul@multiplicand+3,f,c
 12444  005B2A  90D8               	bcf	status,0,c
 12445  005B2C  3204               	rrcf	___lmul@multiplier+3,f,c
 12446  005B2E  3203               	rrcf	___lmul@multiplier+2,f,c
 12447  005B30  3202               	rrcf	___lmul@multiplier+1,f,c
 12448  005B32  3201               	rrcf	___lmul@multiplier,f,c
 12449  005B34  5001               	movf	___lmul@multiplier,w,c
 12450  005B36  1002               	iorwf	___lmul@multiplier+1,w,c
 12451  005B38  1003               	iorwf	___lmul@multiplier+2,w,c
 12452  005B3A  1004               	iorwf	___lmul@multiplier+3,w,c
 12453  005B3C  A4D8               	btfss	status,2,c
 12454  005B3E  D7E6               	goto	l4916
 12455  005B40  C009  F001         	movff	___lmul@product,?___lmul
 12456  005B44  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12457  005B48  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12458  005B4C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12459  005B50  0012               	return		;funcret
 12460  005B52                     __end_of___lmul:
 12461                           	opt callstack 0
 12462                           
 12463 ;; *************** function ___lldiv *****************
 12464 ;; Defined at:
 12465 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  dividend        4    0[COMRAM] unsigned long 
 12468 ;;  divisor         4    4[COMRAM] unsigned long 
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  quotient        4    8[COMRAM] unsigned long 
 12471 ;;  counter         1   12[COMRAM] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;                  4    0[COMRAM] unsigned long 
 12474 ;; Registers used:
 12475 ;;		wreg, status,2, status,0
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12481 ;;      Params:         8       0       0       0       0       0       0       0       0
 12482 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12483 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12484 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12485 ;;Total ram usage:       13 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; This function calls:
 12488 ;;		Nothing
 12489 ;; This function is called by:
 12490 ;;		_find_volume
 12491 ;;		_f_lseek
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text36
 12496  00576E                     __ptext36:
 12497                           	opt callstack 0
 12498  00576E                     ___lldiv:
 12499                           	opt callstack 27
 12500                           
 12501                           ;incstack = 0
 12502  00576E  0E00               	movlw	0
 12503  005770  6E09               	movwf	___lldiv@quotient,c
 12504  005772  0E00               	movlw	0
 12505  005774  6E0A               	movwf	___lldiv@quotient+1,c
 12506  005776  0E00               	movlw	0
 12507  005778  6E0B               	movwf	___lldiv@quotient+2,c
 12508  00577A  0E00               	movlw	0
 12509  00577C  6E0C               	movwf	___lldiv@quotient+3,c
 12510  00577E  5005               	movf	___lldiv@divisor,w,c
 12511  005780  1006               	iorwf	___lldiv@divisor+1,w,c
 12512  005782  1007               	iorwf	___lldiv@divisor+2,w,c
 12513  005784  1008               	iorwf	___lldiv@divisor+3,w,c
 12514  005786  B4D8               	btfsc	status,2,c
 12515  005788  D02A               	goto	l984
 12516  00578A  0E01               	movlw	1
 12517  00578C  6E0D               	movwf	___lldiv@counter,c
 12518  00578E  D006               	goto	l5820
 12519  005790                     l5818:
 12520  005790  90D8               	bcf	status,0,c
 12521  005792  3605               	rlcf	___lldiv@divisor,f,c
 12522  005794  3606               	rlcf	___lldiv@divisor+1,f,c
 12523  005796  3607               	rlcf	___lldiv@divisor+2,f,c
 12524  005798  3608               	rlcf	___lldiv@divisor+3,f,c
 12525  00579A  2A0D               	incf	___lldiv@counter,f,c
 12526  00579C                     l5820:
 12527  00579C  AE08               	btfss	___lldiv@divisor+3,7,c
 12528  00579E  D7F8               	goto	l5818
 12529  0057A0                     u7560:
 12530  0057A0  90D8               	bcf	status,0,c
 12531  0057A2  3609               	rlcf	___lldiv@quotient,f,c
 12532  0057A4  360A               	rlcf	___lldiv@quotient+1,f,c
 12533  0057A6  360B               	rlcf	___lldiv@quotient+2,f,c
 12534  0057A8  360C               	rlcf	___lldiv@quotient+3,f,c
 12535  0057AA  5005               	movf	___lldiv@divisor,w,c
 12536  0057AC  5C01               	subwf	___lldiv@dividend,w,c
 12537  0057AE  5006               	movf	___lldiv@divisor+1,w,c
 12538  0057B0  5802               	subwfb	___lldiv@dividend+1,w,c
 12539  0057B2  5007               	movf	___lldiv@divisor+2,w,c
 12540  0057B4  5803               	subwfb	___lldiv@dividend+2,w,c
 12541  0057B6  5008               	movf	___lldiv@divisor+3,w,c
 12542  0057B8  5804               	subwfb	___lldiv@dividend+3,w,c
 12543  0057BA  A0D8               	btfss	status,0,c
 12544  0057BC  D009               	goto	l5830
 12545  0057BE  5005               	movf	___lldiv@divisor,w,c
 12546  0057C0  5E01               	subwf	___lldiv@dividend,f,c
 12547  0057C2  5006               	movf	___lldiv@divisor+1,w,c
 12548  0057C4  5A02               	subwfb	___lldiv@dividend+1,f,c
 12549  0057C6  5007               	movf	___lldiv@divisor+2,w,c
 12550  0057C8  5A03               	subwfb	___lldiv@dividend+2,f,c
 12551  0057CA  5008               	movf	___lldiv@divisor+3,w,c
 12552  0057CC  5A04               	subwfb	___lldiv@dividend+3,f,c
 12553  0057CE  8009               	bsf	___lldiv@quotient,0,c
 12554  0057D0                     l5830:
 12555  0057D0  90D8               	bcf	status,0,c
 12556  0057D2  3208               	rrcf	___lldiv@divisor+3,f,c
 12557  0057D4  3207               	rrcf	___lldiv@divisor+2,f,c
 12558  0057D6  3206               	rrcf	___lldiv@divisor+1,f,c
 12559  0057D8  3205               	rrcf	___lldiv@divisor,f,c
 12560  0057DA  2E0D               	decfsz	___lldiv@counter,f,c
 12561  0057DC  D7E1               	goto	u7560
 12562  0057DE                     l984:
 12563  0057DE  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12564  0057E2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12565  0057E6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12566  0057EA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12567  0057EE  0012               	return		;funcret
 12568  0057F0                     __end_of___lldiv:
 12569                           	opt callstack 0
 12570                           
 12571 ;; *************** function _f_close *****************
 12572 ;; Defined at:
 12573 ;;		line 2861 in file "ff.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;  fp              2   77[COMRAM] PTR struct .
 12576 ;;		 -> Fil(32), 
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;  res             1   79[COMRAM] enum E93
 12579 ;; Return value:  Size  Location     Type
 12580 ;;                  1    wreg      enum E93
 12581 ;; Registers used:
 12582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12583 ;; Tracked objects:
 12584 ;;		On entry : 0/0
 12585 ;;		On exit  : 0/0
 12586 ;;		Unchanged: 0/0
 12587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12588 ;;      Params:         2       0       0       0       0       0       0       0       0
 12589 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12590 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12591 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12592 ;;Total ram usage:        3 bytes
 12593 ;; Hardware stack levels used:    1
 12594 ;; Hardware stack levels required when called:    9
 12595 ;; This function calls:
 12596 ;;		_f_sync
 12597 ;;		_validate
 12598 ;; This function is called by:
 12599 ;;		_guardar
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text37
 12604  005C5E                     __ptext37:
 12605                           	opt callstack 0
 12606  005C5E                     _f_close:
 12607                           	opt callstack 20
 12608                           
 12609                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 12610                           
 12611                           ;incstack = 0
 12612  005C5E  C04E  F045         	movff	f_close@fp,f_sync@fp
 12613  005C62  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 12614  005C66  EC77  F024         	call	_f_sync	;wreg free
 12615  005C6A  6E50               	movwf	f_close@res,c
 12616                           
 12617                           ;ff.c: 2870:  if (res == FR_OK)
 12618  005C6C  5050               	movf	f_close@res,w,c
 12619  005C6E  A4D8               	btfss	status,2,c
 12620  005C70  0012               	return	
 12621                           
 12622                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 12623  005C72  C04E  F002         	movff	f_close@fp,validate@obj
 12624  005C76  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 12625  005C7A  EC6D  F02B         	call	_validate	;wreg free
 12626  005C7E  6E50               	movwf	f_close@res,c
 12627                           
 12628                           ;ff.c: 2874:   if (res == FR_OK) {
 12629  005C80  5050               	movf	f_close@res,w,c
 12630  005C82  A4D8               	btfss	status,2,c
 12631  005C84  0012               	return	
 12632                           
 12633                           ;ff.c: 2882:     fp->fs = 0;
 12634  005C86  C04E  FFD9         	movff	f_close@fp,fsr2l
 12635  005C8A  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 12636  005C8E  0E00               	movlw	0
 12637  005C90  6EDE               	movwf	postinc2,c
 12638  005C92  0E00               	movlw	0
 12639  005C94  6EDD               	movwf	postdec2,c
 12640  005C96  0012               	return		;funcret
 12641  005C98                     __end_of_f_close:
 12642                           	opt callstack 0
 12643                           
 12644 ;; *************** function _f_sync *****************
 12645 ;; Defined at:
 12646 ;;		line 2813 in file "ff.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  fp              2   68[COMRAM] PTR struct .
 12649 ;;		 -> Fil(32), 
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;  tm              4    0        unsigned long 
 12652 ;;  dir             2   75[COMRAM] PTR unsigned char 
 12653 ;;		 -> FatFs(558), NULL(0), 
 12654 ;;  res             1   74[COMRAM] enum E93
 12655 ;; Return value:  Size  Location     Type
 12656 ;;                  1    wreg      enum E93
 12657 ;; Registers used:
 12658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12664 ;;      Params:         2       0       0       0       0       0       0       0       0
 12665 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12667 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12668 ;;Total ram usage:        9 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    8
 12671 ;; This function calls:
 12672 ;;		_move_window
 12673 ;;		_st_clust
 12674 ;;		_sync_fs
 12675 ;;		_validate
 12676 ;; This function is called by:
 12677 ;;		_f_close
 12678 ;; This function uses a non-reentrant model
 12679 ;;
 12680                           
 12681                           	psect	text38
 12682  0048EE                     __ptext38:
 12683                           	opt callstack 0
 12684  0048EE                     _f_sync:
 12685                           	opt callstack 20
 12686                           
 12687                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 12688                           
 12689                           ;incstack = 0
 12690  0048EE  C045  F002         	movff	f_sync@fp,validate@obj
 12691  0048F2  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 12692  0048F6  EC6D  F02B         	call	_validate	;wreg free
 12693  0048FA  6E4B               	movwf	f_sync@res,c
 12694                           
 12695                           ;ff.c: 2823:  if (res == FR_OK) {
 12696  0048FC  504B               	movf	f_sync@res,w,c
 12697  0048FE  A4D8               	btfss	status,2,c
 12698  004900  D095               	goto	l6374
 12699                           
 12700                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 12701  004902  EE20 F004          	lfsr	2,4
 12702  004906  5045               	movf	f_sync@fp,w,c
 12703  004908  26D9               	addwf	fsr2l,f,c
 12704  00490A  5046               	movf	f_sync@fp+1,w,c
 12705  00490C  22DA               	addwfc	fsr2h,f,c
 12706  00490E  AADF               	btfss	indf2,5,c
 12707  004910  D08D               	goto	l6374
 12708                           
 12709                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 12710  004912  C045  FFD9         	movff	f_sync@fp,fsr2l
 12711  004916  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12712  00491A  CFDE F030          	movff	postinc2,move_window@fs
 12713  00491E  CFDD F031          	movff	postdec2,move_window@fs+1
 12714  004922  EE20 F01A          	lfsr	2,26
 12715  004926  5045               	movf	f_sync@fp,w,c
 12716  004928  26D9               	addwf	fsr2l,f,c
 12717  00492A  5046               	movf	f_sync@fp+1,w,c
 12718  00492C  22DA               	addwfc	fsr2h,f,c
 12719  00492E  CFDE F032          	movff	postinc2,move_window@sector
 12720  004932  CFDE F033          	movff	postinc2,move_window@sector+1
 12721  004936  CFDE F034          	movff	postinc2,move_window@sector+2
 12722  00493A  CFDE F035          	movff	postinc2,move_window@sector+3
 12723  00493E  EC1A  F02B         	call	_move_window	;wreg free
 12724  004942  6E4B               	movwf	f_sync@res,c
 12725                           
 12726                           ;ff.c: 2834:    if (res == FR_OK) {
 12727  004944  504B               	movf	f_sync@res,w,c
 12728  004946  A4D8               	btfss	status,2,c
 12729  004948  D071               	goto	l6374
 12730                           
 12731                           ;ff.c: 2835:     dir = fp->dir_ptr;
 12732  00494A  EE20 F01E          	lfsr	2,30
 12733  00494E  5045               	movf	f_sync@fp,w,c
 12734  004950  26D9               	addwf	fsr2l,f,c
 12735  004952  5046               	movf	f_sync@fp+1,w,c
 12736  004954  22DA               	addwfc	fsr2h,f,c
 12737  004956  CFDE F04C          	movff	postinc2,f_sync@dir
 12738  00495A  CFDD F04D          	movff	postdec2,f_sync@dir+1
 12739                           
 12740                           ;ff.c: 2836:     dir[11] |= 0x20;
 12741  00495E  EE20 F00B          	lfsr	2,11
 12742  004962  504C               	movf	f_sync@dir,w,c
 12743  004964  26D9               	addwf	fsr2l,f,c
 12744  004966  504D               	movf	f_sync@dir+1,w,c
 12745  004968  22DA               	addwfc	fsr2h,f,c
 12746  00496A  0E00               	movlw	0
 12747  00496C  8ADB               	bsf	plusw2,5,c
 12748                           
 12749                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 12750  00496E  EE20 F00A          	lfsr	2,10
 12751  004972  5045               	movf	f_sync@fp,w,c
 12752  004974  26D9               	addwf	fsr2l,f,c
 12753  004976  5046               	movf	f_sync@fp+1,w,c
 12754  004978  22DA               	addwfc	fsr2h,f,c
 12755  00497A  EE10 F01C          	lfsr	1,28
 12756  00497E  504C               	movf	f_sync@dir,w,c
 12757  004980  26E1               	addwf	fsr1l,f,c
 12758  004982  504D               	movf	f_sync@dir+1,w,c
 12759  004984  22E2               	addwfc	fsr1h,f,c
 12760  004986  CFDE FFE6          	movff	postinc2,postinc1
 12761  00498A  CFDE FFE6          	movff	postinc2,postinc1
 12762  00498E  CFDE FFE6          	movff	postinc2,postinc1
 12763  004992  CFDE FFE6          	movff	postinc2,postinc1
 12764                           
 12765                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 12766  004996  C04C  F001         	movff	f_sync@dir,st_clust@dir
 12767  00499A  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 12768  00499E  EE20 F00E          	lfsr	2,14
 12769  0049A2  5045               	movf	f_sync@fp,w,c
 12770  0049A4  26D9               	addwf	fsr2l,f,c
 12771  0049A6  5046               	movf	f_sync@fp+1,w,c
 12772  0049A8  22DA               	addwfc	fsr2h,f,c
 12773  0049AA  CFDE F003          	movff	postinc2,st_clust@cl
 12774  0049AE  CFDE F004          	movff	postinc2,st_clust@cl+1
 12775  0049B2  CFDE F005          	movff	postinc2,st_clust@cl+2
 12776  0049B6  CFDE F006          	movff	postinc2,st_clust@cl+3
 12777  0049BA  EC97  F02E         	call	_st_clust	;wreg free
 12778                           
 12779                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 12780  0049BE  EE20 F016          	lfsr	2,22
 12781  0049C2  504C               	movf	f_sync@dir,w,c
 12782  0049C4  26D9               	addwf	fsr2l,f,c
 12783  0049C6  504D               	movf	f_sync@dir+1,w,c
 12784  0049C8  22DA               	addwfc	fsr2h,f,c
 12785  0049CA  0E00               	movlw	0
 12786  0049CC  6EDE               	movwf	postinc2,c
 12787  0049CE  0E00               	movlw	0
 12788  0049D0  6EDE               	movwf	postinc2,c
 12789  0049D2  0E21               	movlw	33
 12790  0049D4  6EDE               	movwf	postinc2,c
 12791  0049D6  0E46               	movlw	70
 12792  0049D8  6EDD               	movwf	postdec2,c
 12793                           
 12794                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 12795  0049DA  EE20 F012          	lfsr	2,18
 12796  0049DE  504C               	movf	f_sync@dir,w,c
 12797  0049E0  26D9               	addwf	fsr2l,f,c
 12798  0049E2  504D               	movf	f_sync@dir+1,w,c
 12799  0049E4  22DA               	addwfc	fsr2h,f,c
 12800  0049E6  0E00               	movlw	0
 12801  0049E8  6EDE               	movwf	postinc2,c
 12802  0049EA  0E00               	movlw	0
 12803  0049EC  6EDD               	movwf	postdec2,c
 12804                           
 12805                           ;ff.c: 2842:     fp->flag &= ~0x20;
 12806  0049EE  EE20 F004          	lfsr	2,4
 12807  0049F2  5045               	movf	f_sync@fp,w,c
 12808  0049F4  26D9               	addwf	fsr2l,f,c
 12809  0049F6  5046               	movf	f_sync@fp+1,w,c
 12810  0049F8  22DA               	addwfc	fsr2h,f,c
 12811  0049FA  0EDF               	movlw	223
 12812  0049FC  16DF               	andwf	indf2,f,c
 12813                           
 12814                           ;ff.c: 2843:     fp->fs->wflag = 1;
 12815  0049FE  C045  FFD9         	movff	f_sync@fp,fsr2l
 12816  004A02  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12817  004A06  EE10 F004          	lfsr	1,4
 12818  004A0A  50DE               	movf	postinc2,w,c
 12819  004A0C  26E1               	addwf	fsr1l,f,c
 12820  004A0E  50DD               	movf	postdec2,w,c
 12821  004A10  22E2               	addwfc	fsr1h,f,c
 12822  004A12  0E01               	movlw	1
 12823  004A14  6EE7               	movwf	indf1,c
 12824                           
 12825                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 12826  004A16  C045  FFD9         	movff	f_sync@fp,fsr2l
 12827  004A1A  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12828  004A1E  CFDE F03A          	movff	postinc2,sync_fs@fs
 12829  004A22  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 12830  004A26  ECA3  F021         	call	_sync_fs	;wreg free
 12831  004A2A  6E4B               	movwf	f_sync@res,c
 12832  004A2C                     l6374:
 12833                           
 12834                           ;ff.c: 2849:  return res;
 12835  004A2C  504B               	movf	f_sync@res,w,c
 12836  004A2E  0012               	return		;funcret
 12837  004A30                     __end_of_f_sync:
 12838                           	opt callstack 0
 12839                           
 12840 ;; *************** function _validate *****************
 12841 ;; Defined at:
 12842 ;;		line 2372 in file "ff.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  obj             2    1[COMRAM] PTR void 
 12845 ;;		 -> Fil(32), 
 12846 ;; Auto vars:     Size  Location     Type
 12847 ;;  fil             2    7[COMRAM] PTR struct .
 12848 ;;		 -> Fil(32), 
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  1    wreg      enum E93
 12851 ;; Registers used:
 12852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12858 ;;      Params:         2       0       0       0       0       0       0       0       0
 12859 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12860 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12861 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12862 ;;Total ram usage:        8 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; Hardware stack levels required when called:    1
 12865 ;; This function calls:
 12866 ;;		_disk_status
 12867 ;; This function is called by:
 12868 ;;		_f_write
 12869 ;;		_f_sync
 12870 ;;		_f_close
 12871 ;;		_f_lseek
 12872 ;;		_f_read
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           	psect	text39
 12877  0056DA                     __ptext39:
 12878                           	opt callstack 0
 12879  0056DA                     _validate:
 12880                           	opt callstack 26
 12881                           
 12882                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 12883                           
 12884                           ;incstack = 0
 12885  0056DA  C002  F008         	movff	validate@obj,validate@fil
 12886  0056DE  C003  F009         	movff	validate@obj+1,validate@fil+1
 12887                           
 12888                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 12889  0056E2  5008               	movf	validate@fil,w,c
 12890  0056E4  1009               	iorwf	validate@fil+1,w,c
 12891  0056E6  B4D8               	btfsc	status,2,c
 12892  0056E8  D03E               	goto	u7530
 12893  0056EA  C008  FFD9         	movff	validate@fil,fsr2l
 12894  0056EE  C009  FFDA         	movff	validate@fil+1,fsr2h
 12895  0056F2  50DE               	movf	postinc2,w,c
 12896  0056F4  10DE               	iorwf	postinc2,w,c
 12897  0056F6  B4D8               	btfsc	status,2,c
 12898  0056F8  D036               	goto	u7530
 12899  0056FA  C008  FFD9         	movff	validate@fil,fsr2l
 12900  0056FE  C009  FFDA         	movff	validate@fil+1,fsr2h
 12901  005702  CFDE F004          	movff	postinc2,??_validate
 12902  005706  CFDD F005          	movff	postdec2,??_validate+1
 12903  00570A  C004  FFD9         	movff	??_validate,fsr2l
 12904  00570E  C005  FFDA         	movff	??_validate+1,fsr2h
 12905  005712  50DF               	movf	indf2,w,c
 12906  005714  B4D8               	btfsc	status,2,c
 12907  005716  D027               	goto	u7530
 12908  005718  EE20 F002          	lfsr	2,2
 12909  00571C  5008               	movf	validate@fil,w,c
 12910  00571E  26D9               	addwf	fsr2l,f,c
 12911  005720  5009               	movf	validate@fil+1,w,c
 12912  005722  22DA               	addwfc	fsr2h,f,c
 12913  005724  C008  FFE1         	movff	validate@fil,fsr1l
 12914  005728  C009  FFE2         	movff	validate@fil+1,fsr1h
 12915  00572C  EE00 F006          	lfsr	0,6
 12916  005730  50E6               	movf	postinc1,w,c
 12917  005732  26E9               	addwf	fsr0l,f,c
 12918  005734  50E5               	movf	postdec1,w,c
 12919  005736  22EA               	addwfc	fsr0h,f,c
 12920  005738  50DE               	movf	postinc2,w,c
 12921  00573A  18EE               	xorwf	postinc0,w,c
 12922  00573C  E114               	bnz	l5800
 12923  00573E  50DE               	movf	postinc2,w,c
 12924  005740  18EE               	xorwf	postinc0,w,c
 12925  005742  A4D8               	btfss	status,2,c
 12926  005744  D010               	goto	u7530
 12927  005746  C008  FFD9         	movff	validate@fil,fsr2l
 12928  00574A  C009  FFDA         	movff	validate@fil+1,fsr2h
 12929  00574E  EE10 F001          	lfsr	1,1
 12930  005752  50DE               	movf	postinc2,w,c
 12931  005754  26E1               	addwf	fsr1l,f,c
 12932  005756  50DD               	movf	postdec2,w,c
 12933  005758  22E2               	addwfc	fsr1h,f,c
 12934  00575A  50E7               	movf	indf1,w,c
 12935  00575C  ECFC  F02E         	call	_disk_status
 12936  005760  6E04               	movwf	??_validate& (0+255),c
 12937  005762  A004               	btfss	??_validate,0,c
 12938  005764  D002               	goto	l5804
 12939  005766                     u7530:
 12940  005766                     l5800:
 12941                           
 12942                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 12943  005766  0E09               	movlw	9
 12944  005768  0012               	return	
 12945  00576A                     l5804:
 12946                           
 12947                           ;ff.c: 2384:  return FR_OK;
 12948  00576A  0E00               	movlw	0
 12949  00576C  0012               	return		;funcret
 12950  00576E                     __end_of_validate:
 12951                           	opt callstack 0
 12952                           
 12953 ;; *************** function _disk_status *****************
 12954 ;; Defined at:
 12955 ;;		line 356 in file "diskio.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;  pdrv            1    wreg     unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  pdrv            1    0[COMRAM] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      unsigned char 
 12962 ;; Registers used:
 12963 ;;		wreg, status,2
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0
 12970 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12972 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12973 ;;Total ram usage:        1 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; This function calls:
 12976 ;;		Nothing
 12977 ;; This function is called by:
 12978 ;;		_find_volume
 12979 ;;		_validate
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           	psect	text40
 12984  005DF8                     __ptext40:
 12985                           	opt callstack 0
 12986  005DF8                     _disk_status:
 12987                           	opt callstack 26
 12988                           
 12989                           ;incstack = 0
 12990                           ;disk_status@pdrv stored from wreg
 12991  005DF8  6E01               	movwf	disk_status@pdrv,c
 12992                           
 12993                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 12994  005DFA  5001               	movf	disk_status@pdrv,w,c
 12995  005DFC  B4D8               	btfsc	status,2,c
 12996  005DFE  D002               	goto	l5032
 12997  005E00  0E01               	movlw	1
 12998  005E02  0012               	return	
 12999  005E04                     l5032:
 13000                           
 13001                           ;diskio.c: 361:  return Stat;
 13002  005E04  0100               	movlb	0	; () banked
 13003  005E06  51F0               	movf	_Stat& (0+255),w,b
 13004  005E08  0012               	return		;funcret
 13005  005E0A                     __end_of_disk_status:
 13006                           	opt callstack 0
 13007                           
 13008 ;; *************** function _sync_fs *****************
 13009 ;; Defined at:
 13010 ;;		line 760 in file "ff.c"
 13011 ;; Parameters:    Size  Location     Type
 13012 ;;  fs              2   57[COMRAM] PTR struct .
 13013 ;;		 -> FatFs(558), NULL(0), 
 13014 ;; Auto vars:     Size  Location     Type
 13015 ;;  res             1   67[COMRAM] enum E93
 13016 ;; Return value:  Size  Location     Type
 13017 ;;                  1    wreg      enum E93
 13018 ;; Registers used:
 13019 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13025 ;;      Params:         2       0       0       0       0       0       0       0       0
 13026 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13027 ;;      Temps:          8       0       0       0       0       0       0       0       0
 13028 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13029 ;;Total ram usage:       11 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    7
 13032 ;; This function calls:
 13033 ;;		_disk_ioctl
 13034 ;;		_disk_write
 13035 ;;		_mem_set
 13036 ;;		_sync_window
 13037 ;; This function is called by:
 13038 ;;		_f_sync
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           	psect	text41
 13043  004346                     __ptext41:
 13044                           	opt callstack 0
 13045  004346                     _sync_fs:
 13046                           	opt callstack 20
 13047                           
 13048                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 13049                           
 13050                           ;incstack = 0
 13051  004346  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 13052  00434A  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 13053  00434E  EC83  F022         	call	_sync_window	;wreg free
 13054  004352  6E44               	movwf	sync_fs@res,c
 13055                           
 13056                           ;ff.c: 768:  if (res == FR_OK) {
 13057  004354  5044               	movf	sync_fs@res,w,c
 13058  004356  A4D8               	btfss	status,2,c
 13059  004358  D0D4               	goto	l242
 13060                           
 13061                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 13062  00435A  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 13063  00435E  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 13064  004362  0E03               	movlw	3
 13065  004364  18DE               	xorwf	postinc2,w,c
 13066  004366  A4D8               	btfss	status,2,c
 13067  004368  D0B8               	goto	l5496
 13068  00436A  EE20 F005          	lfsr	2,5
 13069  00436E  503A               	movf	sync_fs@fs,w,c
 13070  004370  26D9               	addwf	fsr2l,f,c
 13071  004372  503B               	movf	sync_fs@fs+1,w,c
 13072  004374  22DA               	addwfc	fsr2h,f,c
 13073  004376  04DE               	decf	postinc2,w,c
 13074  004378  A4D8               	btfss	status,2,c
 13075  00437A  D0AF               	goto	l5496
 13076                           
 13077                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 13078  00437C  0E2E               	movlw	46
 13079  00437E  243A               	addwf	sync_fs@fs,w,c
 13080  004380  6E01               	movwf	mem_set@dst,c
 13081  004382  0E00               	movlw	0
 13082  004384  203B               	addwfc	sync_fs@fs+1,w,c
 13083  004386  6E02               	movwf	mem_set@dst+1,c
 13084  004388  0E00               	movlw	0
 13085  00438A  6E04               	movwf	mem_set@val+1,c
 13086  00438C  0E00               	movlw	0
 13087  00438E  6E03               	movwf	mem_set@val,c
 13088  004390  0E02               	movlw	2
 13089  004392  6E06               	movwf	mem_set@cnt+1,c
 13090  004394  0E00               	movlw	0
 13091  004396  6E05               	movwf	mem_set@cnt,c
 13092  004398  EC81  F02E         	call	_mem_set	;wreg free
 13093                           
 13094                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 13095  00439C  EE22 F02C          	lfsr	2,556
 13096  0043A0  503A               	movf	sync_fs@fs,w,c
 13097  0043A2  26D9               	addwf	fsr2l,f,c
 13098  0043A4  503B               	movf	sync_fs@fs+1,w,c
 13099  0043A6  22DA               	addwfc	fsr2h,f,c
 13100  0043A8  0E55               	movlw	85
 13101  0043AA  6EDE               	movwf	postinc2,c
 13102  0043AC  0EAA               	movlw	170
 13103  0043AE  6EDD               	movwf	postdec2,c
 13104                           
 13105                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 13106  0043B0  EE20 F02E          	lfsr	2,46
 13107  0043B4  503A               	movf	sync_fs@fs,w,c
 13108  0043B6  26D9               	addwf	fsr2l,f,c
 13109  0043B8  503B               	movf	sync_fs@fs+1,w,c
 13110  0043BA  22DA               	addwfc	fsr2h,f,c
 13111  0043BC  0E52               	movlw	82
 13112  0043BE  6EDE               	movwf	postinc2,c
 13113  0043C0  0E52               	movlw	82
 13114  0043C2  6EDE               	movwf	postinc2,c
 13115  0043C4  0E61               	movlw	97
 13116  0043C6  6EDE               	movwf	postinc2,c
 13117  0043C8  0E41               	movlw	65
 13118  0043CA  6EDD               	movwf	postdec2,c
 13119                           
 13120                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 13121  0043CC  EE22 F012          	lfsr	2,530
 13122  0043D0  503A               	movf	sync_fs@fs,w,c
 13123  0043D2  26D9               	addwf	fsr2l,f,c
 13124  0043D4  503B               	movf	sync_fs@fs+1,w,c
 13125  0043D6  22DA               	addwfc	fsr2h,f,c
 13126  0043D8  0E72               	movlw	114
 13127  0043DA  6EDE               	movwf	postinc2,c
 13128  0043DC  0E72               	movlw	114
 13129  0043DE  6EDE               	movwf	postinc2,c
 13130  0043E0  0E41               	movlw	65
 13131  0043E2  6EDE               	movwf	postinc2,c
 13132  0043E4  0E61               	movlw	97
 13133  0043E6  6EDD               	movwf	postdec2,c
 13134                           
 13135                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 13136  0043E8  EE20 F00E          	lfsr	2,14
 13137  0043EC  503A               	movf	sync_fs@fs,w,c
 13138  0043EE  26D9               	addwf	fsr2l,f,c
 13139  0043F0  503B               	movf	sync_fs@fs+1,w,c
 13140  0043F2  22DA               	addwfc	fsr2h,f,c
 13141  0043F4  EE12 F016          	lfsr	1,534
 13142  0043F8  503A               	movf	sync_fs@fs,w,c
 13143  0043FA  26E1               	addwf	fsr1l,f,c
 13144  0043FC  503B               	movf	sync_fs@fs+1,w,c
 13145  0043FE  22E2               	addwfc	fsr1h,f,c
 13146  004400  CFDE FFE6          	movff	postinc2,postinc1
 13147  004404  CFDE FFE6          	movff	postinc2,postinc1
 13148  004408  CFDE FFE6          	movff	postinc2,postinc1
 13149  00440C  CFDE FFE6          	movff	postinc2,postinc1
 13150                           
 13151                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 13152  004410  EE20 F00A          	lfsr	2,10
 13153  004414  503A               	movf	sync_fs@fs,w,c
 13154  004416  26D9               	addwf	fsr2l,f,c
 13155  004418  503B               	movf	sync_fs@fs+1,w,c
 13156  00441A  22DA               	addwfc	fsr2h,f,c
 13157  00441C  EE12 F01A          	lfsr	1,538
 13158  004420  503A               	movf	sync_fs@fs,w,c
 13159  004422  26E1               	addwf	fsr1l,f,c
 13160  004424  503B               	movf	sync_fs@fs+1,w,c
 13161  004426  22E2               	addwfc	fsr1h,f,c
 13162  004428  CFDE FFE6          	movff	postinc2,postinc1
 13163  00442C  CFDE FFE6          	movff	postinc2,postinc1
 13164  004430  CFDE FFE6          	movff	postinc2,postinc1
 13165  004434  CFDE FFE6          	movff	postinc2,postinc1
 13166                           
 13167                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 13168  004438  EE20 F01A          	lfsr	2,26
 13169  00443C  503A               	movf	sync_fs@fs,w,c
 13170  00443E  26D9               	addwf	fsr2l,f,c
 13171  004440  503B               	movf	sync_fs@fs+1,w,c
 13172  004442  22DA               	addwfc	fsr2h,f,c
 13173  004444  CFDE F03C          	movff	postinc2,??_sync_fs
 13174  004448  CFDE F03D          	movff	postinc2,??_sync_fs+1
 13175  00444C  CFDE F03E          	movff	postinc2,??_sync_fs+2
 13176  004450  CFDE F03F          	movff	postinc2,??_sync_fs+3
 13177  004454  0E01               	movlw	1
 13178  004456  243C               	addwf	??_sync_fs,w,c
 13179  004458  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 13180  00445A  0E00               	movlw	0
 13181  00445C  203D               	addwfc	??_sync_fs+1,w,c
 13182  00445E  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 13183  004460  0E00               	movlw	0
 13184  004462  203E               	addwfc	??_sync_fs+2,w,c
 13185  004464  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 13186  004466  0E00               	movlw	0
 13187  004468  203F               	addwfc	??_sync_fs+3,w,c
 13188  00446A  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 13189  00446C  EE20 F02A          	lfsr	2,42
 13190  004470  503A               	movf	sync_fs@fs,w,c
 13191  004472  26D9               	addwf	fsr2l,f,c
 13192  004474  503B               	movf	sync_fs@fs+1,w,c
 13193  004476  22DA               	addwfc	fsr2h,f,c
 13194  004478  C040  FFDE         	movff	??_sync_fs+4,postinc2
 13195  00447C  C041  FFDE         	movff	??_sync_fs+5,postinc2
 13196  004480  C042  FFDE         	movff	??_sync_fs+6,postinc2
 13197  004484  C043  FFDE         	movff	??_sync_fs+7,postinc2
 13198                           
 13199                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 13200  004488  0E2E               	movlw	46
 13201  00448A  243A               	addwf	sync_fs@fs,w,c
 13202  00448C  6E11               	movwf	disk_write@buff,c
 13203  00448E  0E00               	movlw	0
 13204  004490  203B               	addwfc	sync_fs@fs+1,w,c
 13205  004492  6E12               	movwf	disk_write@buff+1,c
 13206  004494  EE20 F02A          	lfsr	2,42
 13207  004498  503A               	movf	sync_fs@fs,w,c
 13208  00449A  26D9               	addwf	fsr2l,f,c
 13209  00449C  503B               	movf	sync_fs@fs+1,w,c
 13210  00449E  22DA               	addwfc	fsr2h,f,c
 13211  0044A0  CFDE F013          	movff	postinc2,disk_write@sector
 13212  0044A4  CFDE F014          	movff	postinc2,disk_write@sector+1
 13213  0044A8  CFDE F015          	movff	postinc2,disk_write@sector+2
 13214  0044AC  CFDE F016          	movff	postinc2,disk_write@sector+3
 13215  0044B0  0E00               	movlw	0
 13216  0044B2  6E18               	movwf	disk_write@count+1,c
 13217  0044B4  0E01               	movlw	1
 13218  0044B6  6E17               	movwf	disk_write@count,c
 13219  0044B8  EE20 F001          	lfsr	2,1
 13220  0044BC  503A               	movf	sync_fs@fs,w,c
 13221  0044BE  26D9               	addwf	fsr2l,f,c
 13222  0044C0  503B               	movf	sync_fs@fs+1,w,c
 13223  0044C2  22DA               	addwfc	fsr2h,f,c
 13224  0044C4  50DF               	movf	indf2,w,c
 13225  0044C6  EC56  F026         	call	_disk_write
 13226                           
 13227                           ;ff.c: 781:    fs->fsi_flag = 0;
 13228  0044CA  EE20 F005          	lfsr	2,5
 13229  0044CE  503A               	movf	sync_fs@fs,w,c
 13230  0044D0  26D9               	addwf	fsr2l,f,c
 13231  0044D2  503B               	movf	sync_fs@fs+1,w,c
 13232  0044D4  22DA               	addwfc	fsr2h,f,c
 13233  0044D6  0E00               	movlw	0
 13234  0044D8  6EDF               	movwf	indf2,c
 13235  0044DA                     l5496:
 13236                           
 13237                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 13238  0044DA  0E00               	movlw	0
 13239  0044DC  6E11               	movwf	disk_ioctl@cmd,c
 13240  0044DE  0E00               	movlw	0
 13241  0044E0  6E12               	movwf	disk_ioctl@buff,c
 13242  0044E2  0E00               	movlw	0
 13243  0044E4  6E13               	movwf	disk_ioctl@buff+1,c
 13244  0044E6  EE20 F001          	lfsr	2,1
 13245  0044EA  503A               	movf	sync_fs@fs,w,c
 13246  0044EC  26D9               	addwf	fsr2l,f,c
 13247  0044EE  503B               	movf	sync_fs@fs+1,w,c
 13248  0044F0  22DA               	addwfc	fsr2h,f,c
 13249  0044F2  50DF               	movf	indf2,w,c
 13250  0044F4  EC9E  F00F         	call	_disk_ioctl
 13251  0044F8  0900               	iorlw	0
 13252  0044FA  B4D8               	btfsc	status,2,c
 13253  0044FC  D002               	goto	l242
 13254                           
 13255                           ;ff.c: 785:    res = FR_DISK_ERR;
 13256  0044FE  0E01               	movlw	1
 13257  004500  6E44               	movwf	sync_fs@res,c
 13258  004502                     l242:
 13259                           
 13260                           ;ff.c: 788:  return res;
 13261  004502  5044               	movf	sync_fs@res,w,c
 13262  004504  0012               	return		;funcret
 13263  004506                     __end_of_sync_fs:
 13264                           	opt callstack 0
 13265                           
 13266 ;; *************** function _mem_set *****************
 13267 ;; Defined at:
 13268 ;;		line 524 in file "ff.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  dst             2    0[COMRAM] PTR void 
 13271 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13272 ;;  val             2    2[COMRAM] int 
 13273 ;;  cnt             2    4[COMRAM] unsigned short 
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;  d               2    6[COMRAM] PTR unsigned char 
 13276 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13277 ;; Return value:  Size  Location     Type
 13278 ;;                  1    wreg      void 
 13279 ;; Registers used:
 13280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13281 ;; Tracked objects:
 13282 ;;		On entry : 0/0
 13283 ;;		On exit  : 0/0
 13284 ;;		Unchanged: 0/0
 13285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13286 ;;      Params:         6       0       0       0       0       0       0       0       0
 13287 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13288 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13289 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13290 ;;Total ram usage:        8 bytes
 13291 ;; Hardware stack levels used:    1
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_sync_fs
 13296 ;;		_dir_next
 13297 ;;		_dir_register
 13298 ;;		_create_name
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           	psect	text42
 13303  005D02                     __ptext42:
 13304                           	opt callstack 0
 13305  005D02                     _mem_set:
 13306                           	opt callstack 25
 13307                           
 13308                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 13309                           
 13310                           ;incstack = 0
 13311  005D02  C001  F007         	movff	mem_set@dst,mem_set@d
 13312  005D06  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 13313                           
 13314                           ;ff.c: 527:  while (cnt--)
 13315  005D0A  D008               	goto	l4930
 13316  005D0C                     l4926:
 13317                           
 13318                           ;ff.c: 528:   *d++ = (BYTE)val;
 13319  005D0C  C007  FFD9         	movff	mem_set@d,fsr2l
 13320  005D10  C008  FFDA         	movff	mem_set@d+1,fsr2h
 13321  005D14  C003  FFDF         	movff	mem_set@val,indf2
 13322  005D18  4A07               	infsnz	mem_set@d,f,c
 13323  005D1A  2A08               	incf	mem_set@d+1,f,c
 13324  005D1C                     l4930:
 13325                           
 13326                           ;ff.c: 527:  while (cnt--)
 13327  005D1C  0605               	decf	mem_set@cnt,f,c
 13328  005D1E  A0D8               	btfss	status,0,c
 13329  005D20  0606               	decf	mem_set@cnt+1,f,c
 13330  005D22  2805               	incf	mem_set@cnt,w,c
 13331  005D24  E1F3               	bnz	l4926
 13332  005D26  2806               	incf	mem_set@cnt+1,w,c
 13333  005D28  B4D8               	btfsc	status,2,c
 13334  005D2A  0012               	return	
 13335  005D2C  D7EF               	goto	l4926
 13336  005D2E                     __end_of_mem_set:
 13337                           	opt callstack 0
 13338                           
 13339 ;; *************** function _disk_ioctl *****************
 13340 ;; Defined at:
 13341 ;;		line 446 in file "diskio.c"
 13342 ;; Parameters:    Size  Location     Type
 13343 ;;  pdrv            1    wreg     unsigned char 
 13344 ;;  cmd             1   16[COMRAM] unsigned char 
 13345 ;;  buff            2   17[COMRAM] PTR void 
 13346 ;;		 -> NULL(0), 
 13347 ;; Auto vars:     Size  Location     Type
 13348 ;;  pdrv            1   48[COMRAM] unsigned char 
 13349 ;;  csd            16   32[COMRAM] unsigned char [16]
 13350 ;;  csize           4   49[COMRAM] unsigned long 
 13351 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 13352 ;;		 -> NULL(0), 
 13353 ;;  n               1   54[COMRAM] unsigned char 
 13354 ;;  res             1   53[COMRAM] enum E43
 13355 ;; Return value:  Size  Location     Type
 13356 ;;                  1    wreg      enum E43
 13357 ;; Registers used:
 13358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13359 ;; Tracked objects:
 13360 ;;		On entry : 0/0
 13361 ;;		On exit  : 0/0
 13362 ;;		Unchanged: 0/0
 13363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13364 ;;      Params:         3       0       0       0       0       0       0       0       0
 13365 ;;      Locals:        25       0       0       0       0       0       0       0       0
 13366 ;;      Temps:         13       0       0       0       0       0       0       0       0
 13367 ;;      Totals:        41       0       0       0       0       0       0       0       0
 13368 ;;Total ram usage:       41 bytes
 13369 ;; Hardware stack levels used:    1
 13370 ;; Hardware stack levels required when called:    5
 13371 ;; This function calls:
 13372 ;;		_SPI1_Exchange8bit
 13373 ;;		___wmul
 13374 ;;		_deselect
 13375 ;;		_rcvr_datablock
 13376 ;;		_select
 13377 ;;		_send_cmd
 13378 ;; This function is called by:
 13379 ;;		_sync_fs
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           	psect	text43
 13384  001F3C                     __ptext43:
 13385                           	opt callstack 0
 13386  001F3C                     _disk_ioctl:
 13387                           	opt callstack 21
 13388                           
 13389                           ;incstack = 0
 13390                           ;disk_ioctl@pdrv stored from wreg
 13391  001F3C  6E31               	movwf	disk_ioctl@pdrv,c
 13392                           
 13393                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 13394  001F3E  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 13395  001F42  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 13396                           
 13397                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 13398  001F46  5031               	movf	disk_ioctl@pdrv,w,c
 13399  001F48  B4D8               	btfsc	status,2,c
 13400  001F4A  D002               	goto	l5044
 13401  001F4C  0E04               	movlw	4
 13402  001F4E  0012               	return	
 13403  001F50                     l5044:
 13404                           
 13405                           ;diskio.c: 459:  res = RES_ERROR;
 13406  001F50  0E01               	movlw	1
 13407  001F52  6E36               	movwf	disk_ioctl@res,c
 13408                           
 13409                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 13410  001F54  0100               	movlb	0	; () banked
 13411  001F56  A1F0               	btfss	_Stat& (0+255),0,b
 13412  001F58  D21B               	goto	l5144
 13413                           
 13414                           ; BSR set to: 0
 13415  001F5A  0E03               	movlw	3
 13416  001F5C  0012               	return	
 13417  001F5E                     l5052:
 13418                           
 13419                           ; BSR set to: 0
 13420                           ;diskio.c: 465:   if (select()) res = RES_OK;
 13421  001F5E  ECE2  F02E         	call	_select	;wreg free
 13422  001F62  0900               	iorlw	0
 13423  001F64  B4D8               	btfsc	status,2,c
 13424  001F66  D235               	goto	l5146
 13425  001F68                     u6050:
 13426  001F68  0E00               	movlw	0
 13427  001F6A  D210               	goto	L16
 13428  001F6C                     l5056:
 13429                           
 13430                           ; BSR set to: 0
 13431                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13432  001F6C  0E00               	movlw	0
 13433  001F6E  6E0B               	movwf	send_cmd@arg,c
 13434  001F70  0E00               	movlw	0
 13435  001F72  6E0C               	movwf	send_cmd@arg+1,c
 13436  001F74  0E00               	movlw	0
 13437  001F76  6E0D               	movwf	send_cmd@arg+2,c
 13438  001F78  0E00               	movlw	0
 13439  001F7A  6E0E               	movwf	send_cmd@arg+3,c
 13440  001F7C  0E09               	movlw	9
 13441  001F7E  ECF0  F02D         	call	_send_cmd
 13442  001F82  0900               	iorlw	0
 13443  001F84  A4D8               	btfss	status,2,c
 13444  001F86  D225               	goto	l5146
 13445  001F88  0E21               	movlw	low disk_ioctl@csd
 13446  001F8A  6E02               	movwf	rcvr_datablock@buff,c
 13447  001F8C  0E00               	movlw	high disk_ioctl@csd
 13448  001F8E  6E03               	movwf	rcvr_datablock@buff+1,c
 13449  001F90  0E00               	movlw	0
 13450  001F92  6E05               	movwf	rcvr_datablock@btr+1,c
 13451  001F94  0E10               	movlw	16
 13452  001F96  6E04               	movwf	rcvr_datablock@btr,c
 13453  001F98  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13454  001F9C  0900               	iorlw	0
 13455  001F9E  B4D8               	btfsc	status,2,c
 13456  001FA0  D218               	goto	l5146
 13457                           
 13458                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 13459  001FA2  4421               	rlncf	disk_ioctl@csd,w,c
 13460  001FA4  46E8               	rlncf	wreg,f,c
 13461  001FA6  0B03               	andlw	3
 13462  001FA8  06E8               	decf	wreg,f,c
 13463  001FAA  A4D8               	btfss	status,2,c
 13464  001FAC  D04E               	goto	l5066
 13465                           
 13466                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 13467  001FAE  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 13468  001FB2  0E3F               	movlw	63
 13469  001FB4  1614               	andwf	??_disk_ioctl,f,c
 13470  001FB6  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 13471  001FBA  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13472  001FBC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13473  001FBE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13474  001FC0  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 13475  001FC4  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 13476  001FC8  6A16               	clrf	??_disk_ioctl+2,c
 13477  001FCA  6A15               	clrf	??_disk_ioctl+1,c
 13478  001FCC  5029               	movf	disk_ioctl@csd+8,w,c
 13479  001FCE  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13480  001FD0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13481  001FD2  502A               	movf	disk_ioctl@csd+9,w,c
 13482  001FD4  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 13483  001FD6  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13484  001FD8  5019               	movf	??_disk_ioctl+5,w,c
 13485  001FDA  261B               	addwf	??_disk_ioctl+7,f,c
 13486  001FDC  501A               	movf	??_disk_ioctl+6,w,c
 13487  001FDE  221C               	addwfc	??_disk_ioctl+8,f,c
 13488  001FE0  501B               	movf	??_disk_ioctl+7,w,c
 13489  001FE2  2415               	addwf	??_disk_ioctl+1,w,c
 13490  001FE4  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 13491  001FE6  501C               	movf	??_disk_ioctl+8,w,c
 13492  001FE8  2016               	addwfc	??_disk_ioctl+2,w,c
 13493  001FEA  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 13494  001FEC  0E00               	movlw	0
 13495  001FEE  2017               	addwfc	??_disk_ioctl+3,w,c
 13496  001FF0  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 13497  001FF2  0E00               	movlw	0
 13498  001FF4  2018               	addwfc	??_disk_ioctl+4,w,c
 13499  001FF6  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 13500  001FF8  0E01               	movlw	1
 13501  001FFA  241D               	addwf	??_disk_ioctl+9,w,c
 13502  001FFC  6E32               	movwf	disk_ioctl@csize,c
 13503  001FFE  0E00               	movlw	0
 13504  002000  201E               	addwfc	??_disk_ioctl+10,w,c
 13505  002002  6E33               	movwf	disk_ioctl@csize+1,c
 13506  002004  0E00               	movlw	0
 13507  002006  201F               	addwfc	??_disk_ioctl+11,w,c
 13508  002008  6E34               	movwf	disk_ioctl@csize+2,c
 13509  00200A  0E00               	movlw	0
 13510  00200C  2020               	addwfc	??_disk_ioctl+12,w,c
 13511  00200E  6E35               	movwf	disk_ioctl@csize+3,c
 13512                           
 13513                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 13514  002010  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 13515  002014  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 13516  002018  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 13517  00201C  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 13518  002020  0E0A               	movlw	10
 13519  002022                     u6095:
 13520  002022  90D8               	bcf	status,0,c
 13521  002024  3614               	rlcf	??_disk_ioctl,f,c
 13522  002026  3615               	rlcf	??_disk_ioctl+1,f,c
 13523  002028  3616               	rlcf	??_disk_ioctl+2,f,c
 13524  00202A  3617               	rlcf	??_disk_ioctl+3,f,c
 13525  00202C  2EE8               	decfsz	wreg,f,c
 13526  00202E  D7F9               	goto	u6095
 13527  002030  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13528  002034  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13529  002038  C014  FFDE         	movff	??_disk_ioctl,postinc2
 13530  00203C  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13531  002040  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13532  002044  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13533                           
 13534                           ;diskio.c: 473:    } else {
 13535  002048  D78F               	goto	u6050
 13536  00204A                     l5066:
 13537                           
 13538                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 13539  00204A  6A14               	clrf	??_disk_ioctl& (0+255),c
 13540  00204C  AE2B               	btfss	disk_ioctl@csd+10,7,c
 13541  00204E  D001               	bra	u6105
 13542  002050  2A14               	incf	??_disk_ioctl& (0+255),f,c
 13543  002052                     u6105:
 13544  002052  0E01               	movlw	1
 13545  002054  1614               	andwf	??_disk_ioctl,f,c
 13546  002056  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 13547  00205A  0E0F               	movlw	15
 13548  00205C  1615               	andwf	??_disk_ioctl+1,f,c
 13549  00205E  502A               	movf	disk_ioctl@csd+9,w,c
 13550  002060  0B03               	andlw	3
 13551  002062  0D02               	mullw	2
 13552  002064  50F3               	movf	prodl,w,c
 13553  002066  2415               	addwf	??_disk_ioctl+1,w,c
 13554  002068  2414               	addwf	??_disk_ioctl,w,c
 13555  00206A  0F02               	addlw	2
 13556  00206C  6E37               	movwf	disk_ioctl@n,c
 13557                           
 13558                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 13559  00206E  5027               	movf	disk_ioctl@csd+6,w,c
 13560  002070  0B03               	andlw	3
 13561  002072  6E14               	movwf	??_disk_ioctl& (0+255),c
 13562  002074  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13563  002076  0E0A               	movlw	10
 13564  002078                     u6115:
 13565  002078  90D8               	bcf	status,0,c
 13566  00207A  3614               	rlcf	??_disk_ioctl,f,c
 13567  00207C  3615               	rlcf	??_disk_ioctl+1,f,c
 13568  00207E  2EE8               	decfsz	wreg,f,c
 13569  002080  D7FB               	goto	u6115
 13570  002082  5028               	movf	disk_ioctl@csd+7,w,c
 13571  002084  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13572  002086  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13573  002088  90D8               	bcf	status,0,c
 13574  00208A  3616               	rlcf	??_disk_ioctl+2,f,c
 13575  00208C  3617               	rlcf	??_disk_ioctl+3,f,c
 13576  00208E  90D8               	bcf	status,0,c
 13577  002090  3616               	rlcf	??_disk_ioctl+2,f,c
 13578  002092  3617               	rlcf	??_disk_ioctl+3,f,c
 13579  002094  4429               	rlncf	disk_ioctl@csd+8,w,c
 13580  002096  46E8               	rlncf	wreg,f,c
 13581  002098  0B03               	andlw	3
 13582  00209A  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13583  00209C  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13584  00209E  5016               	movf	??_disk_ioctl+2,w,c
 13585  0020A0  2618               	addwf	??_disk_ioctl+4,f,c
 13586  0020A2  5017               	movf	??_disk_ioctl+3,w,c
 13587  0020A4  2219               	addwfc	??_disk_ioctl+5,f,c
 13588  0020A6  5014               	movf	??_disk_ioctl,w,c
 13589  0020A8  2618               	addwf	??_disk_ioctl+4,f,c
 13590  0020AA  5015               	movf	??_disk_ioctl+1,w,c
 13591  0020AC  2219               	addwfc	??_disk_ioctl+5,f,c
 13592  0020AE  0E01               	movlw	1
 13593  0020B0  2618               	addwf	??_disk_ioctl+4,f,c
 13594  0020B2  0E00               	movlw	0
 13595  0020B4  2219               	addwfc	??_disk_ioctl+5,f,c
 13596  0020B6  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 13597  0020BA  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 13598  0020BE  6A34               	clrf	disk_ioctl@csize+2,c
 13599  0020C0  6A35               	clrf	disk_ioctl@csize+3,c
 13600                           
 13601                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 13602  0020C2  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 13603  0020C6  0EF7               	movlw	-9
 13604  0020C8  2614               	addwf	??_disk_ioctl,f,c
 13605  0020CA  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 13606  0020CE  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 13607  0020D2  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 13608  0020D6  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 13609  0020DA  2A14               	incf	??_disk_ioctl,f,c
 13610  0020DC  D005               	goto	u6120
 13611  0020DE                     u6125:
 13612  0020DE  90D8               	bcf	status,0,c
 13613  0020E0  3615               	rlcf	??_disk_ioctl+1,f,c
 13614  0020E2  3616               	rlcf	??_disk_ioctl+2,f,c
 13615  0020E4  3617               	rlcf	??_disk_ioctl+3,f,c
 13616  0020E6  3618               	rlcf	??_disk_ioctl+4,f,c
 13617  0020E8                     u6120:
 13618  0020E8  2E14               	decfsz	??_disk_ioctl,f,c
 13619  0020EA  D7F9               	goto	u6125
 13620  0020EC  D03D               	goto	L18
 13621  0020EE                     l155:
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;diskio.c: 483:   if (CardType & 0x04) {
 13625  0020EE  A5DF               	btfss	_CardType& (0+255),2,b
 13626  0020F0  D048               	goto	l5092
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 13630  0020F2  0E00               	movlw	0
 13631  0020F4  6E0B               	movwf	send_cmd@arg,c
 13632  0020F6  0E00               	movlw	0
 13633  0020F8  6E0C               	movwf	send_cmd@arg+1,c
 13634  0020FA  0E00               	movlw	0
 13635  0020FC  6E0D               	movwf	send_cmd@arg+2,c
 13636  0020FE  0E00               	movlw	0
 13637  002100  6E0E               	movwf	send_cmd@arg+3,c
 13638  002102  0E8D               	movlw	141
 13639  002104  ECF0  F02D         	call	_send_cmd
 13640  002108  0900               	iorlw	0
 13641  00210A  A4D8               	btfss	status,2,c
 13642  00210C  D162               	goto	l5146
 13643                           
 13644                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 13645  00210E  0EFF               	movlw	255
 13646  002110  EC17  F02F         	call	_SPI1_Exchange8bit
 13647                           
 13648                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 13649  002114  0E21               	movlw	low disk_ioctl@csd
 13650  002116  6E02               	movwf	rcvr_datablock@buff,c
 13651  002118  0E00               	movlw	high disk_ioctl@csd
 13652  00211A  6E03               	movwf	rcvr_datablock@buff+1,c
 13653  00211C  0E00               	movlw	0
 13654  00211E  6E05               	movwf	rcvr_datablock@btr+1,c
 13655  002120  0E10               	movlw	16
 13656  002122  6E04               	movwf	rcvr_datablock@btr,c
 13657  002124  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13658  002128  0900               	iorlw	0
 13659  00212A  B4D8               	btfsc	status,2,c
 13660  00212C  D152               	goto	l5146
 13661                           
 13662                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 13663  00212E  0E30               	movlw	48
 13664  002130  6E37               	movwf	disk_ioctl@n,c
 13665  002132  D004               	goto	l5086
 13666  002134                     l5082:
 13667  002134  0EFF               	movlw	255
 13668  002136  EC17  F02F         	call	_SPI1_Exchange8bit
 13669  00213A  0637               	decf	disk_ioctl@n,f,c
 13670  00213C                     l5086:
 13671  00213C  5037               	movf	disk_ioctl@n,w,c
 13672  00213E  A4D8               	btfss	status,2,c
 13673  002140  D7F9               	goto	l5082
 13674                           
 13675                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 13676  002142  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13677  002146  3A14               	swapf	??_disk_ioctl,f,c
 13678  002148  0E0F               	movlw	15
 13679  00214A  1614               	andwf	??_disk_ioctl,f,c
 13680  00214C  0E10               	movlw	16
 13681  00214E  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13682  002150  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13683  002152  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13684  002154  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13685  002156  2A14               	incf	??_disk_ioctl,f,c
 13686  002158  D005               	goto	u6170
 13687  00215A                     u6175:
 13688  00215A  90D8               	bcf	status,0,c
 13689  00215C  3615               	rlcf	??_disk_ioctl+1,f,c
 13690  00215E  3616               	rlcf	??_disk_ioctl+2,f,c
 13691  002160  3617               	rlcf	??_disk_ioctl+3,f,c
 13692  002162  3618               	rlcf	??_disk_ioctl+4,f,c
 13693  002164                     u6170:
 13694  002164  2E14               	decfsz	??_disk_ioctl,f,c
 13695  002166  D7F9               	goto	u6175
 13696  002168                     L18:
 13697  002168  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13698  00216C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13699  002170  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13700  002174  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13701  002178  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13702  00217C  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13703  002180  D6F3               	goto	u6050
 13704  002182                     l5092:
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13708  002182  0E00               	movlw	0
 13709  002184  6E0B               	movwf	send_cmd@arg,c
 13710  002186  0E00               	movlw	0
 13711  002188  6E0C               	movwf	send_cmd@arg+1,c
 13712  00218A  0E00               	movlw	0
 13713  00218C  6E0D               	movwf	send_cmd@arg+2,c
 13714  00218E  0E00               	movlw	0
 13715  002190  6E0E               	movwf	send_cmd@arg+3,c
 13716  002192  0E09               	movlw	9
 13717  002194  ECF0  F02D         	call	_send_cmd
 13718  002198  0900               	iorlw	0
 13719  00219A  A4D8               	btfss	status,2,c
 13720  00219C  D11A               	goto	l5146
 13721  00219E  0E21               	movlw	low disk_ioctl@csd
 13722  0021A0  6E02               	movwf	rcvr_datablock@buff,c
 13723  0021A2  0E00               	movlw	high disk_ioctl@csd
 13724  0021A4  6E03               	movwf	rcvr_datablock@buff+1,c
 13725  0021A6  0E00               	movlw	0
 13726  0021A8  6E05               	movwf	rcvr_datablock@btr+1,c
 13727  0021AA  0E10               	movlw	16
 13728  0021AC  6E04               	movwf	rcvr_datablock@btr,c
 13729  0021AE  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13730  0021B2  0900               	iorlw	0
 13731  0021B4  B4D8               	btfsc	status,2,c
 13732  0021B6  D10D               	goto	l5146
 13733                           
 13734                           ;diskio.c: 494:     if (CardType & 0x02) {
 13735  0021B8  0100               	movlb	0	; () banked
 13736  0021BA  A3DF               	btfss	_CardType& (0+255),1,b
 13737  0021BC  D02A               	goto	l5100
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 13741  0021BE  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 13742  0021C2  0E06               	movlw	6
 13743  0021C4  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13744  0021C6                     u6215:
 13745  0021C6  90D8               	bcf	status,0,c
 13746  0021C8  3214               	rrcf	??_disk_ioctl,f,c
 13747  0021CA  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 13748  0021CC  D7FC               	goto	u6215
 13749  0021CE  0EFF               	movlw	-1
 13750  0021D0  2614               	addwf	??_disk_ioctl,f,c
 13751  0021D2  502B               	movf	disk_ioctl@csd+10,w,c
 13752  0021D4  0B3F               	andlw	63
 13753  0021D6  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13754  0021D8  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13755  0021DA  90D8               	bcf	status,0,c
 13756  0021DC  3616               	rlcf	??_disk_ioctl+2,f,c
 13757  0021DE  3617               	rlcf	??_disk_ioctl+3,f,c
 13758  0021E0  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13759  0021E2  AE2C               	btfss	disk_ioctl@csd+11,7,c
 13760  0021E4  D001               	bra	u6225
 13761  0021E6  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 13762  0021E8                     u6225:
 13763  0021E8  0E01               	movlw	1
 13764  0021EA  1618               	andwf	??_disk_ioctl+4,f,c
 13765  0021EC  5018               	movf	??_disk_ioctl+4,w,c
 13766  0021EE  2616               	addwf	??_disk_ioctl+2,f,c
 13767  0021F0  0E00               	movlw	0
 13768  0021F2  2217               	addwfc	??_disk_ioctl+3,f,c
 13769  0021F4  0E01               	movlw	1
 13770  0021F6  2616               	addwf	??_disk_ioctl+2,f,c
 13771  0021F8  0E00               	movlw	0
 13772  0021FA  2217               	addwfc	??_disk_ioctl+3,f,c
 13773  0021FC  2A14               	incf	??_disk_ioctl,f,c
 13774  0021FE  D003               	goto	u6234
 13775  002200                     u6235:
 13776  002200  90D8               	bcf	status,0,c
 13777  002202  3616               	rlcf	??_disk_ioctl+2,f,c
 13778  002204  3617               	rlcf	??_disk_ioctl+3,f,c
 13779  002206                     u6234:
 13780  002206  2E14               	decfsz	??_disk_ioctl,f,c
 13781  002208  D7FB               	goto	u6235
 13782  00220A  5016               	movf	??_disk_ioctl+2,w,c
 13783  00220C  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13784  00220E  5017               	movf	??_disk_ioctl+3,w,c
 13785  002210  D034               	goto	L19
 13786  002212                     l5100:
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 13790  002212  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13791  002216  90D8               	bcf	status,0,c
 13792  002218  3214               	rrcf	??_disk_ioctl,f,c
 13793  00221A  90D8               	bcf	status,0,c
 13794  00221C  3214               	rrcf	??_disk_ioctl,f,c
 13795  00221E  0E1F               	movlw	31
 13796  002220  1614               	andwf	??_disk_ioctl,f,c
 13797  002222  0E01               	movlw	1
 13798  002224  2414               	addwf	??_disk_ioctl,w,c
 13799  002226  6E01               	movwf	___wmul@multiplier,c
 13800  002228  6A02               	clrf	___wmul@multiplier+1,c
 13801  00222A  0E00               	movlw	0
 13802  00222C  2202               	addwfc	___wmul@multiplier+1,f,c
 13803  00222E  502C               	movf	disk_ioctl@csd+11,w,c
 13804  002230  0B03               	andlw	3
 13805  002232  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13806  002234  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13807  002236  90D8               	bcf	status,0,c
 13808  002238  3615               	rlcf	??_disk_ioctl+1,f,c
 13809  00223A  3616               	rlcf	??_disk_ioctl+2,f,c
 13810  00223C  90D8               	bcf	status,0,c
 13811  00223E  3615               	rlcf	??_disk_ioctl+1,f,c
 13812  002240  3616               	rlcf	??_disk_ioctl+2,f,c
 13813  002242  90D8               	bcf	status,0,c
 13814  002244  3615               	rlcf	??_disk_ioctl+1,f,c
 13815  002246  3616               	rlcf	??_disk_ioctl+2,f,c
 13816  002248  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 13817  00224C  0E05               	movlw	5
 13818  00224E  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13819  002250                     u6245:
 13820  002250  90D8               	bcf	status,0,c
 13821  002252  3217               	rrcf	??_disk_ioctl+3,f,c
 13822  002254  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 13823  002256  D7FC               	goto	u6245
 13824  002258  0E07               	movlw	7
 13825  00225A  1617               	andwf	??_disk_ioctl+3,f,c
 13826  00225C  5017               	movf	??_disk_ioctl+3,w,c
 13827  00225E  2615               	addwf	??_disk_ioctl+1,f,c
 13828  002260  0E00               	movlw	0
 13829  002262  2216               	addwfc	??_disk_ioctl+2,f,c
 13830  002264  0E01               	movlw	1
 13831  002266  2415               	addwf	??_disk_ioctl+1,w,c
 13832  002268  6E03               	movwf	___wmul@multiplicand,c
 13833  00226A  0E00               	movlw	0
 13834  00226C  2016               	addwfc	??_disk_ioctl+2,w,c
 13835  00226E  6E04               	movwf	___wmul@multiplicand+1,c
 13836  002270  ECBF  F02E         	call	___wmul	;wreg free
 13837  002274  5001               	movf	?___wmul,w,c
 13838  002276  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13839  002278  5002               	movf	?___wmul+1,w,c
 13840  00227A                     L19:
 13841  00227A  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13842  00227C  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 13843  00227E  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13844  002280  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13845  002284  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13846  002288  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 13847  00228C  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 13848  002290  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 13849  002294  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 13850  002298  D667               	goto	u6050
 13851  00229A                     l5104:
 13852                           
 13853                           ; BSR set to: 0
 13854                           ;diskio.c: 507:   *ptr = CardType;
 13855  00229A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13856  00229E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13857  0022A2  C0DF  FFDF         	movff	_CardType,indf2
 13858  0022A6  D660               	goto	u6050
 13859  0022A8                     l5108:
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 13863  0022A8  0E00               	movlw	0
 13864  0022AA  6E0B               	movwf	send_cmd@arg,c
 13865  0022AC  0E00               	movlw	0
 13866  0022AE  6E0C               	movwf	send_cmd@arg+1,c
 13867  0022B0  0E00               	movlw	0
 13868  0022B2  6E0D               	movwf	send_cmd@arg+2,c
 13869  0022B4  0E00               	movlw	0
 13870  0022B6  6E0E               	movwf	send_cmd@arg+3,c
 13871  0022B8  0E09               	movlw	9
 13872  0022BA  ECF0  F02D         	call	_send_cmd
 13873  0022BE  0900               	iorlw	0
 13874  0022C0  A4D8               	btfss	status,2,c
 13875  0022C2  D087               	goto	l5146
 13876  0022C4  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13877  0022C8  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13878  0022CC  0E00               	movlw	0
 13879  0022CE  6E05               	movwf	rcvr_datablock@btr+1,c
 13880  0022D0  0E10               	movlw	16
 13881  0022D2  6E04               	movwf	rcvr_datablock@btr,c
 13882  0022D4  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13883  0022D8                     L17:
 13884  0022D8  0900               	iorlw	0
 13885  0022DA  A4D8               	btfss	status,2,c
 13886  0022DC  D645               	goto	u6050
 13887  0022DE  D079               	goto	l5146
 13888  0022E0                     l5114:
 13889                           
 13890                           ; BSR set to: 0
 13891                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 13892  0022E0  0E00               	movlw	0
 13893  0022E2  6E0B               	movwf	send_cmd@arg,c
 13894  0022E4  0E00               	movlw	0
 13895  0022E6  6E0C               	movwf	send_cmd@arg+1,c
 13896  0022E8  0E00               	movlw	0
 13897  0022EA  6E0D               	movwf	send_cmd@arg+2,c
 13898  0022EC  0E00               	movlw	0
 13899  0022EE  6E0E               	movwf	send_cmd@arg+3,c
 13900  0022F0  0E0A               	movlw	10
 13901  0022F2  ECF0  F02D         	call	_send_cmd
 13902  0022F6  0900               	iorlw	0
 13903  0022F8  A4D8               	btfss	status,2,c
 13904  0022FA  D06B               	goto	l5146
 13905  0022FC  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13906  002300  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13907  002304  0E00               	movlw	0
 13908  002306  6E05               	movwf	rcvr_datablock@btr+1,c
 13909  002308  0E10               	movlw	16
 13910  00230A  6E04               	movwf	rcvr_datablock@btr,c
 13911  00230C  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13912  002310  D7E3               	goto	L17
 13913  002312                     l5120:
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 13917  002312  0E00               	movlw	0
 13918  002314  6E0B               	movwf	send_cmd@arg,c
 13919  002316  0E00               	movlw	0
 13920  002318  6E0C               	movwf	send_cmd@arg+1,c
 13921  00231A  0E00               	movlw	0
 13922  00231C  6E0D               	movwf	send_cmd@arg+2,c
 13923  00231E  0E00               	movlw	0
 13924  002320  6E0E               	movwf	send_cmd@arg+3,c
 13925  002322  0E3A               	movlw	58
 13926  002324  ECF0  F02D         	call	_send_cmd
 13927  002328  0900               	iorlw	0
 13928  00232A  A4D8               	btfss	status,2,c
 13929  00232C  D052               	goto	l5146
 13930                           
 13931                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 13932  00232E  0E04               	movlw	4
 13933  002330  6E37               	movwf	disk_ioctl@n,c
 13934  002332  D00B               	goto	l5130
 13935  002334                     l5124:
 13936  002334  0EFF               	movlw	255
 13937  002336  EC17  F02F         	call	_SPI1_Exchange8bit
 13938  00233A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13939  00233E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13940  002342  6EDF               	movwf	indf2,c
 13941  002344  4A38               	infsnz	disk_ioctl@ptr,f,c
 13942  002346  2A39               	incf	disk_ioctl@ptr+1,f,c
 13943  002348  0637               	decf	disk_ioctl@n,f,c
 13944  00234A                     l5130:
 13945  00234A  5037               	movf	disk_ioctl@n,w,c
 13946  00234C  B4D8               	btfsc	status,2,c
 13947  00234E  D60C               	goto	u6050
 13948  002350  D7F1               	goto	l5124
 13949  002352                     l5134:
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 13953  002352  0E00               	movlw	0
 13954  002354  6E0B               	movwf	send_cmd@arg,c
 13955  002356  0E00               	movlw	0
 13956  002358  6E0C               	movwf	send_cmd@arg+1,c
 13957  00235A  0E00               	movlw	0
 13958  00235C  6E0D               	movwf	send_cmd@arg+2,c
 13959  00235E  0E00               	movlw	0
 13960  002360  6E0E               	movwf	send_cmd@arg+3,c
 13961  002362  0E8D               	movlw	141
 13962  002364  ECF0  F02D         	call	_send_cmd
 13963  002368  0900               	iorlw	0
 13964  00236A  A4D8               	btfss	status,2,c
 13965  00236C  D032               	goto	l5146
 13966                           
 13967                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 13968  00236E  0EFF               	movlw	255
 13969  002370  EC17  F02F         	call	_SPI1_Exchange8bit
 13970                           
 13971                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 13972  002374  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13973  002378  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13974  00237C  0E00               	movlw	0
 13975  00237E  6E05               	movwf	rcvr_datablock@btr+1,c
 13976  002380  0E40               	movlw	64
 13977  002382  6E04               	movwf	rcvr_datablock@btr,c
 13978  002384  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 13979  002388  D7A7               	goto	L17
 13980  00238A                     l5142:
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;diskio.c: 539:   res = RES_PARERR;
 13984  00238A  0E04               	movlw	4
 13985  00238C                     L16:
 13986  00238C  6E36               	movwf	disk_ioctl@res,c
 13987                           
 13988                           ;diskio.c: 540:  }
 13989  00238E  D021               	goto	l5146
 13990  002390                     l5144:
 13991                           
 13992                           ; BSR set to: 0
 13993  002390  5011               	movf	disk_ioctl@cmd,w,c
 13994  002392  6E14               	movwf	??_disk_ioctl& (0+255),c
 13995  002394  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13996                           
 13997                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13998                           ; Switch size 1, requested type "simple"
 13999                           ; Number of cases is 1, Range of values is 0 to 0
 14000                           ; switch strategies available:
 14001                           ; Name         Instructions Cycles
 14002                           ; simple_byte            4     3 (average)
 14003                           ;	Chosen strategy is simple_byte
 14004  002396  5015               	movf	??_disk_ioctl+1,w,c
 14005  002398  0A00               	xorlw	0	; case 0
 14006  00239A  A4D8               	btfss	status,2,c
 14007  00239C  D7F6               	goto	l5142
 14008                           
 14009                           ; BSR set to: 0
 14010                           ; Switch size 1, requested type "simple"
 14011                           ; Number of cases is 8, Range of values is 0 to 14
 14012                           ; switch strategies available:
 14013                           ; Name         Instructions Cycles
 14014                           ; simple_byte           25    13 (average)
 14015                           ;	Chosen strategy is simple_byte
 14016  00239E  5014               	movf	??_disk_ioctl,w,c
 14017  0023A0  0A00               	xorlw	0	; case 0
 14018  0023A2  B4D8               	btfsc	status,2,c
 14019  0023A4  D5DC               	goto	l5052
 14020  0023A6  0A01               	xorlw	1	; case 1
 14021  0023A8  B4D8               	btfsc	status,2,c
 14022  0023AA  D5E0               	goto	l5056
 14023  0023AC  0A02               	xorlw	2	; case 3
 14024  0023AE  B4D8               	btfsc	status,2,c
 14025  0023B0  D69E               	goto	l155
 14026  0023B2  0A09               	xorlw	9	; case 10
 14027  0023B4  B4D8               	btfsc	status,2,c
 14028  0023B6  D771               	goto	l5104
 14029  0023B8  0A01               	xorlw	1	; case 11
 14030  0023BA  B4D8               	btfsc	status,2,c
 14031  0023BC  D775               	goto	l5108
 14032  0023BE  0A07               	xorlw	7	; case 12
 14033  0023C0  B4D8               	btfsc	status,2,c
 14034  0023C2  D78E               	goto	l5114
 14035  0023C4  0A01               	xorlw	1	; case 13
 14036  0023C6  B4D8               	btfsc	status,2,c
 14037  0023C8  D7A4               	goto	l5120
 14038  0023CA  0A03               	xorlw	3	; case 14
 14039  0023CC  B4D8               	btfsc	status,2,c
 14040  0023CE  D7C1               	goto	l5134
 14041  0023D0  D7DC               	goto	l5142
 14042  0023D2                     l5146:
 14043                           
 14044                           ;diskio.c: 542:  deselect();
 14045  0023D2  EC42  F02F         	call	_deselect	;wreg free
 14046                           
 14047                           ;diskio.c: 544:  return res;
 14048  0023D6  5036               	movf	disk_ioctl@res,w,c
 14049  0023D8  0012               	return		;funcret
 14050  0023DA                     __end_of_disk_ioctl:
 14051                           	opt callstack 0
 14052                           
 14053 ;; *************** function ___wmul *****************
 14054 ;; Defined at:
 14055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  multiplier      2    0[COMRAM] unsigned int 
 14058 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  product         2    4[COMRAM] unsigned int 
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  2    0[COMRAM] unsigned int 
 14063 ;; Registers used:
 14064 ;;		wreg, status,2, status,0, prodl, prodh
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14070 ;;      Params:         4       0       0       0       0       0       0       0       0
 14071 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14073 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14074 ;;Total ram usage:        6 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; This function calls:
 14077 ;;		Nothing
 14078 ;; This function is called by:
 14079 ;;		_disk_ioctl
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           	psect	text44
 14084  005D7E                     __ptext44:
 14085                           	opt callstack 0
 14086  005D7E                     ___wmul:
 14087                           	opt callstack 25
 14088                           
 14089                           ;incstack = 0
 14090  005D7E  5001               	movf	___wmul@multiplier,w,c
 14091  005D80  0203               	mulwf	___wmul@multiplicand,c
 14092  005D82  CFF3 F005          	movff	prodl,___wmul@product
 14093  005D86  CFF4 F006          	movff	prodh,___wmul@product+1
 14094  005D8A  5001               	movf	___wmul@multiplier,w,c
 14095  005D8C  0204               	mulwf	___wmul@multiplicand+1,c
 14096  005D8E  50F3               	movf	prodl,w,c
 14097  005D90  2606               	addwf	___wmul@product+1,f,c
 14098  005D92  5002               	movf	___wmul@multiplier+1,w,c
 14099  005D94  0203               	mulwf	___wmul@multiplicand,c
 14100  005D96  50F3               	movf	prodl,w,c
 14101  005D98  2606               	addwf	___wmul@product+1,f,c
 14102  005D9A  C005  F001         	movff	___wmul@product,?___wmul
 14103  005D9E  C006  F002         	movff	___wmul@product+1,?___wmul+1
 14104  005DA2  0012               	return		;funcret
 14105  005DA4                     __end_of___wmul:
 14106                           	opt callstack 0
 14107                           
 14108 ;; *************** function _st_clust *****************
 14109 ;; Defined at:
 14110 ;;		line 1252 in file "ff.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;  dir             2    0[COMRAM] PTR unsigned char 
 14113 ;;		 -> FatFs(558), NULL(0), 
 14114 ;;  cl              4    2[COMRAM] unsigned long 
 14115 ;; Auto vars:     Size  Location     Type
 14116 ;;		None
 14117 ;; Return value:  Size  Location     Type
 14118 ;;                  1    wreg      void 
 14119 ;; Registers used:
 14120 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14121 ;; Tracked objects:
 14122 ;;		On entry : 0/0
 14123 ;;		On exit  : 0/0
 14124 ;;		Unchanged: 0/0
 14125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14126 ;;      Params:         6       0       0       0       0       0       0       0       0
 14127 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14128 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14129 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14130 ;;Total ram usage:        6 bytes
 14131 ;; Hardware stack levels used:    1
 14132 ;; This function calls:
 14133 ;;		Nothing
 14134 ;; This function is called by:
 14135 ;;		_f_open
 14136 ;;		_f_sync
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text45
 14141  005D2E                     __ptext45:
 14142                           	opt callstack 0
 14143  005D2E                     _st_clust:
 14144                           	opt callstack 28
 14145                           
 14146                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 14147                           
 14148                           ;incstack = 0
 14149  005D2E  EE20 F01A          	lfsr	2,26
 14150  005D32  5001               	movf	st_clust@dir,w,c
 14151  005D34  26D9               	addwf	fsr2l,f,c
 14152  005D36  5002               	movf	st_clust@dir+1,w,c
 14153  005D38  22DA               	addwfc	fsr2h,f,c
 14154  005D3A  C003  FFDE         	movff	st_clust@cl,postinc2
 14155  005D3E  C004  FFDD         	movff	st_clust@cl+1,postdec2
 14156                           
 14157                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 14158  005D42  EE20 F014          	lfsr	2,20
 14159  005D46  5001               	movf	st_clust@dir,w,c
 14160  005D48  26D9               	addwf	fsr2l,f,c
 14161  005D4A  5002               	movf	st_clust@dir+1,w,c
 14162  005D4C  22DA               	addwfc	fsr2h,f,c
 14163  005D4E  C005  FFDE         	movff	st_clust@cl+2,postinc2
 14164  005D52  C006  FFDD         	movff	st_clust@cl+3,postdec2
 14165  005D56  0012               	return		;funcret
 14166  005D58                     __end_of_st_clust:
 14167                           	opt callstack 0
 14168                           
 14169 ;; *************** function _move_window *****************
 14170 ;; Defined at:
 14171 ;;		line 729 in file "ff.c"
 14172 ;; Parameters:    Size  Location     Type
 14173 ;;  fs              2   47[COMRAM] PTR struct .
 14174 ;;		 -> FatFs(558), NULL(0), 
 14175 ;;  sector          4   49[COMRAM] unsigned long 
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;  res             1   57[COMRAM] enum E93
 14178 ;; Return value:  Size  Location     Type
 14179 ;;                  1    wreg      enum E93
 14180 ;; Registers used:
 14181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/0
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14187 ;;      Params:         6       0       0       0       0       0       0       0       0
 14188 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14189 ;;      Temps:          4       0       0       0       0       0       0       0       0
 14190 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14191 ;;Total ram usage:       11 bytes
 14192 ;; Hardware stack levels used:    1
 14193 ;; Hardware stack levels required when called:    7
 14194 ;; This function calls:
 14195 ;;		_disk_read
 14196 ;;		_sync_window
 14197 ;; This function is called by:
 14198 ;;		_get_fat
 14199 ;;		_put_fat
 14200 ;;		_dir_alloc
 14201 ;;		_dir_find
 14202 ;;		_dir_register
 14203 ;;		_check_fs
 14204 ;;		_find_volume
 14205 ;;		_f_open
 14206 ;;		_f_write
 14207 ;;		_f_sync
 14208 ;;		_f_read
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text46
 14213  005634                     __ptext46:
 14214                           	opt callstack 0
 14215  005634                     _move_window:
 14216                           	opt callstack 20
 14217                           
 14218                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 14219                           
 14220                           ;incstack = 0
 14221  005634  0E00               	movlw	0
 14222  005636  6E3A               	movwf	move_window@res,c
 14223                           
 14224                           ;ff.c: 737:  if (sector != fs->winsect) {
 14225  005638  EE20 F02A          	lfsr	2,42
 14226  00563C  5030               	movf	move_window@fs,w,c
 14227  00563E  26D9               	addwf	fsr2l,f,c
 14228  005640  5031               	movf	move_window@fs+1,w,c
 14229  005642  22DA               	addwfc	fsr2h,f,c
 14230  005644  5032               	movf	move_window@sector,w,c
 14231  005646  18DE               	xorwf	postinc2,w,c
 14232  005648  E10A               	bnz	u5550
 14233  00564A  5033               	movf	move_window@sector+1,w,c
 14234  00564C  18DE               	xorwf	postinc2,w,c
 14235  00564E  E107               	bnz	u5550
 14236  005650  5034               	movf	move_window@sector+2,w,c
 14237  005652  18DE               	xorwf	postinc2,w,c
 14238  005654  E104               	bnz	u5550
 14239  005656  5035               	movf	move_window@sector+3,w,c
 14240  005658  18DE               	xorwf	postinc2,w,c
 14241  00565A  B4D8               	btfsc	status,2,c
 14242  00565C  D03C               	goto	l4778
 14243  00565E                     u5550:
 14244                           
 14245                           ;ff.c: 739:   res = sync_window(fs);
 14246  00565E  C030  F01B         	movff	move_window@fs,sync_window@fs
 14247  005662  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 14248  005666  EC83  F022         	call	_sync_window	;wreg free
 14249  00566A  6E3A               	movwf	move_window@res,c
 14250                           
 14251                           ;ff.c: 741:   if (res == FR_OK) {
 14252  00566C  503A               	movf	move_window@res,w,c
 14253  00566E  A4D8               	btfss	status,2,c
 14254  005670  D032               	goto	l4778
 14255                           
 14256                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 14257  005672  0E2E               	movlw	46
 14258  005674  2430               	addwf	move_window@fs,w,c
 14259  005676  6E11               	movwf	disk_read@buff,c
 14260  005678  0E00               	movlw	0
 14261  00567A  2031               	addwfc	move_window@fs+1,w,c
 14262  00567C  6E12               	movwf	disk_read@buff+1,c
 14263  00567E  C032  F013         	movff	move_window@sector,disk_read@sector
 14264  005682  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 14265  005686  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 14266  00568A  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 14267  00568E  0E00               	movlw	0
 14268  005690  6E18               	movwf	disk_read@count+1,c
 14269  005692  0E01               	movlw	1
 14270  005694  6E17               	movwf	disk_read@count,c
 14271  005696  EE20 F001          	lfsr	2,1
 14272  00569A  5030               	movf	move_window@fs,w,c
 14273  00569C  26D9               	addwf	fsr2l,f,c
 14274  00569E  5031               	movf	move_window@fs+1,w,c
 14275  0056A0  22DA               	addwfc	fsr2h,f,c
 14276  0056A2  50DF               	movf	indf2,w,c
 14277  0056A4  EC9A  F029         	call	_disk_read
 14278  0056A8  0900               	iorlw	0
 14279  0056AA  B4D8               	btfsc	status,2,c
 14280  0056AC  D006               	goto	l4776
 14281                           
 14282                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 14283  0056AE  6832               	setf	move_window@sector,c
 14284  0056B0  6833               	setf	move_window@sector+1,c
 14285  0056B2  6834               	setf	move_window@sector+2,c
 14286  0056B4  6835               	setf	move_window@sector+3,c
 14287                           
 14288                           ;ff.c: 744:     res = FR_DISK_ERR;
 14289  0056B6  0E01               	movlw	1
 14290  0056B8  6E3A               	movwf	move_window@res,c
 14291  0056BA                     l4776:
 14292                           
 14293                           ;ff.c: 746:    fs->winsect = sector;
 14294  0056BA  EE20 F02A          	lfsr	2,42
 14295  0056BE  5030               	movf	move_window@fs,w,c
 14296  0056C0  26D9               	addwf	fsr2l,f,c
 14297  0056C2  5031               	movf	move_window@fs+1,w,c
 14298  0056C4  22DA               	addwfc	fsr2h,f,c
 14299  0056C6  C032  FFDE         	movff	move_window@sector,postinc2
 14300  0056CA  C033  FFDE         	movff	move_window@sector+1,postinc2
 14301  0056CE  C034  FFDE         	movff	move_window@sector+2,postinc2
 14302  0056D2  C035  FFDE         	movff	move_window@sector+3,postinc2
 14303  0056D6                     l4778:
 14304                           
 14305                           ;ff.c: 749:  return res;
 14306  0056D6  503A               	movf	move_window@res,w,c
 14307  0056D8  0012               	return		;funcret
 14308  0056DA                     __end_of_move_window:
 14309                           	opt callstack 0
 14310                           
 14311 ;; *************** function _sync_window *****************
 14312 ;; Defined at:
 14313 ;;		line 700 in file "ff.c"
 14314 ;; Parameters:    Size  Location     Type
 14315 ;;  fs              2   26[COMRAM] PTR struct .
 14316 ;;		 -> FatFs(558), NULL(0), 
 14317 ;; Auto vars:     Size  Location     Type
 14318 ;;  wsect           4   43[COMRAM] unsigned long 
 14319 ;;  nf              2   41[COMRAM] unsigned short 
 14320 ;;  res             1   40[COMRAM] enum E93
 14321 ;; Return value:  Size  Location     Type
 14322 ;;                  1    wreg      enum E93
 14323 ;; Registers used:
 14324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14325 ;; Tracked objects:
 14326 ;;		On entry : 0/0
 14327 ;;		On exit  : 0/0
 14328 ;;		Unchanged: 0/0
 14329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14330 ;;      Params:         2       0       0       0       0       0       0       0       0
 14331 ;;      Locals:         7       0       0       0       0       0       0       0       0
 14332 ;;      Temps:         12       0       0       0       0       0       0       0       0
 14333 ;;      Totals:        21       0       0       0       0       0       0       0       0
 14334 ;;Total ram usage:       21 bytes
 14335 ;; Hardware stack levels used:    1
 14336 ;; Hardware stack levels required when called:    6
 14337 ;; This function calls:
 14338 ;;		_disk_write
 14339 ;; This function is called by:
 14340 ;;		_move_window
 14341 ;;		_sync_fs
 14342 ;;		_dir_next
 14343 ;;		_f_write
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           	psect	text47
 14348  004506                     __ptext47:
 14349                           	opt callstack 0
 14350  004506                     _sync_window:
 14351                           	opt callstack 21
 14352                           
 14353                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 14354                           
 14355                           ;incstack = 0
 14356  004506  0E00               	movlw	0
 14357  004508  6E29               	movwf	sync_window@res,c
 14358                           
 14359                           ;ff.c: 709:  if (fs->wflag) {
 14360  00450A  EE20 F004          	lfsr	2,4
 14361  00450E  501B               	movf	sync_window@fs,w,c
 14362  004510  26D9               	addwf	fsr2l,f,c
 14363  004512  501C               	movf	sync_window@fs+1,w,c
 14364  004514  22DA               	addwfc	fsr2h,f,c
 14365  004516  50DF               	movf	indf2,w,c
 14366  004518  B4D8               	btfsc	status,2,c
 14367  00451A  D09F               	goto	l4758
 14368                           
 14369                           ;ff.c: 710:   wsect = fs->winsect;
 14370  00451C  EE20 F02A          	lfsr	2,42
 14371  004520  501B               	movf	sync_window@fs,w,c
 14372  004522  26D9               	addwf	fsr2l,f,c
 14373  004524  501C               	movf	sync_window@fs+1,w,c
 14374  004526  22DA               	addwfc	fsr2h,f,c
 14375  004528  CFDE F02C          	movff	postinc2,sync_window@wsect
 14376  00452C  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 14377  004530  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 14378  004534  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 14379                           
 14380                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 14381  004538  0E2E               	movlw	46
 14382  00453A  241B               	addwf	sync_window@fs,w,c
 14383  00453C  6E11               	movwf	disk_write@buff,c
 14384  00453E  0E00               	movlw	0
 14385  004540  201C               	addwfc	sync_window@fs+1,w,c
 14386  004542  6E12               	movwf	disk_write@buff+1,c
 14387  004544  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14388  004548  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14389  00454C  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14390  004550  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14391  004554  0E00               	movlw	0
 14392  004556  6E18               	movwf	disk_write@count+1,c
 14393  004558  0E01               	movlw	1
 14394  00455A  6E17               	movwf	disk_write@count,c
 14395  00455C  EE20 F001          	lfsr	2,1
 14396  004560  501B               	movf	sync_window@fs,w,c
 14397  004562  26D9               	addwf	fsr2l,f,c
 14398  004564  501C               	movf	sync_window@fs+1,w,c
 14399  004566  22DA               	addwfc	fsr2h,f,c
 14400  004568  50DF               	movf	indf2,w,c
 14401  00456A  EC56  F026         	call	_disk_write
 14402  00456E  0900               	iorlw	0
 14403  004570  B4D8               	btfsc	status,2,c
 14404  004572  D003               	goto	l4740
 14405                           
 14406                           ;ff.c: 712:    res = FR_DISK_ERR;
 14407  004574  0E01               	movlw	1
 14408  004576  6E29               	movwf	sync_window@res,c
 14409                           
 14410                           ;ff.c: 713:   } else {
 14411  004578  D070               	goto	l4758
 14412  00457A                     l4740:
 14413                           
 14414                           ;ff.c: 714:    fs->wflag = 0;
 14415  00457A  EE20 F004          	lfsr	2,4
 14416  00457E  501B               	movf	sync_window@fs,w,c
 14417  004580  26D9               	addwf	fsr2l,f,c
 14418  004582  501C               	movf	sync_window@fs+1,w,c
 14419  004584  22DA               	addwfc	fsr2h,f,c
 14420  004586  0E00               	movlw	0
 14421  004588  6EDF               	movwf	indf2,c
 14422                           
 14423                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 14424  00458A  EE20 F016          	lfsr	2,22
 14425  00458E  501B               	movf	sync_window@fs,w,c
 14426  004590  26D9               	addwf	fsr2l,f,c
 14427  004592  501C               	movf	sync_window@fs+1,w,c
 14428  004594  22DA               	addwfc	fsr2h,f,c
 14429  004596  EE10 F01E          	lfsr	1,30
 14430  00459A  501B               	movf	sync_window@fs,w,c
 14431  00459C  26E1               	addwf	fsr1l,f,c
 14432  00459E  501C               	movf	sync_window@fs+1,w,c
 14433  0045A0  22E2               	addwfc	fsr1h,f,c
 14434  0045A2  CFE6 F021          	movff	postinc1,??_sync_window+4
 14435  0045A6  CFE6 F022          	movff	postinc1,??_sync_window+5
 14436  0045AA  CFE6 F023          	movff	postinc1,??_sync_window+6
 14437  0045AE  CFE6 F024          	movff	postinc1,??_sync_window+7
 14438  0045B2  5021               	movf	??_sync_window+4,w,c
 14439  0045B4  5C2C               	subwf	sync_window@wsect,w,c
 14440  0045B6  6E25               	movwf	(??_sync_window+8)& (0+255),c
 14441  0045B8  5022               	movf	??_sync_window+5,w,c
 14442  0045BA  582D               	subwfb	sync_window@wsect+1,w,c
 14443  0045BC  6E26               	movwf	(??_sync_window+9)& (0+255),c
 14444  0045BE  5023               	movf	??_sync_window+6,w,c
 14445  0045C0  582E               	subwfb	sync_window@wsect+2,w,c
 14446  0045C2  6E27               	movwf	(??_sync_window+10)& (0+255),c
 14447  0045C4  5024               	movf	??_sync_window+7,w,c
 14448  0045C6  582F               	subwfb	sync_window@wsect+3,w,c
 14449  0045C8  6E28               	movwf	(??_sync_window+11)& (0+255),c
 14450  0045CA  50DE               	movf	postinc2,w,c
 14451  0045CC  5C25               	subwf	??_sync_window+8,w,c
 14452  0045CE  50DE               	movf	postinc2,w,c
 14453  0045D0  5826               	subwfb	??_sync_window+9,w,c
 14454  0045D2  50DE               	movf	postinc2,w,c
 14455  0045D4  5827               	subwfb	??_sync_window+10,w,c
 14456  0045D6  50DE               	movf	postinc2,w,c
 14457  0045D8  5828               	subwfb	??_sync_window+11,w,c
 14458  0045DA  B0D8               	btfsc	status,0,c
 14459  0045DC  D03E               	goto	l4758
 14460                           
 14461                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 14462  0045DE  EE20 F003          	lfsr	2,3
 14463  0045E2  501B               	movf	sync_window@fs,w,c
 14464  0045E4  26D9               	addwf	fsr2l,f,c
 14465  0045E6  501C               	movf	sync_window@fs+1,w,c
 14466  0045E8  22DA               	addwfc	fsr2h,f,c
 14467  0045EA  50DF               	movf	indf2,w,c
 14468  0045EC  6E1D               	movwf	??_sync_window& (0+255),c
 14469  0045EE  501D               	movf	??_sync_window,w,c
 14470  0045F0  6E2A               	movwf	sync_window@nf,c
 14471  0045F2  6A2B               	clrf	sync_window@nf+1,c
 14472  0045F4                     l4746:
 14473  0045F4  502B               	movf	sync_window@nf+1,w,c
 14474  0045F6  E104               	bnz	l4750
 14475  0045F8  0E02               	movlw	2
 14476  0045FA  5C2A               	subwf	sync_window@nf,w,c
 14477  0045FC  A0D8               	btfss	status,0,c
 14478  0045FE  D02D               	goto	l4758
 14479  004600                     l4750:
 14480                           
 14481                           ;ff.c: 717:      wsect += fs->fsize;
 14482  004600  EE20 F016          	lfsr	2,22
 14483  004604  501B               	movf	sync_window@fs,w,c
 14484  004606  26D9               	addwf	fsr2l,f,c
 14485  004608  501C               	movf	sync_window@fs+1,w,c
 14486  00460A  22DA               	addwfc	fsr2h,f,c
 14487  00460C  50DE               	movf	postinc2,w,c
 14488  00460E  262C               	addwf	sync_window@wsect,f,c
 14489  004610  50DE               	movf	postinc2,w,c
 14490  004612  222D               	addwfc	sync_window@wsect+1,f,c
 14491  004614  50DE               	movf	postinc2,w,c
 14492  004616  222E               	addwfc	sync_window@wsect+2,f,c
 14493  004618  50DD               	movf	postdec2,w,c
 14494  00461A  222F               	addwfc	sync_window@wsect+3,f,c
 14495                           
 14496                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 14497  00461C  0E2E               	movlw	46
 14498  00461E  241B               	addwf	sync_window@fs,w,c
 14499  004620  6E11               	movwf	disk_write@buff,c
 14500  004622  0E00               	movlw	0
 14501  004624  201C               	addwfc	sync_window@fs+1,w,c
 14502  004626  6E12               	movwf	disk_write@buff+1,c
 14503  004628  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14504  00462C  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14505  004630  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14506  004634  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14507  004638  0E00               	movlw	0
 14508  00463A  6E18               	movwf	disk_write@count+1,c
 14509  00463C  0E01               	movlw	1
 14510  00463E  6E17               	movwf	disk_write@count,c
 14511  004640  EE20 F001          	lfsr	2,1
 14512  004644  501B               	movf	sync_window@fs,w,c
 14513  004646  26D9               	addwf	fsr2l,f,c
 14514  004648  501C               	movf	sync_window@fs+1,w,c
 14515  00464A  22DA               	addwfc	fsr2h,f,c
 14516  00464C  50DF               	movf	indf2,w,c
 14517  00464E  EC56  F026         	call	_disk_write
 14518                           
 14519                           ;ff.c: 719:     }
 14520  004652  062A               	decf	sync_window@nf,f,c
 14521  004654  A0D8               	btfss	status,0,c
 14522  004656  062B               	decf	sync_window@nf+1,f,c
 14523  004658  D7CD               	goto	l4746
 14524  00465A                     l4758:
 14525                           
 14526                           ;ff.c: 723:  return res;
 14527  00465A  5029               	movf	sync_window@res,w,c
 14528  00465C  0012               	return		;funcret
 14529  00465E                     __end_of_sync_window:
 14530                           	opt callstack 0
 14531                           
 14532 ;; *************** function _disk_write *****************
 14533 ;; Defined at:
 14534 ;;		line 405 in file "diskio.c"
 14535 ;; Parameters:    Size  Location     Type
 14536 ;;  pdrv            1    wreg     unsigned char 
 14537 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 14538 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14539 ;;  sector          4   18[COMRAM] unsigned long 
 14540 ;;  count           2   22[COMRAM] unsigned short 
 14541 ;; Auto vars:     Size  Location     Type
 14542 ;;  pdrv            1   25[COMRAM] unsigned char 
 14543 ;; Return value:  Size  Location     Type
 14544 ;;                  1    wreg      enum E43
 14545 ;; Registers used:
 14546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14547 ;; Tracked objects:
 14548 ;;		On entry : 0/0
 14549 ;;		On exit  : 0/0
 14550 ;;		Unchanged: 0/0
 14551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14552 ;;      Params:         8       0       0       0       0       0       0       0       0
 14553 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14554 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14555 ;;      Totals:        10       0       0       0       0       0       0       0       0
 14556 ;;Total ram usage:       10 bytes
 14557 ;; Hardware stack levels used:    1
 14558 ;; Hardware stack levels required when called:    5
 14559 ;; This function calls:
 14560 ;;		_deselect
 14561 ;;		_send_cmd
 14562 ;;		_xmit_datablock
 14563 ;; This function is called by:
 14564 ;;		_sync_window
 14565 ;;		_sync_fs
 14566 ;;		_f_write
 14567 ;; This function uses a non-reentrant model
 14568 ;;
 14569                           
 14570                           	psect	text48
 14571  004CAC                     __ptext48:
 14572                           	opt callstack 0
 14573  004CAC                     _disk_write:
 14574                           	opt callstack 21
 14575                           
 14576                           ;incstack = 0
 14577                           ;disk_write@pdrv stored from wreg
 14578  004CAC  6E1A               	movwf	disk_write@pdrv,c
 14579                           
 14580                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 14581  004CAE  501A               	movf	disk_write@pdrv,w,c
 14582  004CB0  A4D8               	btfss	status,2,c
 14583  004CB2  D004               	goto	u5240
 14584  004CB4  5017               	movf	disk_write@count,w,c
 14585  004CB6  1018               	iorwf	disk_write@count+1,w,c
 14586  004CB8  A4D8               	btfss	status,2,c
 14587  004CBA  D002               	goto	l126
 14588  004CBC                     u5240:
 14589  004CBC  0E04               	movlw	4
 14590  004CBE  0012               	return	
 14591  004CC0                     l126:
 14592                           
 14593                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 14594  004CC0  0100               	movlb	0	; () banked
 14595  004CC2  A1F0               	btfss	_Stat& (0+255),0,b
 14596  004CC4  D002               	goto	l130
 14597                           
 14598                           ; BSR set to: 0
 14599  004CC6  0E03               	movlw	3
 14600  004CC8  0012               	return	
 14601  004CCA                     l130:
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 14605  004CCA  A5F0               	btfss	_Stat& (0+255),2,b
 14606  004CCC  D002               	goto	l131
 14607                           
 14608                           ; BSR set to: 0
 14609  004CCE  0E02               	movlw	2
 14610  004CD0  0012               	return	
 14611  004CD2                     l131:
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 14615  004CD2  B7DF               	btfsc	_CardType& (0+255),3,b
 14616  004CD4  D008               	goto	l132
 14617                           
 14618                           ; BSR set to: 0
 14619  004CD6  0E09               	movlw	9
 14620  004CD8                     u5285:
 14621  004CD8  90D8               	bcf	status,0,c
 14622  004CDA  3613               	rlcf	disk_write@sector,f,c
 14623  004CDC  3614               	rlcf	disk_write@sector+1,f,c
 14624  004CDE  3615               	rlcf	disk_write@sector+2,f,c
 14625  004CE0  3616               	rlcf	disk_write@sector+3,f,c
 14626  004CE2  2EE8               	decfsz	wreg,f,c
 14627  004CE4  D7F9               	goto	u5285
 14628  004CE6                     l132:
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;diskio.c: 418:  if (count == 1) {
 14632  004CE6  0417               	decf	disk_write@count,w,c
 14633  004CE8  1018               	iorwf	disk_write@count+1,w,c
 14634  004CEA  A4D8               	btfss	status,2,c
 14635  004CEC  D01D               	goto	l4672
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 14639  004CEE  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14640  004CF2  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14641  004CF6  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14642  004CFA  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14643  004CFE  0E18               	movlw	24
 14644  004D00  ECF0  F02D         	call	_send_cmd
 14645  004D04  0900               	iorlw	0
 14646  004D06  A4D8               	btfss	status,2,c
 14647  004D08  D04F               	goto	l4686
 14648  004D0A  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14649  004D0E  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14650  004D12  0EFE               	movlw	254
 14651  004D14  6E06               	movwf	xmit_datablock@token,c
 14652  004D16  EC20  F02D         	call	_xmit_datablock	;wreg free
 14653  004D1A  0900               	iorlw	0
 14654  004D1C  B4D8               	btfsc	status,2,c
 14655  004D1E  D044               	goto	l4686
 14656                           
 14657                           ;diskio.c: 421:    count = 0;
 14658  004D20  0E00               	movlw	0
 14659  004D22  6E18               	movwf	disk_write@count+1,c
 14660  004D24  0E00               	movlw	0
 14661  004D26  D03F               	goto	L20
 14662  004D28                     l4672:
 14663                           
 14664                           ; BSR set to: 0
 14665                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 14666  004D28  C0DF  F019         	movff	_CardType,??_disk_write
 14667  004D2C  0E06               	movlw	6
 14668  004D2E  1619               	andwf	??_disk_write,f,c
 14669  004D30  B4D8               	btfsc	status,2,c
 14670  004D32  D009               	goto	l136
 14671                           
 14672                           ; BSR set to: 0
 14673  004D34  C017  F00B         	movff	disk_write@count,send_cmd@arg
 14674  004D38  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 14675  004D3C  6A0D               	clrf	send_cmd@arg+2,c
 14676  004D3E  6A0E               	clrf	send_cmd@arg+3,c
 14677  004D40  0E97               	movlw	151
 14678  004D42  ECF0  F02D         	call	_send_cmd
 14679  004D46                     l136:
 14680                           
 14681                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 14682  004D46  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14683  004D4A  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14684  004D4E  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14685  004D52  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14686  004D56  0E19               	movlw	25
 14687  004D58  ECF0  F02D         	call	_send_cmd
 14688  004D5C  0900               	iorlw	0
 14689  004D5E  A4D8               	btfss	status,2,c
 14690  004D60  D023               	goto	l4686
 14691  004D62                     u5330:
 14692                           
 14693                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 14694  004D62  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14695  004D66  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14696  004D6A  0EFC               	movlw	252
 14697  004D6C  6E06               	movwf	xmit_datablock@token,c
 14698  004D6E  EC20  F02D         	call	_xmit_datablock	;wreg free
 14699  004D72  0900               	iorlw	0
 14700  004D74  B4D8               	btfsc	status,2,c
 14701  004D76  D009               	goto	u5350
 14702                           
 14703                           ;diskio.c: 428:     buff += 512;
 14704  004D78  0E02               	movlw	2
 14705  004D7A  2612               	addwf	disk_write@buff+1,f,c
 14706                           
 14707                           ;diskio.c: 429:    } while (--count);
 14708  004D7C  0617               	decf	disk_write@count,f,c
 14709  004D7E  A0D8               	btfss	status,0,c
 14710  004D80  0618               	decf	disk_write@count+1,f,c
 14711  004D82  5017               	movf	disk_write@count,w,c
 14712  004D84  1018               	iorwf	disk_write@count+1,w,c
 14713  004D86  A4D8               	btfss	status,2,c
 14714  004D88  D7EC               	goto	u5330
 14715  004D8A                     u5350:
 14716                           
 14717                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 14718  004D8A  0E00               	movlw	0
 14719  004D8C  6E04               	movwf	xmit_datablock@buff,c
 14720  004D8E  0E00               	movlw	0
 14721  004D90  6E05               	movwf	xmit_datablock@buff+1,c
 14722  004D92  0EFD               	movlw	253
 14723  004D94  6E06               	movwf	xmit_datablock@token,c
 14724  004D96  EC20  F02D         	call	_xmit_datablock	;wreg free
 14725  004D9A  0900               	iorlw	0
 14726  004D9C  A4D8               	btfss	status,2,c
 14727  004D9E  D004               	goto	l4686
 14728                           
 14729                           ;diskio.c: 431:     count = 1;
 14730  004DA0  0E00               	movlw	0
 14731  004DA2  6E18               	movwf	disk_write@count+1,c
 14732  004DA4  0E01               	movlw	1
 14733  004DA6                     L20:
 14734  004DA6  6E17               	movwf	disk_write@count,c
 14735  004DA8                     l4686:
 14736                           
 14737                           ;diskio.c: 434:  deselect();
 14738  004DA8  EC42  F02F         	call	_deselect	;wreg free
 14739                           
 14740                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 14741  004DAC  5017               	movf	disk_write@count,w,c
 14742  004DAE  1018               	iorwf	disk_write@count+1,w,c
 14743  004DB0  B4D8               	btfsc	status,2,c
 14744  004DB2  D002               	goto	u5370
 14745  004DB4  0E01               	movlw	1
 14746  004DB6  0012               	return	
 14747  004DB8                     u5370:
 14748  004DB8  0E00               	movlw	0
 14749  004DBA  0012               	return		;funcret
 14750  004DBC                     __end_of_disk_write:
 14751                           	opt callstack 0
 14752                           
 14753 ;; *************** function _xmit_datablock *****************
 14754 ;; Defined at:
 14755 ;;		line 156 in file "diskio.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 14758 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14759 ;;  token           1    5[COMRAM] unsigned char 
 14760 ;; Auto vars:     Size  Location     Type
 14761 ;;  i               2    6[COMRAM] unsigned short 
 14762 ;;  resp            1    8[COMRAM] unsigned char 
 14763 ;; Return value:  Size  Location     Type
 14764 ;;                  1    wreg      unsigned char 
 14765 ;; Registers used:
 14766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14767 ;; Tracked objects:
 14768 ;;		On entry : 0/0
 14769 ;;		On exit  : 0/0
 14770 ;;		Unchanged: 0/0
 14771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14772 ;;      Params:         3       0       0       0       0       0       0       0       0
 14773 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14775 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14776 ;;Total ram usage:        6 bytes
 14777 ;; Hardware stack levels used:    1
 14778 ;; Hardware stack levels required when called:    2
 14779 ;; This function calls:
 14780 ;;		_SPI1_Exchange8bit
 14781 ;;		_wait_ready
 14782 ;; This function is called by:
 14783 ;;		_disk_write
 14784 ;; This function uses a non-reentrant model
 14785 ;;
 14786                           
 14787                           	psect	text49
 14788  005A40                     __ptext49:
 14789                           	opt callstack 0
 14790  005A40                     _xmit_datablock:
 14791                           	opt callstack 23
 14792                           
 14793                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 14794                           
 14795                           ;incstack = 0
 14796  005A40  EC11  F02E         	call	_wait_ready	;wreg free
 14797  005A44  0900               	iorlw	0
 14798  005A46  A4D8               	btfss	status,2,c
 14799  005A48  D002               	goto	l4578
 14800  005A4A                     u5130:
 14801  005A4A  0E00               	movlw	0
 14802  005A4C  0012               	return	
 14803  005A4E                     l4578:
 14804                           
 14805                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 14806  005A4E  5006               	movf	xmit_datablock@token,w,c
 14807  005A50  EC17  F02F         	call	_SPI1_Exchange8bit
 14808                           
 14809                           ;diskio.c: 168:  if (token != 0xFD) {
 14810  005A54  0EFD               	movlw	253
 14811  005A56  1806               	xorwf	xmit_datablock@token,w,c
 14812  005A58  B4D8               	btfsc	status,2,c
 14813  005A5A  D023               	goto	l4598
 14814                           
 14815                           ;diskio.c: 169:   i = 512;
 14816  005A5C  0E02               	movlw	2
 14817  005A5E  6E08               	movwf	xmit_datablock@i+1,c
 14818  005A60  0E00               	movlw	0
 14819  005A62  6E07               	movwf	xmit_datablock@i,c
 14820  005A64                     l4584:
 14821                           
 14822                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 14823  005A64  C004  FFD9         	movff	xmit_datablock@buff,fsr2l
 14824  005A68  C005  FFDA         	movff	xmit_datablock@buff+1,fsr2h
 14825  005A6C  50DF               	movf	indf2,w,c
 14826  005A6E  EC17  F02F         	call	_SPI1_Exchange8bit
 14827  005A72  4A04               	infsnz	xmit_datablock@buff,f,c
 14828  005A74  2A05               	incf	xmit_datablock@buff+1,f,c
 14829  005A76  0607               	decf	xmit_datablock@i,f,c
 14830  005A78  A0D8               	btfss	status,0,c
 14831  005A7A  0608               	decf	xmit_datablock@i+1,f,c
 14832  005A7C  5007               	movf	xmit_datablock@i,w,c
 14833  005A7E  1008               	iorwf	xmit_datablock@i+1,w,c
 14834  005A80  A4D8               	btfss	status,2,c
 14835  005A82  D7F0               	goto	l4584
 14836                           
 14837                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 14838  005A84  0EFF               	movlw	255
 14839  005A86  EC17  F02F         	call	_SPI1_Exchange8bit
 14840                           
 14841                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 14842  005A8A  0EFF               	movlw	255
 14843  005A8C  EC17  F02F         	call	_SPI1_Exchange8bit
 14844                           
 14845                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 14846  005A90  0EFF               	movlw	255
 14847  005A92  EC17  F02F         	call	_SPI1_Exchange8bit
 14848  005A96  6E09               	movwf	xmit_datablock@resp,c
 14849                           
 14850                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 14851  005A98  5009               	movf	xmit_datablock@resp,w,c
 14852  005A9A  0B1F               	andlw	31
 14853  005A9C  0A05               	xorlw	5
 14854  005A9E  A4D8               	btfss	status,2,c
 14855  005AA0  D7D4               	goto	u5130
 14856  005AA2                     l4598:
 14857                           
 14858                           ;diskio.c: 180:  return 1;
 14859  005AA2  0E01               	movlw	1
 14860  005AA4  0012               	return		;funcret
 14861  005AA6                     __end_of_xmit_datablock:
 14862                           	opt callstack 0
 14863                           
 14864 ;; *************** function _disk_read *****************
 14865 ;; Defined at:
 14866 ;;		line 370 in file "diskio.c"
 14867 ;; Parameters:    Size  Location     Type
 14868 ;;  pdrv            1    wreg     unsigned char 
 14869 ;;  buff            2   16[COMRAM] PTR unsigned char 
 14870 ;;		 -> FatFs(558), NULL(0), 
 14871 ;;  sector          4   18[COMRAM] unsigned long 
 14872 ;;  count           2   22[COMRAM] unsigned short 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  pdrv            1   24[COMRAM] unsigned char 
 14875 ;;  cmd             1   27[COMRAM] unsigned char 
 14876 ;; Return value:  Size  Location     Type
 14877 ;;                  1    wreg      enum E43
 14878 ;; Registers used:
 14879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14880 ;; Tracked objects:
 14881 ;;		On entry : 0/0
 14882 ;;		On exit  : 0/0
 14883 ;;		Unchanged: 0/0
 14884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14885 ;;      Params:         8       0       0       0       0       0       0       0       0
 14886 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14887 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14888 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14889 ;;Total ram usage:       12 bytes
 14890 ;; Hardware stack levels used:    1
 14891 ;; Hardware stack levels required when called:    5
 14892 ;; This function calls:
 14893 ;;		_deselect
 14894 ;;		_rcvr_datablock
 14895 ;;		_send_cmd
 14896 ;; This function is called by:
 14897 ;;		_move_window
 14898 ;;		_f_read
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           	psect	text50
 14903  005334                     __ptext50:
 14904                           	opt callstack 0
 14905  005334                     _disk_read:
 14906                           	opt callstack 21
 14907                           
 14908                           ;incstack = 0
 14909                           ;disk_read@pdrv stored from wreg
 14910  005334  6E19               	movwf	disk_read@pdrv,c
 14911                           
 14912                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 14913  005336  5019               	movf	disk_read@pdrv,w,c
 14914  005338  A4D8               	btfss	status,2,c
 14915  00533A  D004               	goto	u5400
 14916  00533C  5017               	movf	disk_read@count,w,c
 14917  00533E  1018               	iorwf	disk_read@count+1,w,c
 14918  005340  A4D8               	btfss	status,2,c
 14919  005342  D002               	goto	l109
 14920  005344                     u5400:
 14921  005344  0E04               	movlw	4
 14922  005346  0012               	return	
 14923  005348                     l109:
 14924                           
 14925                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 14926  005348  0100               	movlb	0	; () banked
 14927  00534A  A1F0               	btfss	_Stat& (0+255),0,b
 14928  00534C  D002               	goto	l113
 14929                           
 14930                           ; BSR set to: 0
 14931  00534E  0E03               	movlw	3
 14932  005350  0012               	return	
 14933  005352                     l113:
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 14937  005352  B7DF               	btfsc	_CardType& (0+255),3,b
 14938  005354  D008               	goto	l114
 14939                           
 14940                           ; BSR set to: 0
 14941  005356  0E09               	movlw	9
 14942  005358                     u5435:
 14943  005358  90D8               	bcf	status,0,c
 14944  00535A  3613               	rlcf	disk_read@sector,f,c
 14945  00535C  3614               	rlcf	disk_read@sector+1,f,c
 14946  00535E  3615               	rlcf	disk_read@sector+2,f,c
 14947  005360  3616               	rlcf	disk_read@sector+3,f,c
 14948  005362  2EE8               	decfsz	wreg,f,c
 14949  005364  D7F9               	goto	u5435
 14950  005366                     l114:
 14951                           
 14952                           ; BSR set to: 0
 14953                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 14954  005366  5018               	movf	disk_read@count+1,w,c
 14955  005368  E108               	bnz	l4708
 14956  00536A  0E02               	movlw	2
 14957  00536C  5C17               	subwf	disk_read@count,w,c
 14958  00536E  B0D8               	btfsc	status,0,c
 14959  005370  D004               	goto	l4708
 14960                           
 14961                           ; BSR set to: 0
 14962  005372  0E00               	movlw	0
 14963  005374  6E1B               	movwf	_disk_read$143+1,c
 14964  005376  0E11               	movlw	17
 14965  005378  D003               	goto	L21
 14966  00537A                     l4708:
 14967                           
 14968                           ; BSR set to: 0
 14969  00537A  0E00               	movlw	0
 14970  00537C  6E1B               	movwf	_disk_read$143+1,c
 14971  00537E  0E12               	movlw	18
 14972  005380                     L21:
 14973  005380  6E1A               	movwf	_disk_read$143,c
 14974                           
 14975                           ; BSR set to: 0
 14976  005382  C01A  F01C         	movff	_disk_read$143,disk_read@cmd
 14977                           
 14978                           ; BSR set to: 0
 14979                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 14980  005386  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 14981  00538A  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 14982  00538E  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 14983  005392  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 14984  005396  501C               	movf	disk_read@cmd,w,c
 14985  005398  ECF0  F02D         	call	_send_cmd
 14986  00539C  0900               	iorlw	0
 14987  00539E  A4D8               	btfss	status,2,c
 14988  0053A0  D025               	goto	l4724
 14989  0053A2                     u5450:
 14990                           
 14991                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 14992  0053A2  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 14993  0053A6  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 14994  0053AA  0E02               	movlw	2
 14995  0053AC  6E05               	movwf	rcvr_datablock@btr+1,c
 14996  0053AE  0E00               	movlw	0
 14997  0053B0  6E04               	movwf	rcvr_datablock@btr,c
 14998  0053B2  ECB7  F02C         	call	_rcvr_datablock	;wreg free
 14999  0053B6  0900               	iorlw	0
 15000  0053B8  B4D8               	btfsc	status,2,c
 15001  0053BA  D009               	goto	u5470
 15002                           
 15003                           ;diskio.c: 389:    buff += 512;
 15004  0053BC  0E02               	movlw	2
 15005  0053BE  2612               	addwf	disk_read@buff+1,f,c
 15006                           
 15007                           ;diskio.c: 390:   } while (--count);
 15008  0053C0  0617               	decf	disk_read@count,f,c
 15009  0053C2  A0D8               	btfss	status,0,c
 15010  0053C4  0618               	decf	disk_read@count+1,f,c
 15011  0053C6  5017               	movf	disk_read@count,w,c
 15012  0053C8  1018               	iorwf	disk_read@count+1,w,c
 15013  0053CA  A4D8               	btfss	status,2,c
 15014  0053CC  D7EA               	goto	u5450
 15015  0053CE                     u5470:
 15016                           
 15017                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 15018  0053CE  0E12               	movlw	18
 15019  0053D0  181C               	xorwf	disk_read@cmd,w,c
 15020  0053D2  A4D8               	btfss	status,2,c
 15021  0053D4  D00B               	goto	l4724
 15022  0053D6  0E00               	movlw	0
 15023  0053D8  6E0B               	movwf	send_cmd@arg,c
 15024  0053DA  0E00               	movlw	0
 15025  0053DC  6E0C               	movwf	send_cmd@arg+1,c
 15026  0053DE  0E00               	movlw	0
 15027  0053E0  6E0D               	movwf	send_cmd@arg+2,c
 15028  0053E2  0E00               	movlw	0
 15029  0053E4  6E0E               	movwf	send_cmd@arg+3,c
 15030  0053E6  0E0C               	movlw	12
 15031  0053E8  ECF0  F02D         	call	_send_cmd
 15032  0053EC                     l4724:
 15033                           
 15034                           ;diskio.c: 393:  deselect();
 15035  0053EC  EC42  F02F         	call	_deselect	;wreg free
 15036                           
 15037                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 15038  0053F0  5017               	movf	disk_read@count,w,c
 15039  0053F2  1018               	iorwf	disk_read@count+1,w,c
 15040  0053F4  B4D8               	btfsc	status,2,c
 15041  0053F6  D002               	goto	u5490
 15042  0053F8  0E01               	movlw	1
 15043  0053FA  0012               	return	
 15044  0053FC                     u5490:
 15045  0053FC  0E00               	movlw	0
 15046  0053FE  0012               	return		;funcret
 15047  005400                     __end_of_disk_read:
 15048                           	opt callstack 0
 15049                           
 15050 ;; *************** function _send_cmd *****************
 15051 ;; Defined at:
 15052 ;;		line 231 in file "diskio.c"
 15053 ;; Parameters:    Size  Location     Type
 15054 ;;  cmd             1    wreg     unsigned char 
 15055 ;;  arg             4   10[COMRAM] unsigned long 
 15056 ;; Auto vars:     Size  Location     Type
 15057 ;;  cmd             1   14[COMRAM] unsigned char 
 15058 ;;  res             1   15[COMRAM] unsigned char 
 15059 ;; Return value:  Size  Location     Type
 15060 ;;                  1    wreg      unsigned char 
 15061 ;; Registers used:
 15062 ;;		wreg, status,2, status,0, cstack
 15063 ;; Tracked objects:
 15064 ;;		On entry : 0/0
 15065 ;;		On exit  : 0/0
 15066 ;;		Unchanged: 0/0
 15067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15068 ;;      Params:         4       0       0       0       0       0       0       0       0
 15069 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15070 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15071 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15072 ;;Total ram usage:        6 bytes
 15073 ;; Hardware stack levels used:    1
 15074 ;; Hardware stack levels required when called:    4
 15075 ;; This function calls:
 15076 ;;		___send_cmd
 15077 ;; This function is called by:
 15078 ;;		_disk_initialize
 15079 ;;		_disk_read
 15080 ;;		_disk_write
 15081 ;;		_disk_ioctl
 15082 ;; This function uses a non-reentrant model
 15083 ;;
 15084                           
 15085                           	psect	text51
 15086  005BE0                     __ptext51:
 15087                           	opt callstack 0
 15088  005BE0                     _send_cmd:
 15089                           	opt callstack 21
 15090                           
 15091                           ;incstack = 0
 15092                           ;send_cmd@cmd stored from wreg
 15093  005BE0  6E0F               	movwf	send_cmd@cmd,c
 15094                           
 15095                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 15096  005BE2  AE0F               	btfss	send_cmd@cmd,7,c
 15097  005BE4  D012               	goto	l4614
 15098                           
 15099                           ;diskio.c: 243:   cmd &= 0x7F;
 15100  005BE6  9E0F               	bcf	send_cmd@cmd,7,c
 15101                           
 15102                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 15103  005BE8  0E00               	movlw	0
 15104  005BEA  6E04               	movwf	___send_cmd@arg,c
 15105  005BEC  0E00               	movlw	0
 15106  005BEE  6E05               	movwf	___send_cmd@arg+1,c
 15107  005BF0  0E00               	movlw	0
 15108  005BF2  6E06               	movwf	___send_cmd@arg+2,c
 15109  005BF4  0E00               	movlw	0
 15110  005BF6  6E07               	movwf	___send_cmd@arg+3,c
 15111  005BF8  0E37               	movlw	55
 15112  005BFA  ECF8  F02B         	call	___send_cmd
 15113  005BFE  6E10               	movwf	send_cmd@res,c
 15114                           
 15115                           ;diskio.c: 249:   if (res > 1) return res;
 15116  005C00  0E01               	movlw	1
 15117  005C02  6410               	cpfsgt	send_cmd@res,c
 15118  005C04  D002               	goto	l4614
 15119  005C06  5010               	movf	send_cmd@res,w,c
 15120  005C08  0012               	return	
 15121  005C0A                     l4614:
 15122                           
 15123                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 15124  005C0A  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 15125  005C0E  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 15126  005C12  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 15127  005C16  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 15128  005C1A  500F               	movf	send_cmd@cmd,w,c
 15129  005C1C  ECF8  F02B         	call	___send_cmd
 15130  005C20  0012               	return		;funcret
 15131  005C22                     __end_of_send_cmd:
 15132                           	opt callstack 0
 15133                           
 15134 ;; *************** function ___send_cmd *****************
 15135 ;; Defined at:
 15136 ;;		line 195 in file "diskio.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;  cmd             1    wreg     unsigned char 
 15139 ;;  arg             4    3[COMRAM] unsigned long 
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;  cmd             1    9[COMRAM] unsigned char 
 15142 ;;  n               1    8[COMRAM] unsigned char 
 15143 ;;  res             1    7[COMRAM] unsigned char 
 15144 ;; Return value:  Size  Location     Type
 15145 ;;                  1    wreg      unsigned char 
 15146 ;; Registers used:
 15147 ;;		wreg, status,2, status,0, cstack
 15148 ;; Tracked objects:
 15149 ;;		On entry : 0/0
 15150 ;;		On exit  : 0/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15153 ;;      Params:         4       0       0       0       0       0       0       0       0
 15154 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15156 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15157 ;;Total ram usage:        7 bytes
 15158 ;; Hardware stack levels used:    1
 15159 ;; Hardware stack levels required when called:    3
 15160 ;; This function calls:
 15161 ;;		_SPI1_Exchange8bit
 15162 ;;		_deselect
 15163 ;;		_select
 15164 ;; This function is called by:
 15165 ;;		_send_cmd
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           	psect	text52
 15170  0057F0                     __ptext52:
 15171                           	opt callstack 0
 15172  0057F0                     ___send_cmd:
 15173                           	opt callstack 21
 15174                           
 15175                           ;incstack = 0
 15176                           ;___send_cmd@cmd stored from wreg
 15177  0057F0  6E0A               	movwf	___send_cmd@cmd,c
 15178                           
 15179                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 15180  0057F2  0E0C               	movlw	12
 15181  0057F4  180A               	xorwf	___send_cmd@cmd,w,c
 15182  0057F6  B4D8               	btfsc	status,2,c
 15183  0057F8  D009               	goto	l4534
 15184                           
 15185                           ;diskio.c: 204:   deselect();
 15186  0057FA  EC42  F02F         	call	_deselect	;wreg free
 15187                           
 15188                           ;diskio.c: 205:   if (!select()) return 0xFF;
 15189  0057FE  ECE2  F02E         	call	_select	;wreg free
 15190  005802  0900               	iorlw	0
 15191  005804  A4D8               	btfss	status,2,c
 15192  005806  D002               	goto	l4534
 15193  005808  0EFF               	movlw	255
 15194  00580A  0012               	return	
 15195  00580C                     l4534:
 15196                           
 15197                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 15198  00580C  500A               	movf	___send_cmd@cmd,w,c
 15199  00580E  0940               	iorlw	64
 15200  005810  EC17  F02F         	call	_SPI1_Exchange8bit
 15201                           
 15202                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 15203  005814  5007               	movf	___send_cmd@arg+3,w,c
 15204  005816  EC17  F02F         	call	_SPI1_Exchange8bit
 15205                           
 15206                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 15207  00581A  5006               	movf	___send_cmd@arg+2,w,c
 15208  00581C  EC17  F02F         	call	_SPI1_Exchange8bit
 15209                           
 15210                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 15211  005820  5005               	movf	___send_cmd@arg+1,w,c
 15212  005822  EC17  F02F         	call	_SPI1_Exchange8bit
 15213                           
 15214                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 15215  005826  5004               	movf	___send_cmd@arg,w,c
 15216  005828  EC17  F02F         	call	_SPI1_Exchange8bit
 15217                           
 15218                           ;diskio.c: 214:  n = 0x01;
 15219  00582C  0E01               	movlw	1
 15220  00582E  6E09               	movwf	___send_cmd@n,c
 15221                           
 15222                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 15223  005830  500A               	movf	___send_cmd@cmd,w,c
 15224  005832  A4D8               	btfss	status,2,c
 15225  005834  D002               	goto	l4550
 15226  005836  0E95               	movlw	149
 15227  005838  6E09               	movwf	___send_cmd@n,c
 15228  00583A                     l4550:
 15229                           
 15230                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 15231  00583A  0E08               	movlw	8
 15232  00583C  180A               	xorwf	___send_cmd@cmd,w,c
 15233  00583E  A4D8               	btfss	status,2,c
 15234  005840  D002               	goto	l4554
 15235  005842  0E87               	movlw	135
 15236  005844  6E09               	movwf	___send_cmd@n,c
 15237  005846                     l4554:
 15238                           
 15239                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 15240  005846  5009               	movf	___send_cmd@n,w,c
 15241  005848  EC17  F02F         	call	_SPI1_Exchange8bit
 15242                           
 15243                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 15244  00584C  0E0C               	movlw	12
 15245  00584E  180A               	xorwf	___send_cmd@cmd,w,c
 15246  005850  A4D8               	btfss	status,2,c
 15247  005852  D003               	goto	l4560
 15248  005854  0EFF               	movlw	255
 15249  005856  EC17  F02F         	call	_SPI1_Exchange8bit
 15250  00585A                     l4560:
 15251                           
 15252                           ;diskio.c: 221:  n = 10;
 15253  00585A  0E0A               	movlw	10
 15254  00585C  6E09               	movwf	___send_cmd@n,c
 15255  00585E                     l4562:
 15256                           
 15257                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 15258  00585E  0EFF               	movlw	255
 15259  005860  EC17  F02F         	call	_SPI1_Exchange8bit
 15260  005864  6E08               	movwf	___send_cmd@res,c
 15261  005866  AE08               	btfss	___send_cmd@res,7,c
 15262  005868  D002               	goto	l4568
 15263  00586A  2E09               	decfsz	___send_cmd@n,f,c
 15264  00586C  D7F8               	goto	l4562
 15265  00586E                     l4568:
 15266                           
 15267                           ;diskio.c: 226:  return res;
 15268  00586E  5008               	movf	___send_cmd@res,w,c
 15269  005870  0012               	return		;funcret
 15270  005872                     __end_of___send_cmd:
 15271                           	opt callstack 0
 15272                           
 15273 ;; *************** function _select *****************
 15274 ;; Defined at:
 15275 ;;		line 106 in file "diskio.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;		None
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;		None
 15280 ;; Return value:  Size  Location     Type
 15281 ;;                  1    wreg      unsigned char 
 15282 ;; Registers used:
 15283 ;;		wreg, status,2, status,0, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : 0/0
 15286 ;;		On exit  : 0/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15289 ;;      Params:         0       0       0       0       0       0       0       0       0
 15290 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15292 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15293 ;;Total ram usage:        0 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:    2
 15296 ;; This function calls:
 15297 ;;		_SPI1_Exchange8bit
 15298 ;;		_deselect
 15299 ;;		_wait_ready
 15300 ;; This function is called by:
 15301 ;;		___send_cmd
 15302 ;;		_disk_ioctl
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           	psect	text53
 15307  005DC4                     __ptext53:
 15308                           	opt callstack 0
 15309  005DC4                     _select:
 15310                           	opt callstack 21
 15311                           
 15312                           ;incstack = 0
 15313                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 15314  005DC4  948A               	bcf	3978,2,c	;volatile
 15315                           
 15316                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 15317  005DC6  0EFF               	movlw	255
 15318  005DC8  EC17  F02F         	call	_SPI1_Exchange8bit
 15319                           
 15320                           ;diskio.c: 110:  if (wait_ready()) return 1;
 15321  005DCC  EC11  F02E         	call	_wait_ready	;wreg free
 15322  005DD0  0900               	iorlw	0
 15323  005DD2  B4D8               	btfsc	status,2,c
 15324  005DD4  D002               	goto	l4518
 15325  005DD6  0E01               	movlw	1
 15326  005DD8  0012               	return	
 15327  005DDA                     l4518:
 15328                           
 15329                           ;diskio.c: 112:  deselect();
 15330  005DDA  EC42  F02F         	call	_deselect	;wreg free
 15331                           
 15332                           ;diskio.c: 113:  return 0;
 15333  005DDE  0E00               	movlw	0
 15334  005DE0  0012               	return		;funcret
 15335  005DE2                     __end_of_select:
 15336                           	opt callstack 0
 15337                           
 15338 ;; *************** function _wait_ready *****************
 15339 ;; Defined at:
 15340 ;;		line 74 in file "diskio.c"
 15341 ;; Parameters:    Size  Location     Type
 15342 ;;		None
 15343 ;; Auto vars:     Size  Location     Type
 15344 ;;  tmr             2    1[COMRAM] unsigned short 
 15345 ;; Return value:  Size  Location     Type
 15346 ;;                  1    wreg      unsigned char 
 15347 ;; Registers used:
 15348 ;;		wreg, status,2, status,0, cstack
 15349 ;; Tracked objects:
 15350 ;;		On entry : 0/0
 15351 ;;		On exit  : 0/0
 15352 ;;		Unchanged: 0/0
 15353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15354 ;;      Params:         0       0       0       0       0       0       0       0       0
 15355 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15357 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15358 ;;Total ram usage:        2 bytes
 15359 ;; Hardware stack levels used:    1
 15360 ;; Hardware stack levels required when called:    1
 15361 ;; This function calls:
 15362 ;;		_SPI1_Exchange8bit
 15363 ;; This function is called by:
 15364 ;;		_select
 15365 ;;		_xmit_datablock
 15366 ;; This function uses a non-reentrant model
 15367 ;;
 15368                           
 15369                           	psect	text54
 15370  005C22                     __ptext54:
 15371                           	opt callstack 0
 15372  005C22                     _wait_ready:
 15373                           	opt callstack 23
 15374                           
 15375                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 15376                           
 15377                           ;incstack = 0
 15378  005C22  0E13               	movlw	19
 15379  005C24  6E03               	movwf	wait_ready@tmr+1,c
 15380  005C26  0E88               	movlw	136
 15381  005C28  6E02               	movwf	wait_ready@tmr,c
 15382  005C2A  D00D               	goto	l17
 15383  005C2C                     l4496:
 15384                           
 15385                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 15386  005C2C  0EFF               	movlw	255
 15387  005C2E  EC17  F02F         	call	_SPI1_Exchange8bit
 15388  005C32  0AFF               	xorlw	255
 15389  005C34  B4D8               	btfsc	status,2,c
 15390  005C36  D00B               	goto	u5030
 15391                           
 15392                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15393  005C38  0E42               	movlw	66
 15394  005C3A                     u10057:
 15395  005C3A  2EE8               	decfsz	wreg,f,c
 15396  005C3C  D7FE               	bra	u10057
 15397  005C3E  D000               	nop2	
 15398                           
 15399                           ;diskio.c: 81:  }
 15400  005C40  0602               	decf	wait_ready@tmr,f,c
 15401  005C42  A0D8               	btfss	status,0,c
 15402  005C44  0603               	decf	wait_ready@tmr+1,f,c
 15403  005C46                     l17:
 15404  005C46  5002               	movf	wait_ready@tmr,w,c
 15405  005C48  1003               	iorwf	wait_ready@tmr+1,w,c
 15406  005C4A  A4D8               	btfss	status,2,c
 15407  005C4C  D7EF               	goto	l4496
 15408  005C4E                     u5030:
 15409                           
 15410                           ;diskio.c: 83:  return tmr ? 1 : 0;
 15411  005C4E  5002               	movf	wait_ready@tmr,w,c
 15412  005C50  1003               	iorwf	wait_ready@tmr+1,w,c
 15413  005C52  B4D8               	btfsc	status,2,c
 15414  005C54  D002               	goto	u5040
 15415  005C56  0E01               	movlw	1
 15416  005C58  0012               	return	
 15417  005C5A                     u5040:
 15418  005C5A  0E00               	movlw	0
 15419  005C5C  0012               	return		;funcret
 15420  005C5E                     __end_of_wait_ready:
 15421                           	opt callstack 0
 15422                           
 15423 ;; *************** function _deselect *****************
 15424 ;; Defined at:
 15425 ;;		line 93 in file "diskio.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;		None
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;		None
 15430 ;; Return value:  Size  Location     Type
 15431 ;;                  1    wreg      void 
 15432 ;; Registers used:
 15433 ;;		wreg, status,2, cstack
 15434 ;; Tracked objects:
 15435 ;;		On entry : 0/0
 15436 ;;		On exit  : 0/0
 15437 ;;		Unchanged: 0/0
 15438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15439 ;;      Params:         0       0       0       0       0       0       0       0       0
 15440 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15442 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15443 ;;Total ram usage:        0 bytes
 15444 ;; Hardware stack levels used:    1
 15445 ;; Hardware stack levels required when called:    1
 15446 ;; This function calls:
 15447 ;;		_SPI1_Exchange8bit
 15448 ;; This function is called by:
 15449 ;;		_select
 15450 ;;		___send_cmd
 15451 ;;		_disk_initialize
 15452 ;;		_disk_read
 15453 ;;		_disk_write
 15454 ;;		_disk_ioctl
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           	psect	text55
 15459  005E84                     __ptext55:
 15460                           	opt callstack 0
 15461  005E84                     _deselect:
 15462                           	opt callstack 21
 15463                           
 15464                           ;incstack = 0
 15465                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 15466  005E84  848A               	bsf	3978,2,c	;volatile
 15467                           
 15468                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 15469  005E86  0EFF               	movlw	255
 15470  005E88  EC17  F02F         	call	_SPI1_Exchange8bit
 15471  005E8C  0012               	return		;funcret
 15472  005E8E                     __end_of_deselect:
 15473                           	opt callstack 0
 15474                           
 15475 ;; *************** function _rcvr_datablock *****************
 15476 ;; Defined at:
 15477 ;;		line 123 in file "diskio.c"
 15478 ;; Parameters:    Size  Location     Type
 15479 ;;  buff            2    1[COMRAM] PTR unsigned char 
 15480 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 15481 ;;  btr             2    3[COMRAM] unsigned short 
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;  tmr             2    5[COMRAM] unsigned short 
 15484 ;;  token           1    7[COMRAM] unsigned char 
 15485 ;; Return value:  Size  Location     Type
 15486 ;;                  1    wreg      unsigned char 
 15487 ;; Registers used:
 15488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15489 ;; Tracked objects:
 15490 ;;		On entry : 0/0
 15491 ;;		On exit  : 0/0
 15492 ;;		Unchanged: 0/0
 15493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15494 ;;      Params:         4       0       0       0       0       0       0       0       0
 15495 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15496 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15497 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15498 ;;Total ram usage:        7 bytes
 15499 ;; Hardware stack levels used:    1
 15500 ;; Hardware stack levels required when called:    1
 15501 ;; This function calls:
 15502 ;;		_SPI1_Exchange8bit
 15503 ;; This function is called by:
 15504 ;;		_disk_read
 15505 ;;		_disk_ioctl
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           	psect	text56
 15510  00596E                     __ptext56:
 15511                           	opt callstack 0
 15512  00596E                     _rcvr_datablock:
 15513                           	opt callstack 24
 15514                           
 15515                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 15516                           
 15517                           ;incstack = 0
 15518  00596E  0E07               	movlw	7
 15519  005970  6E07               	movwf	rcvr_datablock@tmr+1,c
 15520  005972  0ED0               	movlw	208
 15521  005974  6E06               	movwf	rcvr_datablock@tmr,c
 15522  005976  D00E               	goto	l35
 15523  005978                     l4620:
 15524                           
 15525                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 15526  005978  0EFF               	movlw	255
 15527  00597A  EC17  F02F         	call	_SPI1_Exchange8bit
 15528  00597E  6E08               	movwf	rcvr_datablock@token,c
 15529                           
 15530                           ;diskio.c: 134:   if (token != 0xFF) break;
 15531  005980  2808               	incf	rcvr_datablock@token,w,c
 15532  005982  A4D8               	btfss	status,2,c
 15533  005984  D00B               	goto	u5200
 15534                           
 15535                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15536  005986  0E42               	movlw	66
 15537  005988                     u10067:
 15538  005988  2EE8               	decfsz	wreg,f,c
 15539  00598A  D7FE               	bra	u10067
 15540  00598C  D000               	nop2	
 15541                           
 15542                           ;diskio.c: 136:  }
 15543  00598E  0606               	decf	rcvr_datablock@tmr,f,c
 15544  005990  A0D8               	btfss	status,0,c
 15545  005992  0607               	decf	rcvr_datablock@tmr+1,f,c
 15546  005994                     l35:
 15547  005994  5006               	movf	rcvr_datablock@tmr,w,c
 15548  005996  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 15549  005998  A4D8               	btfss	status,2,c
 15550  00599A  D7EE               	goto	l4620
 15551  00599C                     u5200:
 15552                           
 15553                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 15554  00599C  0EFE               	movlw	254
 15555  00599E  1808               	xorwf	rcvr_datablock@token,w,c
 15556  0059A0  B4D8               	btfsc	status,2,c
 15557  0059A2  D002               	goto	l4636
 15558  0059A4  0E00               	movlw	0
 15559  0059A6  0012               	return	
 15560  0059A8                     l4636:
 15561                           
 15562                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 15563  0059A8  0EFF               	movlw	255
 15564  0059AA  EC17  F02F         	call	_SPI1_Exchange8bit
 15565  0059AE  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 15566  0059B2  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 15567  0059B6  6EDF               	movwf	indf2,c
 15568  0059B8  4A02               	infsnz	rcvr_datablock@buff,f,c
 15569  0059BA  2A03               	incf	rcvr_datablock@buff+1,f,c
 15570  0059BC  0604               	decf	rcvr_datablock@btr,f,c
 15571  0059BE  A0D8               	btfss	status,0,c
 15572  0059C0  0605               	decf	rcvr_datablock@btr+1,f,c
 15573  0059C2  5004               	movf	rcvr_datablock@btr,w,c
 15574  0059C4  1005               	iorwf	rcvr_datablock@btr+1,w,c
 15575  0059C6  A4D8               	btfss	status,2,c
 15576  0059C8  D7EF               	goto	l4636
 15577                           
 15578                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 15579  0059CA  0EFF               	movlw	255
 15580  0059CC  EC17  F02F         	call	_SPI1_Exchange8bit
 15581                           
 15582                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 15583  0059D0  0EFF               	movlw	255
 15584  0059D2  EC17  F02F         	call	_SPI1_Exchange8bit
 15585                           
 15586                           ;diskio.c: 145:  return 1;
 15587  0059D6  0E01               	movlw	1
 15588  0059D8  0012               	return		;funcret
 15589  0059DA                     __end_of_rcvr_datablock:
 15590                           	opt callstack 0
 15591                           
 15592 ;; *************** function _SPI1_Exchange8bit *****************
 15593 ;; Defined at:
 15594 ;;		line 90 in file "mcc_generated_files/spi1.c"
 15595 ;; Parameters:    Size  Location     Type
 15596 ;;  data            1    wreg     unsigned char 
 15597 ;; Auto vars:     Size  Location     Type
 15598 ;;  data            1    0[COMRAM] unsigned char 
 15599 ;; Return value:  Size  Location     Type
 15600 ;;                  1    wreg      unsigned char 
 15601 ;; Registers used:
 15602 ;;		wreg, status,2
 15603 ;; Tracked objects:
 15604 ;;		On entry : 0/0
 15605 ;;		On exit  : 0/0
 15606 ;;		Unchanged: 0/0
 15607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15608 ;;      Params:         0       0       0       0       0       0       0       0       0
 15609 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15610 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15611 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15612 ;;Total ram usage:        1 bytes
 15613 ;; Hardware stack levels used:    1
 15614 ;; This function calls:
 15615 ;;		Nothing
 15616 ;; This function is called by:
 15617 ;;		_wait_ready
 15618 ;;		_deselect
 15619 ;;		_select
 15620 ;;		_rcvr_datablock
 15621 ;;		_xmit_datablock
 15622 ;;		___send_cmd
 15623 ;;		_disk_initialize
 15624 ;;		_disk_ioctl
 15625 ;;		_SPI1_Exchange8bitBuffer
 15626 ;; This function uses a non-reentrant model
 15627 ;;
 15628                           
 15629                           	psect	text57
 15630  005E2E                     __ptext57:
 15631                           	opt callstack 0
 15632  005E2E                     _SPI1_Exchange8bit:
 15633                           	opt callstack 23
 15634                           
 15635                           ;incstack = 0
 15636                           ;SPI1_Exchange8bit@data stored from wreg
 15637  005E2E  6E01               	movwf	SPI1_Exchange8bit@data,c
 15638                           
 15639                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 15640  005E30  9EC6               	bcf	4038,7,c	;volatile
 15641                           
 15642                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 15643  005E32  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 15644  005E36                     l750:
 15645                           
 15646                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 15647  005E36  A0C7               	btfss	4039,0,c	;volatile
 15648  005E38  D7FE               	goto	l750
 15649                           
 15650                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 15651  005E3A  50C9               	movf	4041,w,c	;volatile
 15652  005E3C  0012               	return		;funcret
 15653  005E3E                     __end_of_SPI1_Exchange8bit:
 15654                           	opt callstack 0
 15655                           
 15656 ;; *************** function ___delay_sec *****************
 15657 ;; Defined at:
 15658 ;;		line 116 in file "Main.c"
 15659 ;; Parameters:    Size  Location     Type
 15660 ;;  sec             1    wreg     unsigned char 
 15661 ;; Auto vars:     Size  Location     Type
 15662 ;;  sec             1    3[COMRAM] unsigned char 
 15663 ;;  i               1    4[COMRAM] unsigned char 
 15664 ;; Return value:  Size  Location     Type
 15665 ;;                  1    wreg      void 
 15666 ;; Registers used:
 15667 ;;		wreg, status,2, status,0, prodl, prodh
 15668 ;; Tracked objects:
 15669 ;;		On entry : 0/0
 15670 ;;		On exit  : 0/0
 15671 ;;		Unchanged: 0/0
 15672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15673 ;;      Params:         0       0       0       0       0       0       0       0       0
 15674 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15675 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15676 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15677 ;;Total ram usage:        5 bytes
 15678 ;; Hardware stack levels used:    1
 15679 ;; This function calls:
 15680 ;;		Nothing
 15681 ;; This function is called by:
 15682 ;;		_guardar
 15683 ;; This function uses a non-reentrant model
 15684 ;;
 15685                           
 15686                           	psect	text58
 15687  005C98                     __ptext58:
 15688                           	opt callstack 0
 15689  005C98                     ___delay_sec:
 15690                           	opt callstack 29
 15691                           
 15692                           ;incstack = 0
 15693                           ;___delay_sec@sec stored from wreg
 15694  005C98  6E04               	movwf	___delay_sec@sec,c
 15695                           
 15696                           ;Main.c: 117:     for(char i=0;i<=(50*sec);i++) {
 15697  005C9A  0E00               	movlw	0
 15698  005C9C  6E05               	movwf	___delay_sec@i,c
 15699  005C9E  D008               	goto	l7080
 15700  005CA0                     l7076:
 15701                           
 15702                           ;Main.c: 118:         _delay((unsigned long)((20)*(8000000/4000.0)));
 15703  005CA0  0E34               	movlw	52
 15704  005CA2  6E01               	movwf	??___delay_sec& (0+255),c
 15705  005CA4  0EF2               	movlw	242
 15706  005CA6                     u10077:
 15707  005CA6  2EE8               	decfsz	wreg,f,c
 15708  005CA8  D7FE               	bra	u10077
 15709  005CAA  2E01               	decfsz	??___delay_sec& (0+255),f,c
 15710  005CAC  D7FC               	bra	u10077
 15711                           
 15712                           ;Main.c: 119:     }
 15713  005CAE  2A05               	incf	___delay_sec@i,f,c
 15714  005CB0                     l7080:
 15715  005CB0  5005               	movf	___delay_sec@i,w,c
 15716  005CB2  6E01               	movwf	??___delay_sec& (0+255),c
 15717  005CB4  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 15718  005CB6  5004               	movf	___delay_sec@sec,w,c
 15719  005CB8  0D32               	mullw	50
 15720  005CBA  5001               	movf	??___delay_sec,w,c
 15721  005CBC  5CF3               	subwf	prodl,w,c
 15722  005CBE  50F4               	movf	prodh,w,c
 15723  005CC0  0A80               	xorlw	128
 15724  005CC2  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 15725  005CC4  5002               	movf	??___delay_sec+1,w,c
 15726  005CC6  0A80               	xorlw	128
 15727  005CC8  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 15728  005CCA  A0D8               	btfss	status,0,c
 15729  005CCC  0012               	return	
 15730  005CCE  D7E8               	goto	l7076
 15731  005CD0                     __end_of___delay_sec:
 15732                           	opt callstack 0
 15733                           
 15734 ;; *************** function _SYSTEM_Initialize *****************
 15735 ;; Defined at:
 15736 ;;		line 116 in file "mcc_generated_files/mcc.c"
 15737 ;; Parameters:    Size  Location     Type
 15738 ;;		None
 15739 ;; Auto vars:     Size  Location     Type
 15740 ;;		None
 15741 ;; Return value:  Size  Location     Type
 15742 ;;                  1    wreg      void 
 15743 ;; Registers used:
 15744 ;;		wreg, status,2, cstack
 15745 ;; Tracked objects:
 15746 ;;		On entry : 0/0
 15747 ;;		On exit  : 0/0
 15748 ;;		Unchanged: 0/0
 15749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15750 ;;      Params:         0       0       0       0       0       0       0       0       0
 15751 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15752 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15753 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15754 ;;Total ram usage:        0 bytes
 15755 ;; Hardware stack levels used:    1
 15756 ;; Hardware stack levels required when called:    1
 15757 ;; This function calls:
 15758 ;;		_EUSART1_Initialize
 15759 ;;		_OSCILLATOR_Initialize
 15760 ;;		_PIN_MANAGER_Initialize
 15761 ;;		_SPI1_Initialize
 15762 ;; This function is called by:
 15763 ;;		_main
 15764 ;;		_guardar
 15765 ;; This function uses a non-reentrant model
 15766 ;;
 15767                           
 15768                           	psect	text59
 15769  005E0A                     __ptext59:
 15770                           	opt callstack 0
 15771  005E0A                     _SYSTEM_Initialize:
 15772                           	opt callstack 28
 15773                           
 15774                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 15775                           
 15776                           ;incstack = 0
 15777  005E0A  ECD2  F02E         	call	_PIN_MANAGER_Initialize	;wreg free
 15778                           
 15779                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 15780  005E0E  EC0E  F02F         	call	_OSCILLATOR_Initialize	;wreg free
 15781                           
 15782                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 15783  005E12  EC2E  F02F         	call	_SPI1_Initialize	;wreg free
 15784                           
 15785                           ;mcc_generated_files/mcc.c: 122:     EUSART1_Initialize();
 15786  005E16  ECF1  F02E         	call	_EUSART1_Initialize	;wreg free
 15787  005E1A  0012               	return		;funcret
 15788  005E1C                     __end_of_SYSTEM_Initialize:
 15789                           	opt callstack 0
 15790                           
 15791 ;; *************** function _SPI1_Initialize *****************
 15792 ;; Defined at:
 15793 ;;		line 63 in file "mcc_generated_files/spi1.c"
 15794 ;; Parameters:    Size  Location     Type
 15795 ;;		None
 15796 ;; Auto vars:     Size  Location     Type
 15797 ;;		None
 15798 ;; Return value:  Size  Location     Type
 15799 ;;                  1    wreg      void 
 15800 ;; Registers used:
 15801 ;;		wreg, status,2
 15802 ;; Tracked objects:
 15803 ;;		On entry : 0/0
 15804 ;;		On exit  : 0/0
 15805 ;;		Unchanged: 0/0
 15806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15807 ;;      Params:         0       0       0       0       0       0       0       0       0
 15808 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15809 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15810 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15811 ;;Total ram usage:        0 bytes
 15812 ;; Hardware stack levels used:    1
 15813 ;; This function calls:
 15814 ;;		Nothing
 15815 ;; This function is called by:
 15816 ;;		_disk_initialize
 15817 ;;		_SYSTEM_Initialize
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           	psect	text60
 15822  005E5C                     __ptext60:
 15823                           	opt callstack 0
 15824  005E5C                     _SPI1_Initialize:
 15825                           	opt callstack 26
 15826                           
 15827                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 15828                           
 15829                           ;incstack = 0
 15830  005E5C  0E40               	movlw	64
 15831  005E5E  6EC7               	movwf	4039,c	;volatile
 15832                           
 15833                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 15834  005E60  0E22               	movlw	34
 15835  005E62  6EC6               	movwf	4038,c	;volatile
 15836                           
 15837                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 15838  005E64  0E00               	movlw	0
 15839  005E66  6EC8               	movwf	4040,c	;volatile
 15840  005E68  0012               	return		;funcret
 15841  005E6A                     __end_of_SPI1_Initialize:
 15842                           	opt callstack 0
 15843                           
 15844 ;; *************** function _PIN_MANAGER_Initialize *****************
 15845 ;; Defined at:
 15846 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;		None
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;		None
 15851 ;; Return value:  Size  Location     Type
 15852 ;;                  1    wreg      void 
 15853 ;; Registers used:
 15854 ;;		wreg, status,2
 15855 ;; Tracked objects:
 15856 ;;		On entry : 0/0
 15857 ;;		On exit  : 0/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15860 ;;      Params:         0       0       0       0       0       0       0       0       0
 15861 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15862 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15863 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15864 ;;Total ram usage:        0 bytes
 15865 ;; Hardware stack levels used:    1
 15866 ;; This function calls:
 15867 ;;		Nothing
 15868 ;; This function is called by:
 15869 ;;		_SYSTEM_Initialize
 15870 ;; This function uses a non-reentrant model
 15871 ;;
 15872                           
 15873                           	psect	text61
 15874  005DA4                     __ptext61:
 15875                           	opt callstack 0
 15876  005DA4                     _PIN_MANAGER_Initialize:
 15877                           	opt callstack 28
 15878                           
 15879                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 15880                           
 15881                           ;incstack = 0
 15882  005DA4  0E04               	movlw	4
 15883  005DA6  6E8A               	movwf	3978,c	;volatile
 15884                           
 15885                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 15886  005DA8  0E00               	movlw	0
 15887  005DAA  6E8B               	movwf	3979,c	;volatile
 15888                           
 15889                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 15890  005DAC  0EF1               	movlw	241
 15891  005DAE  6E93               	movwf	3987,c	;volatile
 15892                           
 15893                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 15894  005DB0  0EC7               	movlw	199
 15895  005DB2  6E94               	movwf	3988,c	;volatile
 15896                           
 15897                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 15898  005DB4  0EC4               	movlw	196
 15899  005DB6  010F               	movlb	15	; () banked
 15900  005DB8  6F5D               	movwf	93,b	;volatile
 15901                           
 15902                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 15903  005DBA  0E30               	movlw	48
 15904  005DBC  6F5C               	movwf	92,b	;volatile
 15905                           
 15906                           ; BSR set to: 15
 15907                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 15908  005DBE  6885               	setf	3973,c	;volatile
 15909                           
 15910                           ; BSR set to: 15
 15911                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 15912  005DC0  9EF1               	bcf	4081,7,c	;volatile
 15913                           
 15914                           ; BSR set to: 15
 15915  005DC2  0012               	return		;funcret
 15916  005DC4                     __end_of_PIN_MANAGER_Initialize:
 15917                           	opt callstack 0
 15918                           
 15919 ;; *************** function _OSCILLATOR_Initialize *****************
 15920 ;; Defined at:
 15921 ;;		line 125 in file "mcc_generated_files/mcc.c"
 15922 ;; Parameters:    Size  Location     Type
 15923 ;;		None
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;		None
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  1    wreg      void 
 15928 ;; Registers used:
 15929 ;;		wreg, status,2
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15935 ;;      Params:         0       0       0       0       0       0       0       0       0
 15936 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15937 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15938 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15939 ;;Total ram usage:        0 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_SYSTEM_Initialize
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           	psect	text62
 15949  005E1C                     __ptext62:
 15950                           	opt callstack 0
 15951  005E1C                     _OSCILLATOR_Initialize:
 15952                           	opt callstack 28
 15953                           
 15954                           ;mcc_generated_files/mcc.c: 128:     OSCCON = 0x60;
 15955                           
 15956                           ; BSR set to: 15
 15957                           ;incstack = 0
 15958  005E1C  0E60               	movlw	96
 15959  005E1E  6ED3               	movwf	4051,c	;volatile
 15960                           
 15961                           ;mcc_generated_files/mcc.c: 130:     OSCCON2 = 0x00;
 15962  005E20  0E00               	movlw	0
 15963  005E22  6ED2               	movwf	4050,c	;volatile
 15964                           
 15965                           ;mcc_generated_files/mcc.c: 132:     OSCTUNE = 0x00;
 15966  005E24  0E00               	movlw	0
 15967  005E26  6E9B               	movwf	3995,c	;volatile
 15968                           
 15969                           ;mcc_generated_files/mcc.c: 134:     ACTCON = 0x00;
 15970  005E28  0E00               	movlw	0
 15971  005E2A  6EB5               	movwf	4021,c	;volatile
 15972  005E2C  0012               	return		;funcret
 15973  005E2E                     __end_of_OSCILLATOR_Initialize:
 15974                           	opt callstack 0
 15975                           
 15976 ;; *************** function _EUSART1_Initialize *****************
 15977 ;; Defined at:
 15978 ;;		line 55 in file "mcc_generated_files/eusart1.c"
 15979 ;; Parameters:    Size  Location     Type
 15980 ;;		None
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;		None
 15983 ;; Return value:  Size  Location     Type
 15984 ;;                  1    wreg      void 
 15985 ;; Registers used:
 15986 ;;		wreg, status,2
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15992 ;;      Params:         0       0       0       0       0       0       0       0       0
 15993 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15995 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15996 ;;Total ram usage:        0 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; This function calls:
 15999 ;;		Nothing
 16000 ;; This function is called by:
 16001 ;;		_SYSTEM_Initialize
 16002 ;; This function uses a non-reentrant model
 16003 ;;
 16004                           
 16005                           	psect	text63
 16006  005DE2                     __ptext63:
 16007                           	opt callstack 0
 16008  005DE2                     _EUSART1_Initialize:
 16009                           	opt callstack 28
 16010                           
 16011                           ;mcc_generated_files/eusart1.c: 60:     BAUDCON1 = 0x08;
 16012                           
 16013                           ;incstack = 0
 16014  005DE2  0E08               	movlw	8
 16015  005DE4  6EB8               	movwf	4024,c	;volatile
 16016                           
 16017                           ;mcc_generated_files/eusart1.c: 63:     RCSTA1 = 0x90;
 16018  005DE6  0E90               	movlw	144
 16019  005DE8  6EAB               	movwf	4011,c	;volatile
 16020                           
 16021                           ;mcc_generated_files/eusart1.c: 66:     TXSTA1 = 0x24;
 16022  005DEA  0E24               	movlw	36
 16023  005DEC  6EAC               	movwf	4012,c	;volatile
 16024                           
 16025                           ;mcc_generated_files/eusart1.c: 69:     SPBRG1 = 0x40;
 16026  005DEE  0E40               	movlw	64
 16027  005DF0  6EAF               	movwf	4015,c	;volatile
 16028                           
 16029                           ;mcc_generated_files/eusart1.c: 72:     SPBRGH1 = 0x03;
 16030  005DF2  0E03               	movlw	3
 16031  005DF4  6EB0               	movwf	4016,c	;volatile
 16032  005DF6  0012               	return		;funcret
 16033  005DF8                     __end_of_EUSART1_Initialize:
 16034                           	opt callstack 0
 16035                           
 16036 ;; *************** function _Init8LEDs *****************
 16037 ;; Defined at:
 16038 ;;		line 83 in file "Main.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;		None
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;		None
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  1    wreg      void 
 16045 ;; Registers used:
 16046 ;;		wreg, status,2
 16047 ;; Tracked objects:
 16048 ;;		On entry : 0/0
 16049 ;;		On exit  : 0/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16052 ;;      Params:         0       0       0       0       0       0       0       0       0
 16053 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16055 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16056 ;;Total ram usage:        0 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; This function calls:
 16059 ;;		Nothing
 16060 ;; This function is called by:
 16061 ;;		_main
 16062 ;; This function uses a non-reentrant model
 16063 ;;
 16064                           
 16065                           	psect	text64
 16066  005E3E                     __ptext64:
 16067                           	opt callstack 0
 16068  005E3E                     _Init8LEDs:
 16069                           	opt callstack 30
 16070                           
 16071                           ;Main.c: 85:     LATA = 0x00;
 16072                           
 16073                           ;incstack = 0
 16074  005E3E  0E00               	movlw	0
 16075  005E40  6E89               	movwf	3977,c	;volatile
 16076                           
 16077                           ;Main.c: 86:     TRISA = 0x00;
 16078  005E42  0E00               	movlw	0
 16079  005E44  6E92               	movwf	3986,c	;volatile
 16080                           
 16081                           ;Main.c: 87:     ANSELA = 0x00;
 16082  005E46  0E00               	movlw	0
 16083  005E48  010F               	movlb	15	; () banked
 16084  005E4A  6F5B               	movwf	91,b	;volatile
 16085                           
 16086                           ; BSR set to: 15
 16087  005E4C  0012               	return		;funcret
 16088  005E4E                     __end_of_Init8LEDs:
 16089                           	opt callstack 0
 16090                           
 16091                           	psect	rparam
 16092  0000                     tosu	equ	0xFFF
 16093                           tosh	equ	0xFFE
 16094                           tosl	equ	0xFFD
 16095                           stkptr	equ	0xFFC
 16096                           pclatu	equ	0xFFB
 16097                           pclath	equ	0xFFA
 16098                           pcl	equ	0xFF9
 16099                           tblptru	equ	0xFF8
 16100                           tblptrh	equ	0xFF7
 16101                           tblptrl	equ	0xFF6
 16102                           tablat	equ	0xFF5
 16103                           prodh	equ	0xFF4
 16104                           prodl	equ	0xFF3
 16105                           indf0	equ	0xFEF
 16106                           postinc0	equ	0xFEE
 16107                           postdec0	equ	0xFED
 16108                           preinc0	equ	0xFEC
 16109                           plusw0	equ	0xFEB
 16110                           fsr0h	equ	0xFEA
 16111                           fsr0l	equ	0xFE9
 16112                           wreg	equ	0xFE8
 16113                           indf1	equ	0xFE7
 16114                           postinc1	equ	0xFE6
 16115                           postdec1	equ	0xFE5
 16116                           preinc1	equ	0xFE4
 16117                           plusw1	equ	0xFE3
 16118                           fsr1h	equ	0xFE2
 16119                           fsr1l	equ	0xFE1
 16120                           bsr	equ	0xFE0
 16121                           indf2	equ	0xFDF
 16122                           postinc2	equ	0xFDE
 16123                           postdec2	equ	0xFDD
 16124                           preinc2	equ	0xFDC
 16125                           plusw2	equ	0xFDB
 16126                           fsr2h	equ	0xFDA
 16127                           fsr2l	equ	0xFD9
 16128                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        13
    BSS         610
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    112     145
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    send_string@x	PTR const unsigned char  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    S221$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S221$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S210$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S210$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S210$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _send_string->_EUSART1_Write
    _f_write->_create_chain
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _guardar->_f_open
    _grabador->_f_write
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  437013
                              _Error
                          _Init8LEDs
                  _SYSTEM_Initialize
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              0     0      0  435952
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                           _grabador
 ---------------------------------------------------------------------------------
 (2) _grabador                                             2     2      0   59818
                                             49 BANK0      2     2      0
                              _Error
                            ___fldiv
                            ___flmul
                           ___xxtofl
                            _f_write
                       _interruptadc
                        _send_string
 ---------------------------------------------------------------------------------
 (3) _send_string                                          3     1      2     143
                                              1 COMRAM     3     1      2
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _interruptadc                                         6     2      4     175
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1399
                                             39 COMRAM    25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Error                                               13    11      2    1061
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             10     4      6    1323
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (6) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (7) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (8) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (7) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (9) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init8LEDs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   _Init8LEDs
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _guardar
     _Error
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _grabador
       _Error
       ___fldiv
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _put_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_cpy
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _validate
           _disk_status
       _interruptadc
       _send_string
         _EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      91       5       90.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     110       6        0.0%
DATA                 0      0     33E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 30 11:55:39 2019

              _SPI1_Exchange8bit 5E2E                      get_fat@clst 003D  
                   ___fldiv@aexp 0040                     ___fldiv@bexp 003F  
                              _a 00D6                                _i 00EE  
                   ___fldiv@sign 0038                     create_name@b 0015  
                   create_name@c 001F                     create_name@d 001A  
                   create_name@i 001D                     create_name@p 0018  
             ?_SPI1_Exchange8bit 0001                 get_ldnumber@path 0001  
                             l17 5C46                               l35 5994  
                             l70 4168                               l81 4230  
                             l92 432E                               l95 42FE  
                             _ND 00E0                               _bw 00E2  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l113 5352                              l114 5366  
                            l130 4CCA                              l131 4CD2  
                            l132 4CE6                              l109 5348  
                            l126 4CC0                              l302 4784  
                            l136 4D46                              l242 4502  
                            l155 20EE                              l252 2C4A  
                            l317 37A0                              l334 397C  
                            l255 2F9A                              l336 3974  
                            l520 09BC                              l432 3FDE  
                            l257 2C54                              l533 0B04  
                            l349 3B4C                              l278 2410  
                            l391 4FA4                              l456 4134  
                            l547 0FFC                              l539 0C9E  
                            l469 4886                              l581 308E  
                            l750 5E36                              l590 3200  
                            l582 3086                              l671 1C46  
                            l667 19B6                              l588 3218  
                            l852 547E                              l918 4C6C  
                            l984 57DE                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 0100              ??_SPI1_Exchange8bit 0001  
                            _out 00D4                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
                   ___flmul@aexp 0020                     ___flmul@bexp 0021  
              disk_initialize@ty 001A                     ___flmul@sign 001B  
                   ___flmul@temp 0026                     ___flmul@prod 0022  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                     Error@F5055 00E4                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l1612 4A6E                             l1541 3DC2  
                           l1552 3E30                             l1553 3E2C  
                           l1571 33C2                             l1619 4AEC  
                           l5100 2212                             l5012 395C  
                           l1580 35DA                             l1581 35D6  
                           l5006 38F4                             l5120 2312  
                           l5104 229A                             l5032 5E04  
                           l5130 234A                             l5114 22E0  
                           l6002 08FC                             l5124 2334  
                           l5108 22A8                             l5052 1F5E  
                           l5044 1F50                             l5204 3A9A  
                           l1588 3660                             l5142 238A  
                           l5134 2352                             l6030 09F2  
                           l6014 093A                             l5214 3B0C  
                           l5206 3AC0                             l5056 1F6C  
                           l5144 2390                             l6024 09A0  
                           l5304 2A0A                             l5082 2134  
                           l5066 204A                             l5146 23D2  
                           l6042 0A4E                             l5250 284A  
                           l5226 3B8C                             l5170 5B58  
                           l5162 59F2                             l4620 5978  
                           l5092 2182                             l7004 1D1C  
                           l6044 0A74                             l6036 0A08  
                           l5316 2AAA                             l5332 2B48  
                           l5260 28AE                             l6300 16E0  
                           l4518 5DDA                             l4550 583A  
                           l4534 580C                             l4614 5C0A  
                           l5086 213C                             l5422 42BC  
                           l5414 4288                             l5406 4260  
                           l6142 0DA0                             l6062 0AA4  
                           l5270 2954                             l6310 175E  
                           l7110 4C44                             l4560 585A  
                           l5424 42CE                             l6056 0A9A  
                           l5328 2B00                             l5336 2BA6  
                           l5168 5B54                             l6400 5456  
                           l6312 177C                             l4562 585E  
                           l4554 5846                             l4810 2DDE  
                           l7042 1ED6                             l7018 1D9C  
                           l5418 4296                             l5362 4186  
                           l5354 4174                             l6162 0EDA  
                           l6138 0D8A                             l6058 0AA0  
                           l5194 3A48                             l5522 4F72  
                           l6242 1360                             l4636 59A8  
                           l4724 53EC                             l4708 537A  
                           l4740 457A                             l4820 2EA4  
                           l4812 2DE8                             l4900 27C2  
                           l7036 1E64                             l6084 0B62  
                           l5292 29EC                             l5276 296A  
                           l5188 39F8                             l5524 4F7A  
                           l5508 4EDE                             l5700 4122  
                           l6324 180E                             l6308 173A  
                           l6260 13F0                             l6244 13A0  
                           l6228 1278                             l4750 4600  
                           l4830 2F6E                             l5358 417E  
                           l6174 0FCE                             l5470 595C  
                           l5454 5902                             l5462 5932  
                           l5622 3FD4                             l6406 546A  
                           l6510 3D22                             l6502 3D0A  
                           l6342 191C                             l6318 17C4  
                           l6254 13CC                             l6430 5CD2  
                           l7080 5CB0                             l4496 5C2C  
                           l4568 586E                             l4584 5A64  
                           l4672 4D28                             l5800 5766  
                           l4920 5B20                             l4808 2DC0  
                           l4904 27D4                             l5376 41CC  
                           l5464 5940                             l5552 4FCC  
                           l6520 3D72                             l6328 1884  
                           l6280 150A                             l6272 14A8  
                           l6264 1440                             l6336 18C0  
                           l7056 4DC8                             l7128 4C9E  
                           l4578 5A4E                             l4746 45F4  
                           l4930 5D1C                             l4906 2800  
                           l5722 51A6                             l5618 3FBA  
                           l5538 58DE                             l6602 336E  
                           l7090 4BA4                             l7076 5CA0  
                           l5804 576A                             l5820 579C  
                           l4916 5B0C                             l4940 5520  
                           l4860 2500                             l5388 4200  
                           l5724 51AA                             l5572 5072  
                           l6540 3DD8                             l6620 33AE  
                           l6604 3372                             l6292 15E6  
                           l6444 5D70                             l6436 5CF2  
                           l4598 5AA2                             l4686 4DA8  
                           l4758 465A                             l4926 5D0C  
                           l6374 4A2C                             l5830 57D0  
                           l5750 524A                             l6198 11A0  
                           l5582 3EEA                             l5566 5032  
                           l6534 3DC0                             l6702 363C  
                           l6630 33E0                             l6622 33B2  
                           l6606 3382                             l6286 1592  
                           _ADIE 007CEE                             l4776 56BA  
                           l5496 44DA                             l4880 261E  
                           l5656 4076                             l5680 40C8  
                           l5584 3EEE                             l5904 4826  
                           l5840 4694                             l6528 3D9A  
                           l6464 3C7C                             l5808 5E7A  
                           _ADIF 007CF6                             l4778 56D6  
                           l5818 5790                             l4890 26D0  
                           l4858 24CC                             l4970 37B0  
                           l4962 374C                             l4954 36FC  
                           l5754 5254                             l5842 469C  
                           l6570 3E98                             l6546 3DF6  
                           l6714 367E                             l6298 16C0  
                           l4876 25E8                             l5780 5142  
                           l5676 40B2                             l5668 40A0  
                           l5596 3F5C                             l5940 48EA  
                           l6580 3ECE                             l6484 3CBC  
                           l6468 3C80                             l6732 4A9C  
                           l7268 5BD2                             l4982 380E  
                           l4966 3770                             l5774 5104  
                           l5686 40F2                             l5678 40C2  
                           l6830 3034                             l6582 3ED0  
                           l6574 3EC2                             l6566 3E74  
                           l6734 4AA2                             l6726 4A7E  
                           l5768 50E6                             l5856 46FA  
                           l6912 333E                             l6808 2FBA  
                           l6496 3CF4                             l6488 3CC0  
                           l6672 3582                             l6744 4B12  
                           l6736 4AAE                             l5786 517C  
                           l5962 0870                             l5954 084A  
                           l5866 4774                             l6842 306A  
                           l6762 4B5E                             l6746 4B1E  
                           l6738 4AD4                             l4998 3882  
                           l6942 196A                             l5982 08B8  
                           l6782 55D6                             l5886 532E  
                           l6838 305E                             l6678 35A0  
                           l6936 1948                             l6776 55A8  
                           l5896 47D2                             l5994 08F2  
                           l5978 08B4                             l6786 55EA  
                           l6698 361E                             l6980 1C2A  
                           l6972 1C04                             l6796 5616  
                           l6982 1C62                             l6958 1B86  
                           l6878 31E6                             l6896 325E  
                           l6994 1CD4                             l6986 1C70  
                           l6996 1D08                             STR_1 0801  
                           STR_2 0801                             STR_3 081A  
                           STR_4 081A                             STR_5 0810  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u5030 5C4E  
                           u5200 599C                             u5040 5C5A  
                           u6000 3934                             u5130 5A4A  
                           u5400 5344                             u5240 4CBC  
                           u6120 20E8                             u6105 2052  
                           u5330 4D62                             u6050 1F68  
                           u6115 2078                             _PEIE 007F96  
                           u7020 4FC6                             u6125 20DE  
                           u5350 4D8A                             u6215 21C6  
                           u6225 21E8                             u5450 53A2  
                           u5370 4DB8                             u6234 2206  
                           u6170 2164                             u7210 3FF6  
                           u6330 5A02                             u5435 5358  
                           u6235 2200                             u5700 240A  
                           u7140 3FA4                             u6340 5A36  
                           u5285 4CD8                             u6245 2250  
                           u5605 2C9E                             u5470 53CE  
                           u5550 565E                             u6510 2846  
                           u7230 4020                             u6175 215A  
                           u6095 2022                             u7400 51CC  
                           u6440 3B1C                             u6360 5B88  
                           u7160 3FB6                             u9000 362C  
                           u5625 2D3C                             u5490 53FC  
                           u7250 402C                             u9010 364A  
                           u5715 245A                             u8115 0EBA  
                           u5580 2C1A                             u8140 1022  
                           u6380 39F4                             u8045 0CD2  
                           u5670 2EE6                             u5590 2C3A  
                           u8070 0D86                             u7190 3FEA  
                           u5655 2DCC                             u5920 37FC  
                           u8080 0D9C                             u5745 254C  
                           u8145 1018                             u7530 5766  
                           u5770 2606                             u5690 23EA  
                           u6570 2950                             u5675 2EDC  
                           u6555 28BA                             u5940 385A  
                           u7460 5100                             u6580 2966  
                           u6485 3BC2                             u5790 2712  
                           u5870 36EA                             u7470 513E  
                           u8270 12D2                             u5775 25FC  
                           u6495 3C0E                             u7560 57A0  
                           u9400 1944                             u6840 4306  
                           u7640 474E                             u5890 375E  
                           u6770 4238                             u6690 416E  
                           u9170 5612                             u7650 47A4  
                           u9090 4B28                             u5795 2708  
                           u6675 2BC8                             u8435 1686  
                           u8275 12C8                             u9500 1C16  
                           u6860 432A                             u7820 08B0  
                           u7740 4880                             u7580 466E  
                           u8541 5424                             u8445 16CA  
                           u7590 468E                             u9600 1E50  
                           u7920 0A8E                             u8385 1522  
                           u6970 4F5E                             u7690 47CC  
                           u8810 3E82                             u8490 18C8  
                           u9620 1EBA                             u7940 0AA0  
                           u8580 5478                             u8820 3EA6  
                           u9605 1E46                             u9550 1D2C  
                           u6990 4F98                             u8910 33CE  
                           u9455 1A2E                             u8920 3544  
                           u9570 1DB0                             u9490 1BF0  
                           u8770 3E26                             u8925 353A  
                           u9670 4BC2                             u8960 35D0  
                           u9997 5CD8                             _WPUB 000F85  
                           _Fsid 00DA                    _EUSART1_Write 5E78  
                           _Stat 00F0                             _data 00DE  
                           _main 5B9A                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           _volt 00D0                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 5E3E                    __CFG_IESO$OFF 000000  
                ___fldiv@new_exp 0039                       Error@v_seg 0004  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 4506   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 5E2E                            ?_main 0001  
                __end_of___fldiv 3ED8                  __end_of___flmul 3694  
                __end_of___lldiv 57F0                            u10007 548C  
                          u10017 54A6                            u10027 54C0  
                          u10037 4222                            u10047 42F0  
                          u10057 5C3A                            u10067 5988  
                          u10077 5CA6                   __CFG_DEBUG$OFF 000000  
                          _PORTA 000F80                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 5C98                            _FatFs 0120  
                __end_of_chk_chr 5B9A               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F3C                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 5634                            _Error 5400  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3C50  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 192E  
                __end_of_get_fat 2FAC                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                          _adcin 00D8                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 5A40                  __end_of_mem_cpy 596E  
                __end_of_mem_set 5D2E                  __end_of_guardar 4CAC  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                   ?_EUSART1_Write 0001  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw1 000FE3                            plusw2 000FDB  
                __end_of_put_fat 2804                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 4506  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 5AA6  
            disk_initialize@pdrv 0012       __end_of_EUSART1_Initialize 5DF8  
                   __end_of_main 5BE0                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
                         _ADCON2 000FC0               __size_of_Init8LEDs 0010  
                         _ACTCON 000FB5                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                     ?_send_string 0002  
                         _RCREG1 000FAE                           _RCSTA1 000FAB  
                         _OSCCON 000FD3                           _SPBRG1 000FAF  
           __end_of_dir_register 5334                           _TXREG1 000FAD  
               __end_of___xxtofl 4B70                 __end_of_check_fs 5180  
                         _TXSTA1 000FAC            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 5E8E                 __end_of_dir_find 5094  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 5E5C  
               __end_of_dir_next 2C0A                     ?_move_window 0030  
           __end_of_create_chain 398E                 __end_of_ld_clust 58F0  
                         ___lmul 5AFC                 __end_of_grabador 4EB8  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 5D7E                        ??___fldiv 0030  
                 __CFG_STVREN$ON 000000                        ??___flmul 0017  
                      ??___lldiv 0009                           _f_open 2FAC  
                         _f_sync 48EE                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 5ACE  
                         clear_1 5AE0                           clear_2 5AEC  
                 find_volume@rfs 0045                        ??_chk_chr 0005  
                 find_volume@vol 0080                           _select 5DC4  
                      ??_f_lseek 0073                        ??_f_mount 0057  
                      ??_dir_sdi 0060                        ??_f_write 0075  
                      ??_get_fat 0041                 __end_of_send_cmd 5C22  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                        ??_guardar 0060  
                disk_ioctl@csize 0032                 __end_of_validate 576E  
           __end_of_get_ldnumber 525E                    interruptadc@a 0003  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5D58  
                ??_EUSART1_Write 0001                        ??_put_fat 0045  
                xmit_datablock@i 0007                        ??_sync_fs 003C  
             rcvr_datablock@buff 0002             __CFG_LS48MHZ$SYS24X4 000000  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A  
              _SYSTEM_Initialize 5E0A                     ___xxtofl@val 0001  
                     __accesstop 0060          __end_of__initialization 5AF2  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 54CA                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                    ?_interruptadc 0001  
                   __pidataBANK0 5E6A              ??_SYSTEM_Initialize 0001  
              __end_of_Init8LEDs 5E4E                       ___send_cmd 57F0  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0003               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 5E1C                       __pbssBANK0 00D0  
                     __pbssBANK1 0100                __CFG_PLLSEL$PLL4X 000000  
                 ??_interruptadc 0005                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 0066                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009                          ?_select 0001  
                      ?___xxtofl 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F3C                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 4CAC                          _OSCTUNE 000F9B  
                        _SPBRGH1 000FB0                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080              __end_of___delay_sec 5CD0  
                      ?_dir_next 006D            __size_of_dir_register 00D6  
                      ?_ld_clust 0001                       _clust2sect 54CA  
               sync_window@wsect 002C                        ?_grabador 0001  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
           __size_of_send_string 0032                __end_of_dir_alloc 4FA8  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 5400  
                        ff@FatFs 00DC                       f_close@res 0050  
                        ___fldiv 3C50                  __size_of___lmul 0056  
                      ?_st_clust 0001                          ___flmul 3342  
                    ?___send_cmd 0004                          ___lldiv 576E  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 5C5E              _disk_initialize$134 0017  
          __size_of_get_ldnumber 00DE                          __pcinit 5AA6  
                        _chk_chr 5B52                          _f_lseek 192E  
                        __ramtop 0800                          _f_mount 5584  
                __size_of_select 001E                          __ptext0 5B9A  
                        __ptext1 4B70                          __ptext2 4DBC  
                        __ptext3 5CD0                          __ptext4 5E78  
                        __ptext5 5D58                          __ptext6 11CA  
                        __ptext7 4A30                          __ptext8 3342  
                        __ptext9 3C50                          _dir_sdi 398E  
                    validate@fil 0008                          _f_write 11CA  
                    validate@obj 0002                          _get_fat 2C0A  
                     chk_chr@chr 0003                     _dir_register 525E  
                     chk_chr@str 0001                          _mem_cmp 59DA  
                        _mem_cpy 58F0            _OSCILLATOR_Initialize 5E1C  
                        _mem_set 5D02                          _guardar 4B70  
                     ??___xxtofl 0005                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C               _EUSART1_Initialize 5DE2  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 3694  
                     ??_deselect 0002                       ??_dir_find 0060  
                        _put_fat 23DA                       ??_dir_next 0071  
     __size_of_SYSTEM_Initialize 0012                       f_lseek@bcs 008C  
                     ??_ld_clust 0005                          _sync_fs 4346  
                     f_lseek@ofs 006F                       f_lseek@res 0087  
           end_of_initialization 5AF2                       ??_grabador 0091  
            ?_EUSART1_Initialize 0001                       f_open@mode 009E  
                     f_open@path 009C                   ??_remove_chain 005C  
                  __Lmediumconst 0000                  disk_status@pdrv 0001  
                 _rcvr_datablock 596E                  ___lldiv@divisor 0005  
                     f_mount@cfs 0058                       f_mount@res 0057  
                     ??_send_cmd 000F                       f_mount@opt 0056  
                     f_mount@vol 005C                  ___lldiv@counter 000D  
                   _get_ldnumber 5180                       ??_validate 0004  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0007  
                 move_window@res 003A                        _SPI1_Open 5E4E  
                     _wait_ready 5C22             ??_EUSART1_Initialize 0001  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$624 0011  
                     dir_sdi@idx 0058                      ___delay_sec 5C98  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                  ___xxtofl@sign 0009                       f_write@res 0081  
                    ?_disk_write 0011                       get_fat@val 004C  
                    ___fldiv@grs 003B                      ___fldiv@rem 0034  
           __end_of_interruptadc 5D7E                  get_ldnumber@vol 0009  
                disk_write@count 0017              EUSART1_Write@txData 0001  
                    ?_clust2sect 000D              __size_of___send_cmd 0082  
         __end_of_rcvr_datablock 59DA                    ??_create_name 000D  
               disk_initialize@n 001D                      ___flmul@grs 001C  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5E5C                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 5A40  
                     ?_SPI1_Open 0001                   __end_of___lmul 5B52  
                    st_clust@dir 0001                   __end_of___wmul 5DA4  
                 __end_of_f_open 3342                   __end_of_f_sync 4A30  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                      _Init8LEDs 5E3E                   __end_of_select 5DE2  
           __size_of_sync_window 0158              start_initialization 5AA6  
__size_of_PIN_MANAGER_Initialize 0020                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
          __end_of_EUSART1_Write 5E84                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 415C  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 5AA6  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 415C              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00E4  
            __end_of_find_volume 11CA              __end_of_disk_status 5E0A  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 47A8                       ?_Init8LEDs 0001  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                      ___fldiv@a 002C                        ___fldiv@b 0028  
                    __pbssBIGRAM 0120                        ___flmul@a 0013  
                      ___flmul@b 000F                    __pcstackBANK0 0060  
              __size_of___xxtofl 0140                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5E6A                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
              __size_of_grabador 00FC                  _find_volume$728 0070  
                _find_volume$729 0074           _PIN_MANAGER_Initialize 5DA4  
                ?_xmit_datablock 0004                __size_of_send_cmd 0042  
                       ?___fldiv 0028                     ??___send_cmd 0008  
                       ?___flmul 000F                        _dir_alloc 4EB8  
                       ?___lldiv 0001                __size_of_validate 0094  
              interruptadc@adcin 0001                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 5334  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 48EE  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
          __size_of_interruptadc 0026                      __smallconst 0800  
                       ?_mem_cmp 0001                         ?_mem_cpy 0001  
                       ?_mem_set 0001                         _BAUDCON1 000FB8  
                       ?_guardar 0001                   __size_of_Error 00CA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 4346                         ?_sync_fs 003A  
                    _get_fat$374 004A                find_volume@fasize 008D  
                  ??_send_string 0004              __size_of_wait_ready 003C  
             __end_of___send_cmd 5872                      _create_name 3ED8  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 081C                      _disk_status 5DF8  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                       _PIR1bits 000F9E                    move_window@fs 0030  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                   _interruptadc 5D58                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                       _ADCON0bits 000FC2  
                    ??_Init8LEDs 0001                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00DF  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 5ABA                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                   send_string@x 0002              __end_of_send_string 5D02  
                       __Lrparam 0000                      _follow_path 47A8  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23DA  
          __size_of_remove_chain 014A               __end_of_disk_write 4DBC  
        ??_OSCILLATOR_Initialize 0001                 __size_of___fldiv 0288  
               __size_of___flmul 0352                 __size_of___lldiv 0082  
    __size_of_EUSART1_Initialize 0016              __end_of_move_window 56DA  
             __end_of_clust2sect 5584                 __size_of_f_close 003A  
               __size_of_chk_chr 0048                 __size_of_f_lseek 060E  
               __size_of_f_mount 00B0                 __size_of_dir_sdi 02C2  
               __size_of_f_write 0764                 __size_of_get_fat 03A2  
                       ___xxtofl 4A30                         _check_fs 5094  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 007E  
               __size_of_mem_set 002C                 __size_of_guardar 013C  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5E84                         __ptext10 5400  
                       __ptext11 2FAC                         __ptext20 58F0  
                       __ptext12 465E                         __ptext21 4EB8  
                       __ptext13 47A8                         __ptext30 192E  
                       __ptext22 398E                         __ptext14 5872  
                       __ptext31 3694                         __ptext23 2804  
                       __ptext15 4FA8                         __ptext40 5DF8  
                       __ptext32 23DA                         __ptext24 5584  
                       __ptext16 59DA                         __ptext41 4346  
                       __ptext33 2C0A                         __ptext25 081C  
                       __ptext17 3ED8                         __ptext50 5334  
                       __ptext42 5D02                         __ptext34 54CA  
                       __ptext26 5180                         __ptext18 5B52  
                       __ptext51 5BE0                         __ptext43 1F3C  
                       __ptext35 5AFC                         __ptext27 415C  
                       __ptext19 525E                         __ptext60 5E5C  
                       __ptext52 57F0                         __ptext44 5D7E  
                       __ptext36 576E                         __ptext28 5E4E  
                       __ptext61 5DA4                         __ptext53 5DC4  
                       __ptext45 5D2E                         __ptext37 5C5E  
                       __ptext29 5094                         __ptext62 5E1C  
                       __ptext54 5C22                         __ptext46 5634  
                       __ptext38 48EE                         __ptext63 5DE2  
                       __ptext55 5E84                         __ptext47 4506  
                       __ptext39 56DA                         __ptext64 5E3E  
                       __ptext56 596E                         __ptext48 4CAC  
                       __ptext57 5E2E                         __ptext49 5A40  
                       __ptext58 5C98                         __ptext59 5E0A  
                       _dir_find 4FA8                     _SSP1CON1bits 000FC6  
                       _dir_next 2804                    dir_alloc@nent 0082  
               ?_disk_initialize 0001                         _ld_clust 5872  
               __size_of_put_fat 042A                   sync_window@res 0029  
                       _grabador 4DBC                 __size_of_sync_fs 01C0  
                  __size_of_main 0046                       sync_fs@res 0044  
                   _remove_chain 465E                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5BE0  
                       _validate 56DA                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5D2E  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$143 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0007  
                      put_fat@fs 003B                         mem_cpy@s 0009  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                    _send_string 5CD0                   dir_register@dp 008A  
               ??_xmit_datablock 0007               __end_of_wait_ready 5C5E  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                     _RCSTA1bits 000FAB                        sync_fs@fs 003A  
                    _move_window 5634             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054           __size_of_EUSART1_Write 000C  
                  ?_dir_register 008A                    ___delay_sec@i 0005  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 465E  
                    dir_find@res 0085             __size_of___delay_sec 0038  
                  ?_create_chain 0056                     dir_next@clst 007C  
             __CFG_FOSC$INTOSCIO 000000                      dir_sdi@clst 006D  
 __end_of_PIN_MANAGER_Initialize 5DC4                      dir_sdi@sect 0069  
                   ?_create_name 0009                     f_write@csect 0084  
                   f_write@wbuff 0082                      f_write@buff 006F  
                    f_write@clst 008B                      f_write@sect 0087  
                   ?_find_volume 0045                      f_write@wcnt 008F  
                  ?_get_ldnumber 0001                      _put_fat$400 004D  
                    _put_fat$401 004F                     ?_disk_status 0001  
