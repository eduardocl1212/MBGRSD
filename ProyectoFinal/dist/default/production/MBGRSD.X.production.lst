

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Jun 03 02:42:47 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78  0000                     
    79                           ; Version 2.05
    80                           ; Generated 20/12/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F45K50 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	idataBANK0
   115  005D92                     __pidataBANK0:
   116                           	opt callstack 0
   117                           
   118                           ;initializer for Error@F5055
   119  005D92  7E                 	db	126
   120  005D93  30                 	db	48
   121  005D94  6D                 	db	109
   122  005D95  79                 	db	121
   123  005D96  33                 	db	51
   124  005D97  5B                 	db	91
   125  005D98  5F                 	db	95
   126  005D99  70                 	db	112
   127  005D9A  7F                 	db	127
   128  005D9B  73                 	db	115
   129                           
   130                           ;initializer for _Stat
   131  005D9C  01                 	db	1
   132  0000                     _ANSELA	set	3931
   133  0000                     _ANSELE	set	3935
   134  0000                     _ANSELD	set	3934
   135  0000                     _ANSELB	set	3932
   136  0000                     _ANSELC	set	3933
   137  0000                     _PORTA	set	3968
   138  0000                     _ADCON0bits	set	4034
   139  0000                     _ADRESL	set	4035
   140  0000                     _ADRESH	set	4036
   141  0000                     _PORTC	set	3970
   142  0000                     _ADCON0	set	4034
   143  0000                     _TRISA	set	3986
   144  0000                     _LATA	set	3977
   145  0000                     _ADCON1	set	4033
   146  0000                     _ADCON2	set	4032
   147  0000                     _TRISE	set	3990
   148  0000                     _LATE	set	3981
   149  0000                     _TRISD	set	3989
   150  0000                     _LATD	set	3980
   151  0000                     _TXREG1	set	4013
   152  0000                     _RCREG1	set	4014
   153  0000                     _RCSTA1bits	set	4011
   154  0000                     _PIR1bits	set	3998
   155  0000                     _SPBRGH1	set	4016
   156  0000                     _SPBRG1	set	4015
   157  0000                     _TXSTA1	set	4012
   158  0000                     _RCSTA1	set	4011
   159  0000                     _BAUDCON1	set	4024
   160  0000                     _SSP1STATbits	set	4039
   161  0000                     _SSP1BUF	set	4041
   162  0000                     _SSP1CON1bits	set	4038
   163  0000                     _SSP1ADD	set	4040
   164  0000                     _SSP1CON1	set	4038
   165  0000                     _SSP1STAT	set	4039
   166  0000                     _INTCON2bits	set	4081
   167  0000                     _WPUB	set	3973
   168  0000                     _TRISC	set	3988
   169  0000                     _TRISB	set	3987
   170  0000                     _LATC	set	3979
   171  0000                     _LATB	set	3978
   172  0000                     _ACTCON	set	4021
   173  0000                     _OSCTUNE	set	3995
   174  0000                     _OSCCON2	set	4050
   175  0000                     _OSCCON	set	4051
   176  0000                     _LATBbits	set	3978
   177  0000                     _ADIF	set	31990
   178  0000                     _ADIE	set	31982
   179  0000                     _PEIE	set	32662
   180  0000                     _GIE	set	32663
   181                           
   182                           	psect	smallconst
   183  000800                     __psmallconst:
   184                           	opt callstack 0
   185  000800  00                 	db	0
   186  000801                     STR_1:
   187                           
   188                           ; BSR set to: 15
   189  000801  22                 	db	34
   190  000802  2A                 	db	42
   191  000803  2B                 	db	43
   192  000804  2C                 	db	44
   193  000805  3A                 	db	58	;':'
   194  000806  3B                 	db	59	;';'
   195  000807  3C                 	db	60	;'<'
   196  000808  3D                 	db	61	;'='
   197  000809  3E                 	db	62	;'>'
   198  00080A  3F                 	db	63	;'?'
   199  00080B  5B                 	db	91	;'['
   200  00080C  5D                 	db	93	;']'
   201  00080D  7C                 	db	124
   202  00080E  7F                 	db	127
   203  00080F  00                 	db	0
   204  000810                     STR_5:
   205                           
   206                           ; BSR set to: 15
   207  000810  42                 	db	66	;'B'
   208  000811  65                 	db	101	;'e'
   209  000812  65                 	db	101	;'e'
   210  000813  44                 	db	68	;'D'
   211  000814  65                 	db	101	;'e'
   212  000815  76                 	db	118	;'v'
   213  000816  2E                 	db	46
   214  000817  74                 	db	116	;'t'
   215  000818  78                 	db	120	;'x'
   216  000819  74                 	db	116	;'t'
   217  00081A  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00081B  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  005A6C                     __pcinit:
   224                           	opt callstack 0
   225  005A6C                     start_initialization:
   226                           	opt callstack 0
   227  005A6C                     __initialization:
   228                           	opt callstack 0
   229                           
   230                           ; Initialize objects allocated to BANK0 (11 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  005A6C  0E92               	movlw	low __pidataBANK0
   233  005A6E  6EF6               	movwf	tblptrl,c
   234  005A70  0E5D               	movlw	high __pidataBANK0
   235  005A72  6EF7               	movwf	tblptrh,c
   236  005A74  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  005A76  6EF8               	movwf	tblptru,c
   238  005A78  EE00  F0E8         	lfsr	0,__pdataBANK0
   239  005A7C  EE10 F00B          	lfsr	1,11
   240  005A80                     copy_data0:
   241  005A80  0009               	tblrd		*+
   242  005A82  CFF5 FFEE          	movff	tablat,postinc0
   243  005A86  50E5               	movf	postdec1,w,c
   244  005A88  50E1               	movf	fsr1l,w,c
   245  005A8A  E1FA               	bnz	copy_data0
   246                           
   247                           ; Clear objects allocated to BIGRAM (558 bytes)
   248  005A8C  EE01  F020         	lfsr	0,__pbssBIGRAM
   249  005A90  EE12 F02E          	lfsr	1,558
   250  005A94                     clear_0:
   251  005A94  6AEE               	clrf	postinc0,c
   252  005A96  50E5               	movf	postdec1,w,c
   253  005A98  50E1               	movf	fsr1l,w,c
   254  005A9A  E1FC               	bnz	clear_0
   255  005A9C  50E2               	movf	fsr1h,w,c
   256  005A9E  E1FA               	bnz	clear_0
   257                           
   258                           ; Clear objects allocated to BANK1 (32 bytes)
   259  005AA0  EE01  F000         	lfsr	0,__pbssBANK1
   260  005AA4  0E20               	movlw	32
   261  005AA6                     clear_1:
   262  005AA6  6AEE               	clrf	postinc0,c
   263  005AA8  06E8               	decf	wreg,f,c
   264  005AAA  E1FD               	bnz	clear_1
   265                           
   266                           ; Clear objects allocated to BANK0 (24 bytes)
   267  005AAC  EE00  F0D0         	lfsr	0,__pbssBANK0
   268  005AB0  0E18               	movlw	24
   269  005AB2                     clear_2:
   270  005AB2  6AEE               	clrf	postinc0,c
   271  005AB4  06E8               	decf	wreg,f,c
   272  005AB6  E1FD               	bnz	clear_2
   273  005AB8                     end_of_initialization:
   274                           	opt callstack 0
   275  005AB8                     __end_of__initialization:
   276                           	opt callstack 0
   277  005AB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  005ABA  6EF8               	movwf	tblptru,c
   279  005ABC  0100               	movlb	0
   280  005ABE  EF33  F02C         	goto	_main	;jump to C main() function
   281                           
   282                           	psect	bssBANK0
   283  0000D0                     __pbssBANK0:
   284                           	opt callstack 0
   285  0000D0                     _volt:
   286                           	opt callstack 0
   287  0000D0                     	ds	4
   288  0000D4                     _b:
   289                           	opt callstack 0
   290  0000D4                     	ds	2
   291  0000D6                     _a:
   292                           	opt callstack 0
   293  0000D6                     	ds	2
   294  0000D8                     _adcin:
   295                           	opt callstack 0
   296  0000D8                     	ds	2
   297  0000DA                     _Fsid:
   298                           	opt callstack 0
   299  0000DA                     	ds	2
   300  0000DC                     ff@FatFs:
   301                           	opt callstack 0
   302  0000DC                     	ds	2
   303  0000DE                     _data:
   304                           	opt callstack 0
   305  0000DE                     	ds	1
   306  0000DF                     _CardType:
   307                           	opt callstack 0
   308  0000DF                     	ds	1
   309  0000E0                     _push:
   310                           	opt callstack 0
   311  0000E0                     	ds	2
   312  0000E2                     _ND:
   313                           	opt callstack 0
   314  0000E2                     	ds	2
   315  0000E4                     _br:
   316                           	opt callstack 0
   317  0000E4                     	ds	2
   318  0000E6                     _bw:
   319                           	opt callstack 0
   320  0000E6                     	ds	2
   321                           
   322                           	psect	dataBANK0
   323  0000E8                     __pdataBANK0:
   324                           	opt callstack 0
   325  0000E8                     Error@F5055:
   326                           	opt callstack 0
   327  0000E8                     	ds	10
   328  0000F2                     _Stat:
   329                           	opt callstack 0
   330  0000F2                     	ds	1
   331                           
   332                           	psect	bssBANK1
   333  000100                     __pbssBANK1:
   334                           	opt callstack 0
   335  000100                     _Fil:
   336                           	opt callstack 0
   337  000100                     	ds	32
   338                           
   339                           	psect	bssBIGRAM
   340  000120                     __pbssBIGRAM:
   341                           	opt callstack 0
   342  000120                     _FatFs:
   343                           	opt callstack 0
   344  000120                     	ds	558
   345                           
   346                           	psect	cstackBANK0
   347  000060                     __pcstackBANK0:
   348                           	opt callstack 0
   349  000060                     ??_dir_sdi:
   350  000060                     ??_f_read:
   351  000060                     remove_chain@res:
   352                           	opt callstack 0
   353  000060                     create_chain@res:
   354                           	opt callstack 0
   355  000060                     find_volume@br:
   356                           	opt callstack 0
   357                           
   358                           ; 16 bytes @ 0x0
   359  000060                     	ds	1
   360  000061                     remove_chain@nxt:
   361                           	opt callstack 0
   362  000061                     create_chain@scl:
   363                           	opt callstack 0
   364                           
   365                           ; 4 bytes @ 0x1
   366  000061                     	ds	4
   367  000065                     create_chain@ncl:
   368                           	opt callstack 0
   369                           
   370                           ; 4 bytes @ 0x5
   371  000065                     	ds	2
   372  000067                     dir_sdi@ic:
   373                           	opt callstack 0
   374                           
   375                           ; 2 bytes @ 0x7
   376  000067                     	ds	2
   377  000069                     create_chain@cs:
   378                           	opt callstack 0
   379  000069                     dir_sdi@sect:
   380                           	opt callstack 0
   381                           
   382                           ; 4 bytes @ 0x9
   383  000069                     	ds	3
   384  00006C                     f_read@res:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0xC
   388  00006C                     	ds	1
   389  00006D                     dir_next@dp:
   390                           	opt callstack 0
   391  00006D                     f_write@fp:
   392                           	opt callstack 0
   393  00006D                     f_lseek@fp:
   394                           	opt callstack 0
   395  00006D                     dir_sdi@clst:
   396                           	opt callstack 0
   397  00006D                     f_read@remain:
   398                           	opt callstack 0
   399                           
   400                           ; 4 bytes @ 0xD
   401  00006D                     	ds	2
   402  00006F                     dir_next@stretch:
   403                           	opt callstack 0
   404  00006F                     f_write@buff:
   405                           	opt callstack 0
   406  00006F                     f_lseek@ofs:
   407                           	opt callstack 0
   408                           
   409                           ; 4 bytes @ 0xF
   410  00006F                     	ds	1
   411  000070                     _find_volume$728:
   412                           	opt callstack 0
   413                           
   414                           ; 4 bytes @ 0x10
   415  000070                     	ds	1
   416  000071                     ??_dir_next:
   417  000071                     f_write@btw:
   418                           	opt callstack 0
   419  000071                     f_read@clst:
   420                           	opt callstack 0
   421                           
   422                           ; 4 bytes @ 0x11
   423  000071                     	ds	2
   424  000073                     ??_f_lseek:
   425  000073                     f_write@bw:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x13
   429  000073                     	ds	1
   430  000074                     _find_volume$729:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x14
   434  000074                     	ds	1
   435  000075                     ??_f_write:
   436  000075                     f_read@rbuff:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x15
   440  000075                     	ds	1
   441  000076                     find_volume@szbfat:
   442                           	opt callstack 0
   443                           
   444                           ; 4 bytes @ 0x16
   445  000076                     	ds	1
   446  000077                     f_read@csect:
   447                           	opt callstack 0
   448                           
   449                           ; 1 bytes @ 0x17
   450  000077                     	ds	1
   451  000078                     dir_next@c:
   452                           	opt callstack 0
   453  000078                     f_read@sect:
   454                           	opt callstack 0
   455                           
   456                           ; 4 bytes @ 0x18
   457  000078                     	ds	2
   458  00007A                     dir_next@i:
   459                           	opt callstack 0
   460  00007A                     find_volume@pt:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x1A
   464  00007A                     	ds	2
   465  00007C                     f_read@cc:
   466                           	opt callstack 0
   467  00007C                     dir_next@clst:
   468                           	opt callstack 0
   469  00007C                     find_volume@sysect:
   470                           	opt callstack 0
   471                           
   472                           ; 4 bytes @ 0x1C
   473  00007C                     	ds	2
   474  00007E                     f_read@rcnt:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x1E
   478  00007E                     	ds	2
   479  000080                     dir_alloc@dp:
   480                           	opt callstack 0
   481  000080                     dir_find@dp:
   482                           	opt callstack 0
   483  000080                     find_volume@vol:
   484                           	opt callstack 0
   485  000080                     reproductor@j:
   486                           	opt callstack 0
   487                           
   488                           ; 2 bytes @ 0x20
   489  000080                     	ds	1
   490  000081                     f_write@res:
   491                           	opt callstack 0
   492                           
   493                           ; 1 bytes @ 0x21
   494  000081                     	ds	1
   495  000082                     dir_find@c:
   496                           	opt callstack 0
   497  000082                     dir_alloc@nent:
   498                           	opt callstack 0
   499  000082                     find_volume@nrsv:
   500                           	opt callstack 0
   501  000082                     f_write@wbuff:
   502                           	opt callstack 0
   503  000082                     reproductor@i:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x22
   507  000082                     	ds	1
   508  000083                     dir_find@dir:
   509                           	opt callstack 0
   510  000083                     f_lseek@ifptr:
   511                           	opt callstack 0
   512                           
   513                           ; 4 bytes @ 0x23
   514  000083                     	ds	1
   515  000084                     ??_dir_alloc:
   516  000084                     f_write@csect:
   517                           	opt callstack 0
   518  000084                     reproductor@i_1722:
   519                           	opt callstack 0
   520  000084                     find_volume@tsect:
   521                           	opt callstack 0
   522                           
   523                           ; 4 bytes @ 0x24
   524  000084                     	ds	1
   525  000085                     dir_find@res:
   526                           	opt callstack 0
   527  000085                     f_write@cc:
   528                           	opt callstack 0
   529                           
   530                           ; 2 bytes @ 0x25
   531  000085                     	ds	1
   532  000086                     reproductor@c:
   533                           	opt callstack 0
   534  000086                     follow_path@dp:
   535                           	opt callstack 0
   536                           
   537                           ; 2 bytes @ 0x26
   538  000086                     	ds	1
   539  000087                     f_lseek@res:
   540                           	opt callstack 0
   541  000087                     dir_alloc@n:
   542                           	opt callstack 0
   543  000087                     f_write@sect:
   544                           	opt callstack 0
   545                           
   546                           ; 4 bytes @ 0x27
   547  000087                     	ds	1
   548  000088                     follow_path@path:
   549                           	opt callstack 0
   550  000088                     find_volume@nclst:
   551                           	opt callstack 0
   552  000088                     f_lseek@nsect:
   553                           	opt callstack 0
   554                           
   555                           ; 4 bytes @ 0x28
   556  000088                     	ds	1
   557  000089                     dir_alloc@res:
   558                           	opt callstack 0
   559                           
   560                           ; 1 bytes @ 0x29
   561  000089                     	ds	1
   562  00008A                     dir_register@dp:
   563                           	opt callstack 0
   564  00008A                     follow_path@dir:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0x2A
   568  00008A                     	ds	1
   569  00008B                     f_write@clst:
   570                           	opt callstack 0
   571                           
   572                           ; 4 bytes @ 0x2B
   573  00008B                     	ds	1
   574  00008C                     dir_register@res:
   575                           	opt callstack 0
   576  00008C                     follow_path@ns:
   577                           	opt callstack 0
   578  00008C                     find_volume@stat:
   579                           	opt callstack 0
   580  00008C                     f_lseek@bcs:
   581                           	opt callstack 0
   582                           
   583                           ; 4 bytes @ 0x2C
   584  00008C                     	ds	1
   585  00008D                     follow_path@res:
   586                           	opt callstack 0
   587  00008D                     find_volume@fasize:
   588                           	opt callstack 0
   589                           
   590                           ; 4 bytes @ 0x2D
   591  00008D                     	ds	2
   592  00008F                     f_write@wcnt:
   593                           	opt callstack 0
   594                           
   595                           ; 2 bytes @ 0x2F
   596  00008F                     	ds	1
   597  000090                     f_lseek@clst:
   598                           	opt callstack 0
   599                           
   600                           ; 4 bytes @ 0x30
   601  000090                     	ds	1
   602  000091                     find_volume@bsect:
   603                           	opt callstack 0
   604                           
   605                           ; 4 bytes @ 0x31
   606  000091                     	ds	2
   607  000093                     grabador@j:
   608                           	opt callstack 0
   609                           
   610                           ; 2 bytes @ 0x33
   611  000093                     	ds	2
   612  000095                     find_volume@i:
   613                           	opt callstack 0
   614  000095                     grabador@a:
   615                           	opt callstack 0
   616                           
   617                           ; 2 bytes @ 0x35
   618  000095                     	ds	2
   619  000097                     find_volume@fmt:
   620                           	opt callstack 0
   621                           
   622                           ; 1 bytes @ 0x37
   623  000097                     	ds	1
   624  000098                     find_volume@fs:
   625                           	opt callstack 0
   626                           
   627                           ; 2 bytes @ 0x38
   628  000098                     	ds	2
   629  00009A                     f_open@fp:
   630                           	opt callstack 0
   631                           
   632                           ; 2 bytes @ 0x3A
   633  00009A                     	ds	2
   634  00009C                     f_open@path:
   635                           	opt callstack 0
   636                           
   637                           ; 2 bytes @ 0x3C
   638  00009C                     	ds	2
   639  00009E                     f_open@mode:
   640                           	opt callstack 0
   641                           
   642                           ; 1 bytes @ 0x3E
   643  00009E                     	ds	1
   644  00009F                     ??_f_open:
   645                           
   646                           ; 1 bytes @ 0x3F
   647  00009F                     	ds	4
   648  0000A3                     f_open@sfn:
   649                           	opt callstack 0
   650                           
   651                           ; 12 bytes @ 0x43
   652  0000A3                     	ds	12
   653  0000AF                     f_open@cl:
   654                           	opt callstack 0
   655                           
   656                           ; 4 bytes @ 0x4F
   657  0000AF                     	ds	4
   658  0000B3                     f_open@dw:
   659                           	opt callstack 0
   660                           
   661                           ; 4 bytes @ 0x53
   662  0000B3                     	ds	4
   663  0000B7                     f_open@res:
   664                           	opt callstack 0
   665                           
   666                           ; 1 bytes @ 0x57
   667  0000B7                     	ds	1
   668  0000B8                     f_open@dir:
   669                           	opt callstack 0
   670                           
   671                           ; 2 bytes @ 0x58
   672  0000B8                     	ds	2
   673  0000BA                     f_open@dj:
   674                           	opt callstack 0
   675                           
   676                           ; 22 bytes @ 0x5A
   677  0000BA                     	ds	22
   678                           
   679                           	psect	cstackCOMRAM
   680  000001                     __pcstackCOMRAM:
   681                           	opt callstack 0
   682  000001                     ??___delay_sec:
   683  000001                     ?_mem_cmp:
   684                           	opt callstack 0
   685  000001                     ?_chk_chr:
   686                           	opt callstack 0
   687  000001                     ?_get_ldnumber:
   688                           	opt callstack 0
   689  000001                     ?___wmul:
   690                           	opt callstack 0
   691  000001                     ?_ld_clust:
   692                           	opt callstack 0
   693  000001                     ?___lmul:
   694                           	opt callstack 0
   695  000001                     ?___lldiv:
   696                           	opt callstack 0
   697  000001                     disk_status@pdrv:
   698                           	opt callstack 0
   699  000001                     SPI1_Exchange8bit@data:
   700                           	opt callstack 0
   701  000001                     mem_cpy@dst:
   702                           	opt callstack 0
   703  000001                     mem_set@dst:
   704                           	opt callstack 0
   705  000001                     mem_cmp@dst:
   706                           	opt callstack 0
   707  000001                     chk_chr@str:
   708                           	opt callstack 0
   709  000001                     ld_clust@fs:
   710                           	opt callstack 0
   711  000001                     st_clust@dir:
   712                           	opt callstack 0
   713  000001                     get_ldnumber@path:
   714                           	opt callstack 0
   715  000001                     Error@a:
   716                           	opt callstack 0
   717  000001                     ___wmul@multiplier:
   718                           	opt callstack 0
   719  000001                     ___lmul@multiplier:
   720                           	opt callstack 0
   721  000001                     ___lldiv@dividend:
   722                           	opt callstack 0
   723                           
   724                           ; 4 bytes @ 0x0
   725  000001                     	ds	1
   726  000002                     wait_ready@tmr:
   727                           	opt callstack 0
   728  000002                     rcvr_datablock@buff:
   729                           	opt callstack 0
   730  000002                     validate@obj:
   731                           	opt callstack 0
   732                           
   733                           ; 2 bytes @ 0x1
   734  000002                     	ds	1
   735  000003                     ??_get_ldnumber:
   736  000003                     ??_Error:
   737  000003                     mem_cpy@src:
   738                           	opt callstack 0
   739  000003                     mem_set@val:
   740                           	opt callstack 0
   741  000003                     mem_cmp@src:
   742                           	opt callstack 0
   743  000003                     chk_chr@chr:
   744                           	opt callstack 0
   745  000003                     ld_clust@dir:
   746                           	opt callstack 0
   747  000003                     ___wmul@multiplicand:
   748                           	opt callstack 0
   749  000003                     st_clust@cl:
   750                           	opt callstack 0
   751                           
   752                           ; 4 bytes @ 0x2
   753  000003                     	ds	1
   754  000004                     ??_validate:
   755  000004                     ___delay_sec@sec:
   756                           	opt callstack 0
   757  000004                     rcvr_datablock@btr:
   758                           	opt callstack 0
   759  000004                     xmit_datablock@buff:
   760                           	opt callstack 0
   761  000004                     ___send_cmd@arg:
   762                           	opt callstack 0
   763  000004                     Error@v_seg:
   764                           	opt callstack 0
   765                           
   766                           ; 10 bytes @ 0x3
   767  000004                     	ds	1
   768  000005                     ??_chk_chr:
   769  000005                     ??_ld_clust:
   770  000005                     ___delay_sec@i:
   771                           	opt callstack 0
   772  000005                     mem_cpy@cnt:
   773                           	opt callstack 0
   774  000005                     mem_set@cnt:
   775                           	opt callstack 0
   776  000005                     mem_cmp@cnt:
   777                           	opt callstack 0
   778  000005                     ___wmul@product:
   779                           	opt callstack 0
   780  000005                     ___lmul@multiplicand:
   781                           	opt callstack 0
   782  000005                     ___lldiv@divisor:
   783                           	opt callstack 0
   784                           
   785                           ; 4 bytes @ 0x4
   786  000005                     	ds	1
   787  000006                     xmit_datablock@token:
   788                           	opt callstack 0
   789  000006                     rcvr_datablock@tmr:
   790                           	opt callstack 0
   791                           
   792                           ; 2 bytes @ 0x5
   793  000006                     	ds	1
   794  000007                     ??_mem_cmp:
   795  000007                     xmit_datablock@i:
   796                           	opt callstack 0
   797  000007                     mem_cpy@d:
   798                           	opt callstack 0
   799  000007                     mem_set@d:
   800                           	opt callstack 0
   801  000007                     get_ldnumber@tp:
   802                           	opt callstack 0
   803                           
   804                           ; 2 bytes @ 0x6
   805  000007                     	ds	1
   806  000008                     rcvr_datablock@token:
   807                           	opt callstack 0
   808  000008                     ___send_cmd@res:
   809                           	opt callstack 0
   810  000008                     validate@fil:
   811                           	opt callstack 0
   812                           
   813                           ; 2 bytes @ 0x7
   814  000008                     	ds	1
   815  000009                     xmit_datablock@resp:
   816                           	opt callstack 0
   817  000009                     ___send_cmd@n:
   818                           	opt callstack 0
   819  000009                     mem_cpy@s:
   820                           	opt callstack 0
   821  000009                     mem_cmp@d:
   822                           	opt callstack 0
   823  000009                     create_name@dp:
   824                           	opt callstack 0
   825  000009                     get_ldnumber@vol:
   826                           	opt callstack 0
   827  000009                     ___lmul@product:
   828                           	opt callstack 0
   829  000009                     ___lldiv@quotient:
   830                           	opt callstack 0
   831                           
   832                           ; 4 bytes @ 0x8
   833  000009                     	ds	1
   834  00000A                     ___send_cmd@cmd:
   835                           	opt callstack 0
   836                           
   837                           ; 1 bytes @ 0x9
   838  00000A                     	ds	1
   839  00000B                     mem_cmp@s:
   840                           	opt callstack 0
   841  00000B                     create_name@path:
   842                           	opt callstack 0
   843  00000B                     get_ldnumber@i:
   844                           	opt callstack 0
   845  00000B                     send_cmd@arg:
   846                           	opt callstack 0
   847  00000B                     ld_clust@cl:
   848                           	opt callstack 0
   849                           
   850                           ; 4 bytes @ 0xA
   851  00000B                     	ds	2
   852  00000D                     ??_create_name:
   853  00000D                     ?_clust2sect:
   854                           	opt callstack 0
   855  00000D                     ___lldiv@counter:
   856                           	opt callstack 0
   857  00000D                     mem_cmp@r:
   858                           	opt callstack 0
   859  00000D                     clust2sect@fs:
   860                           	opt callstack 0
   861  00000D                     get_ldnumber@tt:
   862                           	opt callstack 0
   863                           
   864                           ; 2 bytes @ 0xC
   865  00000D                     	ds	2
   866  00000F                     send_cmd@cmd:
   867                           	opt callstack 0
   868  00000F                     clust2sect@clst:
   869                           	opt callstack 0
   870                           
   871                           ; 4 bytes @ 0xE
   872  00000F                     	ds	1
   873  000010                     send_cmd@res:
   874                           	opt callstack 0
   875                           
   876                           ; 1 bytes @ 0xF
   877  000010                     	ds	1
   878  000011                     ??_disk_initialize:
   879  000011                     disk_ioctl@cmd:
   880                           	opt callstack 0
   881  000011                     disk_read@buff:
   882                           	opt callstack 0
   883  000011                     disk_write@buff:
   884                           	opt callstack 0
   885  000011                     _create_name$624:
   886                           	opt callstack 0
   887                           
   888                           ; 2 bytes @ 0x10
   889  000011                     	ds	1
   890  000012                     disk_initialize@pdrv:
   891                           	opt callstack 0
   892  000012                     disk_ioctl@buff:
   893                           	opt callstack 0
   894                           
   895                           ; 2 bytes @ 0x11
   896  000012                     	ds	1
   897  000013                     ??_clust2sect:
   898  000013                     create_name@si:
   899                           	opt callstack 0
   900  000013                     disk_initialize@ocr:
   901                           	opt callstack 0
   902  000013                     disk_read@sector:
   903                           	opt callstack 0
   904  000013                     disk_write@sector:
   905                           	opt callstack 0
   906                           
   907                           ; 4 bytes @ 0x12
   908  000013                     	ds	1
   909  000014                     ??_disk_ioctl:
   910                           
   911                           ; 1 bytes @ 0x13
   912  000014                     	ds	1
   913  000015                     create_name@b:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x14
   917  000015                     	ds	1
   918  000016                     create_name@ni:
   919                           	opt callstack 0
   920                           
   921                           ; 2 bytes @ 0x15
   922  000016                     	ds	1
   923  000017                     _disk_initialize$134:
   924                           	opt callstack 0
   925  000017                     disk_read@count:
   926                           	opt callstack 0
   927  000017                     disk_write@count:
   928                           	opt callstack 0
   929                           
   930                           ; 2 bytes @ 0x16
   931  000017                     	ds	1
   932  000018                     create_name@p:
   933                           	opt callstack 0
   934                           
   935                           ; 2 bytes @ 0x17
   936  000018                     	ds	1
   937  000019                     ??_disk_write:
   938  000019                     disk_initialize@cmd:
   939                           	opt callstack 0
   940  000019                     disk_read@pdrv:
   941                           	opt callstack 0
   942                           
   943                           ; 1 bytes @ 0x18
   944  000019                     	ds	1
   945  00001A                     disk_initialize@ty:
   946                           	opt callstack 0
   947  00001A                     disk_write@pdrv:
   948                           	opt callstack 0
   949  00001A                     create_name@d:
   950                           	opt callstack 0
   951  00001A                     _disk_read$143:
   952                           	opt callstack 0
   953                           
   954                           ; 2 bytes @ 0x19
   955  00001A                     	ds	1
   956  00001B                     disk_initialize@tmr:
   957                           	opt callstack 0
   958  00001B                     sync_window@fs:
   959                           	opt callstack 0
   960  00001B                     create_name@sfn:
   961                           	opt callstack 0
   962                           
   963                           ; 2 bytes @ 0x1A
   964  00001B                     	ds	1
   965  00001C                     disk_read@cmd:
   966                           	opt callstack 0
   967                           
   968                           ; 1 bytes @ 0x1B
   969  00001C                     	ds	1
   970  00001D                     ??_sync_window:
   971  00001D                     disk_initialize@n:
   972                           	opt callstack 0
   973  00001D                     create_name@i:
   974                           	opt callstack 0
   975                           
   976                           ; 2 bytes @ 0x1C
   977  00001D                     	ds	2
   978  00001F                     create_name@c:
   979                           	opt callstack 0
   980                           
   981                           ; 1 bytes @ 0x1E
   982  00001F                     	ds	2
   983  000021                     disk_ioctl@csd:
   984                           	opt callstack 0
   985                           
   986                           ; 16 bytes @ 0x20
   987  000021                     	ds	8
   988  000029                     sync_window@res:
   989                           	opt callstack 0
   990                           
   991                           ; 1 bytes @ 0x28
   992  000029                     	ds	1
   993  00002A                     sync_window@nf:
   994                           	opt callstack 0
   995                           
   996                           ; 2 bytes @ 0x29
   997  00002A                     	ds	2
   998  00002C                     sync_window@wsect:
   999                           	opt callstack 0
  1000                           
  1001                           ; 4 bytes @ 0x2B
  1002  00002C                     	ds	4
  1003  000030                     move_window@fs:
  1004                           	opt callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x2F
  1007  000030                     	ds	1
  1008  000031                     disk_ioctl@pdrv:
  1009                           	opt callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x30
  1012  000031                     	ds	1
  1013  000032                     disk_ioctl@csize:
  1014                           	opt callstack 0
  1015  000032                     move_window@sector:
  1016                           	opt callstack 0
  1017                           
  1018                           ; 4 bytes @ 0x31
  1019  000032                     	ds	4
  1020  000036                     disk_ioctl@res:
  1021                           	opt callstack 0
  1022                           
  1023                           ; 1 bytes @ 0x35
  1024  000036                     	ds	1
  1025  000037                     disk_ioctl@n:
  1026                           	opt callstack 0
  1027                           
  1028                           ; 1 bytes @ 0x36
  1029  000037                     	ds	1
  1030  000038                     disk_ioctl@ptr:
  1031                           	opt callstack 0
  1032                           
  1033                           ; 2 bytes @ 0x37
  1034  000038                     	ds	2
  1035  00003A                     move_window@res:
  1036                           	opt callstack 0
  1037  00003A                     sync_fs@fs:
  1038                           	opt callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x39
  1041  00003A                     	ds	1
  1042  00003B                     ?_get_fat:
  1043                           	opt callstack 0
  1044  00003B                     get_fat@fs:
  1045                           	opt callstack 0
  1046  00003B                     put_fat@fs:
  1047                           	opt callstack 0
  1048  00003B                     check_fs@fs:
  1049                           	opt callstack 0
  1050                           
  1051                           ; 2 bytes @ 0x3A
  1052  00003B                     	ds	1
  1053  00003C                     ??_sync_fs:
  1054                           
  1055                           ; 1 bytes @ 0x3B
  1056  00003C                     	ds	1
  1057  00003D                     get_fat@clst:
  1058                           	opt callstack 0
  1059  00003D                     put_fat@clst:
  1060                           	opt callstack 0
  1061  00003D                     check_fs@sect:
  1062                           	opt callstack 0
  1063                           
  1064                           ; 4 bytes @ 0x3C
  1065  00003D                     	ds	4
  1066  000041                     ??_get_fat:
  1067  000041                     ??_check_fs:
  1068  000041                     put_fat@val:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 4 bytes @ 0x40
  1072  000041                     	ds	3
  1073  000044                     sync_fs@res:
  1074                           	opt callstack 0
  1075                           
  1076                           ; 1 bytes @ 0x43
  1077  000044                     	ds	1
  1078  000045                     ??_put_fat:
  1079  000045                     find_volume@rfs:
  1080                           	opt callstack 0
  1081  000045                     f_sync@fp:
  1082                           	opt callstack 0
  1083                           
  1084                           ; 2 bytes @ 0x44
  1085  000045                     	ds	2
  1086  000047                     find_volume@path:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x46
  1090  000047                     	ds	2
  1091  000049                     find_volume@wmode:
  1092                           	opt callstack 0
  1093                           
  1094                           ; 1 bytes @ 0x48
  1095  000049                     	ds	1
  1096  00004A                     ??_find_volume:
  1097  00004A                     _get_fat$374:
  1098                           	opt callstack 0
  1099                           
  1100                           ; 2 bytes @ 0x49
  1101  00004A                     	ds	1
  1102  00004B                     f_sync@res:
  1103                           	opt callstack 0
  1104                           
  1105                           ; 1 bytes @ 0x4A
  1106  00004B                     	ds	1
  1107  00004C                     f_sync@dir:
  1108                           	opt callstack 0
  1109  00004C                     get_fat@val:
  1110                           	opt callstack 0
  1111                           
  1112                           ; 4 bytes @ 0x4B
  1113  00004C                     	ds	1
  1114  00004D                     _put_fat$400:
  1115                           	opt callstack 0
  1116                           
  1117                           ; 2 bytes @ 0x4C
  1118  00004D                     	ds	1
  1119  00004E                     f_close@fp:
  1120                           	opt callstack 0
  1121                           
  1122                           ; 2 bytes @ 0x4D
  1123  00004E                     	ds	1
  1124  00004F                     _put_fat$401:
  1125                           	opt callstack 0
  1126                           
  1127                           ; 2 bytes @ 0x4E
  1128  00004F                     	ds	1
  1129  000050                     f_close@res:
  1130                           	opt callstack 0
  1131  000050                     get_fat@wc:
  1132                           	opt callstack 0
  1133                           
  1134                           ; 2 bytes @ 0x4F
  1135  000050                     	ds	1
  1136  000051                     put_fat@bc:
  1137                           	opt callstack 0
  1138                           
  1139                           ; 2 bytes @ 0x50
  1140  000051                     	ds	1
  1141  000052                     get_fat@p:
  1142                           	opt callstack 0
  1143  000052                     f_mount@fs:
  1144                           	opt callstack 0
  1145                           
  1146                           ; 2 bytes @ 0x51
  1147  000052                     	ds	1
  1148  000053                     put_fat@res:
  1149                           	opt callstack 0
  1150                           
  1151                           ; 1 bytes @ 0x52
  1152  000053                     	ds	1
  1153  000054                     get_fat@bc:
  1154                           	opt callstack 0
  1155  000054                     put_fat@p:
  1156                           	opt callstack 0
  1157  000054                     f_mount@path:
  1158                           	opt callstack 0
  1159                           
  1160                           ; 2 bytes @ 0x53
  1161  000054                     	ds	2
  1162  000056                     ?_create_chain:
  1163                           	opt callstack 0
  1164  000056                     f_mount@opt:
  1165                           	opt callstack 0
  1166  000056                     remove_chain@fs:
  1167                           	opt callstack 0
  1168  000056                     create_chain@fs:
  1169                           	opt callstack 0
  1170  000056                     dir_sdi@dp:
  1171                           	opt callstack 0
  1172  000056                     f_read@fp:
  1173                           	opt callstack 0
  1174                           
  1175                           ; 2 bytes @ 0x55
  1176  000056                     	ds	1
  1177  000057                     f_mount@res:
  1178                           	opt callstack 0
  1179                           
  1180                           ; 1 bytes @ 0x56
  1181  000057                     	ds	1
  1182  000058                     dir_sdi@idx:
  1183                           	opt callstack 0
  1184  000058                     f_mount@cfs:
  1185                           	opt callstack 0
  1186  000058                     f_read@buff:
  1187                           	opt callstack 0
  1188  000058                     remove_chain@clst:
  1189                           	opt callstack 0
  1190  000058                     create_chain@clst:
  1191                           	opt callstack 0
  1192                           
  1193                           ; 4 bytes @ 0x57
  1194  000058                     	ds	2
  1195  00005A                     f_mount@rp:
  1196                           	opt callstack 0
  1197  00005A                     f_read@btr:
  1198                           	opt callstack 0
  1199                           
  1200                           ; 2 bytes @ 0x59
  1201  00005A                     	ds	2
  1202  00005C                     f_mount@vol:
  1203                           	opt callstack 0
  1204  00005C                     f_read@br:
  1205                           	opt callstack 0
  1206                           
  1207                           ; 2 bytes @ 0x5B
  1208  00005C                     	ds	2
  1209  00005E                     
  1210                           ; 1 bytes @ 0x5D
  1211  00005E                     	ds	2
  1212  000060                     
  1213                           ; 1 bytes @ 0x5F
  1214 ;;
  1215 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1216 ;;
  1217 ;; *************** function _main *****************
  1218 ;; Defined at:
  1219 ;;		line 116 in file "Main.c"
  1220 ;; Parameters:    Size  Location     Type
  1221 ;;		None
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;		None
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1233 ;;      Params:         0       0       0       0       0       0       0       0       0
  1234 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1236 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1237 ;;Total ram usage:        0 bytes
  1238 ;; Hardware stack levels required when called:   15
  1239 ;; This function calls:
  1240 ;;		_Error
  1241 ;;		_Init8LEDs
  1242 ;;		_SYSTEM_Initialize
  1243 ;;		_guardar
  1244 ;;		_reproducir
  1245 ;; This function is called by:
  1246 ;;		Startup code after reset
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text0
  1251  005866                     __ptext0:
  1252                           	opt callstack 0
  1253  005866                     _main:
  1254                           	opt callstack 16
  1255                           
  1256                           ;Main.c: 119:     SYSTEM_Initialize();
  1257                           
  1258                           ;incstack = 0
  1259  005866  EC99  F02E         	call	_SYSTEM_Initialize	;wreg free
  1260                           
  1261                           ;Main.c: 122:     Init8LEDs();
  1262  00586A  ECB3  F02E         	call	_Init8LEDs	;wreg free
  1263                           
  1264                           ;Main.c: 124:     OSCCON = 0x53;
  1265  00586E  0E53               	movlw	83
  1266  005870  6ED3               	movwf	4051,c	;volatile
  1267                           
  1268                           ;Main.c: 125:     ADCON2 = 0x14;
  1269  005872  0E14               	movlw	20
  1270  005874  6EC0               	movwf	4032,c	;volatile
  1271                           
  1272                           ;Main.c: 126:     ADCON1 = 0x00;
  1273  005876  0E00               	movlw	0
  1274  005878  6EC1               	movwf	4033,c	;volatile
  1275                           
  1276                           ;Main.c: 127:     LATA = 0x00;
  1277  00587A  0E00               	movlw	0
  1278  00587C  6E89               	movwf	3977,c	;volatile
  1279                           
  1280                           ;Main.c: 128:     TRISA = 0x00;
  1281  00587E  0E00               	movlw	0
  1282  005880  6E92               	movwf	3986,c	;volatile
  1283                           
  1284                           ;Main.c: 129:     ANSELA = 0x00;
  1285  005882  0E00               	movlw	0
  1286  005884  010F               	movlb	15	; () banked
  1287  005886  6F5B               	movwf	91,b	;volatile
  1288                           
  1289                           ; BSR set to: 15
  1290                           ;Main.c: 130:     TRISC = 0x07;
  1291  005888  0E07               	movlw	7
  1292  00588A  6E94               	movwf	3988,c	;volatile
  1293                           
  1294                           ; BSR set to: 15
  1295                           ;Main.c: 131:     ANSELC = 0x04;
  1296  00588C  0E04               	movlw	4
  1297  00588E  6F5D               	movwf	93,b	;volatile
  1298                           
  1299                           ; BSR set to: 15
  1300                           ;Main.c: 132:     ADCON0 = 0x39;
  1301  005890  0E39               	movlw	57
  1302  005892  6EC2               	movwf	4034,c	;volatile
  1303                           
  1304                           ; BSR set to: 15
  1305                           ;Main.c: 134:     GIE = 1;
  1306  005894  8EF2               	bsf	4082,7,c	;volatile
  1307                           
  1308                           ; BSR set to: 15
  1309                           ;Main.c: 135:     PEIE = 1;
  1310  005896  8CF2               	bsf	4082,6,c	;volatile
  1311                           
  1312                           ; BSR set to: 15
  1313                           ;Main.c: 136:     ADIE = 1;
  1314  005898  8C9D               	bsf	3997,6,c	;volatile
  1315  00589A                     l6814:
  1316                           
  1317                           ;Main.c: 140:        Error(0);
  1318  00589A  0E00               	movlw	0
  1319  00589C  6E02               	movwf	Error@a+1,c
  1320  00589E  0E00               	movlw	0
  1321  0058A0  6E01               	movwf	Error@a,c
  1322  0058A2  EC29  F029         	call	_Error	;wreg free
  1323                           
  1324                           ;Main.c: 141:        push = PORTC;
  1325  0058A6  CF82 F0E0          	movff	3970,_push	;volatile
  1326  0058AA  0100               	movlb	0	; () banked
  1327  0058AC  6BE1               	clrf	(_push+1)& (0+255),b
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;Main.c: 142:        push = 0x03 & push;
  1331  0058AE  0E03               	movlw	3
  1332  0058B0  15E0               	andwf	_push& (0+255),w,b
  1333  0058B2  6FE0               	movwf	_push& (0+255),b
  1334  0058B4  6BE1               	clrf	(_push+1)& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;Main.c: 143:        if(push == 2) guardar();
  1338  0058B6  0E02               	movlw	2
  1339  0058B8  19E0               	xorwf	_push& (0+255),w,b
  1340  0058BA  11E1               	iorwf	(_push+1)& (0+255),w,b
  1341  0058BC  B4D8               	btfsc	status,2,c
  1342                           
  1343                           ; BSR set to: 0
  1344  0058BE  EC01  F025         	call	_guardar	;wreg free
  1345                           
  1346                           ;Main.c: 144:        if(push == 1) reproducir();
  1347  0058C2  0100               	movlb	0	; () banked
  1348  0058C4  05E0               	decf	_push& (0+255),w,b
  1349  0058C6  11E1               	iorwf	(_push+1)& (0+255),w,b
  1350  0058C8  A4D8               	btfss	status,2,c
  1351  0058CA  D7E7               	goto	l6814
  1352                           
  1353                           ; BSR set to: 0
  1354  0058CC  ECEB  F027         	call	_reproducir	;wreg free
  1355  0058D0  D7E4               	goto	l6814
  1356  0058D2                     __end_of_main:
  1357                           	opt callstack 0
  1358                           
  1359 ;; *************** function _reproducir *****************
  1360 ;; Defined at:
  1361 ;;		line 263 in file "Main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;		None
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;		None
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1375 ;;      Params:         0       0       0       0       0       0       0       0       0
  1376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1378 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1379 ;;Total ram usage:        0 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:   14
  1382 ;; This function calls:
  1383 ;;		_Error
  1384 ;;		_SYSTEM_Initialize
  1385 ;;		___delay_sec
  1386 ;;		_f_close
  1387 ;;		_f_mount
  1388 ;;		_f_open
  1389 ;;		_reproductor
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text1
  1396  004FD6                     __ptext1:
  1397                           	opt callstack 0
  1398  004FD6                     _reproducir:
  1399                           	opt callstack 16
  1400                           
  1401                           ;Main.c: 264:     SYSTEM_Initialize();
  1402                           
  1403                           ;incstack = 0
  1404  004FD6  EC99  F02E         	call	_SYSTEM_Initialize	;wreg free
  1405                           
  1406                           ;Main.c: 265:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1407  004FDA  0E20               	movlw	low _FatFs
  1408  004FDC  6E52               	movwf	f_mount@fs,c
  1409  004FDE  0E01               	movlw	high _FatFs
  1410  004FE0  6E53               	movwf	f_mount@fs+1,c
  1411  004FE2  0E1A               	movlw	low (STR_5+10)
  1412  004FE4  6E54               	movwf	f_mount@path,c
  1413  004FE6  0E08               	movlw	high (STR_5+10)
  1414  004FE8  6E55               	movwf	f_mount@path+1,c
  1415  004FEA  0E01               	movlw	1
  1416  004FEC  6E56               	movwf	f_mount@opt,c
  1417  004FEE  ECEB  F029         	call	_f_mount	;wreg free
  1418  004FF2  0900               	iorlw	0
  1419  004FF4  B4D8               	btfsc	status,2,c
  1420  004FF6  D018               	goto	u8980
  1421                           
  1422                           ;Main.c: 266:         Error(33);
  1423  004FF8  0E00               	movlw	0
  1424  004FFA  6E02               	movwf	Error@a+1,c
  1425  004FFC  0E21               	movlw	33
  1426  004FFE  6E01               	movwf	Error@a,c
  1427  005000  EC29  F029         	call	_Error	;wreg free
  1428                           
  1429                           ;Main.c: 267:         __delay_sec(1);
  1430  005004  0E01               	movlw	1
  1431  005006  EC0C  F02E         	call	___delay_sec
  1432  00500A                     l6736:
  1433                           
  1434                           ;Main.c: 268:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1435  00500A  0E20               	movlw	low _FatFs
  1436  00500C  6E52               	movwf	f_mount@fs,c
  1437  00500E  0E01               	movlw	high _FatFs
  1438  005010  6E53               	movwf	f_mount@fs+1,c
  1439  005012  0E1A               	movlw	low (STR_5+10)
  1440  005014  6E54               	movwf	f_mount@path,c
  1441  005016  0E08               	movlw	high (STR_5+10)
  1442  005018  6E55               	movwf	f_mount@path+1,c
  1443  00501A  0E01               	movlw	1
  1444  00501C  6E56               	movwf	f_mount@opt,c
  1445  00501E  ECEB  F029         	call	_f_mount	;wreg free
  1446  005022  0900               	iorlw	0
  1447  005024  A4D8               	btfss	status,2,c
  1448  005026  D7F1               	goto	l6736
  1449  005028                     u8980:
  1450                           
  1451                           ;Main.c: 273:     Error(1);
  1452  005028  0E00               	movlw	0
  1453  00502A  6E02               	movwf	Error@a+1,c
  1454  00502C  0E01               	movlw	1
  1455  00502E  6E01               	movwf	Error@a,c
  1456  005030  EC29  F029         	call	_Error	;wreg free
  1457                           
  1458                           ;Main.c: 274:     __delay_sec(1);
  1459  005034  0E01               	movlw	1
  1460  005036  EC0C  F02E         	call	___delay_sec
  1461                           
  1462                           ;Main.c: 276:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1463  00503A  0E00               	movlw	low _Fil
  1464  00503C  0100               	movlb	0	; () banked
  1465  00503E  6F9A               	movwf	f_open@fp& (0+255),b
  1466  005040  0E01               	movlw	high _Fil
  1467  005042  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1468  005044  0E10               	movlw	low STR_5
  1469  005046  6F9C               	movwf	f_open@path& (0+255),b
  1470  005048  0E08               	movlw	high STR_5
  1471  00504A  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1472  00504C  0E13               	movlw	19
  1473  00504E  6F9E               	movwf	f_open@mode& (0+255),b
  1474  005050  ECAC  F01A         	call	_f_open	;wreg free
  1475  005054  0900               	iorlw	0
  1476  005056  A4D8               	btfss	status,2,c
  1477  005058  D024               	goto	l6760
  1478                           
  1479                           ;Main.c: 277:         Error(2);
  1480  00505A  0E00               	movlw	0
  1481  00505C  6E02               	movwf	Error@a+1,c
  1482  00505E  0E02               	movlw	2
  1483  005060  6E01               	movwf	Error@a,c
  1484  005062  EC29  F029         	call	_Error	;wreg free
  1485                           
  1486                           ;Main.c: 278:         __delay_sec(1);
  1487  005066  0E01               	movlw	1
  1488  005068  EC0C  F02E         	call	___delay_sec
  1489                           
  1490                           ;Main.c: 280:             reproductor();
  1491  00506C  EC43  F02A         	call	_reproductor	;wreg free
  1492                           
  1493                           ;Main.c: 282:             Error(5);
  1494  005070  0E00               	movlw	0
  1495  005072  6E02               	movwf	Error@a+1,c
  1496  005074  0E05               	movlw	5
  1497  005076  6E01               	movwf	Error@a,c
  1498  005078  EC29  F029         	call	_Error	;wreg free
  1499                           
  1500                           ;Main.c: 283:             __delay_sec(1);
  1501  00507C  0E01               	movlw	1
  1502  00507E  EC0C  F02E         	call	___delay_sec
  1503  005082  0E00               	movlw	low _Fil
  1504  005084  6E4E               	movwf	f_close@fp,c
  1505  005086  0E01               	movlw	high _Fil
  1506  005088  6E4F               	movwf	f_close@fp+1,c
  1507  00508A  ECEF  F02D         	call	_f_close	;wreg free
  1508                           
  1509                           ;Main.c: 285:             Error(6);
  1510  00508E  0E00               	movlw	0
  1511  005090  6E02               	movwf	Error@a+1,c
  1512  005092  0E06               	movlw	6
  1513  005094  6E01               	movwf	Error@a,c
  1514  005096  EC29  F029         	call	_Error	;wreg free
  1515                           
  1516                           ;Main.c: 286:             __delay_sec(1);
  1517  00509A  0E01               	movlw	1
  1518  00509C  EC0C  F02E         	call	___delay_sec
  1519                           
  1520                           ;Main.c: 288:  }
  1521  0050A0  0012               	return	
  1522  0050A2                     l6760:
  1523                           
  1524                           ;Main.c: 290:         Error(0);
  1525  0050A2  0E00               	movlw	0
  1526  0050A4  6E02               	movwf	Error@a+1,c
  1527  0050A6  0E00               	movlw	0
  1528  0050A8  6E01               	movwf	Error@a,c
  1529  0050AA  EC29  F029         	call	_Error	;wreg free
  1530  0050AE  0012               	return		;funcret
  1531  0050B0                     __end_of_reproducir:
  1532                           	opt callstack 0
  1533                           
  1534 ;; *************** function _reproductor *****************
  1535 ;; Defined at:
  1536 ;;		line 196 in file "Main.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;  i               2   36[BANK0 ] int 
  1541 ;;  i               2   34[BANK0 ] int 
  1542 ;;  j               2   32[BANK0 ] int 
  1543 ;;  c               1   38[BANK0 ] unsigned char 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1553 ;;      Params:         0       0       0       0       0       0       0       0       0
  1554 ;;      Locals:         0       7       0       0       0       0       0       0       0
  1555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1556 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1557 ;;Total ram usage:        7 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; Hardware stack levels required when called:   10
  1560 ;; This function calls:
  1561 ;;		_Error
  1562 ;;		_f_read
  1563 ;; This function is called by:
  1564 ;;		_reproducir
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text2
  1569  005486                     __ptext2:
  1570                           	opt callstack 0
  1571  005486                     _reproductor:
  1572                           	opt callstack 19
  1573                           
  1574                           ;Main.c: 197:     Error(4);
  1575                           
  1576                           ;incstack = 0
  1577  005486  0E00               	movlw	0
  1578  005488  6E02               	movwf	Error@a+1,c
  1579  00548A  0E04               	movlw	4
  1580  00548C  6E01               	movwf	Error@a,c
  1581  00548E  EC29  F029         	call	_Error	;wreg free
  1582                           
  1583                           ;Main.c: 199:     char c;;Main.c: 202:         j = 0;
  1584  005492  0E00               	movlw	0
  1585  005494  0100               	movlb	0	; () banked
  1586  005496  6F81               	movwf	(reproductor@j+1)& (0+255),b
  1587  005498  0E00               	movlw	0
  1588  00549A  6F80               	movwf	reproductor@j& (0+255),b
  1589                           
  1590                           ;Main.c: 203:         while(j!=30000){
  1591  00549C  D03F               	goto	l6670
  1592  00549E                     l6640:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;Main.c: 205:             f_read(&Fil, ND , 2 , &br);
  1596  00549E  0E00               	movlw	low _Fil
  1597  0054A0  6E56               	movwf	f_read@fp,c
  1598  0054A2  0E01               	movlw	high _Fil
  1599  0054A4  6E57               	movwf	f_read@fp+1,c
  1600  0054A6  0EE2               	movlw	low _ND
  1601  0054A8  6E58               	movwf	f_read@buff,c
  1602  0054AA  0E00               	movlw	high _ND
  1603  0054AC  6E59               	movwf	f_read@buff+1,c
  1604  0054AE  0E00               	movlw	0
  1605  0054B0  6E5B               	movwf	f_read@btr+1,c
  1606  0054B2  0E02               	movlw	2
  1607  0054B4  6E5A               	movwf	f_read@btr,c
  1608  0054B6  0EE4               	movlw	low _br
  1609  0054B8  6E5C               	movwf	f_read@br,c
  1610  0054BA  0E00               	movlw	high _br
  1611  0054BC  6E5D               	movwf	f_read@br+1,c
  1612  0054BE  EC9E  F00F         	call	_f_read	;wreg free
  1613                           
  1614                           ;Main.c: 206:             c = ND[0];
  1615  0054C2  C0E2  F086         	movff	_ND,reproductor@c
  1616                           
  1617                           ;Main.c: 207:             b = (int) c;
  1618  0054C6  C086  F0D4         	movff	reproductor@c,_b
  1619  0054CA  0100               	movlb	0	; () banked
  1620  0054CC  6BD5               	clrf	(_b+1)& (0+255),b
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;Main.c: 208:             PORTA = b;
  1624  0054CE  C0D4  FF80         	movff	_b,3968	;volatile
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;Main.c: 209:             for(int i=0;i<3;i++);
  1628  0054D2  0E00               	movlw	0
  1629  0054D4  6F83               	movwf	(reproductor@i+1)& (0+255),b
  1630  0054D6  0E00               	movlw	0
  1631  0054D8  6F82               	movwf	reproductor@i& (0+255),b
  1632  0054DA                     l6654:
  1633                           
  1634                           ; BSR set to: 0
  1635  0054DA  4B82               	infsnz	reproductor@i& (0+255),f,b
  1636  0054DC  2B83               	incf	(reproductor@i+1)& (0+255),f,b
  1637                           
  1638                           ; BSR set to: 0
  1639  0054DE  BF83               	btfsc	(reproductor@i+1)& (0+255),7,b
  1640  0054E0  D7FC               	goto	l6654
  1641  0054E2  5183               	movf	(reproductor@i+1)& (0+255),w,b
  1642  0054E4  E104               	bnz	u8880
  1643  0054E6  0E03               	movlw	3
  1644  0054E8  5D82               	subwf	reproductor@i& (0+255),w,b
  1645  0054EA  A0D8               	btfss	status,0,c
  1646  0054EC  D7F6               	goto	l6654
  1647  0054EE                     u8880:
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;Main.c: 210:             c = ND[1];
  1651  0054EE  C0E3  F086         	movff	_ND+1,reproductor@c
  1652                           
  1653                           ;Main.c: 211:             b = (int) c;
  1654  0054F2  C086  F0D4         	movff	reproductor@c,_b
  1655  0054F6  6BD5               	clrf	(_b+1)& (0+255),b
  1656                           
  1657                           ;Main.c: 212:             PORTA = b;
  1658  0054F8  C0D4  FF80         	movff	_b,3968	;volatile
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;Main.c: 213:             for(int i=0;i<2;i++);
  1662  0054FC  0E00               	movlw	0
  1663  0054FE  6F85               	movwf	(reproductor@i_1722+1)& (0+255),b
  1664  005500  0E00               	movlw	0
  1665  005502  6F84               	movwf	reproductor@i_1722& (0+255),b
  1666  005504                     l6664:
  1667                           
  1668                           ; BSR set to: 0
  1669  005504  4B84               	infsnz	reproductor@i_1722& (0+255),f,b
  1670  005506  2B85               	incf	(reproductor@i_1722+1)& (0+255),f,b
  1671                           
  1672                           ; BSR set to: 0
  1673  005508  BF85               	btfsc	(reproductor@i_1722+1)& (0+255),7,b
  1674  00550A  D7FC               	goto	l6664
  1675  00550C  5185               	movf	(reproductor@i_1722+1)& (0+255),w,b
  1676  00550E  E104               	bnz	u8890
  1677  005510  0E02               	movlw	2
  1678  005512  5D84               	subwf	reproductor@i_1722& (0+255),w,b
  1679  005514  A0D8               	btfss	status,0,c
  1680  005516  D7F6               	goto	l6664
  1681  005518                     u8890:
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;Main.c: 214:             j++;
  1685  005518  4B80               	infsnz	reproductor@j& (0+255),f,b
  1686  00551A  2B81               	incf	(reproductor@j+1)& (0+255),f,b
  1687  00551C                     l6670:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;Main.c: 203:         while(j!=30000){
  1691  00551C  0E30               	movlw	48
  1692  00551E  1980               	xorwf	reproductor@j& (0+255),w,b
  1693  005520  E1BE               	bnz	l6640
  1694  005522  0E75               	movlw	117
  1695  005524  1981               	xorwf	(reproductor@j+1)& (0+255),w,b
  1696  005526  B4D8               	btfsc	status,2,c
  1697  005528  0012               	return	
  1698  00552A  D7B9               	goto	l6640
  1699  00552C                     __end_of_reproductor:
  1700                           	opt callstack 0
  1701                           
  1702 ;; *************** function _f_read *****************
  1703 ;; Defined at:
  1704 ;;		line 2590 in file "ff.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  fp              2   85[COMRAM] PTR struct .
  1707 ;;		 -> Fil(32), 
  1708 ;;  buff            2   87[COMRAM] PTR void 
  1709 ;;		 -> ND(2), 
  1710 ;;  btr             2   89[COMRAM] unsigned short 
  1711 ;;  br              2   91[COMRAM] PTR unsigned short 
  1712 ;;		 -> br(2), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  sect            4   24[BANK0 ] unsigned long 
  1715 ;;  clst            4   17[BANK0 ] unsigned long 
  1716 ;;  remain          4   13[BANK0 ] unsigned long 
  1717 ;;  rcnt            2   30[BANK0 ] unsigned short 
  1718 ;;  cc              2   28[BANK0 ] unsigned short 
  1719 ;;  rbuff           2   21[BANK0 ] PTR unsigned char 
  1720 ;;		 -> ND(2), 
  1721 ;;  csect           1   23[BANK0 ] unsigned char 
  1722 ;;  res             1   12[BANK0 ] enum E93
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  1    wreg      enum E93
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1732 ;;      Params:         8       0       0       0       0       0       0       0       0
  1733 ;;      Locals:         0      20       0       0       0       0       0       0       0
  1734 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1735 ;;      Totals:         8      32       0       0       0       0       0       0       0
  1736 ;;Total ram usage:       40 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    9
  1739 ;; This function calls:
  1740 ;;		_clust2sect
  1741 ;;		_disk_read
  1742 ;;		_get_fat
  1743 ;;		_mem_cpy
  1744 ;;		_move_window
  1745 ;;		_validate
  1746 ;; This function is called by:
  1747 ;;		_reproductor
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text3
  1752  001F3C                     __ptext3:
  1753                           	opt callstack 0
  1754  001F3C                     _f_read:
  1755                           	opt callstack 19
  1756                           
  1757                           ;ff.c: 2591:  FIL* fp,;ff.c: 2592:  void* buff,;ff.c: 2593:  UINT btr,;ff.c: 2594:  UINT
      +                          * br;ff.c: 2596: {;ff.c: 2597:  FRESULT res;;ff.c: 2598:  DWORD clst, sect, remain;;ff.c
      +                          : 2599:  UINT rcnt, cc;;ff.c: 2600:  BYTE csect, *rbuff = (BYTE*)buff;
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;incstack = 0
  1761  001F3C  C058  F075         	movff	f_read@buff,f_read@rbuff
  1762  001F40  C059  F076         	movff	f_read@buff+1,f_read@rbuff+1
  1763                           
  1764                           ;ff.c: 2603:  *br = 0;
  1765  001F44  C05C  FFD9         	movff	f_read@br,fsr2l
  1766  001F48  C05D  FFDA         	movff	f_read@br+1,fsr2h
  1767  001F4C  0E00               	movlw	0
  1768  001F4E  6EDE               	movwf	postinc2,c
  1769  001F50  0E00               	movlw	0
  1770  001F52  6EDD               	movwf	postdec2,c
  1771                           
  1772                           ;ff.c: 2605:  res = validate(fp);
  1773  001F54  C056  F002         	movff	f_read@fp,validate@obj
  1774  001F58  C057  F003         	movff	f_read@fp+1,validate@obj+1
  1775  001F5C  ECE9  F02A         	call	_validate	;wreg free
  1776  001F60  0100               	movlb	0	; () banked
  1777  001F62  6F6C               	movwf	f_read@res& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;ff.c: 2606:  if (res != FR_OK) return res;
  1781  001F64  516C               	movf	f_read@res& (0+255),w,b
  1782  001F66  A4D8               	btfss	status,2,c
  1783  001F68  0012               	return	
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;ff.c: 2607:  if (fp->err)
  1787  001F6A  EE20 F005          	lfsr	2,5
  1788  001F6E  5056               	movf	f_read@fp,w,c
  1789  001F70  26D9               	addwf	fsr2l,f,c
  1790  001F72  5057               	movf	f_read@fp+1,w,c
  1791  001F74  22DA               	addwfc	fsr2h,f,c
  1792  001F76  50DF               	movf	indf2,w,c
  1793  001F78  A4D8               	btfss	status,2,c
  1794  001F7A  0012               	return	
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;ff.c: 2609:  if (!(fp->flag & 0x01))
  1798  001F7C  EE20 F004          	lfsr	2,4
  1799  001F80  5056               	movf	f_read@fp,w,c
  1800  001F82  26D9               	addwf	fsr2l,f,c
  1801  001F84  5057               	movf	f_read@fp+1,w,c
  1802  001F86  22DA               	addwfc	fsr2h,f,c
  1803  001F88  A0DF               	btfss	indf2,0,c
  1804  001F8A  0012               	return	
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;ff.c: 2611:  remain = fp->fsize - fp->fptr;
  1808  001F8C  EE20 F006          	lfsr	2,6
  1809  001F90  5056               	movf	f_read@fp,w,c
  1810  001F92  26D9               	addwf	fsr2l,f,c
  1811  001F94  5057               	movf	f_read@fp+1,w,c
  1812  001F96  22DA               	addwfc	fsr2h,f,c
  1813  001F98  CFDE F060          	movff	postinc2,??_f_read
  1814  001F9C  CFDE F061          	movff	postinc2,??_f_read+1
  1815  001FA0  CFDE F062          	movff	postinc2,??_f_read+2
  1816  001FA4  CFDE F063          	movff	postinc2,??_f_read+3
  1817  001FA8  EE20 F00A          	lfsr	2,10
  1818  001FAC  5056               	movf	f_read@fp,w,c
  1819  001FAE  26D9               	addwf	fsr2l,f,c
  1820  001FB0  5057               	movf	f_read@fp+1,w,c
  1821  001FB2  22DA               	addwfc	fsr2h,f,c
  1822  001FB4  CFDE F064          	movff	postinc2,??_f_read+4
  1823  001FB8  CFDE F065          	movff	postinc2,??_f_read+5
  1824  001FBC  CFDE F066          	movff	postinc2,??_f_read+6
  1825  001FC0  CFDE F067          	movff	postinc2,??_f_read+7
  1826  001FC4  5160               	movf	??_f_read& (0+255),w,b
  1827  001FC6  5D64               	subwf	(??_f_read+4)& (0+255),w,b
  1828  001FC8  6F6D               	movwf	f_read@remain& (0+255),b
  1829  001FCA  5161               	movf	(??_f_read+1)& (0+255),w,b
  1830  001FCC  5965               	subwfb	(??_f_read+5)& (0+255),w,b
  1831  001FCE  6F6E               	movwf	(f_read@remain+1)& (0+255),b
  1832  001FD0  5162               	movf	(??_f_read+2)& (0+255),w,b
  1833  001FD2  5966               	subwfb	(??_f_read+6)& (0+255),w,b
  1834  001FD4  6F6F               	movwf	(f_read@remain+2)& (0+255),b
  1835  001FD6  5163               	movf	(??_f_read+3)& (0+255),w,b
  1836  001FD8  5967               	subwfb	(??_f_read+7)& (0+255),w,b
  1837  001FDA  6F70               	movwf	(f_read@remain+3)& (0+255),b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;ff.c: 2612:  if (btr > remain) btr = (UINT)remain;
  1841  001FDC  505A               	movf	f_read@btr,w,c
  1842  001FDE  6F60               	movwf	??_f_read& (0+255),b
  1843  001FE0  505B               	movf	f_read@btr+1,w,c
  1844  001FE2  6F61               	movwf	(??_f_read+1)& (0+255),b
  1845  001FE4  6B62               	clrf	(??_f_read+2)& (0+255),b
  1846  001FE6  6B63               	clrf	(??_f_read+3)& (0+255),b
  1847  001FE8  5160               	movf	??_f_read& (0+255),w,b
  1848  001FEA  5D6D               	subwf	f_read@remain& (0+255),w,b
  1849  001FEC  5161               	movf	(??_f_read+1)& (0+255),w,b
  1850  001FEE  596E               	subwfb	(f_read@remain+1)& (0+255),w,b
  1851  001FF0  5162               	movf	(??_f_read+2)& (0+255),w,b
  1852  001FF2  596F               	subwfb	(f_read@remain+2)& (0+255),w,b
  1853  001FF4  5163               	movf	(??_f_read+3)& (0+255),w,b
  1854  001FF6  5970               	subwfb	(f_read@remain+3)& (0+255),w,b
  1855  001FF8  B0D8               	btfsc	status,0,c
  1856  001FFA  D271               	goto	l6106
  1857                           
  1858                           ; BSR set to: 0
  1859  001FFC  C06D  F05A         	movff	f_read@remain,f_read@btr
  1860  002000  C06E  F05B         	movff	f_read@remain+1,f_read@btr+1
  1861  002004  D26C               	goto	l6106
  1862  002006                     l6030:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;ff.c: 2615:   rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {;ff.c: 2616: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1866  002006  EE20 F006          	lfsr	2,6
  1867  00200A  5056               	movf	f_read@fp,w,c
  1868  00200C  26D9               	addwf	fsr2l,f,c
  1869  00200E  5057               	movf	f_read@fp+1,w,c
  1870  002010  22DA               	addwfc	fsr2h,f,c
  1871  002012  0EFF               	movlw	255
  1872  002014  14DE               	andwf	postinc2,w,c
  1873  002016  6F60               	movwf	??_f_read& (0+255),b
  1874  002018  0E01               	movlw	1
  1875  00201A  14DE               	andwf	postinc2,w,c
  1876  00201C  6F61               	movwf	(??_f_read+1)& (0+255),b
  1877  00201E  0E00               	movlw	0
  1878  002020  14DE               	andwf	postinc2,w,c
  1879  002022  6F62               	movwf	(??_f_read+2)& (0+255),b
  1880  002024  0E00               	movlw	0
  1881  002026  14DE               	andwf	postinc2,w,c
  1882  002028  6F63               	movwf	(??_f_read+3)& (0+255),b
  1883  00202A  5160               	movf	??_f_read& (0+255),w,b
  1884  00202C  1161               	iorwf	(??_f_read+1)& (0+255),w,b
  1885  00202E  1162               	iorwf	(??_f_read+2)& (0+255),w,b
  1886  002030  1163               	iorwf	(??_f_read+3)& (0+255),w,b
  1887  002032  A4D8               	btfss	status,2,c
  1888  002034  D1BF               	goto	l605
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;ff.c: 2617:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1892  002036  EE20 F006          	lfsr	2,6
  1893  00203A  5056               	movf	f_read@fp,w,c
  1894  00203C  26D9               	addwf	fsr2l,f,c
  1895  00203E  5057               	movf	f_read@fp+1,w,c
  1896  002040  22DA               	addwfc	fsr2h,f,c
  1897  002042  CFDE F060          	movff	postinc2,??_f_read
  1898  002046  CFDE F061          	movff	postinc2,??_f_read+1
  1899  00204A  CFDE F062          	movff	postinc2,??_f_read+2
  1900  00204E  CFDE F063          	movff	postinc2,??_f_read+3
  1901  002052  0E0A               	movlw	10
  1902  002054  D005               	goto	u7820
  1903  002056                     u7825:
  1904  002056  90D8               	bcf	status,0,c
  1905  002058  3363               	rrcf	(??_f_read+3)& (0+255),f,b
  1906  00205A  3362               	rrcf	(??_f_read+2)& (0+255),f,b
  1907  00205C  3361               	rrcf	(??_f_read+1)& (0+255),f,b
  1908  00205E  3360               	rrcf	??_f_read& (0+255),f,b
  1909  002060                     u7820:
  1910  002060  2EE8               	decfsz	wreg,f,c
  1911  002062  D7F9               	goto	u7825
  1912  002064  C056  FFD9         	movff	f_read@fp,fsr2l
  1913  002068  C057  FFDA         	movff	f_read@fp+1,fsr2h
  1914  00206C  EE10 F002          	lfsr	1,2
  1915  002070  50DE               	movf	postinc2,w,c
  1916  002072  26E1               	addwf	fsr1l,f,c
  1917  002074  50DD               	movf	postdec2,w,c
  1918  002076  22E2               	addwfc	fsr1h,f,c
  1919  002078  50E7               	movf	indf1,w,c
  1920  00207A  6F64               	movwf	(??_f_read+4)& (0+255),b
  1921  00207C  0564               	decf	(??_f_read+4)& (0+255),w,b
  1922  00207E  1560               	andwf	??_f_read& (0+255),w,b
  1923  002080  6F77               	movwf	f_read@csect& (0+255),b
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;ff.c: 2618:    if (!csect) {
  1927  002082  5177               	movf	f_read@csect& (0+255),w,b
  1928  002084  A4D8               	btfss	status,2,c
  1929  002086  D06D               	goto	l6056
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;ff.c: 2619:     if (fp->fptr == 0) {
  1933  002088  EE20 F006          	lfsr	2,6
  1934  00208C  5056               	movf	f_read@fp,w,c
  1935  00208E  26D9               	addwf	fsr2l,f,c
  1936  002090  5057               	movf	f_read@fp+1,w,c
  1937  002092  22DA               	addwfc	fsr2h,f,c
  1938  002094  50DE               	movf	postinc2,w,c
  1939  002096  10DE               	iorwf	postinc2,w,c
  1940  002098  10DE               	iorwf	postinc2,w,c
  1941  00209A  10DE               	iorwf	postinc2,w,c
  1942  00209C  A4D8               	btfss	status,2,c
  1943  00209E  D00F               	goto	l6040
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;ff.c: 2620:      clst = fp->sclust;
  1947  0020A0  EE20 F00E          	lfsr	2,14
  1948  0020A4  5056               	movf	f_read@fp,w,c
  1949  0020A6  26D9               	addwf	fsr2l,f,c
  1950  0020A8  5057               	movf	f_read@fp+1,w,c
  1951  0020AA  22DA               	addwfc	fsr2h,f,c
  1952  0020AC  CFDE F071          	movff	postinc2,f_read@clst
  1953  0020B0  CFDE F072          	movff	postinc2,f_read@clst+1
  1954  0020B4  CFDE F073          	movff	postinc2,f_read@clst+2
  1955  0020B8  CFDE F074          	movff	postinc2,f_read@clst+3
  1956                           
  1957                           ;ff.c: 2621:     } else {
  1958  0020BC  D020               	goto	l6042
  1959  0020BE                     l6040:
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;ff.c: 2627:       clst = get_fat(fp->fs, fp->clust);
  1963  0020BE  C056  FFD9         	movff	f_read@fp,fsr2l
  1964  0020C2  C057  FFDA         	movff	f_read@fp+1,fsr2h
  1965  0020C6  CFDE F03B          	movff	postinc2,get_fat@fs
  1966  0020CA  CFDD F03C          	movff	postdec2,get_fat@fs+1
  1967  0020CE  EE20 F012          	lfsr	2,18
  1968  0020D2  5056               	movf	f_read@fp,w,c
  1969  0020D4  26D9               	addwf	fsr2l,f,c
  1970  0020D6  5057               	movf	f_read@fp+1,w,c
  1971  0020D8  22DA               	addwfc	fsr2h,f,c
  1972  0020DA  CFDE F03D          	movff	postinc2,get_fat@clst
  1973  0020DE  CFDE F03E          	movff	postinc2,get_fat@clst+1
  1974  0020E2  CFDE F03F          	movff	postinc2,get_fat@clst+2
  1975  0020E6  CFDE F040          	movff	postinc2,get_fat@clst+3
  1976  0020EA  ECDB  F018         	call	_get_fat	;wreg free
  1977  0020EE  C03B  F071         	movff	?_get_fat,f_read@clst
  1978  0020F2  C03C  F072         	movff	?_get_fat+1,f_read@clst+1
  1979  0020F6  C03D  F073         	movff	?_get_fat+2,f_read@clst+2
  1980  0020FA  C03E  F074         	movff	?_get_fat+3,f_read@clst+3
  1981  0020FE                     l6042:
  1982                           
  1983                           ;ff.c: 2629:     if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1984  0020FE  0100               	movlb	0	; () banked
  1985  002100  5174               	movf	(f_read@clst+3)& (0+255),w,b
  1986  002102  1173               	iorwf	(f_read@clst+2)& (0+255),w,b
  1987  002104  1172               	iorwf	(f_read@clst+1)& (0+255),w,b
  1988  002106  E10D               	bnz	l6048
  1989  002108  0E02               	movlw	2
  1990  00210A  5D71               	subwf	f_read@clst& (0+255),w,b
  1991  00210C  B0D8               	btfsc	status,0,c
  1992  00210E  D009               	goto	l6048
  1993                           
  1994                           ; BSR set to: 0
  1995  002110  EE20 F005          	lfsr	2,5
  1996  002114  5056               	movf	f_read@fp,w,c
  1997  002116  26D9               	addwf	fsr2l,f,c
  1998  002118  5057               	movf	f_read@fp+1,w,c
  1999  00211A  22DA               	addwfc	fsr2h,f,c
  2000  00211C  0E02               	movlw	2
  2001  00211E  6EDF               	movwf	indf2,c
  2002  002120  0012               	return	
  2003  002122                     l6048:
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;ff.c: 2630:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  2007  002122  2971               	incf	f_read@clst& (0+255),w,b
  2008  002124  E110               	bnz	l6054
  2009  002126  2972               	incf	(f_read@clst+1)& (0+255),w,b
  2010  002128  E10E               	bnz	l6054
  2011  00212A  2973               	incf	(f_read@clst+2)& (0+255),w,b
  2012  00212C  E10C               	bnz	l6054
  2013  00212E  2974               	incf	(f_read@clst+3)& (0+255),w,b
  2014  002130  A4D8               	btfss	status,2,c
  2015  002132  D009               	goto	l6054
  2016                           
  2017                           ; BSR set to: 0
  2018  002134  EE20 F005          	lfsr	2,5
  2019  002138  5056               	movf	f_read@fp,w,c
  2020  00213A  26D9               	addwf	fsr2l,f,c
  2021  00213C  5057               	movf	f_read@fp+1,w,c
  2022  00213E  22DA               	addwfc	fsr2h,f,c
  2023  002140  0E01               	movlw	1
  2024  002142  6EDF               	movwf	indf2,c
  2025  002144  0012               	return	
  2026  002146                     l6054:
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;ff.c: 2631:     fp->clust = clst;
  2030  002146  EE20 F012          	lfsr	2,18
  2031  00214A  5056               	movf	f_read@fp,w,c
  2032  00214C  26D9               	addwf	fsr2l,f,c
  2033  00214E  5057               	movf	f_read@fp+1,w,c
  2034  002150  22DA               	addwfc	fsr2h,f,c
  2035  002152  C071  FFDE         	movff	f_read@clst,postinc2
  2036  002156  C072  FFDE         	movff	f_read@clst+1,postinc2
  2037  00215A  C073  FFDE         	movff	f_read@clst+2,postinc2
  2038  00215E  C074  FFDE         	movff	f_read@clst+3,postinc2
  2039  002162                     l6056:
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;ff.c: 2633:    sect = clust2sect(fp->fs, fp->clust);
  2043  002162  C056  FFD9         	movff	f_read@fp,fsr2l
  2044  002166  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2045  00216A  CFDE F00D          	movff	postinc2,clust2sect@fs
  2046  00216E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2047  002172  EE20 F012          	lfsr	2,18
  2048  002176  5056               	movf	f_read@fp,w,c
  2049  002178  26D9               	addwf	fsr2l,f,c
  2050  00217A  5057               	movf	f_read@fp+1,w,c
  2051  00217C  22DA               	addwfc	fsr2h,f,c
  2052  00217E  CFDE F00F          	movff	postinc2,clust2sect@clst
  2053  002182  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2054  002186  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2055  00218A  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2056  00218E  EC8E  F029         	call	_clust2sect	;wreg free
  2057  002192  C00D  F078         	movff	?_clust2sect,f_read@sect
  2058  002196  C00E  F079         	movff	?_clust2sect+1,f_read@sect+1
  2059  00219A  C00F  F07A         	movff	?_clust2sect+2,f_read@sect+2
  2060  00219E  C010  F07B         	movff	?_clust2sect+3,f_read@sect+3
  2061                           
  2062                           ;ff.c: 2634:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2063  0021A2  0100               	movlb	0	; () banked
  2064  0021A4  5178               	movf	f_read@sect& (0+255),w,b
  2065  0021A6  1179               	iorwf	(f_read@sect+1)& (0+255),w,b
  2066  0021A8  117A               	iorwf	(f_read@sect+2)& (0+255),w,b
  2067  0021AA  117B               	iorwf	(f_read@sect+3)& (0+255),w,b
  2068  0021AC  A4D8               	btfss	status,2,c
  2069  0021AE  D009               	goto	l6064
  2070                           
  2071                           ; BSR set to: 0
  2072  0021B0  EE20 F005          	lfsr	2,5
  2073  0021B4  5056               	movf	f_read@fp,w,c
  2074  0021B6  26D9               	addwf	fsr2l,f,c
  2075  0021B8  5057               	movf	f_read@fp+1,w,c
  2076  0021BA  22DA               	addwfc	fsr2h,f,c
  2077  0021BC  0E02               	movlw	2
  2078  0021BE  6EDF               	movwf	indf2,c
  2079  0021C0  0012               	return	
  2080  0021C2                     l6064:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;ff.c: 2635:    sect += csect;
  2084  0021C2  5177               	movf	f_read@csect& (0+255),w,b
  2085  0021C4  2778               	addwf	f_read@sect& (0+255),f,b
  2086  0021C6  0E00               	movlw	0
  2087  0021C8  2379               	addwfc	(f_read@sect+1)& (0+255),f,b
  2088  0021CA  237A               	addwfc	(f_read@sect+2)& (0+255),f,b
  2089  0021CC  237B               	addwfc	(f_read@sect+3)& (0+255),f,b
  2090                           
  2091                           ;ff.c: 2636:    cc = btr / ((UINT)512);
  2092  0021CE  C05A  F060         	movff	f_read@btr,??_f_read
  2093  0021D2  C05B  F061         	movff	f_read@btr+1,??_f_read+1
  2094  0021D6  0E09               	movlw	9
  2095  0021D8  6F62               	movwf	(??_f_read+2)& (0+255),b
  2096  0021DA                     u7885:
  2097  0021DA  90D8               	bcf	status,0,c
  2098  0021DC  3361               	rrcf	(??_f_read+1)& (0+255),f,b
  2099  0021DE  3360               	rrcf	??_f_read& (0+255),f,b
  2100  0021E0  2F62               	decfsz	(??_f_read+2)& (0+255),f,b
  2101  0021E2  D7FB               	goto	u7885
  2102  0021E4  C060  F07C         	movff	??_f_read,f_read@cc
  2103  0021E8  C061  F07D         	movff	??_f_read+1,f_read@cc+1
  2104                           
  2105                           ;ff.c: 2637:    if (cc) {
  2106  0021EC  517C               	movf	f_read@cc& (0+255),w,b
  2107  0021EE  117D               	iorwf	(f_read@cc+1)& (0+255),w,b
  2108  0021F0  B4D8               	btfsc	status,2,c
  2109  0021F2  D0D2               	goto	l6084
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;ff.c: 2638:     if (csect + cc > fp->fs->csize)
  2113  0021F4  5177               	movf	f_read@csect& (0+255),w,b
  2114  0021F6  257C               	addwf	f_read@cc& (0+255),w,b
  2115  0021F8  6F60               	movwf	??_f_read& (0+255),b
  2116  0021FA  0E00               	movlw	0
  2117  0021FC  217D               	addwfc	(f_read@cc+1)& (0+255),w,b
  2118  0021FE  6F61               	movwf	(??_f_read+1)& (0+255),b
  2119  002200  C056  FFD9         	movff	f_read@fp,fsr2l
  2120  002204  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2121  002208  EE10 F002          	lfsr	1,2
  2122  00220C  50DE               	movf	postinc2,w,c
  2123  00220E  26E1               	addwf	fsr1l,f,c
  2124  002210  50DD               	movf	postdec2,w,c
  2125  002212  22E2               	addwfc	fsr1h,f,c
  2126  002214  50E7               	movf	indf1,w,c
  2127  002216  6F62               	movwf	(??_f_read+2)& (0+255),b
  2128  002218  6B63               	clrf	(??_f_read+3)& (0+255),b
  2129  00221A  5160               	movf	??_f_read& (0+255),w,b
  2130  00221C  5D62               	subwf	(??_f_read+2)& (0+255),w,b
  2131  00221E  5161               	movf	(??_f_read+1)& (0+255),w,b
  2132  002220  5963               	subwfb	(??_f_read+3)& (0+255),w,b
  2133  002222  B0D8               	btfsc	status,0,c
  2134  002224  D012               	goto	l6070
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;ff.c: 2639:      cc = fp->fs->csize - csect;
  2138  002226  C056  FFD9         	movff	f_read@fp,fsr2l
  2139  00222A  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2140  00222E  EE10 F002          	lfsr	1,2
  2141  002232  50DE               	movf	postinc2,w,c
  2142  002234  26E1               	addwf	fsr1l,f,c
  2143  002236  50DD               	movf	postdec2,w,c
  2144  002238  22E2               	addwfc	fsr1h,f,c
  2145  00223A  50E7               	movf	indf1,w,c
  2146  00223C  6F60               	movwf	??_f_read& (0+255),b
  2147  00223E  5177               	movf	f_read@csect& (0+255),w,b
  2148  002240  5D60               	subwf	??_f_read& (0+255),w,b
  2149  002242  6F7C               	movwf	f_read@cc& (0+255),b
  2150  002244  6B7D               	clrf	(f_read@cc+1)& (0+255),b
  2151  002246  A0D8               	btfss	status,0,c
  2152  002248  077D               	decf	(f_read@cc+1)& (0+255),f,b
  2153  00224A                     l6070:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;ff.c: 2640:     if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
  2157  00224A  C075  F011         	movff	f_read@rbuff,disk_read@buff
  2158  00224E  C076  F012         	movff	f_read@rbuff+1,disk_read@buff+1
  2159  002252  C078  F013         	movff	f_read@sect,disk_read@sector
  2160  002256  C079  F014         	movff	f_read@sect+1,disk_read@sector+1
  2161  00225A  C07A  F015         	movff	f_read@sect+2,disk_read@sector+2
  2162  00225E  C07B  F016         	movff	f_read@sect+3,disk_read@sector+3
  2163  002262  C07C  F017         	movff	f_read@cc,disk_read@count
  2164  002266  C07D  F018         	movff	f_read@cc+1,disk_read@count+1
  2165  00226A  C056  FFD9         	movff	f_read@fp,fsr2l
  2166  00226E  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2167  002272  EE10 F001          	lfsr	1,1
  2168  002276  50DE               	movf	postinc2,w,c
  2169  002278  26E1               	addwf	fsr1l,f,c
  2170  00227A  50DD               	movf	postdec2,w,c
  2171  00227C  22E2               	addwfc	fsr1h,f,c
  2172  00227E  50E7               	movf	indf1,w,c
  2173  002280  ECC3  F028         	call	_disk_read
  2174  002284  0900               	iorlw	0
  2175  002286  B4D8               	btfsc	status,2,c
  2176  002288  D009               	goto	l6076
  2177                           
  2178                           ;ff.c: 2641:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2179  00228A  EE20 F005          	lfsr	2,5
  2180  00228E  5056               	movf	f_read@fp,w,c
  2181  002290  26D9               	addwf	fsr2l,f,c
  2182  002292  5057               	movf	f_read@fp+1,w,c
  2183  002294  22DA               	addwfc	fsr2h,f,c
  2184  002296  0E01               	movlw	1
  2185  002298  6EDF               	movwf	indf2,c
  2186  00229A  0012               	return	
  2187  00229C                     l6076:
  2188                           
  2189                           ;ff.c: 2644:     if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  2190  00229C  C056  FFD9         	movff	f_read@fp,fsr2l
  2191  0022A0  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2192  0022A4  EE10 F004          	lfsr	1,4
  2193  0022A8  50DE               	movf	postinc2,w,c
  2194  0022AA  26E1               	addwf	fsr1l,f,c
  2195  0022AC  50DD               	movf	postdec2,w,c
  2196  0022AE  22E2               	addwfc	fsr1h,f,c
  2197  0022B0  50E7               	movf	indf1,w,c
  2198  0022B2  B4D8               	btfsc	status,2,c
  2199  0022B4  D061               	goto	l6082
  2200  0022B6  0100               	movlb	0	; () banked
  2201  0022B8  517C               	movf	f_read@cc& (0+255),w,b
  2202  0022BA  6F60               	movwf	??_f_read& (0+255),b
  2203  0022BC  517D               	movf	(f_read@cc+1)& (0+255),w,b
  2204  0022BE  6F61               	movwf	(??_f_read+1)& (0+255),b
  2205  0022C0  6B62               	clrf	(??_f_read+2)& (0+255),b
  2206  0022C2  6B63               	clrf	(??_f_read+3)& (0+255),b
  2207  0022C4  C056  FFD9         	movff	f_read@fp,fsr2l
  2208  0022C8  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2209  0022CC  EE10 F02A          	lfsr	1,42
  2210  0022D0  50DE               	movf	postinc2,w,c
  2211  0022D2  26E1               	addwf	fsr1l,f,c
  2212  0022D4  50DD               	movf	postdec2,w,c
  2213  0022D6  22E2               	addwfc	fsr1h,f,c
  2214  0022D8  CFE6 F064          	movff	postinc1,??_f_read+4
  2215  0022DC  CFE6 F065          	movff	postinc1,??_f_read+5
  2216  0022E0  CFE6 F066          	movff	postinc1,??_f_read+6
  2217  0022E4  CFE6 F067          	movff	postinc1,??_f_read+7
  2218  0022E8  5178               	movf	f_read@sect& (0+255),w,b
  2219  0022EA  5D64               	subwf	(??_f_read+4)& (0+255),w,b
  2220  0022EC  6F68               	movwf	(??_f_read+8)& (0+255),b
  2221  0022EE  5179               	movf	(f_read@sect+1)& (0+255),w,b
  2222  0022F0  5965               	subwfb	(??_f_read+5)& (0+255),w,b
  2223  0022F2  6F69               	movwf	(??_f_read+9)& (0+255),b
  2224  0022F4  517A               	movf	(f_read@sect+2)& (0+255),w,b
  2225  0022F6  5966               	subwfb	(??_f_read+6)& (0+255),w,b
  2226  0022F8  6F6A               	movwf	(??_f_read+10)& (0+255),b
  2227  0022FA  517B               	movf	(f_read@sect+3)& (0+255),w,b
  2228  0022FC  5967               	subwfb	(??_f_read+7)& (0+255),w,b
  2229  0022FE  6F6B               	movwf	(??_f_read+11)& (0+255),b
  2230  002300  5160               	movf	??_f_read& (0+255),w,b
  2231  002302  5D68               	subwf	(??_f_read+8)& (0+255),w,b
  2232  002304  5161               	movf	(??_f_read+1)& (0+255),w,b
  2233  002306  5969               	subwfb	(??_f_read+9)& (0+255),w,b
  2234  002308  5162               	movf	(??_f_read+2)& (0+255),w,b
  2235  00230A  596A               	subwfb	(??_f_read+10)& (0+255),w,b
  2236  00230C  5163               	movf	(??_f_read+3)& (0+255),w,b
  2237  00230E  596B               	subwfb	(??_f_read+11)& (0+255),w,b
  2238  002310  B0D8               	btfsc	status,0,c
  2239  002312  D032               	goto	l6082
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;ff.c: 2645:      mem_cpy(rbuff + ((fp->fs->winsect - sect) * ((UINT)512)), fp->fs->win,
      +                           ((UINT)512));
  2243  002314  C056  FFD9         	movff	f_read@fp,fsr2l
  2244  002318  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2245  00231C  EE10 F02A          	lfsr	1,42
  2246  002320  50DE               	movf	postinc2,w,c
  2247  002322  26E1               	addwf	fsr1l,f,c
  2248  002324  50DD               	movf	postdec2,w,c
  2249  002326  22E2               	addwfc	fsr1h,f,c
  2250  002328  CFE6 F060          	movff	postinc1,??_f_read
  2251  00232C  CFE5 F061          	movff	postdec1,??_f_read+1
  2252  002330  5178               	movf	f_read@sect& (0+255),w,b
  2253  002332  5F60               	subwf	??_f_read& (0+255),f,b
  2254  002334  5179               	movf	(f_read@sect+1)& (0+255),w,b
  2255  002336  5B61               	subwfb	(??_f_read+1)& (0+255),f,b
  2256  002338  0E09               	movlw	9
  2257  00233A                     u7945:
  2258  00233A  90D8               	bcf	status,0,c
  2259  00233C  3760               	rlcf	??_f_read& (0+255),f,b
  2260  00233E  3761               	rlcf	(??_f_read+1)& (0+255),f,b
  2261  002340  2EE8               	decfsz	wreg,f,c
  2262  002342  D7FB               	goto	u7945
  2263  002344  5160               	movf	??_f_read& (0+255),w,b
  2264  002346  2575               	addwf	f_read@rbuff& (0+255),w,b
  2265  002348  6E01               	movwf	mem_cpy@dst,c
  2266  00234A  5161               	movf	(??_f_read+1)& (0+255),w,b
  2267  00234C  2176               	addwfc	(f_read@rbuff+1)& (0+255),w,b
  2268  00234E  6E02               	movwf	mem_cpy@dst+1,c
  2269  002350  C056  FFD9         	movff	f_read@fp,fsr2l
  2270  002354  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2271  002358  CFDE F062          	movff	postinc2,??_f_read+2
  2272  00235C  CFDD F063          	movff	postdec2,??_f_read+3
  2273  002360  0E2E               	movlw	46
  2274  002362  2562               	addwf	(??_f_read+2)& (0+255),w,b
  2275  002364  6E03               	movwf	mem_cpy@src,c
  2276  002366  0E00               	movlw	0
  2277  002368  2163               	addwfc	(??_f_read+3)& (0+255),w,b
  2278  00236A  6E04               	movwf	mem_cpy@src+1,c
  2279  00236C  0E02               	movlw	2
  2280  00236E  6E06               	movwf	mem_cpy@cnt+1,c
  2281  002370  0E00               	movlw	0
  2282  002372  6E05               	movwf	mem_cpy@cnt,c
  2283  002374  ECF4  F02B         	call	_mem_cpy	;wreg free
  2284  002378                     l6082:
  2285                           
  2286                           ;ff.c: 2651:     rcnt = ((UINT)512) * cc;
  2287  002378  C07C  F060         	movff	f_read@cc,??_f_read
  2288  00237C  C07D  F061         	movff	f_read@cc+1,??_f_read+1
  2289  002380  0E09               	movlw	9
  2290  002382                     u7955:
  2291  002382  90D8               	bcf	status,0,c
  2292  002384  0100               	movlb	0	; () banked
  2293  002386  3760               	rlcf	??_f_read& (0+255),f,b
  2294  002388  3761               	rlcf	(??_f_read+1)& (0+255),f,b
  2295  00238A  2EE8               	decfsz	wreg,f,c
  2296  00238C  D7FA               	goto	u7955
  2297  00238E  C060  F07E         	movff	??_f_read,f_read@rcnt
  2298  002392  C061  F07F         	movff	??_f_read+1,f_read@rcnt+1
  2299                           
  2300                           ;ff.c: 2652:     continue;
  2301  002396  D085               	goto	l6098
  2302  002398                     l6084:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;ff.c: 2667:    fp->dsect = sect;
  2306  002398  EE20 F016          	lfsr	2,22
  2307  00239C  5056               	movf	f_read@fp,w,c
  2308  00239E  26D9               	addwf	fsr2l,f,c
  2309  0023A0  5057               	movf	f_read@fp+1,w,c
  2310  0023A2  22DA               	addwfc	fsr2h,f,c
  2311  0023A4  C078  FFDE         	movff	f_read@sect,postinc2
  2312  0023A8  C079  FFDE         	movff	f_read@sect+1,postinc2
  2313  0023AC  C07A  FFDE         	movff	f_read@sect+2,postinc2
  2314  0023B0  C07B  FFDE         	movff	f_read@sect+3,postinc2
  2315  0023B4                     l605:
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;ff.c: 2669:   rcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2319  0023B4  0EFF               	movlw	255
  2320  0023B6  6F60               	movwf	??_f_read& (0+255),b
  2321  0023B8  0E01               	movlw	1
  2322  0023BA  6F61               	movwf	(??_f_read+1)& (0+255),b
  2323  0023BC  EE20 F006          	lfsr	2,6
  2324  0023C0  5056               	movf	f_read@fp,w,c
  2325  0023C2  26D9               	addwf	fsr2l,f,c
  2326  0023C4  5057               	movf	f_read@fp+1,w,c
  2327  0023C6  22DA               	addwfc	fsr2h,f,c
  2328  0023C8  CFDE F062          	movff	postinc2,??_f_read+2
  2329  0023CC  CFDD F063          	movff	postdec2,??_f_read+3
  2330  0023D0  5160               	movf	??_f_read& (0+255),w,b
  2331  0023D2  1762               	andwf	(??_f_read+2)& (0+255),f,b
  2332  0023D4  5161               	movf	(??_f_read+1)& (0+255),w,b
  2333  0023D6  1763               	andwf	(??_f_read+3)& (0+255),f,b
  2334  0023D8  5162               	movf	(??_f_read+2)& (0+255),w,b
  2335  0023DA  0800               	sublw	0
  2336  0023DC  6F7E               	movwf	f_read@rcnt& (0+255),b
  2337  0023DE  5163               	movf	(??_f_read+3)& (0+255),w,b
  2338  0023E0  A0D8               	btfss	status,0,c
  2339  0023E2  2AE8               	incf	wreg,f,c
  2340  0023E4  0802               	sublw	2
  2341  0023E6  6F7F               	movwf	(f_read@rcnt+1)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;ff.c: 2670:   if (rcnt > btr) rcnt = btr;
  2345  0023E8  517E               	movf	f_read@rcnt& (0+255),w,b
  2346  0023EA  5C5A               	subwf	f_read@btr,w,c
  2347  0023EC  517F               	movf	(f_read@rcnt+1)& (0+255),w,b
  2348  0023EE  585B               	subwfb	f_read@btr+1,w,c
  2349  0023F0  B0D8               	btfsc	status,0,c
  2350  0023F2  D004               	goto	l6090
  2351                           
  2352                           ; BSR set to: 0
  2353  0023F4  C05A  F07E         	movff	f_read@btr,f_read@rcnt
  2354  0023F8  C05B  F07F         	movff	f_read@btr+1,f_read@rcnt+1
  2355  0023FC                     l6090:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;ff.c: 2672:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2359  0023FC  C056  FFD9         	movff	f_read@fp,fsr2l
  2360  002400  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2361  002404  CFDE F030          	movff	postinc2,move_window@fs
  2362  002408  CFDD F031          	movff	postdec2,move_window@fs+1
  2363  00240C  EE20 F016          	lfsr	2,22
  2364  002410  5056               	movf	f_read@fp,w,c
  2365  002412  26D9               	addwf	fsr2l,f,c
  2366  002414  5057               	movf	f_read@fp+1,w,c
  2367  002416  22DA               	addwfc	fsr2h,f,c
  2368  002418  CFDE F032          	movff	postinc2,move_window@sector
  2369  00241C  CFDE F033          	movff	postinc2,move_window@sector+1
  2370  002420  CFDE F034          	movff	postinc2,move_window@sector+2
  2371  002424  CFDE F035          	movff	postinc2,move_window@sector+3
  2372  002428  EC96  F02A         	call	_move_window	;wreg free
  2373  00242C  0900               	iorlw	0
  2374  00242E  B4D8               	btfsc	status,2,c
  2375  002430  D009               	goto	l6096
  2376                           
  2377                           ;ff.c: 2673:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2378  002432  EE20 F005          	lfsr	2,5
  2379  002436  5056               	movf	f_read@fp,w,c
  2380  002438  26D9               	addwf	fsr2l,f,c
  2381  00243A  5057               	movf	f_read@fp+1,w,c
  2382  00243C  22DA               	addwfc	fsr2h,f,c
  2383  00243E  0E01               	movlw	1
  2384  002440  6EDF               	movwf	indf2,c
  2385  002442  0012               	return	
  2386  002444                     l6096:
  2387                           
  2388                           ;ff.c: 2674:   mem_cpy(rbuff, &fp->fs->win[fp->fptr % ((UINT)512)], rcnt);
  2389  002444  C075  F001         	movff	f_read@rbuff,mem_cpy@dst
  2390  002448  C076  F002         	movff	f_read@rbuff+1,mem_cpy@dst+1
  2391  00244C  0EFF               	movlw	255
  2392  00244E  0100               	movlb	0	; () banked
  2393  002450  6F60               	movwf	??_f_read& (0+255),b
  2394  002452  0E01               	movlw	1
  2395  002454  6F61               	movwf	(??_f_read+1)& (0+255),b
  2396  002456  EE20 F006          	lfsr	2,6
  2397  00245A  5056               	movf	f_read@fp,w,c
  2398  00245C  26D9               	addwf	fsr2l,f,c
  2399  00245E  5057               	movf	f_read@fp+1,w,c
  2400  002460  22DA               	addwfc	fsr2h,f,c
  2401  002462  CFDE F062          	movff	postinc2,??_f_read+2
  2402  002466  CFDD F063          	movff	postdec2,??_f_read+3
  2403  00246A  5160               	movf	??_f_read& (0+255),w,b
  2404  00246C  1762               	andwf	(??_f_read+2)& (0+255),f,b
  2405  00246E  5161               	movf	(??_f_read+1)& (0+255),w,b
  2406  002470  1763               	andwf	(??_f_read+3)& (0+255),f,b
  2407  002472  C056  FFD9         	movff	f_read@fp,fsr2l
  2408  002476  C057  FFDA         	movff	f_read@fp+1,fsr2h
  2409  00247A  CFDE F064          	movff	postinc2,??_f_read+4
  2410  00247E  CFDD F065          	movff	postdec2,??_f_read+5
  2411  002482  5162               	movf	(??_f_read+2)& (0+255),w,b
  2412  002484  2764               	addwf	(??_f_read+4)& (0+255),f,b
  2413  002486  5163               	movf	(??_f_read+3)& (0+255),w,b
  2414  002488  2365               	addwfc	(??_f_read+5)& (0+255),f,b
  2415  00248A  0E2E               	movlw	46
  2416  00248C  2564               	addwf	(??_f_read+4)& (0+255),w,b
  2417  00248E  6E03               	movwf	mem_cpy@src,c
  2418  002490  0E00               	movlw	0
  2419  002492  2165               	addwfc	(??_f_read+5)& (0+255),w,b
  2420  002494  6E04               	movwf	mem_cpy@src+1,c
  2421  002496  C07E  F005         	movff	f_read@rcnt,mem_cpy@cnt
  2422  00249A  C07F  F006         	movff	f_read@rcnt+1,mem_cpy@cnt+1
  2423  00249E  ECF4  F02B         	call	_mem_cpy	;wreg free
  2424  0024A2                     l6098:
  2425  0024A2  0100               	movlb	0	; () banked
  2426  0024A4  517E               	movf	f_read@rcnt& (0+255),w,b
  2427  0024A6  2775               	addwf	f_read@rbuff& (0+255),f,b
  2428  0024A8  517F               	movf	(f_read@rcnt+1)& (0+255),w,b
  2429  0024AA  2376               	addwfc	(f_read@rbuff+1)& (0+255),f,b
  2430                           
  2431                           ; BSR set to: 0
  2432  0024AC  EE20 F006          	lfsr	2,6
  2433  0024B0  5056               	movf	f_read@fp,w,c
  2434  0024B2  26D9               	addwf	fsr2l,f,c
  2435  0024B4  5057               	movf	f_read@fp+1,w,c
  2436  0024B6  22DA               	addwfc	fsr2h,f,c
  2437  0024B8  517E               	movf	f_read@rcnt& (0+255),w,b
  2438  0024BA  26DE               	addwf	postinc2,f,c
  2439  0024BC  517F               	movf	(f_read@rcnt+1)& (0+255),w,b
  2440  0024BE  22DE               	addwfc	postinc2,f,c
  2441  0024C0  0E00               	movlw	0
  2442  0024C2  22DE               	addwfc	postinc2,f,c
  2443  0024C4  22DE               	addwfc	postinc2,f,c
  2444                           
  2445                           ; BSR set to: 0
  2446  0024C6  C05C  FFD9         	movff	f_read@br,fsr2l
  2447  0024CA  C05D  FFDA         	movff	f_read@br+1,fsr2h
  2448  0024CE  517E               	movf	f_read@rcnt& (0+255),w,b
  2449  0024D0  26DE               	addwf	postinc2,f,c
  2450  0024D2  517F               	movf	(f_read@rcnt+1)& (0+255),w,b
  2451  0024D4  22DD               	addwfc	postdec2,f,c
  2452                           
  2453                           ; BSR set to: 0
  2454  0024D6  517E               	movf	f_read@rcnt& (0+255),w,b
  2455  0024D8  5E5A               	subwf	f_read@btr,f,c
  2456  0024DA  517F               	movf	(f_read@rcnt+1)& (0+255),w,b
  2457  0024DC  5A5B               	subwfb	f_read@btr+1,f,c
  2458  0024DE                     l6106:
  2459                           
  2460                           ; BSR set to: 0
  2461  0024DE  505A               	movf	f_read@btr,w,c
  2462  0024E0  105B               	iorwf	f_read@btr+1,w,c
  2463  0024E2  B4D8               	btfsc	status,2,c
  2464  0024E4  0012               	return	
  2465  0024E6  D58F               	goto	l6030
  2466  0024E8                     __end_of_f_read:
  2467                           	opt callstack 0
  2468                           
  2469 ;; *************** function _guardar *****************
  2470 ;; Defined at:
  2471 ;;		line 229 in file "Main.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;		None
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;		None
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2485 ;;      Params:         0       0       0       0       0       0       0       0       0
  2486 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2488 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2489 ;;Total ram usage:        0 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:   14
  2492 ;; This function calls:
  2493 ;;		_Error
  2494 ;;		_SYSTEM_Initialize
  2495 ;;		___delay_sec
  2496 ;;		_f_close
  2497 ;;		_f_lseek
  2498 ;;		_f_mount
  2499 ;;		_f_open
  2500 ;;		_grabador
  2501 ;; This function is called by:
  2502 ;;		_main
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text4
  2507  004A02                     __ptext4:
  2508                           	opt callstack 0
  2509  004A02                     _guardar:
  2510                           	opt callstack 16
  2511                           
  2512                           ;Main.c: 230:     SYSTEM_Initialize();
  2513                           
  2514                           ;incstack = 0
  2515  004A02  EC99  F02E         	call	_SYSTEM_Initialize	;wreg free
  2516                           
  2517                           ;Main.c: 231:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  2518  004A06  0E20               	movlw	low _FatFs
  2519  004A08  6E52               	movwf	f_mount@fs,c
  2520  004A0A  0E01               	movlw	high _FatFs
  2521  004A0C  6E53               	movwf	f_mount@fs+1,c
  2522  004A0E  0E1A               	movlw	low (STR_5+10)
  2523  004A10  6E54               	movwf	f_mount@path,c
  2524  004A12  0E08               	movlw	high (STR_5+10)
  2525  004A14  6E55               	movwf	f_mount@path+1,c
  2526  004A16  0E01               	movlw	1
  2527  004A18  6E56               	movwf	f_mount@opt,c
  2528  004A1A  ECEB  F029         	call	_f_mount	;wreg free
  2529  004A1E  0900               	iorlw	0
  2530  004A20  B4D8               	btfsc	status,2,c
  2531  004A22  D018               	goto	u8930
  2532                           
  2533                           ;Main.c: 232:         Error(33);
  2534  004A24  0E00               	movlw	0
  2535  004A26  6E02               	movwf	Error@a+1,c
  2536  004A28  0E21               	movlw	33
  2537  004A2A  6E01               	movwf	Error@a,c
  2538  004A2C  EC29  F029         	call	_Error	;wreg free
  2539                           
  2540                           ;Main.c: 233:         __delay_sec(1);
  2541  004A30  0E01               	movlw	1
  2542  004A32  EC0C  F02E         	call	___delay_sec
  2543  004A36                     l6692:
  2544                           
  2545                           ;Main.c: 234:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  2546  004A36  0E20               	movlw	low _FatFs
  2547  004A38  6E52               	movwf	f_mount@fs,c
  2548  004A3A  0E01               	movlw	high _FatFs
  2549  004A3C  6E53               	movwf	f_mount@fs+1,c
  2550  004A3E  0E1A               	movlw	low (STR_5+10)
  2551  004A40  6E54               	movwf	f_mount@path,c
  2552  004A42  0E08               	movlw	high (STR_5+10)
  2553  004A44  6E55               	movwf	f_mount@path+1,c
  2554  004A46  0E01               	movlw	1
  2555  004A48  6E56               	movwf	f_mount@opt,c
  2556  004A4A  ECEB  F029         	call	_f_mount	;wreg free
  2557  004A4E  0900               	iorlw	0
  2558  004A50  A4D8               	btfss	status,2,c
  2559  004A52  D7F1               	goto	l6692
  2560  004A54                     u8930:
  2561                           
  2562                           ;Main.c: 239:     Error(1);
  2563  004A54  0E00               	movlw	0
  2564  004A56  6E02               	movwf	Error@a+1,c
  2565  004A58  0E01               	movlw	1
  2566  004A5A  6E01               	movwf	Error@a,c
  2567  004A5C  EC29  F029         	call	_Error	;wreg free
  2568                           
  2569                           ;Main.c: 240:     __delay_sec(1);
  2570  004A60  0E01               	movlw	1
  2571  004A62  EC0C  F02E         	call	___delay_sec
  2572                           
  2573                           ;Main.c: 242:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  2574  004A66  0E00               	movlw	low _Fil
  2575  004A68  0100               	movlb	0	; () banked
  2576  004A6A  6F9A               	movwf	f_open@fp& (0+255),b
  2577  004A6C  0E01               	movlw	high _Fil
  2578  004A6E  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  2579  004A70  0E10               	movlw	low STR_5
  2580  004A72  6F9C               	movwf	f_open@path& (0+255),b
  2581  004A74  0E08               	movlw	high STR_5
  2582  004A76  6F9D               	movwf	(f_open@path+1)& (0+255),b
  2583  004A78  0E13               	movlw	19
  2584  004A7A  6F9E               	movwf	f_open@mode& (0+255),b
  2585  004A7C  ECAC  F01A         	call	_f_open	;wreg free
  2586  004A80  0900               	iorlw	0
  2587  004A82  A4D8               	btfss	status,2,c
  2588  004A84  D046               	goto	l6726
  2589                           
  2590                           ;Main.c: 243:         Error(2);
  2591  004A86  0E00               	movlw	0
  2592  004A88  6E02               	movwf	Error@a+1,c
  2593  004A8A  0E02               	movlw	2
  2594  004A8C  6E01               	movwf	Error@a,c
  2595  004A8E  EC29  F029         	call	_Error	;wreg free
  2596                           
  2597                           ;Main.c: 244:         __delay_sec(1);
  2598  004A92  0E01               	movlw	1
  2599  004A94  EC0C  F02E         	call	___delay_sec
  2600                           
  2601                           ;Main.c: 246:         if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto 
      +                          endSD;
  2602  004A98  0101               	movlb	1	; () banked
  2603  004A9A  510A               	movf	(_Fil+10)& (0+255),w,b
  2604  004A9C  110B               	iorwf	(_Fil+11)& (0+255),w,b
  2605  004A9E  110C               	iorwf	(_Fil+12)& (0+255),w,b
  2606  004AA0  110D               	iorwf	(_Fil+13)& (0+255),w,b
  2607  004AA2  B4D8               	btfsc	status,2,c
  2608  004AA4  D012               	goto	l6710
  2609                           
  2610                           ; BSR set to: 1
  2611  004AA6  0E00               	movlw	low _Fil
  2612  004AA8  0100               	movlb	0	; () banked
  2613  004AAA  6F6D               	movwf	f_lseek@fp& (0+255),b
  2614  004AAC  0E01               	movlw	high _Fil
  2615  004AAE  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  2616  004AB0  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  2617  004AB4  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  2618  004AB8  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  2619  004ABC  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  2620  004AC0  EC97  F00C         	call	_f_lseek	;wreg free
  2621  004AC4  0900               	iorlw	0
  2622  004AC6  A4D8               	btfss	status,2,c
  2623  004AC8  D014               	goto	l6720
  2624  004ACA                     l6710:
  2625                           
  2626                           ;Main.c: 247:             Error(3);
  2627  004ACA  0E00               	movlw	0
  2628  004ACC  6E02               	movwf	Error@a+1,c
  2629  004ACE  0E03               	movlw	3
  2630  004AD0  6E01               	movwf	Error@a,c
  2631  004AD2  EC29  F029         	call	_Error	;wreg free
  2632                           
  2633                           ;Main.c: 248:             __delay_sec(1);
  2634  004AD6  0E01               	movlw	1
  2635  004AD8  EC0C  F02E         	call	___delay_sec
  2636                           
  2637                           ;Main.c: 249:             grabador();
  2638  004ADC  EC05  F02D         	call	_grabador	;wreg free
  2639                           
  2640                           ;Main.c: 251:             Error(5);
  2641  004AE0  0E00               	movlw	0
  2642  004AE2  6E02               	movwf	Error@a+1,c
  2643  004AE4  0E05               	movlw	5
  2644  004AE6  6E01               	movwf	Error@a,c
  2645  004AE8  EC29  F029         	call	_Error	;wreg free
  2646                           
  2647                           ;Main.c: 252:             __delay_sec(1);
  2648  004AEC  0E01               	movlw	1
  2649  004AEE  EC0C  F02E         	call	___delay_sec
  2650  004AF2                     l6720:
  2651  004AF2  0E00               	movlw	low _Fil
  2652  004AF4  6E4E               	movwf	f_close@fp,c
  2653  004AF6  0E01               	movlw	high _Fil
  2654  004AF8  6E4F               	movwf	f_close@fp+1,c
  2655  004AFA  ECEF  F02D         	call	_f_close	;wreg free
  2656                           
  2657                           ;Main.c: 254:             Error(6);
  2658  004AFE  0E00               	movlw	0
  2659  004B00  6E02               	movwf	Error@a+1,c
  2660  004B02  0E06               	movlw	6
  2661  004B04  6E01               	movwf	Error@a,c
  2662  004B06  EC29  F029         	call	_Error	;wreg free
  2663                           
  2664                           ;Main.c: 255:             __delay_sec(1);
  2665  004B0A  0E01               	movlw	1
  2666  004B0C  EC0C  F02E         	call	___delay_sec
  2667                           
  2668                           ;Main.c: 257:  }
  2669  004B10  0012               	return	
  2670  004B12                     l6726:
  2671                           
  2672                           ;Main.c: 259:         Error(0);
  2673  004B12  0E00               	movlw	0
  2674  004B14  6E02               	movwf	Error@a+1,c
  2675  004B16  0E00               	movlw	0
  2676  004B18  6E01               	movwf	Error@a,c
  2677  004B1A  EC29  F029         	call	_Error	;wreg free
  2678  004B1E  0012               	return		;funcret
  2679  004B20                     __end_of_guardar:
  2680                           	opt callstack 0
  2681                           
  2682 ;; *************** function _grabador *****************
  2683 ;; Defined at:
  2684 ;;		line 170 in file "Main.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  a               2   53[BANK0 ] int 
  2689 ;;  j               2   51[BANK0 ] int 
  2690 ;;  i               2    0        int 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0
  2701 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2703 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2704 ;;Total ram usage:        6 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:   11
  2707 ;; This function calls:
  2708 ;;		_Error
  2709 ;;		_f_write
  2710 ;; This function is called by:
  2711 ;;		_guardar
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text5
  2716  005A0A                     __ptext5:
  2717                           	opt callstack 0
  2718  005A0A                     _grabador:
  2719                           	opt callstack 18
  2720                           
  2721                           ;Main.c: 171:     Error(4);
  2722                           
  2723                           ;incstack = 0
  2724  005A0A  0E00               	movlw	0
  2725  005A0C  6E02               	movwf	Error@a+1,c
  2726  005A0E  0E04               	movlw	4
  2727  005A10  6E01               	movwf	Error@a,c
  2728  005A12  EC29  F029         	call	_Error	;wreg free
  2729                           
  2730                           ;Main.c: 177:         j = 0;
  2731  005A16  0E00               	movlw	0
  2732  005A18  0100               	movlb	0	; () banked
  2733  005A1A  6F94               	movwf	(grabador@j+1)& (0+255),b
  2734  005A1C  0E00               	movlw	0
  2735  005A1E  6F93               	movwf	grabador@j& (0+255),b
  2736                           
  2737                           ;Main.c: 178:         while(j!=30000){
  2738  005A20  D01D               	goto	l6632
  2739  005A22                     l943:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;Main.c: 180:             ADCON0bits.GO=1;
  2743  005A22  82C2               	bsf	4034,1,c	;volatile
  2744                           
  2745                           ;Main.c: 182:             a = ADRESH;
  2746  005A24  CFC4 F095          	movff	4036,grabador@a	;volatile
  2747  005A28  6B96               	clrf	(grabador@a+1)& (0+255),b
  2748                           
  2749                           ;Main.c: 184:             ND[0] = (char) a;
  2750  005A2A  C095  F0E2         	movff	grabador@a,_ND
  2751                           
  2752                           ;Main.c: 185:             ND[1] = (char) a;
  2753  005A2E  C095  F0E3         	movff	grabador@a,_ND+1
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;Main.c: 186:             f_write(&Fil, ND , 2 , &bw);
  2757  005A32  0E00               	movlw	low _Fil
  2758  005A34  6F6D               	movwf	f_write@fp& (0+255),b
  2759  005A36  0E01               	movlw	high _Fil
  2760  005A38  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  2761  005A3A  0EE2               	movlw	low _ND
  2762  005A3C  6F6F               	movwf	f_write@buff& (0+255),b
  2763  005A3E  0E00               	movlw	high _ND
  2764  005A40  6F70               	movwf	(f_write@buff+1)& (0+255),b
  2765  005A42  0E00               	movlw	0
  2766  005A44  6F72               	movwf	(f_write@btw+1)& (0+255),b
  2767  005A46  0E02               	movlw	2
  2768  005A48  6F71               	movwf	f_write@btw& (0+255),b
  2769  005A4A  0EE6               	movlw	low _bw
  2770  005A4C  6F73               	movwf	f_write@bw& (0+255),b
  2771  005A4E  0E00               	movlw	high _bw
  2772  005A50  6F74               	movwf	(f_write@bw+1)& (0+255),b
  2773  005A52  ECE5  F008         	call	_f_write	;wreg free
  2774                           
  2775                           ;Main.c: 188:             j++;
  2776  005A56  0100               	movlb	0	; () banked
  2777  005A58  4B93               	infsnz	grabador@j& (0+255),f,b
  2778  005A5A  2B94               	incf	(grabador@j+1)& (0+255),f,b
  2779  005A5C                     l6632:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;Main.c: 178:         while(j!=30000){
  2783  005A5C  0E30               	movlw	48
  2784  005A5E  1993               	xorwf	grabador@j& (0+255),w,b
  2785  005A60  E1E0               	bnz	l943
  2786  005A62  0E75               	movlw	117
  2787  005A64  1994               	xorwf	(grabador@j+1)& (0+255),w,b
  2788  005A66  B4D8               	btfsc	status,2,c
  2789  005A68  0012               	return	
  2790  005A6A  D7DB               	goto	l943
  2791  005A6C                     __end_of_grabador:
  2792                           	opt callstack 0
  2793                           
  2794 ;; *************** function _f_write *****************
  2795 ;; Defined at:
  2796 ;;		line 2691 in file "ff.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  fp              2   13[BANK0 ] PTR struct .
  2799 ;;		 -> Fil(32), 
  2800 ;;  buff            2   15[BANK0 ] PTR const void 
  2801 ;;		 -> ND(2), 
  2802 ;;  btw             2   17[BANK0 ] unsigned short 
  2803 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  2804 ;;		 -> bw(2), 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  clst            4   43[BANK0 ] unsigned long 
  2807 ;;  sect            4   39[BANK0 ] unsigned long 
  2808 ;;  wcnt            2   47[BANK0 ] unsigned short 
  2809 ;;  cc              2   37[BANK0 ] unsigned short 
  2810 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  2811 ;;		 -> ND(2), 
  2812 ;;  csect           1   36[BANK0 ] unsigned char 
  2813 ;;  res             1   33[BANK0 ] enum E93
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      enum E93
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2823 ;;      Params:         0       8       0       0       0       0       0       0       0
  2824 ;;      Locals:         0      16       0       0       0       0       0       0       0
  2825 ;;      Temps:          0      12       0       0       0       0       0       0       0
  2826 ;;      Totals:         0      36       0       0       0       0       0       0       0
  2827 ;;Total ram usage:       36 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:   10
  2830 ;; This function calls:
  2831 ;;		_clust2sect
  2832 ;;		_create_chain
  2833 ;;		_disk_write
  2834 ;;		_mem_cpy
  2835 ;;		_move_window
  2836 ;;		_sync_window
  2837 ;;		_validate
  2838 ;; This function is called by:
  2839 ;;		_grabador
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text6
  2844  0011CA                     __ptext6:
  2845                           	opt callstack 0
  2846  0011CA                     _f_write:
  2847                           	opt callstack 18
  2848                           
  2849                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;incstack = 0
  2853  0011CA  C06F  F082         	movff	f_write@buff,f_write@wbuff
  2854  0011CE  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  2855                           
  2856                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  2857  0011D2  C073  FFD9         	movff	f_write@bw,fsr2l
  2858  0011D6  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2859  0011DA  0E00               	movlw	0
  2860  0011DC  6EDE               	movwf	postinc2,c
  2861  0011DE  0E00               	movlw	0
  2862  0011E0  6EDD               	movwf	postdec2,c
  2863                           
  2864                           ;ff.c: 2707:  res = validate(fp);
  2865  0011E2  C06D  F002         	movff	f_write@fp,validate@obj
  2866  0011E6  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  2867  0011EA  ECE9  F02A         	call	_validate	;wreg free
  2868  0011EE  0100               	movlb	0	; () banked
  2869  0011F0  6F81               	movwf	f_write@res& (0+255),b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;ff.c: 2708:  if (res != FR_OK) return res;
  2873  0011F2  5181               	movf	f_write@res& (0+255),w,b
  2874  0011F4  A4D8               	btfss	status,2,c
  2875  0011F6  0012               	return	
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;ff.c: 2709:  if (fp->err)
  2879  0011F8  EE20 F005          	lfsr	2,5
  2880  0011FC  516D               	movf	f_write@fp& (0+255),w,b
  2881  0011FE  26D9               	addwf	fsr2l,f,c
  2882  001200  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2883  001202  22DA               	addwfc	fsr2h,f,c
  2884  001204  50DF               	movf	indf2,w,c
  2885  001206  A4D8               	btfss	status,2,c
  2886  001208  0012               	return	
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  2890  00120A  EE20 F004          	lfsr	2,4
  2891  00120E  516D               	movf	f_write@fp& (0+255),w,b
  2892  001210  26D9               	addwf	fsr2l,f,c
  2893  001212  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2894  001214  22DA               	addwfc	fsr2h,f,c
  2895  001216  A2DF               	btfss	indf2,1,c
  2896  001218  0012               	return	
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  2900  00121A  EE20 F006          	lfsr	2,6
  2901  00121E  516D               	movf	f_write@fp& (0+255),w,b
  2902  001220  26D9               	addwf	fsr2l,f,c
  2903  001222  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2904  001224  22DA               	addwfc	fsr2h,f,c
  2905  001226  EE10 F006          	lfsr	1,6
  2906  00122A  516D               	movf	f_write@fp& (0+255),w,b
  2907  00122C  26E1               	addwf	fsr1l,f,c
  2908  00122E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2909  001230  22E2               	addwfc	fsr1h,f,c
  2910  001232  CFE6 F079          	movff	postinc1,??_f_write+4
  2911  001236  CFE6 F07A          	movff	postinc1,??_f_write+5
  2912  00123A  CFE6 F07B          	movff	postinc1,??_f_write+6
  2913  00123E  CFE6 F07C          	movff	postinc1,??_f_write+7
  2914  001242  5171               	movf	f_write@btw& (0+255),w,b
  2915  001244  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2916  001246  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2917  001248  5172               	movf	(f_write@btw+1)& (0+255),w,b
  2918  00124A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2919  00124C  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2920  00124E  0E00               	movlw	0
  2921  001250  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  2922  001252  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2923  001254  0E00               	movlw	0
  2924  001256  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  2925  001258  6F80               	movwf	(??_f_write+11)& (0+255),b
  2926  00125A  50DE               	movf	postinc2,w,c
  2927  00125C  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2928  00125E  50DE               	movf	postinc2,w,c
  2929  001260  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2930  001262  50DE               	movf	postinc2,w,c
  2931  001264  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2932  001266  50DE               	movf	postinc2,w,c
  2933  001268  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2934  00126A  B0D8               	btfsc	status,0,c
  2935  00126C  D329               	goto	l6238
  2936                           
  2937                           ; BSR set to: 0
  2938  00126E  0E00               	movlw	0
  2939  001270  6F72               	movwf	(f_write@btw+1)& (0+255),b
  2940  001272  0E00               	movlw	0
  2941  001274  6F71               	movwf	f_write@btw& (0+255),b
  2942  001276  D324               	goto	l6238
  2943  001278                     l6130:
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  2947  001278  EE20 F006          	lfsr	2,6
  2948  00127C  516D               	movf	f_write@fp& (0+255),w,b
  2949  00127E  26D9               	addwf	fsr2l,f,c
  2950  001280  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2951  001282  22DA               	addwfc	fsr2h,f,c
  2952  001284  0EFF               	movlw	255
  2953  001286  14DE               	andwf	postinc2,w,c
  2954  001288  6F75               	movwf	??_f_write& (0+255),b
  2955  00128A  0E01               	movlw	1
  2956  00128C  14DE               	andwf	postinc2,w,c
  2957  00128E  6F76               	movwf	(??_f_write+1)& (0+255),b
  2958  001290  0E00               	movlw	0
  2959  001292  14DE               	andwf	postinc2,w,c
  2960  001294  6F77               	movwf	(??_f_write+2)& (0+255),b
  2961  001296  0E00               	movlw	0
  2962  001298  14DE               	andwf	postinc2,w,c
  2963  00129A  6F78               	movwf	(??_f_write+3)& (0+255),b
  2964  00129C  5175               	movf	??_f_write& (0+255),w,b
  2965  00129E  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  2966  0012A0  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  2967  0012A2  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  2968  0012A4  A4D8               	btfss	status,2,c
  2969  0012A6  D26A               	goto	l6214
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  2973  0012A8  EE20 F006          	lfsr	2,6
  2974  0012AC  516D               	movf	f_write@fp& (0+255),w,b
  2975  0012AE  26D9               	addwf	fsr2l,f,c
  2976  0012B0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2977  0012B2  22DA               	addwfc	fsr2h,f,c
  2978  0012B4  CFDE F075          	movff	postinc2,??_f_write
  2979  0012B8  CFDE F076          	movff	postinc2,??_f_write+1
  2980  0012BC  CFDE F077          	movff	postinc2,??_f_write+2
  2981  0012C0  CFDE F078          	movff	postinc2,??_f_write+3
  2982  0012C4  0E0A               	movlw	10
  2983  0012C6  D005               	goto	u8040
  2984  0012C8                     u8045:
  2985  0012C8  90D8               	bcf	status,0,c
  2986  0012CA  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  2987  0012CC  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  2988  0012CE  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2989  0012D0  3375               	rrcf	??_f_write& (0+255),f,b
  2990  0012D2                     u8040:
  2991  0012D2  2EE8               	decfsz	wreg,f,c
  2992  0012D4  D7F9               	goto	u8045
  2993  0012D6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2994  0012DA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2995  0012DE  EE10 F002          	lfsr	1,2
  2996  0012E2  50DE               	movf	postinc2,w,c
  2997  0012E4  26E1               	addwf	fsr1l,f,c
  2998  0012E6  50DD               	movf	postdec2,w,c
  2999  0012E8  22E2               	addwfc	fsr1h,f,c
  3000  0012EA  50E7               	movf	indf1,w,c
  3001  0012EC  6F79               	movwf	(??_f_write+4)& (0+255),b
  3002  0012EE  0579               	decf	(??_f_write+4)& (0+255),w,b
  3003  0012F0  1575               	andwf	??_f_write& (0+255),w,b
  3004  0012F2  6F84               	movwf	f_write@csect& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;ff.c: 2719:    if (!csect) {
  3008  0012F4  5184               	movf	f_write@csect& (0+255),w,b
  3009  0012F6  A4D8               	btfss	status,2,c
  3010  0012F8  D0A3               	goto	l6166
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;ff.c: 2720:     if (fp->fptr == 0) {
  3014  0012FA  EE20 F006          	lfsr	2,6
  3015  0012FE  516D               	movf	f_write@fp& (0+255),w,b
  3016  001300  26D9               	addwf	fsr2l,f,c
  3017  001302  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3018  001304  22DA               	addwfc	fsr2h,f,c
  3019  001306  50DE               	movf	postinc2,w,c
  3020  001308  10DE               	iorwf	postinc2,w,c
  3021  00130A  10DE               	iorwf	postinc2,w,c
  3022  00130C  10DE               	iorwf	postinc2,w,c
  3023  00130E  A4D8               	btfss	status,2,c
  3024  001310  D027               	goto	l6144
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;ff.c: 2721:      clst = fp->sclust;
  3028  001312  EE20 F00E          	lfsr	2,14
  3029  001316  516D               	movf	f_write@fp& (0+255),w,b
  3030  001318  26D9               	addwf	fsr2l,f,c
  3031  00131A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3032  00131C  22DA               	addwfc	fsr2h,f,c
  3033  00131E  CFDE F08B          	movff	postinc2,f_write@clst
  3034  001322  CFDE F08C          	movff	postinc2,f_write@clst+1
  3035  001326  CFDE F08D          	movff	postinc2,f_write@clst+2
  3036  00132A  CFDE F08E          	movff	postinc2,f_write@clst+3
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;ff.c: 2722:      if (clst == 0)
  3040  00132E  518B               	movf	f_write@clst& (0+255),w,b
  3041  001330  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  3042  001332  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  3043  001334  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  3044  001336  A4D8               	btfss	status,2,c
  3045  001338  D033               	goto	l6146
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  3049  00133A  C06D  FFD9         	movff	f_write@fp,fsr2l
  3050  00133E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3051  001342  CFDE F056          	movff	postinc2,create_chain@fs
  3052  001346  CFDD F057          	movff	postdec2,create_chain@fs+1
  3053  00134A  0E00               	movlw	0
  3054  00134C  6E58               	movwf	create_chain@clst,c
  3055  00134E  0E00               	movlw	0
  3056  001350  6E59               	movwf	create_chain@clst+1,c
  3057  001352  0E00               	movlw	0
  3058  001354  6E5A               	movwf	create_chain@clst+2,c
  3059  001356  0E00               	movlw	0
  3060  001358  6E5B               	movwf	create_chain@clst+3,c
  3061  00135A  EC77  F01C         	call	_create_chain	;wreg free
  3062  00135E  D018               	goto	L1
  3063  001360                     l6144:
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  3067  001360  C06D  FFD9         	movff	f_write@fp,fsr2l
  3068  001364  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3069  001368  CFDE F056          	movff	postinc2,create_chain@fs
  3070  00136C  CFDD F057          	movff	postdec2,create_chain@fs+1
  3071  001370  EE20 F012          	lfsr	2,18
  3072  001374  516D               	movf	f_write@fp& (0+255),w,b
  3073  001376  26D9               	addwf	fsr2l,f,c
  3074  001378  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3075  00137A  22DA               	addwfc	fsr2h,f,c
  3076  00137C  CFDE F058          	movff	postinc2,create_chain@clst
  3077  001380  CFDE F059          	movff	postinc2,create_chain@clst+1
  3078  001384  CFDE F05A          	movff	postinc2,create_chain@clst+2
  3079  001388  CFDE F05B          	movff	postinc2,create_chain@clst+3
  3080  00138C  EC77  F01C         	call	_create_chain	;wreg free
  3081  001390                     L1:
  3082  001390  C056  F08B         	movff	?_create_chain,f_write@clst
  3083  001394  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  3084  001398  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  3085  00139C  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  3086  0013A0                     l6146:
  3087                           
  3088                           ;ff.c: 2732:     if (clst == 0) break;
  3089  0013A0  0100               	movlb	0	; () banked
  3090  0013A2  518B               	movf	f_write@clst& (0+255),w,b
  3091  0013A4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  3092  0013A6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  3093  0013A8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  3094  0013AA  B4D8               	btfsc	status,2,c
  3095  0013AC  D28D               	goto	u8260
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  3099  0013AE  058B               	decf	f_write@clst& (0+255),w,b
  3100  0013B0  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  3101  0013B2  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  3102  0013B4  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  3103  0013B6  A4D8               	btfss	status,2,c
  3104  0013B8  D009               	goto	l6156
  3105                           
  3106                           ; BSR set to: 0
  3107  0013BA  EE20 F005          	lfsr	2,5
  3108  0013BE  516D               	movf	f_write@fp& (0+255),w,b
  3109  0013C0  26D9               	addwf	fsr2l,f,c
  3110  0013C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3111  0013C4  22DA               	addwfc	fsr2h,f,c
  3112  0013C6  0E02               	movlw	2
  3113  0013C8  6EDF               	movwf	indf2,c
  3114  0013CA  0012               	return	
  3115  0013CC                     l6156:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  3119  0013CC  298B               	incf	f_write@clst& (0+255),w,b
  3120  0013CE  E110               	bnz	l6162
  3121  0013D0  298C               	incf	(f_write@clst+1)& (0+255),w,b
  3122  0013D2  E10E               	bnz	l6162
  3123  0013D4  298D               	incf	(f_write@clst+2)& (0+255),w,b
  3124  0013D6  E10C               	bnz	l6162
  3125  0013D8  298E               	incf	(f_write@clst+3)& (0+255),w,b
  3126  0013DA  A4D8               	btfss	status,2,c
  3127  0013DC  D009               	goto	l6162
  3128                           
  3129                           ; BSR set to: 0
  3130  0013DE  EE20 F005          	lfsr	2,5
  3131  0013E2  516D               	movf	f_write@fp& (0+255),w,b
  3132  0013E4  26D9               	addwf	fsr2l,f,c
  3133  0013E6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3134  0013E8  22DA               	addwfc	fsr2h,f,c
  3135  0013EA  0E01               	movlw	1
  3136  0013EC  6EDF               	movwf	indf2,c
  3137  0013EE  0012               	return	
  3138  0013F0                     l6162:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;ff.c: 2735:     fp->clust = clst;
  3142  0013F0  EE20 F012          	lfsr	2,18
  3143  0013F4  516D               	movf	f_write@fp& (0+255),w,b
  3144  0013F6  26D9               	addwf	fsr2l,f,c
  3145  0013F8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3146  0013FA  22DA               	addwfc	fsr2h,f,c
  3147  0013FC  C08B  FFDE         	movff	f_write@clst,postinc2
  3148  001400  C08C  FFDE         	movff	f_write@clst+1,postinc2
  3149  001404  C08D  FFDE         	movff	f_write@clst+2,postinc2
  3150  001408  C08E  FFDE         	movff	f_write@clst+3,postinc2
  3151                           
  3152                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  3153  00140C  EE20 F00E          	lfsr	2,14
  3154  001410  516D               	movf	f_write@fp& (0+255),w,b
  3155  001412  26D9               	addwf	fsr2l,f,c
  3156  001414  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3157  001416  22DA               	addwfc	fsr2h,f,c
  3158  001418  50DE               	movf	postinc2,w,c
  3159  00141A  10DE               	iorwf	postinc2,w,c
  3160  00141C  10DE               	iorwf	postinc2,w,c
  3161  00141E  10DE               	iorwf	postinc2,w,c
  3162  001420  A4D8               	btfss	status,2,c
  3163  001422  D00E               	goto	l6166
  3164                           
  3165                           ; BSR set to: 0
  3166  001424  EE20 F00E          	lfsr	2,14
  3167  001428  516D               	movf	f_write@fp& (0+255),w,b
  3168  00142A  26D9               	addwf	fsr2l,f,c
  3169  00142C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3170  00142E  22DA               	addwfc	fsr2h,f,c
  3171  001430  C08B  FFDE         	movff	f_write@clst,postinc2
  3172  001434  C08C  FFDE         	movff	f_write@clst+1,postinc2
  3173  001438  C08D  FFDE         	movff	f_write@clst+2,postinc2
  3174  00143C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  3175  001440                     l6166:
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  3179  001440  EE20 F016          	lfsr	2,22
  3180  001444  516D               	movf	f_write@fp& (0+255),w,b
  3181  001446  26D9               	addwf	fsr2l,f,c
  3182  001448  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3183  00144A  22DA               	addwfc	fsr2h,f,c
  3184  00144C  C06D  FFE1         	movff	f_write@fp,fsr1l
  3185  001450  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  3186  001454  EE00 F02A          	lfsr	0,42
  3187  001458  50E6               	movf	postinc1,w,c
  3188  00145A  26E9               	addwf	fsr0l,f,c
  3189  00145C  50E5               	movf	postdec1,w,c
  3190  00145E  22EA               	addwfc	fsr0h,f,c
  3191  001460  50DE               	movf	postinc2,w,c
  3192  001462  18EE               	xorwf	postinc0,w,c
  3193  001464  E121               	bnz	l6174
  3194  001466  50DE               	movf	postinc2,w,c
  3195  001468  18EE               	xorwf	postinc0,w,c
  3196  00146A  E11E               	bnz	l6174
  3197  00146C  50DE               	movf	postinc2,w,c
  3198  00146E  18EE               	xorwf	postinc0,w,c
  3199  001470  E11B               	bnz	l6174
  3200  001472  50DE               	movf	postinc2,w,c
  3201  001474  18EE               	xorwf	postinc0,w,c
  3202  001476  A4D8               	btfss	status,2,c
  3203  001478  D017               	goto	l6174
  3204                           
  3205                           ; BSR set to: 0
  3206  00147A  C06D  FFD9         	movff	f_write@fp,fsr2l
  3207  00147E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3208  001482  CFDE F01B          	movff	postinc2,sync_window@fs
  3209  001486  CFDD F01C          	movff	postdec2,sync_window@fs+1
  3210  00148A  EC6C  F022         	call	_sync_window	;wreg free
  3211  00148E  0900               	iorlw	0
  3212  001490  B4D8               	btfsc	status,2,c
  3213  001492  D00A               	goto	l6174
  3214                           
  3215                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3216  001494  0100               	movlb	0	; () banked
  3217  001496  EE20 F005          	lfsr	2,5
  3218  00149A  516D               	movf	f_write@fp& (0+255),w,b
  3219  00149C  26D9               	addwf	fsr2l,f,c
  3220  00149E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3221  0014A0  22DA               	addwfc	fsr2h,f,c
  3222  0014A2  0E01               	movlw	1
  3223  0014A4  6EDF               	movwf	indf2,c
  3224  0014A6  0012               	return	
  3225  0014A8                     l6174:
  3226                           
  3227                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  3228  0014A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  3229  0014AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3230  0014B0  CFDE F00D          	movff	postinc2,clust2sect@fs
  3231  0014B4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  3232  0014B8  0100               	movlb	0	; () banked
  3233  0014BA  EE20 F012          	lfsr	2,18
  3234  0014BE  516D               	movf	f_write@fp& (0+255),w,b
  3235  0014C0  26D9               	addwf	fsr2l,f,c
  3236  0014C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3237  0014C4  22DA               	addwfc	fsr2h,f,c
  3238  0014C6  CFDE F00F          	movff	postinc2,clust2sect@clst
  3239  0014CA  CFDE F010          	movff	postinc2,clust2sect@clst+1
  3240  0014CE  CFDE F011          	movff	postinc2,clust2sect@clst+2
  3241  0014D2  CFDE F012          	movff	postinc2,clust2sect@clst+3
  3242  0014D6  EC8E  F029         	call	_clust2sect	;wreg free
  3243  0014DA  C00D  F087         	movff	?_clust2sect,f_write@sect
  3244  0014DE  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  3245  0014E2  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  3246  0014E6  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  3247                           
  3248                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  3249  0014EA  0100               	movlb	0	; () banked
  3250  0014EC  5187               	movf	f_write@sect& (0+255),w,b
  3251  0014EE  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  3252  0014F0  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  3253  0014F2  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  3254  0014F4  A4D8               	btfss	status,2,c
  3255  0014F6  D009               	goto	l6182
  3256                           
  3257                           ; BSR set to: 0
  3258  0014F8  EE20 F005          	lfsr	2,5
  3259  0014FC  516D               	movf	f_write@fp& (0+255),w,b
  3260  0014FE  26D9               	addwf	fsr2l,f,c
  3261  001500  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3262  001502  22DA               	addwfc	fsr2h,f,c
  3263  001504  0E02               	movlw	2
  3264  001506  6EDF               	movwf	indf2,c
  3265  001508  0012               	return	
  3266  00150A                     l6182:
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;ff.c: 2750:    sect += csect;
  3270  00150A  5184               	movf	f_write@csect& (0+255),w,b
  3271  00150C  2787               	addwf	f_write@sect& (0+255),f,b
  3272  00150E  0E00               	movlw	0
  3273  001510  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  3274  001512  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  3275  001514  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  3276                           
  3277                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  3278  001516  C071  F075         	movff	f_write@btw,??_f_write
  3279  00151A  C072  F076         	movff	f_write@btw+1,??_f_write+1
  3280  00151E  0E09               	movlw	9
  3281  001520  6F77               	movwf	(??_f_write+2)& (0+255),b
  3282  001522                     u8155:
  3283  001522  90D8               	bcf	status,0,c
  3284  001524  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  3285  001526  3375               	rrcf	??_f_write& (0+255),f,b
  3286  001528  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  3287  00152A  D7FB               	goto	u8155
  3288  00152C  C075  F085         	movff	??_f_write,f_write@cc
  3289  001530  C076  F086         	movff	??_f_write+1,f_write@cc+1
  3290                           
  3291                           ;ff.c: 2752:    if (cc) {
  3292  001534  5185               	movf	f_write@cc& (0+255),w,b
  3293  001536  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  3294  001538  B4D8               	btfsc	status,2,c
  3295  00153A  D0D2               	goto	l6202
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  3299  00153C  5184               	movf	f_write@csect& (0+255),w,b
  3300  00153E  2585               	addwf	f_write@cc& (0+255),w,b
  3301  001540  6F75               	movwf	??_f_write& (0+255),b
  3302  001542  0E00               	movlw	0
  3303  001544  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  3304  001546  6F76               	movwf	(??_f_write+1)& (0+255),b
  3305  001548  C06D  FFD9         	movff	f_write@fp,fsr2l
  3306  00154C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3307  001550  EE10 F002          	lfsr	1,2
  3308  001554  50DE               	movf	postinc2,w,c
  3309  001556  26E1               	addwf	fsr1l,f,c
  3310  001558  50DD               	movf	postdec2,w,c
  3311  00155A  22E2               	addwfc	fsr1h,f,c
  3312  00155C  50E7               	movf	indf1,w,c
  3313  00155E  6F77               	movwf	(??_f_write+2)& (0+255),b
  3314  001560  6B78               	clrf	(??_f_write+3)& (0+255),b
  3315  001562  5175               	movf	??_f_write& (0+255),w,b
  3316  001564  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  3317  001566  5176               	movf	(??_f_write+1)& (0+255),w,b
  3318  001568  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  3319  00156A  B0D8               	btfsc	status,0,c
  3320  00156C  D012               	goto	l6188
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  3324  00156E  C06D  FFD9         	movff	f_write@fp,fsr2l
  3325  001572  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3326  001576  EE10 F002          	lfsr	1,2
  3327  00157A  50DE               	movf	postinc2,w,c
  3328  00157C  26E1               	addwf	fsr1l,f,c
  3329  00157E  50DD               	movf	postdec2,w,c
  3330  001580  22E2               	addwfc	fsr1h,f,c
  3331  001582  50E7               	movf	indf1,w,c
  3332  001584  6F75               	movwf	??_f_write& (0+255),b
  3333  001586  5184               	movf	f_write@csect& (0+255),w,b
  3334  001588  5D75               	subwf	??_f_write& (0+255),w,b
  3335  00158A  6F85               	movwf	f_write@cc& (0+255),b
  3336  00158C  6B86               	clrf	(f_write@cc+1)& (0+255),b
  3337  00158E  A0D8               	btfss	status,0,c
  3338  001590  0786               	decf	(f_write@cc+1)& (0+255),f,b
  3339  001592                     l6188:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  3343  001592  C082  F011         	movff	f_write@wbuff,disk_write@buff
  3344  001596  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  3345  00159A  C087  F013         	movff	f_write@sect,disk_write@sector
  3346  00159E  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  3347  0015A2  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  3348  0015A6  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  3349  0015AA  C085  F017         	movff	f_write@cc,disk_write@count
  3350  0015AE  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  3351  0015B2  C06D  FFD9         	movff	f_write@fp,fsr2l
  3352  0015B6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3353  0015BA  EE10 F001          	lfsr	1,1
  3354  0015BE  50DE               	movf	postinc2,w,c
  3355  0015C0  26E1               	addwf	fsr1l,f,c
  3356  0015C2  50DD               	movf	postdec2,w,c
  3357  0015C4  22E2               	addwfc	fsr1h,f,c
  3358  0015C6  50E7               	movf	indf1,w,c
  3359  0015C8  EC90  F025         	call	_disk_write
  3360  0015CC  0900               	iorlw	0
  3361  0015CE  B4D8               	btfsc	status,2,c
  3362  0015D0  D00A               	goto	l6194
  3363                           
  3364                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3365  0015D2  0100               	movlb	0	; () banked
  3366  0015D4  EE20 F005          	lfsr	2,5
  3367  0015D8  516D               	movf	f_write@fp& (0+255),w,b
  3368  0015DA  26D9               	addwf	fsr2l,f,c
  3369  0015DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3370  0015DE  22DA               	addwfc	fsr2h,f,c
  3371  0015E0  0E01               	movlw	1
  3372  0015E2  6EDF               	movwf	indf2,c
  3373  0015E4  0012               	return	
  3374  0015E6                     l6194:
  3375                           
  3376                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  3377  0015E6  0100               	movlb	0	; () banked
  3378  0015E8  5185               	movf	f_write@cc& (0+255),w,b
  3379  0015EA  6F75               	movwf	??_f_write& (0+255),b
  3380  0015EC  5186               	movf	(f_write@cc+1)& (0+255),w,b
  3381  0015EE  6F76               	movwf	(??_f_write+1)& (0+255),b
  3382  0015F0  6B77               	clrf	(??_f_write+2)& (0+255),b
  3383  0015F2  6B78               	clrf	(??_f_write+3)& (0+255),b
  3384  0015F4  C06D  FFD9         	movff	f_write@fp,fsr2l
  3385  0015F8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3386  0015FC  EE10 F02A          	lfsr	1,42
  3387  001600  50DE               	movf	postinc2,w,c
  3388  001602  26E1               	addwf	fsr1l,f,c
  3389  001604  50DD               	movf	postdec2,w,c
  3390  001606  22E2               	addwfc	fsr1h,f,c
  3391  001608  CFE6 F079          	movff	postinc1,??_f_write+4
  3392  00160C  CFE6 F07A          	movff	postinc1,??_f_write+5
  3393  001610  CFE6 F07B          	movff	postinc1,??_f_write+6
  3394  001614  CFE6 F07C          	movff	postinc1,??_f_write+7
  3395  001618  5187               	movf	f_write@sect& (0+255),w,b
  3396  00161A  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  3397  00161C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  3398  00161E  5188               	movf	(f_write@sect+1)& (0+255),w,b
  3399  001620  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  3400  001622  6F7E               	movwf	(??_f_write+9)& (0+255),b
  3401  001624  5189               	movf	(f_write@sect+2)& (0+255),w,b
  3402  001626  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  3403  001628  6F7F               	movwf	(??_f_write+10)& (0+255),b
  3404  00162A  518A               	movf	(f_write@sect+3)& (0+255),w,b
  3405  00162C  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  3406  00162E  6F80               	movwf	(??_f_write+11)& (0+255),b
  3407  001630  5175               	movf	??_f_write& (0+255),w,b
  3408  001632  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  3409  001634  5176               	movf	(??_f_write+1)& (0+255),w,b
  3410  001636  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  3411  001638  5177               	movf	(??_f_write+2)& (0+255),w,b
  3412  00163A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  3413  00163C  5178               	movf	(??_f_write+3)& (0+255),w,b
  3414  00163E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  3415  001640  B0D8               	btfsc	status,0,c
  3416  001642  D03E               	goto	l6200
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  3420  001644  C06D  FFD9         	movff	f_write@fp,fsr2l
  3421  001648  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3422  00164C  CFDE F075          	movff	postinc2,??_f_write
  3423  001650  CFDD F076          	movff	postdec2,??_f_write+1
  3424  001654  0E2E               	movlw	46
  3425  001656  2575               	addwf	??_f_write& (0+255),w,b
  3426  001658  6E01               	movwf	mem_cpy@dst,c
  3427  00165A  0E00               	movlw	0
  3428  00165C  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  3429  00165E  6E02               	movwf	mem_cpy@dst+1,c
  3430  001660  C06D  FFD9         	movff	f_write@fp,fsr2l
  3431  001664  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3432  001668  EE10 F02A          	lfsr	1,42
  3433  00166C  50DE               	movf	postinc2,w,c
  3434  00166E  26E1               	addwf	fsr1l,f,c
  3435  001670  50DD               	movf	postdec2,w,c
  3436  001672  22E2               	addwfc	fsr1h,f,c
  3437  001674  CFE6 F077          	movff	postinc1,??_f_write+2
  3438  001678  CFE5 F078          	movff	postdec1,??_f_write+3
  3439  00167C  5187               	movf	f_write@sect& (0+255),w,b
  3440  00167E  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  3441  001680  5188               	movf	(f_write@sect+1)& (0+255),w,b
  3442  001682  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  3443  001684  0E09               	movlw	9
  3444  001686                     u8205:
  3445  001686  90D8               	bcf	status,0,c
  3446  001688  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  3447  00168A  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  3448  00168C  2EE8               	decfsz	wreg,f,c
  3449  00168E  D7FB               	goto	u8205
  3450  001690  5177               	movf	(??_f_write+2)& (0+255),w,b
  3451  001692  2582               	addwf	f_write@wbuff& (0+255),w,b
  3452  001694  6E03               	movwf	mem_cpy@src,c
  3453  001696  5178               	movf	(??_f_write+3)& (0+255),w,b
  3454  001698  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  3455  00169A  6E04               	movwf	mem_cpy@src+1,c
  3456  00169C  0E02               	movlw	2
  3457  00169E  6E06               	movwf	mem_cpy@cnt+1,c
  3458  0016A0  0E00               	movlw	0
  3459  0016A2  6E05               	movwf	mem_cpy@cnt,c
  3460  0016A4  ECF4  F02B         	call	_mem_cpy	;wreg free
  3461                           
  3462                           ;ff.c: 2761:      fp->fs->wflag = 0;
  3463  0016A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  3464  0016AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3465  0016B0  EE10 F004          	lfsr	1,4
  3466  0016B4  50DE               	movf	postinc2,w,c
  3467  0016B6  26E1               	addwf	fsr1l,f,c
  3468  0016B8  50DD               	movf	postdec2,w,c
  3469  0016BA  22E2               	addwfc	fsr1h,f,c
  3470  0016BC  0E00               	movlw	0
  3471  0016BE  6EE7               	movwf	indf1,c
  3472  0016C0                     l6200:
  3473                           
  3474                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  3475  0016C0  C085  F075         	movff	f_write@cc,??_f_write
  3476  0016C4  C086  F076         	movff	f_write@cc+1,??_f_write+1
  3477  0016C8  0E09               	movlw	9
  3478  0016CA                     u8215:
  3479  0016CA  90D8               	bcf	status,0,c
  3480  0016CC  0100               	movlb	0	; () banked
  3481  0016CE  3775               	rlcf	??_f_write& (0+255),f,b
  3482  0016D0  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  3483  0016D2  2EE8               	decfsz	wreg,f,c
  3484  0016D4  D7FA               	goto	u8215
  3485  0016D6  C075  F08F         	movff	??_f_write,f_write@wcnt
  3486  0016DA  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  3487                           
  3488                           ;ff.c: 2771:     continue;
  3489  0016DE  D0D2               	goto	l6230
  3490  0016E0                     l6202:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  3494  0016E0  EE20 F00A          	lfsr	2,10
  3495  0016E4  516D               	movf	f_write@fp& (0+255),w,b
  3496  0016E6  26D9               	addwf	fsr2l,f,c
  3497  0016E8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3498  0016EA  22DA               	addwfc	fsr2h,f,c
  3499  0016EC  EE10 F006          	lfsr	1,6
  3500  0016F0  516D               	movf	f_write@fp& (0+255),w,b
  3501  0016F2  26E1               	addwf	fsr1l,f,c
  3502  0016F4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3503  0016F6  22E2               	addwfc	fsr1h,f,c
  3504  0016F8  50DE               	movf	postinc2,w,c
  3505  0016FA  5CE6               	subwf	postinc1,w,c
  3506  0016FC  50DE               	movf	postinc2,w,c
  3507  0016FE  58E6               	subwfb	postinc1,w,c
  3508  001700  50DE               	movf	postinc2,w,c
  3509  001702  58E6               	subwfb	postinc1,w,c
  3510  001704  50DE               	movf	postinc2,w,c
  3511  001706  58E6               	subwfb	postinc1,w,c
  3512  001708  A0D8               	btfss	status,0,c
  3513  00170A  D029               	goto	l6212
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  3517  00170C  C06D  FFD9         	movff	f_write@fp,fsr2l
  3518  001710  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3519  001714  CFDE F01B          	movff	postinc2,sync_window@fs
  3520  001718  CFDD F01C          	movff	postdec2,sync_window@fs+1
  3521  00171C  EC6C  F022         	call	_sync_window	;wreg free
  3522  001720  0900               	iorlw	0
  3523  001722  B4D8               	btfsc	status,2,c
  3524  001724  D00A               	goto	l6210
  3525  001726  0100               	movlb	0	; () banked
  3526  001728  EE20 F005          	lfsr	2,5
  3527  00172C  516D               	movf	f_write@fp& (0+255),w,b
  3528  00172E  26D9               	addwf	fsr2l,f,c
  3529  001730  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3530  001732  22DA               	addwfc	fsr2h,f,c
  3531  001734  0E01               	movlw	1
  3532  001736  6EDF               	movwf	indf2,c
  3533  001738  0012               	return	
  3534  00173A                     l6210:
  3535                           
  3536                           ;ff.c: 2776:     fp->fs->winsect = sect;
  3537  00173A  C06D  FFD9         	movff	f_write@fp,fsr2l
  3538  00173E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3539  001742  EE10 F02A          	lfsr	1,42
  3540  001746  50DE               	movf	postinc2,w,c
  3541  001748  26E1               	addwf	fsr1l,f,c
  3542  00174A  50DD               	movf	postdec2,w,c
  3543  00174C  22E2               	addwfc	fsr1h,f,c
  3544  00174E  C087  FFE6         	movff	f_write@sect,postinc1
  3545  001752  C088  FFE6         	movff	f_write@sect+1,postinc1
  3546  001756  C089  FFE6         	movff	f_write@sect+2,postinc1
  3547  00175A  C08A  FFE6         	movff	f_write@sect+3,postinc1
  3548  00175E                     l6212:
  3549                           
  3550                           ;ff.c: 2785:    fp->dsect = sect;
  3551  00175E  0100               	movlb	0	; () banked
  3552  001760  EE20 F016          	lfsr	2,22
  3553  001764  516D               	movf	f_write@fp& (0+255),w,b
  3554  001766  26D9               	addwf	fsr2l,f,c
  3555  001768  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3556  00176A  22DA               	addwfc	fsr2h,f,c
  3557  00176C  C087  FFDE         	movff	f_write@sect,postinc2
  3558  001770  C088  FFDE         	movff	f_write@sect+1,postinc2
  3559  001774  C089  FFDE         	movff	f_write@sect+2,postinc2
  3560  001778  C08A  FFDE         	movff	f_write@sect+3,postinc2
  3561  00177C                     l6214:
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  3565  00177C  0EFF               	movlw	255
  3566  00177E  6F75               	movwf	??_f_write& (0+255),b
  3567  001780  0E01               	movlw	1
  3568  001782  6F76               	movwf	(??_f_write+1)& (0+255),b
  3569  001784  EE20 F006          	lfsr	2,6
  3570  001788  516D               	movf	f_write@fp& (0+255),w,b
  3571  00178A  26D9               	addwf	fsr2l,f,c
  3572  00178C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3573  00178E  22DA               	addwfc	fsr2h,f,c
  3574  001790  CFDE F077          	movff	postinc2,??_f_write+2
  3575  001794  CFDD F078          	movff	postdec2,??_f_write+3
  3576  001798  5175               	movf	??_f_write& (0+255),w,b
  3577  00179A  1777               	andwf	(??_f_write+2)& (0+255),f,b
  3578  00179C  5176               	movf	(??_f_write+1)& (0+255),w,b
  3579  00179E  1778               	andwf	(??_f_write+3)& (0+255),f,b
  3580  0017A0  5177               	movf	(??_f_write+2)& (0+255),w,b
  3581  0017A2  0800               	sublw	0
  3582  0017A4  6F8F               	movwf	f_write@wcnt& (0+255),b
  3583  0017A6  5178               	movf	(??_f_write+3)& (0+255),w,b
  3584  0017A8  A0D8               	btfss	status,0,c
  3585  0017AA  2AE8               	incf	wreg,f,c
  3586  0017AC  0802               	sublw	2
  3587  0017AE  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  3591  0017B0  518F               	movf	f_write@wcnt& (0+255),w,b
  3592  0017B2  5D71               	subwf	f_write@btw& (0+255),w,b
  3593  0017B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  3594  0017B6  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  3595  0017B8  B0D8               	btfsc	status,0,c
  3596  0017BA  D004               	goto	l6220
  3597                           
  3598                           ; BSR set to: 0
  3599  0017BC  C071  F08F         	movff	f_write@btw,f_write@wcnt
  3600  0017C0  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  3601  0017C4                     l6220:
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  3605  0017C4  C06D  FFD9         	movff	f_write@fp,fsr2l
  3606  0017C8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3607  0017CC  CFDE F030          	movff	postinc2,move_window@fs
  3608  0017D0  CFDD F031          	movff	postdec2,move_window@fs+1
  3609  0017D4  EE20 F016          	lfsr	2,22
  3610  0017D8  516D               	movf	f_write@fp& (0+255),w,b
  3611  0017DA  26D9               	addwf	fsr2l,f,c
  3612  0017DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3613  0017DE  22DA               	addwfc	fsr2h,f,c
  3614  0017E0  CFDE F032          	movff	postinc2,move_window@sector
  3615  0017E4  CFDE F033          	movff	postinc2,move_window@sector+1
  3616  0017E8  CFDE F034          	movff	postinc2,move_window@sector+2
  3617  0017EC  CFDE F035          	movff	postinc2,move_window@sector+3
  3618  0017F0  EC96  F02A         	call	_move_window	;wreg free
  3619  0017F4  0900               	iorlw	0
  3620  0017F6  B4D8               	btfsc	status,2,c
  3621  0017F8  D00A               	goto	l6226
  3622                           
  3623                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  3624  0017FA  0100               	movlb	0	; () banked
  3625  0017FC  EE20 F005          	lfsr	2,5
  3626  001800  516D               	movf	f_write@fp& (0+255),w,b
  3627  001802  26D9               	addwf	fsr2l,f,c
  3628  001804  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3629  001806  22DA               	addwfc	fsr2h,f,c
  3630  001808  0E01               	movlw	1
  3631  00180A  6EDF               	movwf	indf2,c
  3632  00180C  0012               	return	
  3633  00180E                     l6226:
  3634                           
  3635                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  3636  00180E  0EFF               	movlw	255
  3637  001810  0100               	movlb	0	; () banked
  3638  001812  6F75               	movwf	??_f_write& (0+255),b
  3639  001814  0E01               	movlw	1
  3640  001816  6F76               	movwf	(??_f_write+1)& (0+255),b
  3641  001818  EE20 F006          	lfsr	2,6
  3642  00181C  516D               	movf	f_write@fp& (0+255),w,b
  3643  00181E  26D9               	addwf	fsr2l,f,c
  3644  001820  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3645  001822  22DA               	addwfc	fsr2h,f,c
  3646  001824  CFDE F077          	movff	postinc2,??_f_write+2
  3647  001828  CFDD F078          	movff	postdec2,??_f_write+3
  3648  00182C  5175               	movf	??_f_write& (0+255),w,b
  3649  00182E  1777               	andwf	(??_f_write+2)& (0+255),f,b
  3650  001830  5176               	movf	(??_f_write+1)& (0+255),w,b
  3651  001832  1778               	andwf	(??_f_write+3)& (0+255),f,b
  3652  001834  C06D  FFD9         	movff	f_write@fp,fsr2l
  3653  001838  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3654  00183C  CFDE F079          	movff	postinc2,??_f_write+4
  3655  001840  CFDD F07A          	movff	postdec2,??_f_write+5
  3656  001844  5177               	movf	(??_f_write+2)& (0+255),w,b
  3657  001846  2779               	addwf	(??_f_write+4)& (0+255),f,b
  3658  001848  5178               	movf	(??_f_write+3)& (0+255),w,b
  3659  00184A  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  3660  00184C  0E2E               	movlw	46
  3661  00184E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  3662  001850  6E01               	movwf	mem_cpy@dst,c
  3663  001852  0E00               	movlw	0
  3664  001854  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  3665  001856  6E02               	movwf	mem_cpy@dst+1,c
  3666  001858  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  3667  00185C  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  3668  001860  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  3669  001864  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  3670  001868  ECF4  F02B         	call	_mem_cpy	;wreg free
  3671                           
  3672                           ;ff.c: 2793:   fp->fs->wflag = 1;
  3673  00186C  C06D  FFD9         	movff	f_write@fp,fsr2l
  3674  001870  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  3675  001874  EE10 F004          	lfsr	1,4
  3676  001878  50DE               	movf	postinc2,w,c
  3677  00187A  26E1               	addwf	fsr1l,f,c
  3678  00187C  50DD               	movf	postdec2,w,c
  3679  00187E  22E2               	addwfc	fsr1h,f,c
  3680  001880  0E01               	movlw	1
  3681  001882  6EE7               	movwf	indf1,c
  3682  001884                     l6230:
  3683  001884  0100               	movlb	0	; () banked
  3684  001886  518F               	movf	f_write@wcnt& (0+255),w,b
  3685  001888  2782               	addwf	f_write@wbuff& (0+255),f,b
  3686  00188A  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  3687  00188C  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  3688                           
  3689                           ; BSR set to: 0
  3690  00188E  EE20 F006          	lfsr	2,6
  3691  001892  516D               	movf	f_write@fp& (0+255),w,b
  3692  001894  26D9               	addwf	fsr2l,f,c
  3693  001896  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3694  001898  22DA               	addwfc	fsr2h,f,c
  3695  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  3696  00189C  26DE               	addwf	postinc2,f,c
  3697  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  3698  0018A0  22DE               	addwfc	postinc2,f,c
  3699  0018A2  0E00               	movlw	0
  3700  0018A4  22DE               	addwfc	postinc2,f,c
  3701  0018A6  22DE               	addwfc	postinc2,f,c
  3702                           
  3703                           ; BSR set to: 0
  3704  0018A8  C073  FFD9         	movff	f_write@bw,fsr2l
  3705  0018AC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  3706  0018B0  518F               	movf	f_write@wcnt& (0+255),w,b
  3707  0018B2  26DE               	addwf	postinc2,f,c
  3708  0018B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  3709  0018B6  22DD               	addwfc	postdec2,f,c
  3710                           
  3711                           ; BSR set to: 0
  3712  0018B8  518F               	movf	f_write@wcnt& (0+255),w,b
  3713  0018BA  5F71               	subwf	f_write@btw& (0+255),f,b
  3714  0018BC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  3715  0018BE  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  3716  0018C0                     l6238:
  3717                           
  3718                           ; BSR set to: 0
  3719  0018C0  5171               	movf	f_write@btw& (0+255),w,b
  3720  0018C2  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  3721  0018C4  A4D8               	btfss	status,2,c
  3722  0018C6  D4D8               	goto	l6130
  3723  0018C8                     u8260:
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  3727  0018C8  EE20 F006          	lfsr	2,6
  3728  0018CC  516D               	movf	f_write@fp& (0+255),w,b
  3729  0018CE  26D9               	addwf	fsr2l,f,c
  3730  0018D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3731  0018D2  22DA               	addwfc	fsr2h,f,c
  3732  0018D4  EE10 F00A          	lfsr	1,10
  3733  0018D8  516D               	movf	f_write@fp& (0+255),w,b
  3734  0018DA  26E1               	addwf	fsr1l,f,c
  3735  0018DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3736  0018DE  22E2               	addwfc	fsr1h,f,c
  3737  0018E0  50DE               	movf	postinc2,w,c
  3738  0018E2  5CE6               	subwf	postinc1,w,c
  3739  0018E4  50DE               	movf	postinc2,w,c
  3740  0018E6  58E6               	subwfb	postinc1,w,c
  3741  0018E8  50DE               	movf	postinc2,w,c
  3742  0018EA  58E6               	subwfb	postinc1,w,c
  3743  0018EC  50DE               	movf	postinc2,w,c
  3744  0018EE  58E6               	subwfb	postinc1,w,c
  3745  0018F0  B0D8               	btfsc	status,0,c
  3746  0018F2  D014               	goto	l6244
  3747                           
  3748                           ; BSR set to: 0
  3749  0018F4  EE20 F006          	lfsr	2,6
  3750  0018F8  516D               	movf	f_write@fp& (0+255),w,b
  3751  0018FA  26D9               	addwf	fsr2l,f,c
  3752  0018FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3753  0018FE  22DA               	addwfc	fsr2h,f,c
  3754  001900  EE10 F00A          	lfsr	1,10
  3755  001904  516D               	movf	f_write@fp& (0+255),w,b
  3756  001906  26E1               	addwf	fsr1l,f,c
  3757  001908  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3758  00190A  22E2               	addwfc	fsr1h,f,c
  3759  00190C  CFDE FFE6          	movff	postinc2,postinc1
  3760  001910  CFDE FFE6          	movff	postinc2,postinc1
  3761  001914  CFDE FFE6          	movff	postinc2,postinc1
  3762  001918  CFDE FFE6          	movff	postinc2,postinc1
  3763  00191C                     l6244:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;ff.c: 2801:  fp->flag |= 0x20;
  3767  00191C  EE20 F004          	lfsr	2,4
  3768  001920  516D               	movf	f_write@fp& (0+255),w,b
  3769  001922  26D9               	addwf	fsr2l,f,c
  3770  001924  516E               	movf	(f_write@fp+1)& (0+255),w,b
  3771  001926  22DA               	addwfc	fsr2h,f,c
  3772  001928  0E00               	movlw	0
  3773  00192A  8ADB               	bsf	plusw2,5,c
  3774                           
  3775                           ; BSR set to: 0
  3776  00192C  0012               	return		;funcret
  3777  00192E                     __end_of_f_write:
  3778                           	opt callstack 0
  3779                           
  3780 ;; *************** function _Error *****************
  3781 ;; Defined at:
  3782 ;;		line 13 in file "./Errores.h"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  a               2    0[COMRAM] int 
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;  v_seg          10    3[COMRAM] unsigned char [10]
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3796 ;;      Params:         2       0       0       0       0       0       0       0       0
  3797 ;;      Locals:        10       0       0       0       0       0       0       0       0
  3798 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3799 ;;      Totals:        13       0       0       0       0       0       0       0       0
  3800 ;;Total ram usage:       13 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_main
  3806 ;;		_grabador
  3807 ;;		_reproductor
  3808 ;;		_guardar
  3809 ;;		_reproducir
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text7
  3814  005252                     __ptext7:
  3815                           	opt callstack 0
  3816  005252                     _Error:
  3817                           	opt callstack 28
  3818                           
  3819                           ;./Errores.h: 14:     LATD = 0x00;
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;incstack = 0
  3823  005252  0E00               	movlw	0
  3824  005254  6E8C               	movwf	3980,c	;volatile
  3825                           
  3826                           ;./Errores.h: 15:     TRISD = 0x00;
  3827  005256  0E00               	movlw	0
  3828  005258  6E95               	movwf	3989,c	;volatile
  3829                           
  3830                           ;./Errores.h: 16:     ANSELD = 0x00;
  3831  00525A  0E00               	movlw	0
  3832  00525C  010F               	movlb	15	; () banked
  3833  00525E  6F5E               	movwf	94,b	;volatile
  3834                           
  3835                           ;./Errores.h: 17:     LATE = 0x00;
  3836  005260  0E00               	movlw	0
  3837  005262  6E8D               	movwf	3981,c	;volatile
  3838                           
  3839                           ;./Errores.h: 18:     TRISE = 0x00;
  3840  005264  0E00               	movlw	0
  3841  005266  6E96               	movwf	3990,c	;volatile
  3842                           
  3843                           ;./Errores.h: 19:     ANSELE = 0x00;
  3844  005268  0E00               	movlw	0
  3845  00526A  6F5F               	movwf	95,b	;volatile
  3846                           
  3847                           ; BSR set to: 15
  3848                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
  3849  00526C  EE20  F0E8         	lfsr	2,Error@F5055
  3850  005270  EE10  F004         	lfsr	1,Error@v_seg
  3851  005274  0E09               	movlw	9
  3852  005276                     u8311:
  3853  005276  CFDB FFE3          	movff	plusw2,plusw1
  3854  00527A  06E8               	decf	wreg,f,c
  3855  00527C  E2FC               	bc	u8311
  3856                           
  3857                           ; BSR set to: 15
  3858                           ;./Errores.h: 22:     if(a != 33 && a != 55){
  3859  00527E  0E21               	movlw	33
  3860  005280  1801               	xorwf	Error@a,w,c
  3861  005282  1002               	iorwf	Error@a+1,w,c
  3862  005284  B4D8               	btfsc	status,2,c
  3863  005286  D010               	goto	l6302
  3864                           
  3865                           ; BSR set to: 15
  3866  005288  0E37               	movlw	55
  3867  00528A  1801               	xorwf	Error@a,w,c
  3868  00528C  1002               	iorwf	Error@a+1,w,c
  3869  00528E  B4D8               	btfsc	status,2,c
  3870  005290  D00B               	goto	l6302
  3871                           
  3872                           ; BSR set to: 15
  3873                           ;./Errores.h: 23:     LATD = v_seg[a];
  3874  005292  0E04               	movlw	low Error@v_seg
  3875  005294  2401               	addwf	Error@a,w,c
  3876  005296  6ED9               	movwf	fsr2l,c
  3877  005298  0E00               	movlw	high Error@v_seg
  3878  00529A  2002               	addwfc	Error@a+1,w,c
  3879  00529C  6EDA               	movwf	fsr2h,c
  3880  00529E  50DF               	movf	indf2,w,c
  3881  0052A0  6E8C               	movwf	3980,c	;volatile
  3882                           
  3883                           ; BSR set to: 15
  3884                           ;./Errores.h: 24:     LATE = 0x01;
  3885  0052A2  0E01               	movlw	1
  3886  0052A4  6E8D               	movwf	3981,c	;volatile
  3887                           
  3888                           ;./Errores.h: 25:     }
  3889  0052A6  0012               	return	
  3890  0052A8                     l6302:
  3891                           
  3892                           ; BSR set to: 15
  3893  0052A8  0E21               	movlw	33
  3894  0052AA  1801               	xorwf	Error@a,w,c
  3895  0052AC  1002               	iorwf	Error@a+1,w,c
  3896  0052AE  A4D8               	btfss	status,2,c
  3897  0052B0  D005               	goto	l6308
  3898                           
  3899                           ; BSR set to: 15
  3900                           ;./Errores.h: 27:     LATD = v_seg[6];
  3901  0052B2  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
  3902                           
  3903                           ; BSR set to: 15
  3904                           ;./Errores.h: 28:     LATE = 0x02;
  3905  0052B6  0E02               	movlw	2
  3906  0052B8  6E8D               	movwf	3981,c	;volatile
  3907                           
  3908                           ;./Errores.h: 29:     }
  3909  0052BA  0012               	return	
  3910  0052BC                     l6308:
  3911                           
  3912                           ; BSR set to: 15
  3913  0052BC  0EE7               	movlw	231
  3914  0052BE  1801               	xorwf	Error@a,w,c
  3915  0052C0  E107               	bnz	l892
  3916  0052C2  0E03               	movlw	3
  3917  0052C4  1802               	xorwf	Error@a+1,w,c
  3918  0052C6  A4D8               	btfss	status,2,c
  3919  0052C8  D003               	goto	l892
  3920  0052CA                     u8350:
  3921                           
  3922                           ;./Errores.h: 31:     LATE = 0x00;
  3923  0052CA  0E00               	movlw	0
  3924  0052CC  6E8D               	movwf	3981,c	;volatile
  3925                           
  3926                           ;./Errores.h: 32:     }
  3927  0052CE  0012               	return	
  3928  0052D0                     l892:
  3929                           
  3930                           ; BSR set to: 15
  3931                           ;./Errores.h: 34:     LATD = v_seg[0];
  3932  0052D0  C004  FF8C         	movff	Error@v_seg,3980	;volatile
  3933                           
  3934                           ; BSR set to: 15
  3935                           ;./Errores.h: 35:     LATE = 0x01;
  3936  0052D4  0E01               	movlw	1
  3937  0052D6  6E8D               	movwf	3981,c	;volatile
  3938                           
  3939                           ; BSR set to: 15
  3940                           ;./Errores.h: 36:     _delay((unsigned long)((1)*(8000000/4000.0)));
  3941  0052D8  0E03               	movlw	3
  3942  0052DA  6E03               	movwf	??_Error& (0+255),c
  3943  0052DC  0E98               	movlw	152
  3944  0052DE                     u9087:
  3945  0052DE  2EE8               	decfsz	wreg,f,c
  3946  0052E0  D7FE               	bra	u9087
  3947  0052E2  2E03               	decfsz	??_Error& (0+255),f,c
  3948  0052E4  D7FC               	bra	u9087
  3949                           
  3950                           ;./Errores.h: 38:     LATE = 0x00;
  3951  0052E6  0E00               	movlw	0
  3952  0052E8  6E8D               	movwf	3981,c	;volatile
  3953                           
  3954                           ;./Errores.h: 39:     LATD = v_seg[9];
  3955  0052EA  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
  3956                           
  3957                           ;./Errores.h: 40:     LATE = 0x02;
  3958  0052EE  0E02               	movlw	2
  3959  0052F0  6E8D               	movwf	3981,c	;volatile
  3960                           
  3961                           ;./Errores.h: 41:     _delay((unsigned long)((1)*(8000000/4000.0)));
  3962  0052F2  0E03               	movlw	3
  3963  0052F4  6E03               	movwf	??_Error& (0+255),c
  3964  0052F6  0E98               	movlw	152
  3965  0052F8                     u9097:
  3966  0052F8  2EE8               	decfsz	wreg,f,c
  3967  0052FA  D7FE               	bra	u9097
  3968  0052FC  2E03               	decfsz	??_Error& (0+255),f,c
  3969  0052FE  D7FC               	bra	u9097
  3970                           
  3971                           ;./Errores.h: 43:     LATE = 0x00;
  3972  005300  0E00               	movlw	0
  3973  005302  6E8D               	movwf	3981,c	;volatile
  3974                           
  3975                           ;./Errores.h: 44:     LATD = v_seg[6];
  3976  005304  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
  3977                           
  3978                           ;./Errores.h: 45:     LATE = 0x04;
  3979  005308  0E04               	movlw	4
  3980  00530A  6E8D               	movwf	3981,c	;volatile
  3981                           
  3982                           ;./Errores.h: 46:     _delay((unsigned long)((1)*(8000000/4000.0)));
  3983  00530C  0E03               	movlw	3
  3984  00530E  6E03               	movwf	??_Error& (0+255),c
  3985  005310  0E98               	movlw	152
  3986  005312                     u9107:
  3987  005312  2EE8               	decfsz	wreg,f,c
  3988  005314  D7FE               	bra	u9107
  3989  005316  2E03               	decfsz	??_Error& (0+255),f,c
  3990  005318  D7FC               	bra	u9107
  3991  00531A  D7D7               	goto	u8350
  3992  00531C                     __end_of_Error:
  3993                           	opt callstack 0
  3994                           
  3995 ;; *************** function _f_open *****************
  3996 ;; Defined at:
  3997 ;;		line 2449 in file "ff.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  fp              2   58[BANK0 ] PTR struct .
  4000 ;;		 -> Fil(32), 
  4001 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  4002 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  4003 ;;		 -> STR_4(1), STR_3(1), 
  4004 ;;  mode            1   62[BANK0 ] unsigned char 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  dj             22   90[BANK0 ] struct .
  4007 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  4008 ;;  dw              4   83[BANK0 ] unsigned long 
  4009 ;;  cl              4   79[BANK0 ] unsigned long 
  4010 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  4011 ;;		 -> FatFs(558), NULL(0), 
  4012 ;;  res             1   87[BANK0 ] enum E93
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      enum E93
  4015 ;; Registers used:
  4016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4022 ;;      Params:         0       5       0       0       0       0       0       0       0
  4023 ;;      Locals:         0      45       0       0       0       0       0       0       0
  4024 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4025 ;;      Totals:         0      54       0       0       0       0       0       0       0
  4026 ;;Total ram usage:       54 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:   13
  4029 ;; This function calls:
  4030 ;;		_dir_register
  4031 ;;		_find_volume
  4032 ;;		_follow_path
  4033 ;;		_ld_clust
  4034 ;;		_move_window
  4035 ;;		_remove_chain
  4036 ;;		_st_clust
  4037 ;; This function is called by:
  4038 ;;		_guardar
  4039 ;;		_reproducir
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text8
  4044  003558                     __ptext8:
  4045                           	opt callstack 0
  4046  003558                     _f_open:
  4047                           	opt callstack 16
  4048                           
  4049                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  4050                           
  4051                           ;incstack = 0
  4052  003558  0100               	movlb	0	; () banked
  4053  00355A  519A               	movf	f_open@fp& (0+255),w,b
  4054  00355C  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  4055  00355E  A4D8               	btfss	status,2,c
  4056  003560  D002               	goto	l6372
  4057                           
  4058                           ; BSR set to: 0
  4059  003562  0E09               	movlw	9
  4060  003564  0012               	return	
  4061  003566                     l6372:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;ff.c: 2465:  fp->fs = 0;
  4065  003566  C09A  FFD9         	movff	f_open@fp,fsr2l
  4066  00356A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4067  00356E  0E00               	movlw	0
  4068  003570  6EDE               	movwf	postinc2,c
  4069  003572  0E00               	movlw	0
  4070  003574  6EDD               	movwf	postdec2,c
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;ff.c: 2468:  dj.fs = FatFs[0];
  4074  003576  C0DC  F0BA         	movff	ff@FatFs,f_open@dj
  4075  00357A  C0DD  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  4079  00357E  0E1F               	movlw	31
  4080  003580  179E               	andwf	f_open@mode& (0+255),f,b
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  4084  003582  0EBA               	movlw	low f_open@dj
  4085  003584  6E45               	movwf	find_volume@rfs,c
  4086  003586  0E00               	movlw	high f_open@dj
  4087  003588  6E46               	movwf	find_volume@rfs+1,c
  4088  00358A  0E9C               	movlw	low f_open@path
  4089  00358C  6E47               	movwf	find_volume@path,c
  4090  00358E  0E00               	movlw	high f_open@path
  4091  003590  6E48               	movwf	find_volume@path+1,c
  4092  003592  519E               	movf	f_open@mode& (0+255),w,b
  4093  003594  0BFE               	andlw	254
  4094  003596  6E49               	movwf	find_volume@wmode,c
  4095  003598  EC0E  F004         	call	_find_volume	;wreg free
  4096  00359C  0100               	movlb	0	; () banked
  4097  00359E  6FB7               	movwf	f_open@res& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;ff.c: 2479:  if (res == FR_OK) {
  4101  0035A0  51B7               	movf	f_open@res& (0+255),w,b
  4102  0035A2  A4D8               	btfss	status,2,c
  4103  0035A4  D1A2               	goto	l6476
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;ff.c: 2480:   (dj).fn = sfn;
  4107  0035A6  0EA3               	movlw	low f_open@sfn
  4108  0035A8  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  4109  0035AA  0E00               	movlw	high f_open@sfn
  4110  0035AC  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;ff.c: 2481:   res = follow_path(&dj, path);
  4114  0035AE  0EBA               	movlw	low f_open@dj
  4115  0035B0  6F86               	movwf	follow_path@dp& (0+255),b
  4116  0035B2  0E00               	movlw	high f_open@dj
  4117  0035B4  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  4118  0035B6  C09C  F088         	movff	f_open@path,follow_path@path
  4119  0035BA  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  4120  0035BE  ECBD  F023         	call	_follow_path	;wreg free
  4121  0035C2  0100               	movlb	0	; () banked
  4122  0035C4  6FB7               	movwf	f_open@res& (0+255),b
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;ff.c: 2482:   dir = dj.dir;
  4126  0035C6  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  4127  0035CA  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;ff.c: 2484:   if (res == FR_OK) {
  4131  0035CE  51B7               	movf	f_open@res& (0+255),w,b
  4132  0035D0  A4D8               	btfss	status,2,c
  4133  0035D2  D006               	goto	l6394
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;ff.c: 2485:    if (!dir)
  4137  0035D4  51B8               	movf	f_open@dir& (0+255),w,b
  4138  0035D6  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  4139  0035D8  A4D8               	btfss	status,2,c
  4140  0035DA  D002               	goto	l6394
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  4144  0035DC  0E06               	movlw	6
  4145  0035DE  6FB7               	movwf	f_open@res& (0+255),b
  4146  0035E0                     l6394:
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  4150  0035E0  C09E  F09F         	movff	f_open@mode,??_f_open
  4151  0035E4  0E1C               	movlw	28
  4152  0035E6  179F               	andwf	??_f_open& (0+255),f,b
  4153  0035E8  B4D8               	btfsc	status,2,c
  4154  0035EA  D0D3               	goto	l6442
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;ff.c: 2494:    if (res != FR_OK) {
  4158  0035EC  51B7               	movf	f_open@res& (0+255),w,b
  4159  0035EE  B4D8               	btfsc	status,2,c
  4160  0035F0  D012               	goto	l6406
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  4164  0035F2  0E04               	movlw	4
  4165  0035F4  19B7               	xorwf	f_open@res& (0+255),w,b
  4166  0035F6  A4D8               	btfss	status,2,c
  4167  0035F8  D008               	goto	l6402
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;ff.c: 2499:      res = dir_register(&dj);
  4171  0035FA  0EBA               	movlw	low f_open@dj
  4172  0035FC  6F8A               	movwf	dir_register@dp& (0+255),b
  4173  0035FE  0E00               	movlw	high f_open@dj
  4174  003600  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  4175  003602  EC58  F028         	call	_dir_register	;wreg free
  4176  003606  0100               	movlb	0	; () banked
  4177  003608  6FB7               	movwf	f_open@res& (0+255),b
  4178  00360A                     l6402:
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;ff.c: 2501:     mode |= 0x08;
  4182  00360A  879E               	bsf	f_open@mode& (0+255),3,b
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;ff.c: 2502:     dir = dj.dir;
  4186  00360C  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  4187  003610  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  4188                           
  4189                           ;ff.c: 2503:    }
  4190  003614  D012               	goto	l581
  4191  003616                     l6406:
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  4195  003616  EE20 F00B          	lfsr	2,11
  4196  00361A  51B8               	movf	f_open@dir& (0+255),w,b
  4197  00361C  26D9               	addwf	fsr2l,f,c
  4198  00361E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4199  003620  22DA               	addwfc	fsr2h,f,c
  4200  003622  50DF               	movf	indf2,w,c
  4201  003624  6F9F               	movwf	??_f_open& (0+255),b
  4202  003626  0E11               	movlw	17
  4203  003628  179F               	andwf	??_f_open& (0+255),f,b
  4204  00362A  B4D8               	btfsc	status,2,c
  4205  00362C  D002               	goto	l582
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;ff.c: 2506:      res = FR_DENIED;
  4209  00362E  0E07               	movlw	7
  4210  003630  D003               	goto	L2
  4211  003632                     l582:
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;ff.c: 2508:      if (mode & 0x04)
  4215  003632  A59E               	btfss	f_open@mode& (0+255),2,b
  4216  003634  D002               	goto	l581
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;ff.c: 2509:       res = FR_EXIST;
  4220  003636  0E08               	movlw	8
  4221  003638                     L2:
  4222  003638  6FB7               	movwf	f_open@res& (0+255),b
  4223  00363A                     l581:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  4227  00363A  51B7               	movf	f_open@res& (0+255),w,b
  4228  00363C  B4D8               	btfsc	status,2,c
  4229                           
  4230                           ; BSR set to: 0
  4231  00363E  A79E               	btfss	f_open@mode& (0+255),3,b
  4232  003640  D0C1               	goto	l588
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  4236                           
  4237                           ; BSR set to: 0
  4238  003642  EE20 F00E          	lfsr	2,14
  4239  003646  51B8               	movf	f_open@dir& (0+255),w,b
  4240  003648  26D9               	addwf	fsr2l,f,c
  4241  00364A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4242  00364C  22DA               	addwfc	fsr2h,f,c
  4243  00364E  0E00               	movlw	0
  4244  003650  6EDE               	movwf	postinc2,c
  4245  003652  0E00               	movlw	0
  4246  003654  6EDE               	movwf	postinc2,c
  4247  003656  0E21               	movlw	33
  4248  003658  6EDE               	movwf	postinc2,c
  4249  00365A  0E46               	movlw	70
  4250  00365C  6EDD               	movwf	postdec2,c
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  4254  00365E  EE20 F016          	lfsr	2,22
  4255  003662  51B8               	movf	f_open@dir& (0+255),w,b
  4256  003664  26D9               	addwf	fsr2l,f,c
  4257  003666  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4258  003668  22DA               	addwfc	fsr2h,f,c
  4259  00366A  0E00               	movlw	0
  4260  00366C  6EDE               	movwf	postinc2,c
  4261  00366E  0E00               	movlw	0
  4262  003670  6EDE               	movwf	postinc2,c
  4263  003672  0E21               	movlw	33
  4264  003674  6EDE               	movwf	postinc2,c
  4265  003676  0E46               	movlw	70
  4266  003678  6EDD               	movwf	postdec2,c
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;ff.c: 2516:     dir[11] = 0;
  4270  00367A  EE20 F00B          	lfsr	2,11
  4271  00367E  51B8               	movf	f_open@dir& (0+255),w,b
  4272  003680  26D9               	addwf	fsr2l,f,c
  4273  003682  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4274  003684  22DA               	addwfc	fsr2h,f,c
  4275  003686  0E00               	movlw	0
  4276  003688  6EDF               	movwf	indf2,c
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  4280  00368A  EE20 F01C          	lfsr	2,28
  4281  00368E  51B8               	movf	f_open@dir& (0+255),w,b
  4282  003690  26D9               	addwf	fsr2l,f,c
  4283  003692  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4284  003694  22DA               	addwfc	fsr2h,f,c
  4285  003696  6ADE               	clrf	postinc2,c
  4286  003698  6ADE               	clrf	postinc2,c
  4287  00369A  6ADE               	clrf	postinc2,c
  4288  00369C  6ADD               	clrf	postdec2,c
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  4292  00369E  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4293  0036A2  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4294  0036A6  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4295  0036AA  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4296  0036AE  ECB5  F02B         	call	_ld_clust	;wreg free
  4297  0036B2  C001  F0AF         	movff	?_ld_clust,f_open@cl
  4298  0036B6  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  4299  0036BA  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  4300  0036BE  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  4301                           
  4302                           ;ff.c: 2519:     st_clust(dir, 0);
  4303  0036C2  C0B8  F001         	movff	f_open@dir,st_clust@dir
  4304  0036C6  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  4305  0036CA  0E00               	movlw	0
  4306  0036CC  6E03               	movwf	st_clust@cl,c
  4307  0036CE  0E00               	movlw	0
  4308  0036D0  6E04               	movwf	st_clust@cl+1,c
  4309  0036D2  0E00               	movlw	0
  4310  0036D4  6E05               	movwf	st_clust@cl+2,c
  4311  0036D6  0E00               	movlw	0
  4312  0036D8  6E06               	movwf	st_clust@cl+3,c
  4313  0036DA  EC3E  F02E         	call	_st_clust	;wreg free
  4314                           
  4315                           ;ff.c: 2520:     dj.fs->wflag = 1;
  4316  0036DE  0100               	movlb	0	; () banked
  4317  0036E0  EE20 F004          	lfsr	2,4
  4318  0036E4  51BA               	movf	f_open@dj& (0+255),w,b
  4319  0036E6  26D9               	addwf	fsr2l,f,c
  4320  0036E8  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4321  0036EA  22DA               	addwfc	fsr2h,f,c
  4322  0036EC  0E01               	movlw	1
  4323  0036EE  6EDF               	movwf	indf2,c
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;ff.c: 2521:     if (cl) {
  4327  0036F0  51AF               	movf	f_open@cl& (0+255),w,b
  4328  0036F2  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  4329  0036F4  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  4330  0036F6  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  4331  0036F8  B4D8               	btfsc	status,2,c
  4332  0036FA  D064               	goto	l588
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;ff.c: 2522:      dw = dj.fs->winsect;
  4336  0036FC  EE20 F02A          	lfsr	2,42
  4337  003700  51BA               	movf	f_open@dj& (0+255),w,b
  4338  003702  26D9               	addwf	fsr2l,f,c
  4339  003704  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4340  003706  22DA               	addwfc	fsr2h,f,c
  4341  003708  CFDE F0B3          	movff	postinc2,f_open@dw
  4342  00370C  CFDE F0B4          	movff	postinc2,f_open@dw+1
  4343  003710  CFDE F0B5          	movff	postinc2,f_open@dw+2
  4344  003714  CFDE F0B6          	movff	postinc2,f_open@dw+3
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  4348  003718  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  4349  00371C  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  4350  003720  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  4351  003724  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  4352  003728  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  4353  00372C  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  4354  003730  EC18  F023         	call	_remove_chain	;wreg free
  4355  003734  0100               	movlb	0	; () banked
  4356  003736  6FB7               	movwf	f_open@res& (0+255),b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;ff.c: 2524:      if (res == FR_OK) {
  4360  003738  51B7               	movf	f_open@res& (0+255),w,b
  4361  00373A  A4D8               	btfss	status,2,c
  4362  00373C  D043               	goto	l588
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  4366  00373E  0EFF               	movlw	255
  4367  003740  25AF               	addwf	f_open@cl& (0+255),w,b
  4368  003742  6F9F               	movwf	??_f_open& (0+255),b
  4369  003744  0EFF               	movlw	255
  4370  003746  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  4371  003748  6FA0               	movwf	(??_f_open+1)& (0+255),b
  4372  00374A  0EFF               	movlw	255
  4373  00374C  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  4374  00374E  6FA1               	movwf	(??_f_open+2)& (0+255),b
  4375  003750  0EFF               	movlw	255
  4376  003752  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  4377  003754  6FA2               	movwf	(??_f_open+3)& (0+255),b
  4378  003756  EE20 F00A          	lfsr	2,10
  4379  00375A  51BA               	movf	f_open@dj& (0+255),w,b
  4380  00375C  26D9               	addwf	fsr2l,f,c
  4381  00375E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4382  003760  22DA               	addwfc	fsr2h,f,c
  4383  003762  C09F  FFDE         	movff	??_f_open,postinc2
  4384  003766  C0A0  FFDE         	movff	??_f_open+1,postinc2
  4385  00376A  C0A1  FFDE         	movff	??_f_open+2,postinc2
  4386  00376E  C0A2  FFDE         	movff	??_f_open+3,postinc2
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  4390  003772  C0BA  F030         	movff	f_open@dj,move_window@fs
  4391  003776  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  4392  00377A  C0B3  F032         	movff	f_open@dw,move_window@sector
  4393  00377E  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  4394  003782  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  4395  003786  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  4396  00378A  EC96  F02A         	call	_move_window	;wreg free
  4397  00378E  0100               	movlb	0	; () banked
  4398  003790  D018               	goto	L3
  4399  003792                     l6442:
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;ff.c: 2532:    if (res == FR_OK) {
  4403  003792  51B7               	movf	f_open@res& (0+255),w,b
  4404  003794  A4D8               	btfss	status,2,c
  4405  003796  D016               	goto	l588
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  4409  003798  EE20 F00B          	lfsr	2,11
  4410  00379C  51B8               	movf	f_open@dir& (0+255),w,b
  4411  00379E  26D9               	addwf	fsr2l,f,c
  4412  0037A0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4413  0037A2  22DA               	addwfc	fsr2h,f,c
  4414  0037A4  A8DF               	btfss	indf2,4,c
  4415  0037A6  D002               	goto	l590
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;ff.c: 2534:      res = FR_NO_FILE;
  4419  0037A8  0E04               	movlw	4
  4420  0037AA  D00B               	goto	L3
  4421  0037AC                     l590:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  4425  0037AC  A39E               	btfss	f_open@mode& (0+255),1,b
  4426  0037AE  D00A               	goto	l588
  4427                           
  4428                           ; BSR set to: 0
  4429  0037B0  EE20 F00B          	lfsr	2,11
  4430  0037B4  51B8               	movf	f_open@dir& (0+255),w,b
  4431  0037B6  26D9               	addwf	fsr2l,f,c
  4432  0037B8  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4433  0037BA  22DA               	addwfc	fsr2h,f,c
  4434  0037BC  A0DF               	btfss	indf2,0,c
  4435  0037BE  D002               	goto	l588
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;ff.c: 2537:       res = FR_DENIED;
  4439  0037C0  0E07               	movlw	7
  4440  0037C2                     L3:
  4441  0037C2  6FB7               	movwf	f_open@res& (0+255),b
  4442  0037C4                     l588:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;ff.c: 2541:   if (res == FR_OK) {
  4446  0037C4  51B7               	movf	f_open@res& (0+255),w,b
  4447  0037C6  A4D8               	btfss	status,2,c
  4448  0037C8  D020               	goto	l6460
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;ff.c: 2542:    if (mode & 0x08)
  4452  0037CA  B79E               	btfsc	f_open@mode& (0+255),3,b
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;ff.c: 2543:     mode |= 0x20;
  4456  0037CC  8B9E               	bsf	f_open@mode& (0+255),5,b
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  4460  0037CE  EE20 F02A          	lfsr	2,42
  4461  0037D2  51BA               	movf	f_open@dj& (0+255),w,b
  4462  0037D4  26D9               	addwf	fsr2l,f,c
  4463  0037D6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4464  0037D8  22DA               	addwfc	fsr2h,f,c
  4465  0037DA  EE10 F01A          	lfsr	1,26
  4466  0037DE  519A               	movf	f_open@fp& (0+255),w,b
  4467  0037E0  26E1               	addwf	fsr1l,f,c
  4468  0037E2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4469  0037E4  22E2               	addwfc	fsr1h,f,c
  4470  0037E6  CFDE FFE6          	movff	postinc2,postinc1
  4471  0037EA  CFDE FFE6          	movff	postinc2,postinc1
  4472  0037EE  CFDE FFE6          	movff	postinc2,postinc1
  4473  0037F2  CFDE FFE6          	movff	postinc2,postinc1
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;ff.c: 2545:    fp->dir_ptr = dir;
  4477  0037F6  EE20 F01E          	lfsr	2,30
  4478  0037FA  519A               	movf	f_open@fp& (0+255),w,b
  4479  0037FC  26D9               	addwf	fsr2l,f,c
  4480  0037FE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4481  003800  22DA               	addwfc	fsr2h,f,c
  4482  003802  C0B8  FFDE         	movff	f_open@dir,postinc2
  4483  003806  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  4484  00380A                     l6460:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;ff.c: 2565:   if (res == FR_OK) {
  4488  00380A  51B7               	movf	f_open@res& (0+255),w,b
  4489  00380C  A4D8               	btfss	status,2,c
  4490  00380E  D06D               	goto	l6476
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;ff.c: 2566:    fp->flag = mode;
  4494  003810  EE20 F004          	lfsr	2,4
  4495  003814  519A               	movf	f_open@fp& (0+255),w,b
  4496  003816  26D9               	addwf	fsr2l,f,c
  4497  003818  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4498  00381A  22DA               	addwfc	fsr2h,f,c
  4499  00381C  C09E  FFDF         	movff	f_open@mode,indf2
  4500                           
  4501                           ;ff.c: 2567:    fp->err = 0;
  4502  003820  EE20 F005          	lfsr	2,5
  4503  003824  519A               	movf	f_open@fp& (0+255),w,b
  4504  003826  26D9               	addwf	fsr2l,f,c
  4505  003828  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4506  00382A  22DA               	addwfc	fsr2h,f,c
  4507  00382C  0E00               	movlw	0
  4508  00382E  6EDF               	movwf	indf2,c
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  4512  003830  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4513  003834  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4514  003838  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4515  00383C  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4516  003840  ECB5  F02B         	call	_ld_clust	;wreg free
  4517  003844  0100               	movlb	0	; () banked
  4518  003846  EE20 F00E          	lfsr	2,14
  4519  00384A  519A               	movf	f_open@fp& (0+255),w,b
  4520  00384C  26D9               	addwf	fsr2l,f,c
  4521  00384E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4522  003850  22DA               	addwfc	fsr2h,f,c
  4523  003852  C001  FFDE         	movff	?_ld_clust,postinc2
  4524  003856  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4525  00385A  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4526  00385E  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4530  003862  EE20 F01C          	lfsr	2,28
  4531  003866  51B8               	movf	f_open@dir& (0+255),w,b
  4532  003868  26D9               	addwf	fsr2l,f,c
  4533  00386A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4534  00386C  22DA               	addwfc	fsr2h,f,c
  4535  00386E  EE10 F00A          	lfsr	1,10
  4536  003872  519A               	movf	f_open@fp& (0+255),w,b
  4537  003874  26E1               	addwf	fsr1l,f,c
  4538  003876  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4539  003878  22E2               	addwfc	fsr1h,f,c
  4540  00387A  CFDE FFE6          	movff	postinc2,postinc1
  4541  00387E  CFDE FFE6          	movff	postinc2,postinc1
  4542  003882  CFDE FFE6          	movff	postinc2,postinc1
  4543  003886  CFDE FFE6          	movff	postinc2,postinc1
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;ff.c: 2570:    fp->fptr = 0;
  4547  00388A  EE20 F006          	lfsr	2,6
  4548  00388E  519A               	movf	f_open@fp& (0+255),w,b
  4549  003890  26D9               	addwf	fsr2l,f,c
  4550  003892  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4551  003894  22DA               	addwfc	fsr2h,f,c
  4552  003896  6ADE               	clrf	postinc2,c
  4553  003898  6ADE               	clrf	postinc2,c
  4554  00389A  6ADE               	clrf	postinc2,c
  4555  00389C  6ADD               	clrf	postdec2,c
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;ff.c: 2571:    fp->dsect = 0;
  4559  00389E  EE20 F016          	lfsr	2,22
  4560  0038A2  519A               	movf	f_open@fp& (0+255),w,b
  4561  0038A4  26D9               	addwf	fsr2l,f,c
  4562  0038A6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4563  0038A8  22DA               	addwfc	fsr2h,f,c
  4564  0038AA  6ADE               	clrf	postinc2,c
  4565  0038AC  6ADE               	clrf	postinc2,c
  4566  0038AE  6ADE               	clrf	postinc2,c
  4567  0038B0  6ADD               	clrf	postdec2,c
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;ff.c: 2575:    fp->fs = dj.fs;
  4571  0038B2  C09A  FFD9         	movff	f_open@fp,fsr2l
  4572  0038B6  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4573  0038BA  C0BA  FFDE         	movff	f_open@dj,postinc2
  4574  0038BE  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;ff.c: 2576:    fp->id = fp->fs->id;
  4578  0038C2  C09A  FFD9         	movff	f_open@fp,fsr2l
  4579  0038C6  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4580  0038CA  EE10 F006          	lfsr	1,6
  4581  0038CE  50DE               	movf	postinc2,w,c
  4582  0038D0  26E1               	addwf	fsr1l,f,c
  4583  0038D2  50DD               	movf	postdec2,w,c
  4584  0038D4  22E2               	addwfc	fsr1h,f,c
  4585  0038D6  EE20 F002          	lfsr	2,2
  4586  0038DA  519A               	movf	f_open@fp& (0+255),w,b
  4587  0038DC  26D9               	addwf	fsr2l,f,c
  4588  0038DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4589  0038E0  22DA               	addwfc	fsr2h,f,c
  4590  0038E2  CFE6 FFDE          	movff	postinc1,postinc2
  4591  0038E6  CFE5 FFDD          	movff	postdec1,postdec2
  4592  0038EA                     l6476:
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;ff.c: 2580:  return res;
  4596  0038EA  51B7               	movf	f_open@res& (0+255),w,b
  4597                           
  4598                           ; BSR set to: 0
  4599  0038EC  0012               	return		;funcret
  4600  0038EE                     __end_of_f_open:
  4601                           	opt callstack 0
  4602                           
  4603 ;; *************** function _remove_chain *****************
  4604 ;; Defined at:
  4605 ;;		line 937 in file "ff.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  fs              2   85[COMRAM] PTR struct .
  4608 ;;		 -> FatFs(558), NULL(0), 
  4609 ;;  clst            4   87[COMRAM] unsigned long 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  nxt             4    1[BANK0 ] unsigned long 
  4612 ;;  res             1    0[BANK0 ] enum E93
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      enum E93
  4615 ;; Registers used:
  4616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4622 ;;      Params:         6       0       0       0       0       0       0       0       0
  4623 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4624 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4625 ;;      Totals:        10       5       0       0       0       0       0       0       0
  4626 ;;Total ram usage:       15 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    9
  4629 ;; This function calls:
  4630 ;;		_get_fat
  4631 ;;		_put_fat
  4632 ;; This function is called by:
  4633 ;;		_f_open
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text9
  4638  004630                     __ptext9:
  4639                           	opt callstack 0
  4640  004630                     _remove_chain:
  4641                           	opt callstack 19
  4642                           
  4643                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;incstack = 0
  4647  004630  505B               	movf	remove_chain@clst+3,w,c
  4648  004632  105A               	iorwf	remove_chain@clst+2,w,c
  4649  004634  1059               	iorwf	remove_chain@clst+1,w,c
  4650  004636  E104               	bnz	u7130
  4651  004638  0E02               	movlw	2
  4652  00463A  5C58               	subwf	remove_chain@clst,w,c
  4653  00463C  A0D8               	btfss	status,0,c
  4654  00463E  D010               	goto	u7140
  4655  004640                     u7130:
  4656  004640  EE20 F012          	lfsr	2,18
  4657  004644  5056               	movf	remove_chain@fs,w,c
  4658  004646  26D9               	addwf	fsr2l,f,c
  4659  004648  5057               	movf	remove_chain@fs+1,w,c
  4660  00464A  22DA               	addwfc	fsr2h,f,c
  4661  00464C  50DE               	movf	postinc2,w,c
  4662  00464E  5C58               	subwf	remove_chain@clst,w,c
  4663  004650  50DE               	movf	postinc2,w,c
  4664  004652  5859               	subwfb	remove_chain@clst+1,w,c
  4665  004654  50DE               	movf	postinc2,w,c
  4666  004656  585A               	subwfb	remove_chain@clst+2,w,c
  4667  004658  50DE               	movf	postinc2,w,c
  4668  00465A  585B               	subwfb	remove_chain@clst+3,w,c
  4669  00465C  A0D8               	btfss	status,0,c
  4670  00465E  D003               	goto	l5640
  4671  004660                     u7140:
  4672                           
  4673                           ;ff.c: 949:   res = FR_INT_ERR;
  4674  004660  0E02               	movlw	2
  4675  004662  0100               	movlb	0	; () banked
  4676  004664  D031               	goto	L4
  4677  004666                     l5640:
  4678                           
  4679                           ;ff.c: 952:   res = FR_OK;
  4680  004666  0E00               	movlw	0
  4681  004668  0100               	movlb	0	; () banked
  4682  00466A  6F60               	movwf	remove_chain@res& (0+255),b
  4683                           
  4684                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4685  00466C  D074               	goto	l302
  4686  00466E                     l5642:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  4690  00466E  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  4691  004672  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  4692  004676  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  4693  00467A  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  4694  00467E  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  4695  004682  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  4696  004686  ECDB  F018         	call	_get_fat	;wreg free
  4697  00468A  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  4698  00468E  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  4699  004692  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  4700  004696  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  4701                           
  4702                           ;ff.c: 955:    if (nxt == 0) break;
  4703  00469A  0100               	movlb	0	; () banked
  4704  00469C  5161               	movf	remove_chain@nxt& (0+255),w,b
  4705  00469E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4706  0046A0  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4707  0046A2  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4708  0046A4  B4D8               	btfsc	status,2,c
  4709  0046A6  D067               	goto	u7200
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  4713  0046A8  0561               	decf	remove_chain@nxt& (0+255),w,b
  4714  0046AA  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4715  0046AC  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4716  0046AE  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4717  0046B0  B4D8               	btfsc	status,2,c
  4718  0046B2  D7D6               	goto	u7140
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4722  0046B4  2961               	incf	remove_chain@nxt& (0+255),w,b
  4723  0046B6  E10A               	bnz	l5656
  4724  0046B8  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  4725  0046BA  E108               	bnz	l5656
  4726  0046BC  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  4727  0046BE  E106               	bnz	l5656
  4728  0046C0  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  4729  0046C2  A4D8               	btfss	status,2,c
  4730  0046C4  D003               	goto	l5656
  4731                           
  4732                           ; BSR set to: 0
  4733  0046C6  0E01               	movlw	1
  4734  0046C8                     L4:
  4735  0046C8  6F60               	movwf	remove_chain@res& (0+255),b
  4736  0046CA  D055               	goto	u7200
  4737  0046CC                     l5656:
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  4741  0046CC  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  4742  0046D0  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  4743  0046D4  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  4744  0046D8  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  4745  0046DC  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  4746  0046E0  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  4747  0046E4  0E00               	movlw	0
  4748  0046E6  6E41               	movwf	put_fat@val,c
  4749  0046E8  0E00               	movlw	0
  4750  0046EA  6E42               	movwf	put_fat@val+1,c
  4751  0046EC  0E00               	movlw	0
  4752  0046EE  6E43               	movwf	put_fat@val+2,c
  4753  0046F0  0E00               	movlw	0
  4754  0046F2  6E44               	movwf	put_fat@val+3,c
  4755  0046F4  ECC3  F014         	call	_put_fat	;wreg free
  4756  0046F8  0100               	movlb	0	; () banked
  4757  0046FA  6F60               	movwf	remove_chain@res& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;ff.c: 959:    if (res != FR_OK) break;
  4761  0046FC  5160               	movf	remove_chain@res& (0+255),w,b
  4762  0046FE  A4D8               	btfss	status,2,c
  4763  004700  D03A               	goto	u7200
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  4767  004702  EE20 F00E          	lfsr	2,14
  4768  004706  5056               	movf	remove_chain@fs,w,c
  4769  004708  26D9               	addwf	fsr2l,f,c
  4770  00470A  5057               	movf	remove_chain@fs+1,w,c
  4771  00470C  22DA               	addwfc	fsr2h,f,c
  4772  00470E  28DE               	incf	postinc2,w,c
  4773  004710  E107               	bnz	u7190
  4774  004712  28DE               	incf	postinc2,w,c
  4775  004714  E105               	bnz	u7190
  4776  004716  28DE               	incf	postinc2,w,c
  4777  004718  E103               	bnz	u7190
  4778  00471A  28DE               	incf	postinc2,w,c
  4779  00471C  B4D8               	btfsc	status,2,c
  4780  00471E  D013               	goto	l5666
  4781  004720                     u7190:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;ff.c: 961:     fs->free_clust++;
  4785  004720  EE20 F00E          	lfsr	2,14
  4786  004724  5056               	movf	remove_chain@fs,w,c
  4787  004726  26D9               	addwf	fsr2l,f,c
  4788  004728  5057               	movf	remove_chain@fs+1,w,c
  4789  00472A  22DA               	addwfc	fsr2h,f,c
  4790  00472C  2ADE               	incf	postinc2,f,c
  4791  00472E  0E00               	movlw	0
  4792  004730  22DE               	addwfc	postinc2,f,c
  4793  004732  22DE               	addwfc	postinc2,f,c
  4794  004734  22DE               	addwfc	postinc2,f,c
  4795                           
  4796                           ;ff.c: 962:     fs->fsi_flag |= 1;
  4797  004736  EE20 F005          	lfsr	2,5
  4798  00473A  5056               	movf	remove_chain@fs,w,c
  4799  00473C  26D9               	addwf	fsr2l,f,c
  4800  00473E  5057               	movf	remove_chain@fs+1,w,c
  4801  004740  22DA               	addwfc	fsr2h,f,c
  4802  004742  0E00               	movlw	0
  4803  004744  80DB               	bsf	plusw2,0,c
  4804  004746                     l5666:
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;ff.c: 974:    clst = nxt;
  4808  004746  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  4809  00474A  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4810  00474E  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4811  004752  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4812  004756                     l302:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4816  004756  EE20 F012          	lfsr	2,18
  4817  00475A  5056               	movf	remove_chain@fs,w,c
  4818  00475C  26D9               	addwf	fsr2l,f,c
  4819  00475E  5057               	movf	remove_chain@fs+1,w,c
  4820  004760  22DA               	addwfc	fsr2h,f,c
  4821  004762  50DE               	movf	postinc2,w,c
  4822  004764  5C58               	subwf	remove_chain@clst,w,c
  4823  004766  50DE               	movf	postinc2,w,c
  4824  004768  5859               	subwfb	remove_chain@clst+1,w,c
  4825  00476A  50DE               	movf	postinc2,w,c
  4826  00476C  585A               	subwfb	remove_chain@clst+2,w,c
  4827  00476E  50DE               	movf	postinc2,w,c
  4828  004770  585B               	subwfb	remove_chain@clst+3,w,c
  4829  004772  A0D8               	btfss	status,0,c
  4830  004774  D77C               	goto	l5642
  4831  004776                     u7200:
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;ff.c: 978:  return res;
  4835  004776  5160               	movf	remove_chain@res& (0+255),w,b
  4836                           
  4837                           ; BSR set to: 0
  4838  004778  0012               	return		;funcret
  4839  00477A                     __end_of_remove_chain:
  4840                           	opt callstack 0
  4841                           
  4842 ;; *************** function _follow_path *****************
  4843 ;; Defined at:
  4844 ;;		line 2052 in file "ff.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  dp              2   38[BANK0 ] PTR struct .
  4847 ;;		 -> f_open@dj(22), 
  4848 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  4849 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  4850 ;;		 -> STR_4(1), STR_3(1), 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  4853 ;;		 -> FatFs(558), NULL(0), 
  4854 ;;  res             1   45[BANK0 ] enum E93
  4855 ;;  ns              1   44[BANK0 ] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      enum E93
  4858 ;; Registers used:
  4859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4865 ;;      Params:         0       4       0       0       0       0       0       0       0
  4866 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4868 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4869 ;;Total ram usage:        8 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:   12
  4872 ;; This function calls:
  4873 ;;		_create_name
  4874 ;;		_dir_find
  4875 ;;		_dir_sdi
  4876 ;;		_ld_clust
  4877 ;; This function is called by:
  4878 ;;		_f_open
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text10
  4883  00477A                     __ptext10:
  4884                           	opt callstack 0
  4885  00477A                     _follow_path:
  4886                           	opt callstack 16
  4887                           
  4888                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;incstack = 0
  4892  00477A  C088  FFF6         	movff	follow_path@path,tblptrl
  4893  00477E  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4894  004782                     	if	0	;tblptru may be non-zero
  4895  004782                     	endif
  4896  004782                     	if	0	;tblptru may be non-zero
  4897  004782                     	endif
  4898  004782  0008               	tblrd		*
  4899  004784  50F5               	movf	tablat,w,c
  4900  004786  0A2F               	xorlw	47
  4901  004788  B4D8               	btfsc	status,2,c
  4902  00478A  D009               	goto	u7240
  4903  00478C  C088  FFF6         	movff	follow_path@path,tblptrl
  4904  004790  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4905  004794                     	if	0	;tblptru may be non-zero
  4906  004794                     	endif
  4907  004794                     	if	0	;tblptru may be non-zero
  4908  004794                     	endif
  4909  004794  0008               	tblrd		*
  4910  004796  50F5               	movf	tablat,w,c
  4911  004798  0A5C               	xorlw	92
  4912  00479A  A4D8               	btfss	status,2,c
  4913  00479C  D003               	goto	l5696
  4914  00479E                     u7240:
  4915                           
  4916                           ;ff.c: 2069:   path++;
  4917  00479E  0100               	movlb	0	; () banked
  4918  0047A0  4B88               	infsnz	follow_path@path& (0+255),f,b
  4919  0047A2  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  4920  0047A4                     l5696:
  4921                           
  4922                           ;ff.c: 2070:  dp->sclust = 0;
  4923  0047A4  0100               	movlb	0	; () banked
  4924  0047A6  EE20 F006          	lfsr	2,6
  4925  0047AA  5186               	movf	follow_path@dp& (0+255),w,b
  4926  0047AC  26D9               	addwf	fsr2l,f,c
  4927  0047AE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4928  0047B0  22DA               	addwfc	fsr2h,f,c
  4929  0047B2  6ADE               	clrf	postinc2,c
  4930  0047B4  6ADE               	clrf	postinc2,c
  4931  0047B6  6ADE               	clrf	postinc2,c
  4932  0047B8  6ADD               	clrf	postdec2,c
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  4936  0047BA  C088  FFF6         	movff	follow_path@path,tblptrl
  4937  0047BE  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4938  0047C2                     	if	0	;tblptru may be non-zero
  4939  0047C2                     	endif
  4940  0047C2                     	if	0	;tblptru may be non-zero
  4941  0047C2                     	endif
  4942  0047C2  0E20               	movlw	32
  4943  0047C4  0008               	tblrd		*
  4944  0047C6  60F5               	cpfslt	tablat,c
  4945  0047C8  D017               	goto	l5704
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  4949  0047CA  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  4950  0047CE  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  4951  0047D2  0E00               	movlw	0
  4952  0047D4  6E59               	movwf	dir_sdi@idx+1,c
  4953  0047D6  0E00               	movlw	0
  4954  0047D8  6E58               	movwf	dir_sdi@idx,c
  4955  0047DA  ECF4  F01D         	call	_dir_sdi	;wreg free
  4956  0047DE  0100               	movlb	0	; () banked
  4957  0047E0  6F8D               	movwf	follow_path@res& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;ff.c: 2075:   dp->dir = 0;
  4961  0047E2  EE20 F012          	lfsr	2,18
  4962  0047E6  5186               	movf	follow_path@dp& (0+255),w,b
  4963  0047E8  26D9               	addwf	fsr2l,f,c
  4964  0047EA  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4965  0047EC  22DA               	addwfc	fsr2h,f,c
  4966  0047EE  0E00               	movlw	0
  4967  0047F0  6EDE               	movwf	postinc2,c
  4968  0047F2  0E00               	movlw	0
  4969  0047F4  6EDD               	movwf	postdec2,c
  4970                           
  4971                           ;ff.c: 2076:  } else {
  4972  0047F6  D062               	goto	l5740
  4973  0047F8                     l5704:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;ff.c: 2078:    res = create_name(dp, &path);
  4977  0047F8  C086  F009         	movff	follow_path@dp,create_name@dp
  4978  0047FC  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  4979  004800  0E88               	movlw	low follow_path@path
  4980  004802  6E0B               	movwf	create_name@path,c
  4981  004804  0E00               	movlw	high follow_path@path
  4982  004806  6E0C               	movwf	create_name@path+1,c
  4983  004808  EC55  F01F         	call	_create_name	;wreg free
  4984  00480C  0100               	movlb	0	; () banked
  4985  00480E  6F8D               	movwf	follow_path@res& (0+255),b
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;ff.c: 2079:    if (res != FR_OK) break;
  4989  004810  518D               	movf	follow_path@res& (0+255),w,b
  4990  004812  A4D8               	btfss	status,2,c
  4991  004814  D053               	goto	l5740
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;ff.c: 2080:    res = dir_find(dp);
  4995  004816  C086  F080         	movff	follow_path@dp,dir_find@dp
  4996  00481A  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  4997  00481E  EC90  F026         	call	_dir_find	;wreg free
  4998  004822  0100               	movlb	0	; () banked
  4999  004824  6F8D               	movwf	follow_path@res& (0+255),b
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;ff.c: 2081:    ns = dp->fn[11];
  5003  004826  EE20 F014          	lfsr	2,20
  5004  00482A  5186               	movf	follow_path@dp& (0+255),w,b
  5005  00482C  26D9               	addwf	fsr2l,f,c
  5006  00482E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5007  004830  22DA               	addwfc	fsr2h,f,c
  5008  004832  EE10 F00B          	lfsr	1,11
  5009  004836  50DE               	movf	postinc2,w,c
  5010  004838  26E1               	addwf	fsr1l,f,c
  5011  00483A  50DD               	movf	postdec2,w,c
  5012  00483C  22E2               	addwfc	fsr1h,f,c
  5013  00483E  50E7               	movf	indf1,w,c
  5014  004840  6F8C               	movwf	follow_path@ns& (0+255),b
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;ff.c: 2082:    if (res != FR_OK) {
  5018  004842  518D               	movf	follow_path@res& (0+255),w,b
  5019  004844  B4D8               	btfsc	status,2,c
  5020  004846  D008               	goto	l469
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  5024  004848  0E04               	movlw	4
  5025  00484A  198D               	xorwf	follow_path@res& (0+255),w,b
  5026  00484C  B4D8               	btfsc	status,2,c
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  5030  00484E  B58C               	btfsc	follow_path@ns& (0+255),2,b
  5031  004850  D035               	goto	l5740
  5032  004852                     u7290:
  5033                           
  5034                           ; BSR set to: 0
  5035  004852  0E05               	movlw	5
  5036  004854  6F8D               	movwf	follow_path@res& (0+255),b
  5037  004856  D032               	goto	l5740
  5038  004858                     l469:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;ff.c: 2094:    if (ns & 0x04) break;
  5042  004858  B58C               	btfsc	follow_path@ns& (0+255),2,b
  5043  00485A  D030               	goto	l5740
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;ff.c: 2095:    dir = dp->dir;
  5047  00485C  EE20 F012          	lfsr	2,18
  5048  004860  5186               	movf	follow_path@dp& (0+255),w,b
  5049  004862  26D9               	addwf	fsr2l,f,c
  5050  004864  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5051  004866  22DA               	addwfc	fsr2h,f,c
  5052  004868  CFDE F08A          	movff	postinc2,follow_path@dir
  5053  00486C  CFDD F08B          	movff	postdec2,follow_path@dir+1
  5054                           
  5055                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  5056  004870  EE20 F00B          	lfsr	2,11
  5057  004874  518A               	movf	follow_path@dir& (0+255),w,b
  5058  004876  26D9               	addwf	fsr2l,f,c
  5059  004878  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  5060  00487A  22DA               	addwfc	fsr2h,f,c
  5061  00487C  A8DF               	btfss	indf2,4,c
  5062  00487E  D7E9               	goto	u7290
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  5066  004880  C086  FFD9         	movff	follow_path@dp,fsr2l
  5067  004884  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  5068  004888  CFDE F001          	movff	postinc2,ld_clust@fs
  5069  00488C  CFDD F002          	movff	postdec2,ld_clust@fs+1
  5070  004890  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  5071  004894  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  5072  004898  ECB5  F02B         	call	_ld_clust	;wreg free
  5073  00489C  0100               	movlb	0	; () banked
  5074  00489E  EE20 F006          	lfsr	2,6
  5075  0048A2  5186               	movf	follow_path@dp& (0+255),w,b
  5076  0048A4  26D9               	addwf	fsr2l,f,c
  5077  0048A6  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  5078  0048A8  22DA               	addwfc	fsr2h,f,c
  5079  0048AA  C001  FFDE         	movff	?_ld_clust,postinc2
  5080  0048AE  C002  FFDE         	movff	?_ld_clust+1,postinc2
  5081  0048B2  C003  FFDE         	movff	?_ld_clust+2,postinc2
  5082  0048B6  C004  FFDE         	movff	?_ld_clust+3,postinc2
  5083  0048BA  D79E               	goto	l5704
  5084  0048BC                     l5740:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;ff.c: 2103:  return res;
  5088  0048BC  518D               	movf	follow_path@res& (0+255),w,b
  5089                           
  5090                           ; BSR set to: 0
  5091  0048BE  0012               	return		;funcret
  5092  0048C0                     __end_of_follow_path:
  5093                           	opt callstack 0
  5094                           
  5095 ;; *************** function _ld_clust *****************
  5096 ;; Defined at:
  5097 ;;		line 1235 in file "ff.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  fs              2    0[COMRAM] PTR struct .
  5100 ;;		 -> FatFs(558), NULL(0), 
  5101 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  5102 ;;		 -> FatFs(558), NULL(0), 
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;  cl              4   10[COMRAM] unsigned long 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  4    0[COMRAM] unsigned long 
  5107 ;; Registers used:
  5108 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5114 ;;      Params:         4       0       0       0       0       0       0       0       0
  5115 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5116 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5117 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5118 ;;Total ram usage:       14 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_follow_path
  5124 ;;		_f_open
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text11
  5129  00576A                     __ptext11:
  5130                           	opt callstack 0
  5131  00576A                     _ld_clust:
  5132                           	opt callstack 28
  5133                           
  5134                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;incstack = 0
  5138  00576A  0E1A               	movlw	26
  5139  00576C  2403               	addwf	ld_clust@dir,w,c
  5140  00576E  6ED9               	movwf	fsr2l,c
  5141  005770  0E00               	movlw	0
  5142  005772  2004               	addwfc	ld_clust@dir+1,w,c
  5143  005774  6EDA               	movwf	fsr2h,c
  5144  005776  CFDE F005          	movff	postinc2,??_ld_clust
  5145  00577A  CFDD F006          	movff	postdec2,??_ld_clust+1
  5146  00577E  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  5147  005782  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  5148  005786  6A0D               	clrf	ld_clust@cl+2,c
  5149  005788  6A0E               	clrf	ld_clust@cl+3,c
  5150                           
  5151                           ;ff.c: 1243:  if (fs->fs_type == 3)
  5152  00578A  C001  FFD9         	movff	ld_clust@fs,fsr2l
  5153  00578E  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  5154  005792  0E03               	movlw	3
  5155  005794  18DE               	xorwf	postinc2,w,c
  5156  005796  A4D8               	btfss	status,2,c
  5157  005798  D01E               	goto	l5342
  5158                           
  5159                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  5160  00579A  0E14               	movlw	20
  5161  00579C  2403               	addwf	ld_clust@dir,w,c
  5162  00579E  6ED9               	movwf	fsr2l,c
  5163  0057A0  0E00               	movlw	0
  5164  0057A2  2004               	addwfc	ld_clust@dir+1,w,c
  5165  0057A4  6EDA               	movwf	fsr2h,c
  5166  0057A6  CFDE F005          	movff	postinc2,??_ld_clust
  5167  0057AA  CFDD F006          	movff	postdec2,??_ld_clust+1
  5168  0057AE  5005               	movf	??_ld_clust,w,c
  5169  0057B0  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  5170  0057B2  5006               	movf	??_ld_clust+1,w,c
  5171  0057B4  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  5172  0057B6  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  5173  0057B8  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  5174  0057BA  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  5175  0057BE  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  5176  0057C2  6A08               	clrf	??_ld_clust+3,c
  5177  0057C4  6A07               	clrf	??_ld_clust+2,c
  5178  0057C6  5007               	movf	??_ld_clust+2,w,c
  5179  0057C8  120B               	iorwf	ld_clust@cl,f,c
  5180  0057CA  5008               	movf	??_ld_clust+3,w,c
  5181  0057CC  120C               	iorwf	ld_clust@cl+1,f,c
  5182  0057CE  5009               	movf	??_ld_clust+4,w,c
  5183  0057D0  120D               	iorwf	ld_clust@cl+2,f,c
  5184  0057D2  500A               	movf	??_ld_clust+5,w,c
  5185  0057D4  120E               	iorwf	ld_clust@cl+3,f,c
  5186  0057D6                     l5342:
  5187                           
  5188                           ;ff.c: 1246:  return cl;
  5189  0057D6  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  5190  0057DA  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  5191  0057DE  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  5192  0057E2  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  5193  0057E6  0012               	return		;funcret
  5194  0057E8                     __end_of_ld_clust:
  5195                           	opt callstack 0
  5196                           
  5197 ;; *************** function _dir_find *****************
  5198 ;; Defined at:
  5199 ;;		line 1458 in file "ff.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  dp              2   32[BANK0 ] PTR struct .
  5202 ;;		 -> f_open@dj(22), 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  5205 ;;		 -> FatFs(558), NULL(0), 
  5206 ;;  res             1   37[BANK0 ] enum E93
  5207 ;;  c               1   34[BANK0 ] unsigned char 
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      enum E93
  5210 ;; Registers used:
  5211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5217 ;;      Params:         0       2       0       0       0       0       0       0       0
  5218 ;;      Locals:         0       4       0       0       0       0       0       0       0
  5219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5220 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5221 ;;Total ram usage:        6 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:   11
  5224 ;; This function calls:
  5225 ;;		_dir_next
  5226 ;;		_dir_sdi
  5227 ;;		_mem_cmp
  5228 ;;		_move_window
  5229 ;; This function is called by:
  5230 ;;		_follow_path
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text12
  5235  004D20                     __ptext12:
  5236                           	opt callstack 0
  5237  004D20                     _dir_find:
  5238                           	opt callstack 16
  5239                           
  5240                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  5241                           
  5242                           ;incstack = 0
  5243  004D20  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  5244  004D24  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  5245  004D28  0E00               	movlw	0
  5246  004D2A  6E59               	movwf	dir_sdi@idx+1,c
  5247  004D2C  0E00               	movlw	0
  5248  004D2E  6E58               	movwf	dir_sdi@idx,c
  5249  004D30  ECF4  F01D         	call	_dir_sdi	;wreg free
  5250  004D34  0100               	movlb	0	; () banked
  5251  004D36  6F85               	movwf	dir_find@res& (0+255),b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;ff.c: 1469:  if (res != FR_OK) return res;
  5255  004D38  5185               	movf	dir_find@res& (0+255),w,b
  5256  004D3A  B4D8               	btfsc	status,2,c
  5257  004D3C  D003               	goto	l5356
  5258  004D3E                     u6580:
  5259  004D3E  0100               	movlb	0	; () banked
  5260  004D40  5185               	movf	dir_find@res& (0+255),w,b
  5261  004D42  0012               	return	
  5262  004D44                     l5356:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  5266  004D44  C080  FFD9         	movff	dir_find@dp,fsr2l
  5267  004D48  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  5268  004D4C  CFDE F030          	movff	postinc2,move_window@fs
  5269  004D50  CFDD F031          	movff	postdec2,move_window@fs+1
  5270  004D54  EE20 F00E          	lfsr	2,14
  5271  004D58  5180               	movf	dir_find@dp& (0+255),w,b
  5272  004D5A  26D9               	addwf	fsr2l,f,c
  5273  004D5C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5274  004D5E  22DA               	addwfc	fsr2h,f,c
  5275  004D60  CFDE F032          	movff	postinc2,move_window@sector
  5276  004D64  CFDE F033          	movff	postinc2,move_window@sector+1
  5277  004D68  CFDE F034          	movff	postinc2,move_window@sector+2
  5278  004D6C  CFDE F035          	movff	postinc2,move_window@sector+3
  5279  004D70  EC96  F02A         	call	_move_window	;wreg free
  5280  004D74  0100               	movlb	0	; () banked
  5281  004D76  6F85               	movwf	dir_find@res& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;ff.c: 1476:   if (res != FR_OK) break;
  5285  004D78  5185               	movf	dir_find@res& (0+255),w,b
  5286  004D7A  A4D8               	btfss	status,2,c
  5287  004D7C  D7E0               	goto	u6580
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;ff.c: 1477:   dir = dp->dir;
  5291  004D7E  EE20 F012          	lfsr	2,18
  5292  004D82  5180               	movf	dir_find@dp& (0+255),w,b
  5293  004D84  26D9               	addwf	fsr2l,f,c
  5294  004D86  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5295  004D88  22DA               	addwfc	fsr2h,f,c
  5296  004D8A  CFDE F083          	movff	postinc2,dir_find@dir
  5297  004D8E  CFDD F084          	movff	postdec2,dir_find@dir+1
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;ff.c: 1478:   c = dir[0];
  5301  004D92  C083  FFD9         	movff	dir_find@dir,fsr2l
  5302  004D96  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  5303  004D9A  50DF               	movf	indf2,w,c
  5304  004D9C  6F82               	movwf	dir_find@c& (0+255),b
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  5308  004D9E  5182               	movf	dir_find@c& (0+255),w,b
  5309  004DA0  A4D8               	btfss	status,2,c
  5310  004DA2  D003               	goto	l5370
  5311                           
  5312                           ; BSR set to: 0
  5313  004DA4  0E04               	movlw	4
  5314  004DA6  6F85               	movwf	dir_find@res& (0+255),b
  5315  004DA8  D7CA               	goto	u6580
  5316  004DAA                     l5370:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5320  004DAA  EE20 F00B          	lfsr	2,11
  5321  004DAE  5183               	movf	dir_find@dir& (0+255),w,b
  5322  004DB0  26D9               	addwf	fsr2l,f,c
  5323  004DB2  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  5324  004DB4  22DA               	addwfc	fsr2h,f,c
  5325  004DB6  B6DF               	btfsc	indf2,3,c
  5326  004DB8  D018               	goto	l5376
  5327                           
  5328                           ; BSR set to: 0
  5329  004DBA  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  5330  004DBE  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  5331  004DC2  EE20 F014          	lfsr	2,20
  5332  004DC6  5180               	movf	dir_find@dp& (0+255),w,b
  5333  004DC8  26D9               	addwf	fsr2l,f,c
  5334  004DCA  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5335  004DCC  22DA               	addwfc	fsr2h,f,c
  5336  004DCE  CFDE F003          	movff	postinc2,mem_cmp@src
  5337  004DD2  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5338  004DD6  0E00               	movlw	0
  5339  004DD8  6E06               	movwf	mem_cmp@cnt+1,c
  5340  004DDA  0E0B               	movlw	11
  5341  004DDC  6E05               	movwf	mem_cmp@cnt,c
  5342  004DDE  EC9F  F02C         	call	_mem_cmp	;wreg free
  5343  004DE2  5001               	movf	?_mem_cmp,w,c
  5344  004DE4  1002               	iorwf	?_mem_cmp+1,w,c
  5345  004DE6  B4D8               	btfsc	status,2,c
  5346  004DE8  D7AA               	goto	u6580
  5347  004DEA                     l5376:
  5348                           
  5349                           ;ff.c: 1505:   res = dir_next(dp, 0);
  5350  004DEA  C080  F06D         	movff	dir_find@dp,dir_next@dp
  5351  004DEE  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  5352  004DF2  0E00               	movlw	0
  5353  004DF4  0100               	movlb	0	; () banked
  5354  004DF6  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5355  004DF8  0E00               	movlw	0
  5356  004DFA  6F6F               	movwf	dir_next@stretch& (0+255),b
  5357  004DFC  ECD8  F016         	call	_dir_next	;wreg free
  5358  004E00  0100               	movlb	0	; () banked
  5359  004E02  6F85               	movwf	dir_find@res& (0+255),b
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;ff.c: 1506:  } while (res == FR_OK);
  5363  004E04  5185               	movf	dir_find@res& (0+255),w,b
  5364  004E06  A4D8               	btfss	status,2,c
  5365  004E08  D79A               	goto	u6580
  5366  004E0A  D79C               	goto	l5356
  5367  004E0C                     __end_of_dir_find:
  5368                           	opt callstack 0
  5369                           
  5370 ;; *************** function _mem_cmp *****************
  5371 ;; Defined at:
  5372 ;;		line 533 in file "ff.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  dst             2    0[COMRAM] PTR const void 
  5375 ;;		 -> FatFs(558), NULL(0), 
  5376 ;;  src             2    2[COMRAM] PTR const void 
  5377 ;;		 -> f_open@sfn(12), 
  5378 ;;  cnt             2    4[COMRAM] unsigned short 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  r               2   12[COMRAM] int 
  5381 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5382 ;;		 -> f_open@sfn(12), 
  5383 ;;  d               2    8[COMRAM] PTR const unsigned char 
  5384 ;;		 -> FatFs(558), NULL(0), 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  2    0[COMRAM] int 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5394 ;;      Params:         6       0       0       0       0       0       0       0       0
  5395 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5396 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5397 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5398 ;;Total ram usage:       14 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_dir_find
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text13
  5408  00593E                     __ptext13:
  5409                           	opt callstack 0
  5410  00593E                     _mem_cmp:
  5411                           	opt callstack 26
  5412                           
  5413                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;incstack = 0
  5417  00593E  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  5418  005942  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5419  005946  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  5420  00594A  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  5421                           
  5422                           ;ff.c: 535:  int r = 0;
  5423  00594E  0E00               	movlw	0
  5424  005950  6E0E               	movwf	mem_cmp@r+1,c
  5425  005952  0E00               	movlw	0
  5426  005954  6E0D               	movwf	mem_cmp@r,c
  5427  005956                     l4966:
  5428  005956  0605               	decf	mem_cmp@cnt,f,c
  5429  005958  A0D8               	btfss	status,0,c
  5430  00595A  0606               	decf	mem_cmp@cnt+1,f,c
  5431  00595C  2805               	incf	mem_cmp@cnt,w,c
  5432  00595E  E103               	bnz	u5890
  5433  005960  2806               	incf	mem_cmp@cnt+1,w,c
  5434  005962  B4D8               	btfsc	status,2,c
  5435  005964  D01A               	goto	u5900
  5436  005966                     u5890:
  5437  005966  C009  FFD9         	movff	mem_cmp@d,fsr2l
  5438  00596A  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  5439  00596E  4A09               	infsnz	mem_cmp@d,f,c
  5440  005970  2A0A               	incf	mem_cmp@d+1,f,c
  5441  005972  50DF               	movf	indf2,w,c
  5442  005974  6E07               	movwf	??_mem_cmp& (0+255),c
  5443  005976  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  5444  00597A  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  5445  00597E  4A0B               	infsnz	mem_cmp@s,f,c
  5446  005980  2A0C               	incf	mem_cmp@s+1,f,c
  5447  005982  50DF               	movf	indf2,w,c
  5448  005984  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  5449  005986  5008               	movf	??_mem_cmp+1,w,c
  5450  005988  5C07               	subwf	??_mem_cmp,w,c
  5451  00598A  6E0D               	movwf	mem_cmp@r,c
  5452  00598C  6A0E               	clrf	mem_cmp@r+1,c
  5453  00598E  A0D8               	btfss	status,0,c
  5454  005990  060E               	decf	mem_cmp@r+1,f,c
  5455  005992  500D               	movf	mem_cmp@r,w,c
  5456  005994  100E               	iorwf	mem_cmp@r+1,w,c
  5457  005996  B4D8               	btfsc	status,2,c
  5458  005998  D7DE               	goto	l4966
  5459  00599A                     u5900:
  5460                           
  5461                           ;ff.c: 538:  return r;
  5462  00599A  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  5463  00599E  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5464  0059A2  0012               	return		;funcret
  5465  0059A4                     __end_of_mem_cmp:
  5466                           	opt callstack 0
  5467                           
  5468 ;; *************** function _create_name *****************
  5469 ;; Defined at:
  5470 ;;		line 1843 in file "ff.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  dp              2    8[COMRAM] PTR struct .
  5473 ;;		 -> f_open@dj(22), 
  5474 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  5475 ;;		 -> follow_path@path(2), 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;  i               2   28[COMRAM] unsigned short 
  5478 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  5479 ;;		 -> f_open@sfn(12), 
  5480 ;;  p               2   23[COMRAM] PTR const unsigned char 
  5481 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  5482 ;;		 -> STR_4(1), STR_3(1), 
  5483 ;;  ni              2   21[COMRAM] unsigned short 
  5484 ;;  si              2   18[COMRAM] unsigned short 
  5485 ;;  c               1   30[COMRAM] unsigned char 
  5486 ;;  d               1   25[COMRAM] unsigned char 
  5487 ;;  b               1   20[COMRAM] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      enum E93
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5497 ;;      Params:         4       0       0       0       0       0       0       0       0
  5498 ;;      Locals:        15       0       0       0       0       0       0       0       0
  5499 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5500 ;;      Totals:        23       0       0       0       0       0       0       0       0
  5501 ;;Total ram usage:       23 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    1
  5504 ;; This function calls:
  5505 ;;		_chk_chr
  5506 ;;		_mem_set
  5507 ;; This function is called by:
  5508 ;;		_follow_path
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text14
  5513  003EAA                     __ptext14:
  5514                           	opt callstack 0
  5515  003EAA                     _create_name:
  5516                           	opt callstack 26
  5517                           
  5518                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  5519                           
  5520                           ;incstack = 0
  5521  003EAA  C00B  FFD9         	movff	create_name@path,fsr2l
  5522  003EAE  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5523  003EB2  CFDE F018          	movff	postinc2,create_name@p
  5524  003EB6  CFDD F019          	movff	postdec2,create_name@p+1
  5525  003EBA  D002               	goto	l5388
  5526  003EBC                     l5386:
  5527  003EBC  4A18               	infsnz	create_name@p,f,c
  5528  003EBE  2A19               	incf	create_name@p+1,f,c
  5529  003EC0                     l5388:
  5530  003EC0  C018  FFF6         	movff	create_name@p,tblptrl
  5531  003EC4  C019  FFF7         	movff	create_name@p+1,tblptrh
  5532  003EC8                     	if	0	;tblptru may be non-zero
  5533  003EC8                     	endif
  5534  003EC8                     	if	0	;tblptru may be non-zero
  5535  003EC8                     	endif
  5536  003EC8  0008               	tblrd		*
  5537  003ECA  50F5               	movf	tablat,w,c
  5538  003ECC  0A2F               	xorlw	47
  5539  003ECE  B4D8               	btfsc	status,2,c
  5540  003ED0  D7F5               	goto	l5386
  5541  003ED2  C018  FFF6         	movff	create_name@p,tblptrl
  5542  003ED6  C019  FFF7         	movff	create_name@p+1,tblptrh
  5543  003EDA                     	if	0	;tblptru may be non-zero
  5544  003EDA                     	endif
  5545  003EDA                     	if	0	;tblptru may be non-zero
  5546  003EDA                     	endif
  5547  003EDA  0008               	tblrd		*
  5548  003EDC  50F5               	movf	tablat,w,c
  5549  003EDE  0A5C               	xorlw	92
  5550  003EE0  B4D8               	btfsc	status,2,c
  5551  003EE2  D7EC               	goto	l5386
  5552                           
  5553                           ;ff.c: 1975:  sfn = dp->fn;
  5554  003EE4  EE20 F014          	lfsr	2,20
  5555  003EE8  5009               	movf	create_name@dp,w,c
  5556  003EEA  26D9               	addwf	fsr2l,f,c
  5557  003EEC  500A               	movf	create_name@dp+1,w,c
  5558  003EEE  22DA               	addwfc	fsr2h,f,c
  5559  003EF0  CFDE F01B          	movff	postinc2,create_name@sfn
  5560  003EF4  CFDD F01C          	movff	postdec2,create_name@sfn+1
  5561                           
  5562                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  5563  003EF8  C01B  F001         	movff	create_name@sfn,mem_set@dst
  5564  003EFC  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  5565  003F00  0E00               	movlw	0
  5566  003F02  6E04               	movwf	mem_set@val+1,c
  5567  003F04  0E20               	movlw	32
  5568  003F06  6E03               	movwf	mem_set@val,c
  5569  003F08  0E00               	movlw	0
  5570  003F0A  6E06               	movwf	mem_set@cnt+1,c
  5571  003F0C  0E0B               	movlw	11
  5572  003F0E  6E05               	movwf	mem_set@cnt,c
  5573  003F10  EC28  F02E         	call	_mem_set	;wreg free
  5574                           
  5575                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  5576  003F14  0E00               	movlw	0
  5577  003F16  6E15               	movwf	create_name@b,c
  5578  003F18  C015  F01D         	movff	create_name@b,create_name@i
  5579  003F1C  6A1E               	clrf	create_name@i+1,c
  5580  003F1E  C01D  F013         	movff	create_name@i,create_name@si
  5581  003F22  C01E  F014         	movff	create_name@i+1,create_name@si+1
  5582  003F26  0E00               	movlw	0
  5583  003F28  6E17               	movwf	create_name@ni+1,c
  5584  003F2A  0E08               	movlw	8
  5585  003F2C  6E16               	movwf	create_name@ni,c
  5586  003F2E                     l5400:
  5587                           
  5588                           ;ff.c: 1992:   c = (BYTE)p[si++];
  5589  003F2E  5013               	movf	create_name@si,w,c
  5590  003F30  2418               	addwf	create_name@p,w,c
  5591  003F32  6E0D               	movwf	??_create_name& (0+255),c
  5592  003F34  5014               	movf	create_name@si+1,w,c
  5593  003F36  2019               	addwfc	create_name@p+1,w,c
  5594  003F38  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5595  003F3A  C00D  FFF6         	movff	??_create_name,tblptrl
  5596  003F3E  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5597  003F42                     	if	0	;tblptru may be non-zero
  5598  003F42                     	endif
  5599  003F42                     	if	0	;tblptru may be non-zero
  5600  003F42                     	endif
  5601  003F42  0008               	tblrd		*
  5602  003F44  CFF5 F01F          	movff	tablat,create_name@c
  5603  003F48  4A13               	infsnz	create_name@si,f,c
  5604  003F4A  2A14               	incf	create_name@si+1,f,c
  5605                           
  5606                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  5607  003F4C  0E20               	movlw	32
  5608  003F4E  641F               	cpfsgt	create_name@c,c
  5609  003F50  D0A4               	goto	l5484
  5610  003F52  0E2F               	movlw	47
  5611  003F54  181F               	xorwf	create_name@c,w,c
  5612  003F56  B4D8               	btfsc	status,2,c
  5613  003F58  D0A0               	goto	l5484
  5614  003F5A  0E5C               	movlw	92
  5615  003F5C  181F               	xorwf	create_name@c,w,c
  5616  003F5E  B4D8               	btfsc	status,2,c
  5617  003F60  D09C               	goto	l5484
  5618                           
  5619                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  5620  003F62  0E2E               	movlw	46
  5621  003F64  181F               	xorwf	create_name@c,w,c
  5622  003F66  B4D8               	btfsc	status,2,c
  5623  003F68  D006               	goto	u6700
  5624  003F6A  5016               	movf	create_name@ni,w,c
  5625  003F6C  5C1D               	subwf	create_name@i,w,c
  5626  003F6E  5017               	movf	create_name@ni+1,w,c
  5627  003F70  581E               	subwfb	create_name@i+1,w,c
  5628  003F72  A0D8               	btfss	status,0,c
  5629  003F74  D018               	goto	l5426
  5630  003F76                     u6700:
  5631                           
  5632                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5633  003F76  0E08               	movlw	8
  5634  003F78  1816               	xorwf	create_name@ni,w,c
  5635  003F7A  1017               	iorwf	create_name@ni+1,w,c
  5636  003F7C  A4D8               	btfss	status,2,c
  5637  003F7E  D004               	goto	u6720
  5638  003F80  0E2E               	movlw	46
  5639  003F82  181F               	xorwf	create_name@c,w,c
  5640  003F84  B4D8               	btfsc	status,2,c
  5641  003F86  D002               	goto	l5422
  5642  003F88                     u6720:
  5643  003F88  0E06               	movlw	6
  5644  003F8A  0012               	return	
  5645  003F8C                     l5422:
  5646                           
  5647                           ;ff.c: 1996:    i = 8; ni = 11;
  5648  003F8C  0E00               	movlw	0
  5649  003F8E  6E1E               	movwf	create_name@i+1,c
  5650  003F90  0E08               	movlw	8
  5651  003F92  6E1D               	movwf	create_name@i,c
  5652  003F94  0E00               	movlw	0
  5653  003F96  6E17               	movwf	create_name@ni+1,c
  5654  003F98  0E0B               	movlw	11
  5655  003F9A  6E16               	movwf	create_name@ni,c
  5656                           
  5657                           ;ff.c: 1997:    b <<= 2; continue;
  5658  003F9C  90D8               	bcf	status,0,c
  5659  003F9E  3615               	rlcf	create_name@b,f,c
  5660  003FA0  90D8               	bcf	status,0,c
  5661  003FA2  3615               	rlcf	create_name@b,f,c
  5662  003FA4  D7C4               	goto	l5400
  5663  003FA6                     l5426:
  5664                           
  5665                           ;ff.c: 1999:   if (c >= 0x80) {
  5666  003FA6  0E7F               	movlw	127
  5667  003FA8  641F               	cpfsgt	create_name@c,c
  5668  003FAA  D002               	goto	l432
  5669                           
  5670                           ;ff.c: 2000:    b |= 3;
  5671  003FAC  0E03               	movlw	3
  5672  003FAE  1215               	iorwf	create_name@b,f,c
  5673  003FB0                     l432:
  5674                           
  5675                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  5676  003FB0  0E80               	movlw	128
  5677  003FB2  641F               	cpfsgt	create_name@c,c
  5678  003FB4  D003               	goto	u6750
  5679  003FB6  0E9F               	movlw	159
  5680  003FB8  641F               	cpfsgt	create_name@c,c
  5681  003FBA  D006               	goto	u6770
  5682  003FBC                     u6750:
  5683  003FBC  0EDF               	movlw	223
  5684  003FBE  641F               	cpfsgt	create_name@c,c
  5685  003FC0  D043               	goto	l5460
  5686  003FC2  0EFD               	movlw	253
  5687  003FC4  601F               	cpfslt	create_name@c,c
  5688  003FC6  D040               	goto	l5460
  5689  003FC8                     u6770:
  5690                           
  5691                           ;ff.c: 2010:    d = (BYTE)p[si++];
  5692  003FC8  5013               	movf	create_name@si,w,c
  5693  003FCA  2418               	addwf	create_name@p,w,c
  5694  003FCC  6E0D               	movwf	??_create_name& (0+255),c
  5695  003FCE  5014               	movf	create_name@si+1,w,c
  5696  003FD0  2019               	addwfc	create_name@p+1,w,c
  5697  003FD2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5698  003FD4  C00D  FFF6         	movff	??_create_name,tblptrl
  5699  003FD8  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5700  003FDC                     	if	0	;tblptru may be non-zero
  5701  003FDC                     	endif
  5702  003FDC                     	if	0	;tblptru may be non-zero
  5703  003FDC                     	endif
  5704  003FDC  0008               	tblrd		*
  5705  003FDE  CFF5 F01A          	movff	tablat,create_name@d
  5706  003FE2  4A13               	infsnz	create_name@si,f,c
  5707  003FE4  2A14               	incf	create_name@si+1,f,c
  5708                           
  5709                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  5710  003FE6  0E3F               	movlw	63
  5711  003FE8  641A               	cpfsgt	create_name@d,c
  5712  003FEA  D003               	goto	u6790
  5713  003FEC  0E7E               	movlw	126
  5714  003FEE  641A               	cpfsgt	create_name@d,c
  5715  003FF0  D006               	goto	u6810
  5716  003FF2                     u6790:
  5717  003FF2  0E7F               	movlw	127
  5718  003FF4  641A               	cpfsgt	create_name@d,c
  5719  003FF6  D7C8               	goto	u6720
  5720  003FF8  0EFD               	movlw	253
  5721  003FFA  601A               	cpfslt	create_name@d,c
  5722  003FFC  D7C5               	goto	u6720
  5723  003FFE                     u6810:
  5724  003FFE  0EFF               	movlw	255
  5725  004000  6E0D               	movwf	??_create_name& (0+255),c
  5726  004002  0EFF               	movlw	255
  5727  004004  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5728  004006  C016  F00F         	movff	create_name@ni,??_create_name+2
  5729  00400A  C017  F010         	movff	create_name@ni+1,??_create_name+3
  5730  00400E  500D               	movf	??_create_name,w,c
  5731  004010  260F               	addwf	??_create_name+2,f,c
  5732  004012  500E               	movf	??_create_name+1,w,c
  5733  004014  2210               	addwfc	??_create_name+3,f,c
  5734  004016  500F               	movf	??_create_name+2,w,c
  5735  004018  5C1D               	subwf	create_name@i,w,c
  5736  00401A  5010               	movf	??_create_name+3,w,c
  5737  00401C  581E               	subwfb	create_name@i+1,w,c
  5738  00401E  B0D8               	btfsc	status,0,c
  5739  004020  D7B3               	goto	u6720
  5740                           
  5741                           ;ff.c: 2013:    sfn[i++] = c;
  5742  004022  501D               	movf	create_name@i,w,c
  5743  004024  241B               	addwf	create_name@sfn,w,c
  5744  004026  6ED9               	movwf	fsr2l,c
  5745  004028  501E               	movf	create_name@i+1,w,c
  5746  00402A  201C               	addwfc	create_name@sfn+1,w,c
  5747  00402C  6EDA               	movwf	fsr2h,c
  5748  00402E  C01F  FFDF         	movff	create_name@c,indf2
  5749  004032  4A1D               	infsnz	create_name@i,f,c
  5750  004034  2A1E               	incf	create_name@i+1,f,c
  5751                           
  5752                           ;ff.c: 2014:    sfn[i++] = d;
  5753  004036  501D               	movf	create_name@i,w,c
  5754  004038  241B               	addwf	create_name@sfn,w,c
  5755  00403A  6ED9               	movwf	fsr2l,c
  5756  00403C  501E               	movf	create_name@i+1,w,c
  5757  00403E  201C               	addwfc	create_name@sfn+1,w,c
  5758  004040  6EDA               	movwf	fsr2h,c
  5759  004042  C01A  FFDF         	movff	create_name@d,indf2
  5760  004046  D026               	goto	l5482
  5761  004048                     l5460:
  5762                           
  5763                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5764  004048  0E01               	movlw	low STR_1
  5765  00404A  6E01               	movwf	chk_chr@str,c
  5766  00404C  0E08               	movlw	high STR_1
  5767  00404E  6E02               	movwf	chk_chr@str+1,c
  5768  004050  C01F  F003         	movff	create_name@c,chk_chr@chr
  5769  004054  6A04               	clrf	chk_chr@chr+1,c
  5770  004056  EC8C  F02D         	call	_chk_chr	;wreg free
  5771  00405A  5001               	movf	?_chk_chr,w,c
  5772  00405C  1002               	iorwf	?_chk_chr+1,w,c
  5773  00405E  A4D8               	btfss	status,2,c
  5774  004060  D793               	goto	u6720
  5775                           
  5776                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  5777  004062  0E40               	movlw	64
  5778  004064  641F               	cpfsgt	create_name@c,c
  5779  004066  D005               	goto	l5472
  5780  004068  0E5B               	movlw	91
  5781  00406A  601F               	cpfslt	create_name@c,c
  5782  00406C  D002               	goto	l5472
  5783                           
  5784                           ;ff.c: 2019:     b |= 2;
  5785  00406E  8215               	bsf	create_name@b,1,c
  5786                           
  5787                           ;ff.c: 2020:    } else {
  5788  004070  D009               	goto	l5480
  5789  004072                     l5472:
  5790                           
  5791                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  5792  004072  0E60               	movlw	96
  5793  004074  641F               	cpfsgt	create_name@c,c
  5794  004076  D006               	goto	l5480
  5795  004078  0E7B               	movlw	123
  5796  00407A  601F               	cpfslt	create_name@c,c
  5797  00407C  D003               	goto	l5480
  5798                           
  5799                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  5800  00407E  8015               	bsf	create_name@b,0,c
  5801  004080  0E20               	movlw	32
  5802  004082  5E1F               	subwf	create_name@c,f,c
  5803  004084                     l5480:
  5804                           
  5805                           ;ff.c: 2025:    sfn[i++] = c;
  5806  004084  501D               	movf	create_name@i,w,c
  5807  004086  241B               	addwf	create_name@sfn,w,c
  5808  004088  6ED9               	movwf	fsr2l,c
  5809  00408A  501E               	movf	create_name@i+1,w,c
  5810  00408C  201C               	addwfc	create_name@sfn+1,w,c
  5811  00408E  6EDA               	movwf	fsr2h,c
  5812  004090  C01F  FFDF         	movff	create_name@c,indf2
  5813  004094                     l5482:
  5814  004094  4A1D               	infsnz	create_name@i,f,c
  5815  004096  2A1E               	incf	create_name@i+1,f,c
  5816  004098  D74A               	goto	l5400
  5817  00409A                     l5484:
  5818                           
  5819                           ;ff.c: 2028:  *path = &p[si];
  5820  00409A  5013               	movf	create_name@si,w,c
  5821  00409C  2418               	addwf	create_name@p,w,c
  5822  00409E  6E0D               	movwf	??_create_name& (0+255),c
  5823  0040A0  5014               	movf	create_name@si+1,w,c
  5824  0040A2  2019               	addwfc	create_name@p+1,w,c
  5825  0040A4  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5826  0040A6  C00B  FFD9         	movff	create_name@path,fsr2l
  5827  0040AA  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5828  0040AE  C00D  FFDE         	movff	??_create_name,postinc2
  5829  0040B2  C00E  FFDD         	movff	??_create_name+1,postdec2
  5830                           
  5831                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  5832  0040B6  0E20               	movlw	32
  5833  0040B8  641F               	cpfsgt	create_name@c,c
  5834  0040BA  D004               	goto	l5490
  5835  0040BC  0E00               	movlw	0
  5836  0040BE  6E12               	movwf	_create_name$624+1,c
  5837  0040C0  0E00               	movlw	0
  5838  0040C2  D003               	goto	L5
  5839  0040C4                     l5490:
  5840  0040C4  0E00               	movlw	0
  5841  0040C6  6E12               	movwf	_create_name$624+1,c
  5842  0040C8  0E04               	movlw	4
  5843  0040CA                     L5:
  5844  0040CA  6E11               	movwf	_create_name$624,c
  5845  0040CC  C011  F01F         	movff	_create_name$624,create_name@c
  5846                           
  5847                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  5848  0040D0  501D               	movf	create_name@i,w,c
  5849  0040D2  101E               	iorwf	create_name@i+1,w,c
  5850  0040D4  B4D8               	btfsc	status,2,c
  5851  0040D6  D758               	goto	u6720
  5852                           
  5853                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  5854  0040D8  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5855  0040DC  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5856  0040E0  0EE5               	movlw	229
  5857  0040E2  18DE               	xorwf	postinc2,w,c
  5858  0040E4  A4D8               	btfss	status,2,c
  5859  0040E6  D006               	goto	l5504
  5860  0040E8  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5861  0040EC  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5862  0040F0  0E05               	movlw	5
  5863  0040F2  6EDF               	movwf	indf2,c
  5864  0040F4                     l5504:
  5865                           
  5866                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  5867  0040F4  0E08               	movlw	8
  5868  0040F6  1816               	xorwf	create_name@ni,w,c
  5869  0040F8  1017               	iorwf	create_name@ni+1,w,c
  5870  0040FA  A4D8               	btfss	status,2,c
  5871  0040FC  D004               	goto	l456
  5872  0040FE  90D8               	bcf	status,0,c
  5873  004100  3615               	rlcf	create_name@b,f,c
  5874  004102  90D8               	bcf	status,0,c
  5875  004104  3615               	rlcf	create_name@b,f,c
  5876  004106                     l456:
  5877                           
  5878                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  5879  004106  5015               	movf	create_name@b,w,c
  5880  004108  0B03               	andlw	3
  5881  00410A  06E8               	decf	wreg,f,c
  5882  00410C  B4D8               	btfsc	status,2,c
  5883  00410E  881F               	bsf	create_name@c,4,c
  5884                           
  5885                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  5886  004110  5015               	movf	create_name@b,w,c
  5887  004112  0B0C               	andlw	12
  5888  004114  0A04               	xorlw	4
  5889  004116  B4D8               	btfsc	status,2,c
  5890  004118  861F               	bsf	create_name@c,3,c
  5891                           
  5892                           ;ff.c: 2038:  sfn[11] = c;
  5893  00411A  EE20 F00B          	lfsr	2,11
  5894  00411E  501B               	movf	create_name@sfn,w,c
  5895  004120  26D9               	addwf	fsr2l,f,c
  5896  004122  501C               	movf	create_name@sfn+1,w,c
  5897  004124  22DA               	addwfc	fsr2h,f,c
  5898  004126  C01F  FFDF         	movff	create_name@c,indf2
  5899                           
  5900                           ;ff.c: 2040:  return FR_OK;
  5901  00412A  0E00               	movlw	0
  5902  00412C  0012               	return		;funcret
  5903  00412E                     __end_of_create_name:
  5904                           	opt callstack 0
  5905                           
  5906 ;; *************** function _chk_chr *****************
  5907 ;; Defined at:
  5908 ;;		line 543 in file "ff.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  str             2    0[COMRAM] PTR const unsigned char 
  5911 ;;		 -> STR_2(15), 
  5912 ;;  chr             2    2[COMRAM] int 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;		None
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  2    0[COMRAM] int 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5924 ;;      Params:         4       0       0       0       0       0       0       0       0
  5925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5926 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5927 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5928 ;;Total ram usage:        6 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_create_name
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text15
  5938  005B18                     __ptext15:
  5939                           	opt callstack 0
  5940  005B18                     _chk_chr:
  5941                           	opt callstack 26
  5942                           
  5943                           ;ff.c: 544:  while (*str && *str != chr) str++;
  5944                           
  5945                           ;incstack = 0
  5946  005B18  D002               	goto	l4974
  5947  005B1A                     l4972:
  5948  005B1A  4A01               	infsnz	chk_chr@str,f,c
  5949  005B1C  2A02               	incf	chk_chr@str+1,f,c
  5950  005B1E                     l4974:
  5951  005B1E  C001  FFF6         	movff	chk_chr@str,tblptrl
  5952  005B22  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5953  005B26                     	if	0	;tblptru may be non-zero
  5954  005B26                     	endif
  5955  005B26                     	if	0	;tblptru may be non-zero
  5956  005B26                     	endif
  5957  005B26  0008               	tblrd		*
  5958  005B28  50F5               	movf	tablat,w,c
  5959  005B2A  0900               	iorlw	0
  5960  005B2C  B4D8               	btfsc	status,2,c
  5961  005B2E  D00F               	goto	u5920
  5962  005B30  C001  FFF6         	movff	chk_chr@str,tblptrl
  5963  005B34  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5964  005B38                     	if	0	;tblptru may be non-zero
  5965  005B38                     	endif
  5966  005B38                     	if	0	;tblptru may be non-zero
  5967  005B38                     	endif
  5968  005B38  0008               	tblrd		*
  5969  005B3A  50F5               	movf	tablat,w,c
  5970  005B3C  6E05               	movwf	??_chk_chr& (0+255),c
  5971  005B3E  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  5972  005B40  5003               	movf	chk_chr@chr,w,c
  5973  005B42  1805               	xorwf	??_chk_chr,w,c
  5974  005B44  E1EA               	bnz	l4972
  5975  005B46  5004               	movf	chk_chr@chr+1,w,c
  5976  005B48  1806               	xorwf	??_chk_chr+1,w,c
  5977  005B4A  A4D8               	btfss	status,2,c
  5978  005B4C  D7E6               	goto	l4972
  5979  005B4E                     u5920:
  5980                           
  5981                           ;ff.c: 545:  return *str;
  5982  005B4E  C001  FFF6         	movff	chk_chr@str,tblptrl
  5983  005B52  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5984  005B56                     	if	0	;tblptru may be non-zero
  5985  005B56                     	endif
  5986  005B56                     	if	0	;tblptru may be non-zero
  5987  005B56                     	endif
  5988  005B56  0008               	tblrd		*
  5989  005B58  50F5               	movf	tablat,w,c
  5990  005B5A  6E01               	movwf	?_chk_chr,c
  5991  005B5C  6A02               	clrf	?_chk_chr+1,c
  5992  005B5E  0012               	return		;funcret
  5993  005B60                     __end_of_chk_chr:
  5994                           	opt callstack 0
  5995                           
  5996 ;; *************** function _dir_register *****************
  5997 ;; Defined at:
  5998 ;;		line 1578 in file "ff.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  dp              2   42[BANK0 ] PTR struct .
  6001 ;;		 -> f_open@dj(22), 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  res             1   44[BANK0 ] enum E93
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      enum E93
  6006 ;; Registers used:
  6007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6013 ;;      Params:         0       2       0       0       0       0       0       0       0
  6014 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6016 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6017 ;;Total ram usage:        3 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:   12
  6020 ;; This function calls:
  6021 ;;		_dir_alloc
  6022 ;;		_mem_cpy
  6023 ;;		_mem_set
  6024 ;;		_move_window
  6025 ;; This function is called by:
  6026 ;;		_f_open
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text16
  6031  0050B0                     __ptext16:
  6032                           	opt callstack 0
  6033  0050B0                     _dir_register:
  6034                           	opt callstack 16
  6035                           
  6036                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  6037                           
  6038                           ;incstack = 0
  6039  0050B0  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  6040  0050B4  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  6041  0050B8  0E00               	movlw	0
  6042  0050BA  0100               	movlb	0	; () banked
  6043  0050BC  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  6044  0050BE  0E01               	movlw	1
  6045  0050C0  6F82               	movwf	dir_alloc@nent& (0+255),b
  6046  0050C2  EC18  F026         	call	_dir_alloc	;wreg free
  6047  0050C6  0100               	movlb	0	; () banked
  6048  0050C8  6F8C               	movwf	dir_register@res& (0+255),b
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;ff.c: 1632:  if (res == FR_OK) {
  6052  0050CA  518C               	movf	dir_register@res& (0+255),w,b
  6053  0050CC  A4D8               	btfss	status,2,c
  6054  0050CE  D058               	goto	l5686
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  6058  0050D0  C08A  FFD9         	movff	dir_register@dp,fsr2l
  6059  0050D4  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  6060  0050D8  CFDE F030          	movff	postinc2,move_window@fs
  6061  0050DC  CFDD F031          	movff	postdec2,move_window@fs+1
  6062  0050E0  EE20 F00E          	lfsr	2,14
  6063  0050E4  518A               	movf	dir_register@dp& (0+255),w,b
  6064  0050E6  26D9               	addwf	fsr2l,f,c
  6065  0050E8  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6066  0050EA  22DA               	addwfc	fsr2h,f,c
  6067  0050EC  CFDE F032          	movff	postinc2,move_window@sector
  6068  0050F0  CFDE F033          	movff	postinc2,move_window@sector+1
  6069  0050F4  CFDE F034          	movff	postinc2,move_window@sector+2
  6070  0050F8  CFDE F035          	movff	postinc2,move_window@sector+3
  6071  0050FC  EC96  F02A         	call	_move_window	;wreg free
  6072  005100  0100               	movlb	0	; () banked
  6073  005102  6F8C               	movwf	dir_register@res& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;ff.c: 1634:   if (res == FR_OK) {
  6077  005104  518C               	movf	dir_register@res& (0+255),w,b
  6078  005106  A4D8               	btfss	status,2,c
  6079  005108  D03B               	goto	l5686
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  6083  00510A  EE20 F012          	lfsr	2,18
  6084  00510E  518A               	movf	dir_register@dp& (0+255),w,b
  6085  005110  26D9               	addwf	fsr2l,f,c
  6086  005112  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6087  005114  22DA               	addwfc	fsr2h,f,c
  6088  005116  CFDE F001          	movff	postinc2,mem_set@dst
  6089  00511A  CFDD F002          	movff	postdec2,mem_set@dst+1
  6090  00511E  0E00               	movlw	0
  6091  005120  6E04               	movwf	mem_set@val+1,c
  6092  005122  0E00               	movlw	0
  6093  005124  6E03               	movwf	mem_set@val,c
  6094  005126  0E00               	movlw	0
  6095  005128  6E06               	movwf	mem_set@cnt+1,c
  6096  00512A  0E20               	movlw	32
  6097  00512C  6E05               	movwf	mem_set@cnt,c
  6098  00512E  EC28  F02E         	call	_mem_set	;wreg free
  6099                           
  6100                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  6101  005132  0100               	movlb	0	; () banked
  6102  005134  EE20 F012          	lfsr	2,18
  6103  005138  518A               	movf	dir_register@dp& (0+255),w,b
  6104  00513A  26D9               	addwf	fsr2l,f,c
  6105  00513C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6106  00513E  22DA               	addwfc	fsr2h,f,c
  6107  005140  CFDE F001          	movff	postinc2,mem_cpy@dst
  6108  005144  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  6109  005148  EE20 F014          	lfsr	2,20
  6110  00514C  518A               	movf	dir_register@dp& (0+255),w,b
  6111  00514E  26D9               	addwf	fsr2l,f,c
  6112  005150  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  6113  005152  22DA               	addwfc	fsr2h,f,c
  6114  005154  CFDE F003          	movff	postinc2,mem_cpy@src
  6115  005158  CFDD F004          	movff	postdec2,mem_cpy@src+1
  6116  00515C  0E00               	movlw	0
  6117  00515E  6E06               	movwf	mem_cpy@cnt+1,c
  6118  005160  0E0B               	movlw	11
  6119  005162  6E05               	movwf	mem_cpy@cnt,c
  6120  005164  ECF4  F02B         	call	_mem_cpy	;wreg free
  6121                           
  6122                           ;ff.c: 1640:    dp->fs->wflag = 1;
  6123  005168  C08A  FFD9         	movff	dir_register@dp,fsr2l
  6124  00516C  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  6125  005170  EE10 F004          	lfsr	1,4
  6126  005174  50DE               	movf	postinc2,w,c
  6127  005176  26E1               	addwf	fsr1l,f,c
  6128  005178  50DD               	movf	postdec2,w,c
  6129  00517A  22E2               	addwfc	fsr1h,f,c
  6130  00517C  0E01               	movlw	1
  6131  00517E  6EE7               	movwf	indf1,c
  6132  005180                     l5686:
  6133                           
  6134                           ;ff.c: 1644:  return res;
  6135  005180  0100               	movlb	0	; () banked
  6136  005182  518C               	movf	dir_register@res& (0+255),w,b
  6137                           
  6138                           ; BSR set to: 0
  6139  005184  0012               	return		;funcret
  6140  005186                     __end_of_dir_register:
  6141                           	opt callstack 0
  6142                           
  6143 ;; *************** function _mem_cpy *****************
  6144 ;; Defined at:
  6145 ;;		line 507 in file "ff.c"
  6146 ;; Parameters:    Size  Location     Type
  6147 ;;  dst             2    0[COMRAM] PTR void 
  6148 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
  6149 ;;  src             2    2[COMRAM] PTR const void 
  6150 ;;		 -> FatFs.win(512), FatFs(558), ND(2), f_open@sfn(12), 
  6151 ;;		 -> NULL(0), 
  6152 ;;  cnt             2    4[COMRAM] unsigned short 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6155 ;;		 -> FatFs.win(512), FatFs(558), ND(2), f_open@sfn(12), 
  6156 ;;		 -> NULL(0), 
  6157 ;;  d               2    6[COMRAM] PTR unsigned char 
  6158 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  1    wreg      void 
  6161 ;; Registers used:
  6162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6168 ;;      Params:         6       0       0       0       0       0       0       0       0
  6169 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6171 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6172 ;;Total ram usage:       10 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; This function calls:
  6175 ;;		Nothing
  6176 ;; This function is called by:
  6177 ;;		_dir_register
  6178 ;;		_f_read
  6179 ;;		_f_write
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text17
  6184  0057E8                     __ptext17:
  6185                           	opt callstack 0
  6186  0057E8                     _mem_cpy:
  6187                           	opt callstack 27
  6188                           
  6189                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;incstack = 0
  6193  0057E8  C001  F007         	movff	mem_cpy@dst,mem_cpy@d
  6194  0057EC  C002  F008         	movff	mem_cpy@dst+1,mem_cpy@d+1
  6195                           
  6196                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  6197  0057F0  C003  F009         	movff	mem_cpy@src,mem_cpy@s
  6198  0057F4  C004  F00A         	movff	mem_cpy@src+1,mem_cpy@s+1
  6199                           
  6200                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6201  0057F8  D018               	goto	l5266
  6202  0057FA                     l5258:
  6203                           
  6204                           ;ff.c: 513:   *(int*)d = *(int*)s;
  6205  0057FA  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6206  0057FE  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6207  005802  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6208  005806  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6209  00580A  CFDE FFE6          	movff	postinc2,postinc1
  6210  00580E  CFDD FFE5          	movff	postdec2,postdec1
  6211                           
  6212                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  6213  005812  0E02               	movlw	2
  6214  005814  2607               	addwf	mem_cpy@d,f,c
  6215  005816  0E00               	movlw	0
  6216  005818  2208               	addwfc	mem_cpy@d+1,f,c
  6217  00581A  0E02               	movlw	2
  6218  00581C  2609               	addwf	mem_cpy@s,f,c
  6219  00581E  0E00               	movlw	0
  6220  005820  220A               	addwfc	mem_cpy@s+1,f,c
  6221                           
  6222                           ;ff.c: 515:   cnt -= sizeof (int);
  6223  005822  0E02               	movlw	2
  6224  005824  5E05               	subwf	mem_cpy@cnt,f,c
  6225  005826  0E00               	movlw	0
  6226  005828  5A06               	subwfb	mem_cpy@cnt+1,f,c
  6227  00582A                     l5266:
  6228                           
  6229                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6230  00582A  5006               	movf	mem_cpy@cnt+1,w,c
  6231  00582C  E1E6               	bnz	l5258
  6232  00582E  0E02               	movlw	2
  6233  005830  5C05               	subwf	mem_cpy@cnt,w,c
  6234  005832  A0D8               	btfss	status,0,c
  6235  005834  D00F               	goto	l5274
  6236  005836  D7E1               	goto	l5258
  6237  005838                     l5268:
  6238                           
  6239                           ;ff.c: 519:   *d++ = *s++;
  6240  005838  C009  FFD9         	movff	mem_cpy@s,fsr2l
  6241  00583C  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  6242  005840  C007  FFE1         	movff	mem_cpy@d,fsr1l
  6243  005844  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  6244  005848  CFDF FFE7          	movff	indf2,indf1
  6245  00584C  4A09               	infsnz	mem_cpy@s,f,c
  6246  00584E  2A0A               	incf	mem_cpy@s+1,f,c
  6247  005850  4A07               	infsnz	mem_cpy@d,f,c
  6248  005852  2A08               	incf	mem_cpy@d+1,f,c
  6249  005854                     l5274:
  6250                           
  6251                           ;ff.c: 518:  while (cnt--)
  6252  005854  0605               	decf	mem_cpy@cnt,f,c
  6253  005856  A0D8               	btfss	status,0,c
  6254  005858  0606               	decf	mem_cpy@cnt+1,f,c
  6255  00585A  2805               	incf	mem_cpy@cnt,w,c
  6256  00585C  E1ED               	bnz	l5268
  6257  00585E  2806               	incf	mem_cpy@cnt+1,w,c
  6258  005860  B4D8               	btfsc	status,2,c
  6259  005862  0012               	return	
  6260  005864  D7E9               	goto	l5268
  6261  005866                     __end_of_mem_cpy:
  6262                           	opt callstack 0
  6263                           
  6264 ;; *************** function _dir_alloc *****************
  6265 ;; Defined at:
  6266 ;;		line 1199 in file "ff.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  dp              2   32[BANK0 ] PTR struct .
  6269 ;;		 -> f_open@dj(22), 
  6270 ;;  nent            2   34[BANK0 ] unsigned short 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  n               2   39[BANK0 ] unsigned short 
  6273 ;;  res             1   41[BANK0 ] enum E93
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      enum E93
  6276 ;; Registers used:
  6277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6283 ;;      Params:         0       4       0       0       0       0       0       0       0
  6284 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6285 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6286 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6287 ;;Total ram usage:       10 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:   11
  6290 ;; This function calls:
  6291 ;;		_dir_next
  6292 ;;		_dir_sdi
  6293 ;;		_move_window
  6294 ;; This function is called by:
  6295 ;;		_dir_register
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text18
  6300  004C30                     __ptext18:
  6301                           	opt callstack 0
  6302  004C30                     _dir_alloc:
  6303                           	opt callstack 16
  6304                           
  6305                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  6306                           
  6307                           ;incstack = 0
  6308  004C30  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  6309  004C34  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  6310  004C38  0E00               	movlw	0
  6311  004C3A  6E59               	movwf	dir_sdi@idx+1,c
  6312  004C3C  0E00               	movlw	0
  6313  004C3E  6E58               	movwf	dir_sdi@idx,c
  6314  004C40  ECF4  F01D         	call	_dir_sdi	;wreg free
  6315  004C44  0100               	movlb	0	; () banked
  6316  004C46  6F89               	movwf	dir_alloc@res& (0+255),b
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;ff.c: 1209:  if (res == FR_OK) {
  6320  004C48  5189               	movf	dir_alloc@res& (0+255),w,b
  6321  004C4A  A4D8               	btfss	status,2,c
  6322  004C4C  D061               	goto	u6550
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;ff.c: 1210:   n = 0;
  6326  004C4E  0E00               	movlw	0
  6327  004C50  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6328  004C52  0E00               	movlw	0
  6329  004C54  6F87               	movwf	dir_alloc@n& (0+255),b
  6330  004C56                     l5312:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  6334  004C56  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  6335  004C5A  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  6336  004C5E  CFDE F030          	movff	postinc2,move_window@fs
  6337  004C62  CFDD F031          	movff	postdec2,move_window@fs+1
  6338  004C66  EE20 F00E          	lfsr	2,14
  6339  004C6A  5180               	movf	dir_alloc@dp& (0+255),w,b
  6340  004C6C  26D9               	addwf	fsr2l,f,c
  6341  004C6E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6342  004C70  22DA               	addwfc	fsr2h,f,c
  6343  004C72  CFDE F032          	movff	postinc2,move_window@sector
  6344  004C76  CFDE F033          	movff	postinc2,move_window@sector+1
  6345  004C7A  CFDE F034          	movff	postinc2,move_window@sector+2
  6346  004C7E  CFDE F035          	movff	postinc2,move_window@sector+3
  6347  004C82  EC96  F02A         	call	_move_window	;wreg free
  6348  004C86  0100               	movlb	0	; () banked
  6349  004C88  6F89               	movwf	dir_alloc@res& (0+255),b
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;ff.c: 1213:    if (res != FR_OK) break;
  6353  004C8A  5189               	movf	dir_alloc@res& (0+255),w,b
  6354  004C8C  A4D8               	btfss	status,2,c
  6355  004C8E  D040               	goto	u6550
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  6359  004C90  EE20 F012          	lfsr	2,18
  6360  004C94  5180               	movf	dir_alloc@dp& (0+255),w,b
  6361  004C96  26D9               	addwf	fsr2l,f,c
  6362  004C98  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6363  004C9A  22DA               	addwfc	fsr2h,f,c
  6364  004C9C  CFDE F084          	movff	postinc2,??_dir_alloc
  6365  004CA0  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6366  004CA4  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6367  004CA8  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6368  004CAC  0EE5               	movlw	229
  6369  004CAE  18DE               	xorwf	postinc2,w,c
  6370  004CB0  B4D8               	btfsc	status,2,c
  6371  004CB2  D011               	goto	u6530
  6372                           
  6373                           ; BSR set to: 0
  6374  004CB4  EE20 F012          	lfsr	2,18
  6375  004CB8  5180               	movf	dir_alloc@dp& (0+255),w,b
  6376  004CBA  26D9               	addwf	fsr2l,f,c
  6377  004CBC  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6378  004CBE  22DA               	addwfc	fsr2h,f,c
  6379  004CC0  CFDE F084          	movff	postinc2,??_dir_alloc
  6380  004CC4  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6381  004CC8  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6382  004CCC  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6383  004CD0  50DF               	movf	indf2,w,c
  6384  004CD2  A4D8               	btfss	status,2,c
  6385  004CD4  D00A               	goto	l5326
  6386  004CD6                     u6530:
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;ff.c: 1215:     if (++n == nent) break;
  6390  004CD6  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  6391  004CD8  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  6392  004CDA  5182               	movf	dir_alloc@nent& (0+255),w,b
  6393  004CDC  1987               	xorwf	dir_alloc@n& (0+255),w,b
  6394  004CDE  E109               	bnz	l5328
  6395  004CE0  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6396  004CE2  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6397  004CE4  B4D8               	btfsc	status,2,c
  6398  004CE6  D014               	goto	u6550
  6399  004CE8  D004               	goto	l5328
  6400  004CEA                     l5326:
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;ff.c: 1217:     n = 0;
  6404  004CEA  0E00               	movlw	0
  6405  004CEC  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6406  004CEE  0E00               	movlw	0
  6407  004CF0  6F87               	movwf	dir_alloc@n& (0+255),b
  6408  004CF2                     l5328:
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;ff.c: 1219:    res = dir_next(dp, 1);
  6412  004CF2  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  6413  004CF6  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  6414  004CFA  0E00               	movlw	0
  6415  004CFC  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  6416  004CFE  0E01               	movlw	1
  6417  004D00  6F6F               	movwf	dir_next@stretch& (0+255),b
  6418  004D02  ECD8  F016         	call	_dir_next	;wreg free
  6419  004D06  0100               	movlb	0	; () banked
  6420  004D08  6F89               	movwf	dir_alloc@res& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;ff.c: 1220:   } while (res == FR_OK);
  6424  004D0A  5189               	movf	dir_alloc@res& (0+255),w,b
  6425  004D0C  B4D8               	btfsc	status,2,c
  6426  004D0E  D7A3               	goto	l5312
  6427  004D10                     u6550:
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  6431  004D10  0E04               	movlw	4
  6432  004D12  1989               	xorwf	dir_alloc@res& (0+255),w,b
  6433  004D14  A4D8               	btfss	status,2,c
  6434  004D16  D002               	goto	l391
  6435                           
  6436                           ; BSR set to: 0
  6437  004D18  0E07               	movlw	7
  6438  004D1A  6F89               	movwf	dir_alloc@res& (0+255),b
  6439  004D1C                     l391:
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;ff.c: 1223:  return res;
  6443  004D1C  5189               	movf	dir_alloc@res& (0+255),w,b
  6444                           
  6445                           ; BSR set to: 0
  6446  004D1E  0012               	return		;funcret
  6447  004D20                     __end_of_dir_alloc:
  6448                           	opt callstack 0
  6449                           
  6450 ;; *************** function _dir_sdi *****************
  6451 ;; Defined at:
  6452 ;;		line 1080 in file "ff.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  dp              2   85[COMRAM] PTR struct .
  6455 ;;		 -> f_open@dj(22), 
  6456 ;;  idx             2   87[COMRAM] unsigned short 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  clst            4   13[BANK0 ] unsigned long 
  6459 ;;  sect            4    9[BANK0 ] unsigned long 
  6460 ;;  ic              2    7[BANK0 ] unsigned short 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      enum E93
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6470 ;;      Params:         4       0       0       0       0       0       0       0       0
  6471 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6472 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6473 ;;      Totals:         4      17       0       0       0       0       0       0       0
  6474 ;;Total ram usage:       21 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    9
  6477 ;; This function calls:
  6478 ;;		_clust2sect
  6479 ;;		_get_fat
  6480 ;; This function is called by:
  6481 ;;		_dir_alloc
  6482 ;;		_dir_find
  6483 ;;		_follow_path
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text19
  6488  003BE8                     __ptext19:
  6489                           	opt callstack 0
  6490  003BE8                     _dir_sdi:
  6491                           	opt callstack 18
  6492                           
  6493                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;incstack = 0
  6497  003BE8  EE20 F004          	lfsr	2,4
  6498  003BEC  5056               	movf	dir_sdi@dp,w,c
  6499  003BEE  26D9               	addwf	fsr2l,f,c
  6500  003BF0  5057               	movf	dir_sdi@dp+1,w,c
  6501  003BF2  22DA               	addwfc	fsr2h,f,c
  6502  003BF4  C058  FFDE         	movff	dir_sdi@idx,postinc2
  6503  003BF8  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  6504                           
  6505                           ;ff.c: 1090:  clst = dp->sclust;
  6506  003BFC  EE20 F006          	lfsr	2,6
  6507  003C00  5056               	movf	dir_sdi@dp,w,c
  6508  003C02  26D9               	addwf	fsr2l,f,c
  6509  003C04  5057               	movf	dir_sdi@dp+1,w,c
  6510  003C06  22DA               	addwfc	fsr2h,f,c
  6511  003C08  CFDE F06D          	movff	postinc2,dir_sdi@clst
  6512  003C0C  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  6513  003C10  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  6514  003C14  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  6515                           
  6516                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  6517  003C18  0100               	movlb	0	; () banked
  6518  003C1A  056D               	decf	dir_sdi@clst& (0+255),w,b
  6519  003C1C  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6520  003C1E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6521  003C20  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6522  003C22  B4D8               	btfsc	status,2,c
  6523  003C24  D014               	goto	u5940
  6524                           
  6525                           ; BSR set to: 0
  6526  003C26  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6527  003C2A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6528  003C2E  EE10 F012          	lfsr	1,18
  6529  003C32  50DE               	movf	postinc2,w,c
  6530  003C34  26E1               	addwf	fsr1l,f,c
  6531  003C36  50DD               	movf	postdec2,w,c
  6532  003C38  22E2               	addwfc	fsr1h,f,c
  6533  003C3A  50E6               	movf	postinc1,w,c
  6534  003C3C  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6535  003C3E  50E6               	movf	postinc1,w,c
  6536  003C40  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6537  003C42  50E6               	movf	postinc1,w,c
  6538  003C44  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6539  003C46  50E6               	movf	postinc1,w,c
  6540  003C48  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6541  003C4A  A0D8               	btfss	status,0,c
  6542  003C4C  D002               	goto	l4992
  6543  003C4E                     u5940:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;ff.c: 1092:   return FR_INT_ERR;
  6547  003C4E  0E02               	movlw	2
  6548  003C50  0012               	return	
  6549  003C52                     l4992:
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  6553  003C52  516D               	movf	dir_sdi@clst& (0+255),w,b
  6554  003C54  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6555  003C56  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6556  003C58  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6557  003C5A  A4D8               	btfss	status,2,c
  6558  003C5C  D022               	goto	l4998
  6559                           
  6560                           ; BSR set to: 0
  6561  003C5E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6562  003C62  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6563  003C66  CFDE F060          	movff	postinc2,??_dir_sdi
  6564  003C6A  CFDD F061          	movff	postdec2,??_dir_sdi+1
  6565  003C6E  C060  FFD9         	movff	??_dir_sdi,fsr2l
  6566  003C72  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  6567  003C76  0E03               	movlw	3
  6568  003C78  18DE               	xorwf	postinc2,w,c
  6569  003C7A  A4D8               	btfss	status,2,c
  6570  003C7C  D012               	goto	l4998
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  6574  003C7E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6575  003C82  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6576  003C86  EE10 F022          	lfsr	1,34
  6577  003C8A  50DE               	movf	postinc2,w,c
  6578  003C8C  26E1               	addwf	fsr1l,f,c
  6579  003C8E  50DD               	movf	postdec2,w,c
  6580  003C90  22E2               	addwfc	fsr1h,f,c
  6581  003C92  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  6582  003C96  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  6583  003C9A  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  6584  003C9E  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  6585  003CA2                     l4998:
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;ff.c: 1096:  if (clst == 0) {
  6589  003CA2  516D               	movf	dir_sdi@clst& (0+255),w,b
  6590  003CA4  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6591  003CA6  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6592  003CA8  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6593  003CAA  A4D8               	btfss	status,2,c
  6594  003CAC  D023               	goto	l5008
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  6598  003CAE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6599  003CB2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6600  003CB6  EE10 F008          	lfsr	1,8
  6601  003CBA  50DE               	movf	postinc2,w,c
  6602  003CBC  26E1               	addwf	fsr1l,f,c
  6603  003CBE  50DD               	movf	postdec2,w,c
  6604  003CC0  22E2               	addwfc	fsr1h,f,c
  6605  003CC2  50E6               	movf	postinc1,w,c
  6606  003CC4  5C58               	subwf	dir_sdi@idx,w,c
  6607  003CC6  50E6               	movf	postinc1,w,c
  6608  003CC8  5859               	subwfb	dir_sdi@idx+1,w,c
  6609  003CCA  B0D8               	btfsc	status,0,c
  6610  003CCC  D7C0               	goto	u5940
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  6614  003CCE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6615  003CD2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6616  003CD6  EE10 F022          	lfsr	1,34
  6617  003CDA  50DE               	movf	postinc2,w,c
  6618  003CDC  26E1               	addwf	fsr1l,f,c
  6619  003CDE  50DD               	movf	postdec2,w,c
  6620  003CE0  22E2               	addwfc	fsr1h,f,c
  6621  003CE2  CFE6 F069          	movff	postinc1,dir_sdi@sect
  6622  003CE6  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  6623  003CEA  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  6624  003CEE  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  6625                           
  6626                           ;ff.c: 1100:  }
  6627  003CF2  D079               	goto	l5030
  6628  003CF4                     l5008:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  6632  003CF4  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6633  003CF8  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6634  003CFC  EE10 F002          	lfsr	1,2
  6635  003D00  50DE               	movf	postinc2,w,c
  6636  003D02  26E1               	addwf	fsr1l,f,c
  6637  003D04  50DD               	movf	postdec2,w,c
  6638  003D06  22E2               	addwfc	fsr1h,f,c
  6639  003D08  50E7               	movf	indf1,w,c
  6640  003D0A  6F60               	movwf	??_dir_sdi& (0+255),b
  6641  003D0C  5160               	movf	??_dir_sdi& (0+255),w,b
  6642  003D0E  0D10               	mullw	16
  6643  003D10  CFF3 F067          	movff	prodl,dir_sdi@ic
  6644  003D14  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  6645                           
  6646                           ;ff.c: 1103:   while (idx >= ic) {
  6647  003D18  D046               	goto	l349
  6648  003D1A                     l5010:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  6652  003D1A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6653  003D1E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6654  003D22  CFDE F03B          	movff	postinc2,get_fat@fs
  6655  003D26  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6656  003D2A  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  6657  003D2E  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  6658  003D32  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  6659  003D36  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  6660  003D3A  ECDB  F018         	call	_get_fat	;wreg free
  6661  003D3E  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  6662  003D42  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  6663  003D46  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  6664  003D4A  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  6665                           
  6666                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6667  003D4E  0100               	movlb	0	; () banked
  6668  003D50  296D               	incf	dir_sdi@clst& (0+255),w,b
  6669  003D52  E109               	bnz	l5018
  6670  003D54  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6671  003D56  E107               	bnz	l5018
  6672  003D58  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6673  003D5A  E105               	bnz	l5018
  6674  003D5C  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6675  003D5E  A4D8               	btfss	status,2,c
  6676  003D60  D002               	goto	l5018
  6677                           
  6678                           ; BSR set to: 0
  6679  003D62  0E01               	movlw	1
  6680  003D64  0012               	return	
  6681  003D66                     l5018:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  6685  003D66  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6686  003D68  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6687  003D6A  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6688  003D6C  E104               	bnz	u6000
  6689  003D6E  0E02               	movlw	2
  6690  003D70  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6691  003D72  A0D8               	btfss	status,0,c
  6692  003D74  D76C               	goto	u5940
  6693  003D76                     u6000:
  6694                           
  6695                           ; BSR set to: 0
  6696  003D76  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6697  003D7A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6698  003D7E  EE10 F012          	lfsr	1,18
  6699  003D82  50DE               	movf	postinc2,w,c
  6700  003D84  26E1               	addwf	fsr1l,f,c
  6701  003D86  50DD               	movf	postdec2,w,c
  6702  003D88  22E2               	addwfc	fsr1h,f,c
  6703  003D8A  50E6               	movf	postinc1,w,c
  6704  003D8C  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6705  003D8E  50E6               	movf	postinc1,w,c
  6706  003D90  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6707  003D92  50E6               	movf	postinc1,w,c
  6708  003D94  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6709  003D96  50E6               	movf	postinc1,w,c
  6710  003D98  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6711  003D9A  B0D8               	btfsc	status,0,c
  6712  003D9C  D758               	goto	u5940
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;ff.c: 1108:    idx -= ic;
  6716  003D9E  5167               	movf	dir_sdi@ic& (0+255),w,b
  6717  003DA0  5E58               	subwf	dir_sdi@idx,f,c
  6718  003DA2  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6719  003DA4  5A59               	subwfb	dir_sdi@idx+1,f,c
  6720  003DA6                     l349:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;ff.c: 1103:   while (idx >= ic) {
  6724  003DA6  5167               	movf	dir_sdi@ic& (0+255),w,b
  6725  003DA8  5C58               	subwf	dir_sdi@idx,w,c
  6726  003DAA  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6727  003DAC  5859               	subwfb	dir_sdi@idx+1,w,c
  6728  003DAE  B0D8               	btfsc	status,0,c
  6729  003DB0  D7B4               	goto	l5010
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  6733  003DB2  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6734  003DB6  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6735  003DBA  CFDE F00D          	movff	postinc2,clust2sect@fs
  6736  003DBE  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6737  003DC2  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6738  003DC6  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6739  003DCA  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6740  003DCE  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6741  003DD2  EC8E  F029         	call	_clust2sect	;wreg free
  6742  003DD6  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  6743  003DDA  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  6744  003DDE  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  6745  003DE2  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  6746  003DE6                     l5030:
  6747                           
  6748                           ;ff.c: 1112:  dp->clust = clst;
  6749  003DE6  EE20 F00A          	lfsr	2,10
  6750  003DEA  5056               	movf	dir_sdi@dp,w,c
  6751  003DEC  26D9               	addwf	fsr2l,f,c
  6752  003DEE  5057               	movf	dir_sdi@dp+1,w,c
  6753  003DF0  22DA               	addwfc	fsr2h,f,c
  6754  003DF2  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  6755  003DF6  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  6756  003DFA  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  6757  003DFE  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  6758                           
  6759                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  6760  003E02  0100               	movlb	0	; () banked
  6761  003E04  5169               	movf	dir_sdi@sect& (0+255),w,b
  6762  003E06  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6763  003E08  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6764  003E0A  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6765  003E0C  B4D8               	btfsc	status,2,c
  6766  003E0E  D71F               	goto	u5940
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  6770  003E10  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  6771  003E14  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6772  003E18  0E04               	movlw	4
  6773  003E1A  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  6774  003E1C                     u6045:
  6775  003E1C  90D8               	bcf	status,0,c
  6776  003E1E  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  6777  003E20  3360               	rrcf	??_dir_sdi& (0+255),f,b
  6778  003E22  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  6779  003E24  D7FB               	goto	u6045
  6780  003E26  5160               	movf	??_dir_sdi& (0+255),w,b
  6781  003E28  2569               	addwf	dir_sdi@sect& (0+255),w,b
  6782  003E2A  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  6783  003E2C  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6784  003E2E  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6785  003E30  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  6786  003E32  0E00               	movlw	0
  6787  003E34  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6788  003E36  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  6789  003E38  0E00               	movlw	0
  6790  003E3A  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6791  003E3C  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  6792  003E3E  EE20 F00E          	lfsr	2,14
  6793  003E42  5056               	movf	dir_sdi@dp,w,c
  6794  003E44  26D9               	addwf	fsr2l,f,c
  6795  003E46  5057               	movf	dir_sdi@dp+1,w,c
  6796  003E48  22DA               	addwfc	fsr2h,f,c
  6797  003E4A  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  6798  003E4E  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  6799  003E52  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  6800  003E56  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  6801                           
  6802                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6803  003E5A  0E0F               	movlw	15
  6804  003E5C  1458               	andwf	dir_sdi@idx,w,c
  6805  003E5E  6F60               	movwf	??_dir_sdi& (0+255),b
  6806  003E60  0E00               	movlw	0
  6807  003E62  1459               	andwf	dir_sdi@idx+1,w,c
  6808  003E64  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  6809  003E66  0E05               	movlw	5
  6810  003E68                     u6055:
  6811  003E68  90D8               	bcf	status,0,c
  6812  003E6A  3760               	rlcf	??_dir_sdi& (0+255),f,b
  6813  003E6C  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  6814  003E6E  2EE8               	decfsz	wreg,f,c
  6815  003E70  D7FB               	goto	u6055
  6816  003E72  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6817  003E76  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6818  003E7A  CFDE F062          	movff	postinc2,??_dir_sdi+2
  6819  003E7E  CFDD F063          	movff	postdec2,??_dir_sdi+3
  6820  003E82  5160               	movf	??_dir_sdi& (0+255),w,b
  6821  003E84  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6822  003E86  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6823  003E88  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6824  003E8A  0E2E               	movlw	46
  6825  003E8C  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6826  003E8E  0E00               	movlw	0
  6827  003E90  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6828  003E92  EE20 F012          	lfsr	2,18
  6829  003E96  5056               	movf	dir_sdi@dp,w,c
  6830  003E98  26D9               	addwf	fsr2l,f,c
  6831  003E9A  5057               	movf	dir_sdi@dp+1,w,c
  6832  003E9C  22DA               	addwfc	fsr2h,f,c
  6833  003E9E  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  6834  003EA2  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;ff.c: 1117:  return FR_OK;
  6838  003EA6  0E00               	movlw	0
  6839                           
  6840                           ; BSR set to: 0
  6841  003EA8  0012               	return		;funcret
  6842  003EAA                     __end_of_dir_sdi:
  6843                           	opt callstack 0
  6844                           
  6845 ;; *************** function _dir_next *****************
  6846 ;; Defined at:
  6847 ;;		line 1128 in file "ff.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  dp              2   13[BANK0 ] PTR struct .
  6850 ;;		 -> f_open@dj(22), 
  6851 ;;  stretch         2   15[BANK0 ] int 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  clst            4   28[BANK0 ] unsigned long 
  6854 ;;  i               2   26[BANK0 ] unsigned short 
  6855 ;;  c               2   24[BANK0 ] unsigned short 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      enum E93
  6858 ;; Registers used:
  6859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6865 ;;      Params:         0       4       0       0       0       0       0       0       0
  6866 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6867 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6868 ;;      Totals:         0      19       0       0       0       0       0       0       0
  6869 ;;Total ram usage:       19 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:   10
  6872 ;; This function calls:
  6873 ;;		_clust2sect
  6874 ;;		_create_chain
  6875 ;;		_get_fat
  6876 ;;		_mem_set
  6877 ;;		_sync_window
  6878 ;; This function is called by:
  6879 ;;		_dir_alloc
  6880 ;;		_dir_find
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text20
  6885  002DB0                     __ptext20:
  6886                           	opt callstack 0
  6887  002DB0                     _dir_next:
  6888                           	opt callstack 16
  6889                           
  6890                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;incstack = 0
  6894  002DB0  0100               	movlb	0	; () banked
  6895  002DB2  EE20 F004          	lfsr	2,4
  6896  002DB6  516D               	movf	dir_next@dp& (0+255),w,b
  6897  002DB8  26D9               	addwf	fsr2l,f,c
  6898  002DBA  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6899  002DBC  22DA               	addwfc	fsr2h,f,c
  6900  002DBE  CFDE F071          	movff	postinc2,??_dir_next
  6901  002DC2  CFDD F072          	movff	postdec2,??_dir_next+1
  6902  002DC6  0E01               	movlw	1
  6903  002DC8  2571               	addwf	??_dir_next& (0+255),w,b
  6904  002DCA  6F7A               	movwf	dir_next@i& (0+255),b
  6905  002DCC  0E00               	movlw	0
  6906  002DCE  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6907  002DD0  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  6911  002DD2  517A               	movf	dir_next@i& (0+255),w,b
  6912  002DD4  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  6913  002DD6  B4D8               	btfsc	status,2,c
  6914  002DD8  D00C               	goto	u6070
  6915                           
  6916                           ; BSR set to: 0
  6917  002DDA  EE20 F00E          	lfsr	2,14
  6918  002DDE  516D               	movf	dir_next@dp& (0+255),w,b
  6919  002DE0  26D9               	addwf	fsr2l,f,c
  6920  002DE2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6921  002DE4  22DA               	addwfc	fsr2h,f,c
  6922  002DE6  50DE               	movf	postinc2,w,c
  6923  002DE8  10DE               	iorwf	postinc2,w,c
  6924  002DEA  10DE               	iorwf	postinc2,w,c
  6925  002DEC  10DE               	iorwf	postinc2,w,c
  6926  002DEE  A4D8               	btfss	status,2,c
  6927  002DF0  D002               	goto	l5054
  6928  002DF2                     u6070:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;ff.c: 1142:   return FR_NO_FILE;
  6932  002DF2  0E04               	movlw	4
  6933  002DF4  0012               	return	
  6934  002DF6                     l5054:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  6938  002DF6  0E0F               	movlw	15
  6939  002DF8  157A               	andwf	dir_next@i& (0+255),w,b
  6940  002DFA  6F71               	movwf	??_dir_next& (0+255),b
  6941  002DFC  0E00               	movlw	0
  6942  002DFE  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6943  002E00  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6944  002E02  5171               	movf	??_dir_next& (0+255),w,b
  6945  002E04  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  6946  002E06  A4D8               	btfss	status,2,c
  6947  002E08  D1A4               	goto	l5140
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;ff.c: 1145:   dp->sect++;
  6951  002E0A  EE20 F00E          	lfsr	2,14
  6952  002E0E  516D               	movf	dir_next@dp& (0+255),w,b
  6953  002E10  26D9               	addwf	fsr2l,f,c
  6954  002E12  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6955  002E14  22DA               	addwfc	fsr2h,f,c
  6956  002E16  2ADE               	incf	postinc2,f,c
  6957  002E18  0E00               	movlw	0
  6958  002E1A  22DE               	addwfc	postinc2,f,c
  6959  002E1C  22DE               	addwfc	postinc2,f,c
  6960  002E1E  22DE               	addwfc	postinc2,f,c
  6961                           
  6962                           ;ff.c: 1147:   if (!dp->clust) {
  6963  002E20  EE20 F00A          	lfsr	2,10
  6964  002E24  516D               	movf	dir_next@dp& (0+255),w,b
  6965  002E26  26D9               	addwf	fsr2l,f,c
  6966  002E28  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6967  002E2A  22DA               	addwfc	fsr2h,f,c
  6968  002E2C  50DE               	movf	postinc2,w,c
  6969  002E2E  10DE               	iorwf	postinc2,w,c
  6970  002E30  10DE               	iorwf	postinc2,w,c
  6971  002E32  10DE               	iorwf	postinc2,w,c
  6972  002E34  A4D8               	btfss	status,2,c
  6973  002E36  D011               	goto	l5064
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  6977  002E38  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6978  002E3C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6979  002E40  EE10 F008          	lfsr	1,8
  6980  002E44  50DE               	movf	postinc2,w,c
  6981  002E46  26E1               	addwf	fsr1l,f,c
  6982  002E48  50DD               	movf	postdec2,w,c
  6983  002E4A  22E2               	addwfc	fsr1h,f,c
  6984  002E4C  50E6               	movf	postinc1,w,c
  6985  002E4E  5D7A               	subwf	dir_next@i& (0+255),w,b
  6986  002E50  50E6               	movf	postinc1,w,c
  6987  002E52  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  6988  002E54  B0D8               	btfsc	status,0,c
  6989  002E56  D7CD               	goto	u6070
  6990  002E58  D17C               	goto	l5140
  6991  002E5A                     l5064:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6995  002E5A  C07A  F071         	movff	dir_next@i,??_dir_next
  6996  002E5E  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  6997  002E62  0E04               	movlw	4
  6998  002E64  6F73               	movwf	(??_dir_next+2)& (0+255),b
  6999  002E66                     u6115:
  7000  002E66  90D8               	bcf	status,0,c
  7001  002E68  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  7002  002E6A  3371               	rrcf	??_dir_next& (0+255),f,b
  7003  002E6C  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  7004  002E6E  D7FB               	goto	u6115
  7005  002E70  0EFF               	movlw	255
  7006  002E72  6F74               	movwf	(??_dir_next+3)& (0+255),b
  7007  002E74  0EFF               	movlw	255
  7008  002E76  6F75               	movwf	(??_dir_next+4)& (0+255),b
  7009  002E78  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7010  002E7C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7011  002E80  EE10 F002          	lfsr	1,2
  7012  002E84  50DE               	movf	postinc2,w,c
  7013  002E86  26E1               	addwf	fsr1l,f,c
  7014  002E88  50DD               	movf	postdec2,w,c
  7015  002E8A  22E2               	addwfc	fsr1h,f,c
  7016  002E8C  50E7               	movf	indf1,w,c
  7017  002E8E  6F76               	movwf	(??_dir_next+5)& (0+255),b
  7018  002E90  6B77               	clrf	(??_dir_next+6)& (0+255),b
  7019  002E92  5174               	movf	(??_dir_next+3)& (0+255),w,b
  7020  002E94  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  7021  002E96  5175               	movf	(??_dir_next+4)& (0+255),w,b
  7022  002E98  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  7023  002E9A  5171               	movf	??_dir_next& (0+255),w,b
  7024  002E9C  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  7025  002E9E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7026  002EA0  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  7027  002EA2  5176               	movf	(??_dir_next+5)& (0+255),w,b
  7028  002EA4  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  7029  002EA6  A4D8               	btfss	status,2,c
  7030  002EA8  D154               	goto	l5140
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  7034  002EAA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7035  002EAE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7036  002EB2  CFDE F03B          	movff	postinc2,get_fat@fs
  7037  002EB6  CFDD F03C          	movff	postdec2,get_fat@fs+1
  7038  002EBA  EE20 F00A          	lfsr	2,10
  7039  002EBE  516D               	movf	dir_next@dp& (0+255),w,b
  7040  002EC0  26D9               	addwf	fsr2l,f,c
  7041  002EC2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7042  002EC4  22DA               	addwfc	fsr2h,f,c
  7043  002EC6  CFDE F03D          	movff	postinc2,get_fat@clst
  7044  002ECA  CFDE F03E          	movff	postinc2,get_fat@clst+1
  7045  002ECE  CFDE F03F          	movff	postinc2,get_fat@clst+2
  7046  002ED2  CFDE F040          	movff	postinc2,get_fat@clst+3
  7047  002ED6  ECDB  F018         	call	_get_fat	;wreg free
  7048  002EDA  C03B  F07C         	movff	?_get_fat,dir_next@clst
  7049  002EDE  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  7050  002EE2  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  7051  002EE6  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  7052                           
  7053                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  7054  002EEA  0100               	movlb	0	; () banked
  7055  002EEC  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  7056  002EEE  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7057  002EF0  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7058  002EF2  E106               	bnz	l5074
  7059  002EF4  0E02               	movlw	2
  7060  002EF6  5D7C               	subwf	dir_next@clst& (0+255),w,b
  7061  002EF8  B0D8               	btfsc	status,0,c
  7062  002EFA  D002               	goto	l5074
  7063  002EFC                     u6130:
  7064                           
  7065                           ; BSR set to: 0
  7066  002EFC  0E02               	movlw	2
  7067  002EFE  0012               	return	
  7068  002F00                     l5074:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7072  002F00  297C               	incf	dir_next@clst& (0+255),w,b
  7073  002F02  E109               	bnz	l5080
  7074  002F04  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  7075  002F06  E107               	bnz	l5080
  7076  002F08  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  7077  002F0A  E105               	bnz	l5080
  7078  002F0C  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  7079  002F0E  A4D8               	btfss	status,2,c
  7080  002F10  D002               	goto	l5080
  7081  002F12                     u6140:
  7082  002F12  0E01               	movlw	1
  7083  002F14  0012               	return	
  7084  002F16                     l5080:
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  7088  002F16  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7089  002F1A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7090  002F1E  EE10 F012          	lfsr	1,18
  7091  002F22  50DE               	movf	postinc2,w,c
  7092  002F24  26E1               	addwf	fsr1l,f,c
  7093  002F26  50DD               	movf	postdec2,w,c
  7094  002F28  22E2               	addwfc	fsr1h,f,c
  7095  002F2A  50E6               	movf	postinc1,w,c
  7096  002F2C  5D7C               	subwf	dir_next@clst& (0+255),w,b
  7097  002F2E  50E6               	movf	postinc1,w,c
  7098  002F30  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  7099  002F32  50E6               	movf	postinc1,w,c
  7100  002F34  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  7101  002F36  50E6               	movf	postinc1,w,c
  7102  002F38  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  7103  002F3A  A0D8               	btfss	status,0,c
  7104  002F3C  D0DB               	goto	l5136
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  7108  002F3E  516F               	movf	dir_next@stretch& (0+255),w,b
  7109  002F40  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  7110  002F42  B4D8               	btfsc	status,2,c
  7111  002F44  D756               	goto	u6070
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  7115  002F46  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7116  002F4A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7117  002F4E  CFDE F056          	movff	postinc2,create_chain@fs
  7118  002F52  CFDD F057          	movff	postdec2,create_chain@fs+1
  7119  002F56  EE20 F00A          	lfsr	2,10
  7120  002F5A  516D               	movf	dir_next@dp& (0+255),w,b
  7121  002F5C  26D9               	addwf	fsr2l,f,c
  7122  002F5E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7123  002F60  22DA               	addwfc	fsr2h,f,c
  7124  002F62  CFDE F058          	movff	postinc2,create_chain@clst
  7125  002F66  CFDE F059          	movff	postinc2,create_chain@clst+1
  7126  002F6A  CFDE F05A          	movff	postinc2,create_chain@clst+2
  7127  002F6E  CFDE F05B          	movff	postinc2,create_chain@clst+3
  7128  002F72  EC77  F01C         	call	_create_chain	;wreg free
  7129  002F76  C056  F07C         	movff	?_create_chain,dir_next@clst
  7130  002F7A  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  7131  002F7E  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  7132  002F82  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  7133                           
  7134                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  7135  002F86  0100               	movlb	0	; () banked
  7136  002F88  517C               	movf	dir_next@clst& (0+255),w,b
  7137  002F8A  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7138  002F8C  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7139  002F8E  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7140  002F90  A4D8               	btfss	status,2,c
  7141  002F92  D002               	goto	l5096
  7142                           
  7143                           ; BSR set to: 0
  7144  002F94  0E07               	movlw	7
  7145  002F96  0012               	return	
  7146  002F98                     l5096:
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  7150  002F98  057C               	decf	dir_next@clst& (0+255),w,b
  7151  002F9A  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  7152  002F9C  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  7153  002F9E  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  7154  002FA0  B4D8               	btfsc	status,2,c
  7155  002FA2  D7AC               	goto	u6130
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  7159  002FA4  297C               	incf	dir_next@clst& (0+255),w,b
  7160  002FA6  E107               	bnz	l5108
  7161  002FA8  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  7162  002FAA  E105               	bnz	l5108
  7163  002FAC  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  7164  002FAE  E103               	bnz	l5108
  7165  002FB0  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  7166  002FB2  B4D8               	btfsc	status,2,c
  7167  002FB4  D7AE               	goto	u6140
  7168  002FB6                     l5108:
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  7172  002FB6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7173  002FBA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7174  002FBE  CFDE F01B          	movff	postinc2,sync_window@fs
  7175  002FC2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7176  002FC6  EC6C  F022         	call	_sync_window	;wreg free
  7177  002FCA  0900               	iorlw	0
  7178  002FCC  A4D8               	btfss	status,2,c
  7179  002FCE  D7A1               	goto	u6140
  7180                           
  7181                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  7182  002FD0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7183  002FD4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7184  002FD8  CFDE F071          	movff	postinc2,??_dir_next
  7185  002FDC  CFDD F072          	movff	postdec2,??_dir_next+1
  7186  002FE0  0E2E               	movlw	46
  7187  002FE2  0100               	movlb	0	; () banked
  7188  002FE4  2571               	addwf	??_dir_next& (0+255),w,b
  7189  002FE6  6E01               	movwf	mem_set@dst,c
  7190  002FE8  0E00               	movlw	0
  7191  002FEA  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  7192  002FEC  6E02               	movwf	mem_set@dst+1,c
  7193  002FEE  0E00               	movlw	0
  7194  002FF0  6E04               	movwf	mem_set@val+1,c
  7195  002FF2  0E00               	movlw	0
  7196  002FF4  6E03               	movwf	mem_set@val,c
  7197  002FF6  0E02               	movlw	2
  7198  002FF8  6E06               	movwf	mem_set@cnt+1,c
  7199  002FFA  0E00               	movlw	0
  7200  002FFC  6E05               	movwf	mem_set@cnt,c
  7201  002FFE  EC28  F02E         	call	_mem_set	;wreg free
  7202                           
  7203                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  7204  003002  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7205  003006  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7206  00300A  CFDE F00D          	movff	postinc2,clust2sect@fs
  7207  00300E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7208  003012  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7209  003016  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7210  00301A  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7211  00301E  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7212  003022  EC8E  F029         	call	_clust2sect	;wreg free
  7213  003026  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7214  00302A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7215  00302E  EE10 F02A          	lfsr	1,42
  7216  003032  50DE               	movf	postinc2,w,c
  7217  003034  26E1               	addwf	fsr1l,f,c
  7218  003036  50DD               	movf	postdec2,w,c
  7219  003038  22E2               	addwfc	fsr1h,f,c
  7220  00303A  C00D  FFE6         	movff	?_clust2sect,postinc1
  7221  00303E  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  7222  003042  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  7223  003046  C010  FFE6         	movff	?_clust2sect+3,postinc1
  7224                           
  7225                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  7226  00304A  0E00               	movlw	0
  7227  00304C  0100               	movlb	0	; () banked
  7228  00304E  6F79               	movwf	(dir_next@c+1)& (0+255),b
  7229  003050  0E00               	movlw	0
  7230  003052  6F78               	movwf	dir_next@c& (0+255),b
  7231  003054  D02B               	goto	l5132
  7232  003056                     l5120:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;ff.c: 1168:       dp->fs->wflag = 1;
  7236  003056  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7237  00305A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7238  00305E  EE10 F004          	lfsr	1,4
  7239  003062  50DE               	movf	postinc2,w,c
  7240  003064  26E1               	addwf	fsr1l,f,c
  7241  003066  50DD               	movf	postdec2,w,c
  7242  003068  22E2               	addwfc	fsr1h,f,c
  7243  00306A  0E01               	movlw	1
  7244  00306C  6EE7               	movwf	indf1,c
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  7248  00306E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7249  003072  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7250  003076  CFDE F01B          	movff	postinc2,sync_window@fs
  7251  00307A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  7252  00307E  EC6C  F022         	call	_sync_window	;wreg free
  7253  003082  0900               	iorlw	0
  7254  003084  A4D8               	btfss	status,2,c
  7255  003086  D745               	goto	u6140
  7256                           
  7257                           ;ff.c: 1170:       dp->fs->winsect++;
  7258  003088  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7259  00308C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7260  003090  EE10 F02A          	lfsr	1,42
  7261  003094  50DE               	movf	postinc2,w,c
  7262  003096  26E1               	addwf	fsr1l,f,c
  7263  003098  50DD               	movf	postdec2,w,c
  7264  00309A  22E2               	addwfc	fsr1h,f,c
  7265  00309C  2AE6               	incf	postinc1,f,c
  7266  00309E  0E00               	movlw	0
  7267  0030A0  22E6               	addwfc	postinc1,f,c
  7268  0030A2  22E6               	addwfc	postinc1,f,c
  7269  0030A4  22E6               	addwfc	postinc1,f,c
  7270                           
  7271                           ;ff.c: 1171:      }
  7272  0030A6  0100               	movlb	0	; () banked
  7273  0030A8  4B78               	infsnz	dir_next@c& (0+255),f,b
  7274  0030AA  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  7275  0030AC                     l5132:
  7276                           
  7277                           ; BSR set to: 0
  7278  0030AC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7279  0030B0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7280  0030B4  EE10 F002          	lfsr	1,2
  7281  0030B8  50DE               	movf	postinc2,w,c
  7282  0030BA  26E1               	addwf	fsr1l,f,c
  7283  0030BC  50DD               	movf	postdec2,w,c
  7284  0030BE  22E2               	addwfc	fsr1h,f,c
  7285  0030C0  50E7               	movf	indf1,w,c
  7286  0030C2  6F71               	movwf	??_dir_next& (0+255),b
  7287  0030C4  6B72               	clrf	(??_dir_next+1)& (0+255),b
  7288  0030C6  5171               	movf	??_dir_next& (0+255),w,b
  7289  0030C8  5D78               	subwf	dir_next@c& (0+255),w,b
  7290  0030CA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7291  0030CC  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  7292  0030CE  A0D8               	btfss	status,0,c
  7293  0030D0  D7C2               	goto	l5120
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;ff.c: 1172:      dp->fs->winsect -= c;
  7297  0030D2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7298  0030D6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7299  0030DA  EE10 F02A          	lfsr	1,42
  7300  0030DE  50DE               	movf	postinc2,w,c
  7301  0030E0  26E1               	addwf	fsr1l,f,c
  7302  0030E2  50DD               	movf	postdec2,w,c
  7303  0030E4  22E2               	addwfc	fsr1h,f,c
  7304  0030E6  5178               	movf	dir_next@c& (0+255),w,b
  7305  0030E8  5EE6               	subwf	postinc1,f,c
  7306  0030EA  5179               	movf	(dir_next@c+1)& (0+255),w,b
  7307  0030EC  5AE6               	subwfb	postinc1,f,c
  7308  0030EE  0E00               	movlw	0
  7309  0030F0  5AE6               	subwfb	postinc1,f,c
  7310  0030F2  5AE6               	subwfb	postinc1,f,c
  7311  0030F4                     l5136:
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;ff.c: 1178:     dp->clust = clst;
  7315  0030F4  EE20 F00A          	lfsr	2,10
  7316  0030F8  516D               	movf	dir_next@dp& (0+255),w,b
  7317  0030FA  26D9               	addwf	fsr2l,f,c
  7318  0030FC  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7319  0030FE  22DA               	addwfc	fsr2h,f,c
  7320  003100  C07C  FFDE         	movff	dir_next@clst,postinc2
  7321  003104  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  7322  003108  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  7323  00310C  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  7327  003110  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7328  003114  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7329  003118  CFDE F00D          	movff	postinc2,clust2sect@fs
  7330  00311C  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7331  003120  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7332  003124  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7333  003128  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7334  00312C  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7335  003130  EC8E  F029         	call	_clust2sect	;wreg free
  7336  003134  0100               	movlb	0	; () banked
  7337  003136  EE20 F00E          	lfsr	2,14
  7338  00313A  516D               	movf	dir_next@dp& (0+255),w,b
  7339  00313C  26D9               	addwf	fsr2l,f,c
  7340  00313E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7341  003140  22DA               	addwfc	fsr2h,f,c
  7342  003142  C00D  FFDE         	movff	?_clust2sect,postinc2
  7343  003146  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  7344  00314A  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  7345  00314E  C010  FFDE         	movff	?_clust2sect+3,postinc2
  7346  003152                     l5140:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;ff.c: 1184:  dp->index = (WORD)i;
  7350  003152  EE20 F004          	lfsr	2,4
  7351  003156  516D               	movf	dir_next@dp& (0+255),w,b
  7352  003158  26D9               	addwf	fsr2l,f,c
  7353  00315A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7354  00315C  22DA               	addwfc	fsr2h,f,c
  7355  00315E  C07A  FFDE         	movff	dir_next@i,postinc2
  7356  003162  C07B  FFDD         	movff	dir_next@i+1,postdec2
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7360  003166  0E0F               	movlw	15
  7361  003168  157A               	andwf	dir_next@i& (0+255),w,b
  7362  00316A  6F71               	movwf	??_dir_next& (0+255),b
  7363  00316C  0E00               	movlw	0
  7364  00316E  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  7365  003170  6F72               	movwf	(??_dir_next+1)& (0+255),b
  7366  003172  0E05               	movlw	5
  7367  003174                     u6235:
  7368  003174  90D8               	bcf	status,0,c
  7369  003176  3771               	rlcf	??_dir_next& (0+255),f,b
  7370  003178  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  7371  00317A  2EE8               	decfsz	wreg,f,c
  7372  00317C  D7FB               	goto	u6235
  7373  00317E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7374  003182  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7375  003186  CFDE F073          	movff	postinc2,??_dir_next+2
  7376  00318A  CFDD F074          	movff	postdec2,??_dir_next+3
  7377  00318E  5171               	movf	??_dir_next& (0+255),w,b
  7378  003190  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7379  003192  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7380  003194  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7381  003196  0E2E               	movlw	46
  7382  003198  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7383  00319A  0E00               	movlw	0
  7384  00319C  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7385  00319E  EE20 F012          	lfsr	2,18
  7386  0031A2  516D               	movf	dir_next@dp& (0+255),w,b
  7387  0031A4  26D9               	addwf	fsr2l,f,c
  7388  0031A6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7389  0031A8  22DA               	addwfc	fsr2h,f,c
  7390  0031AA  C073  FFDE         	movff	??_dir_next+2,postinc2
  7391  0031AE  C074  FFDD         	movff	??_dir_next+3,postdec2
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;ff.c: 1187:  return FR_OK;
  7395  0031B2  0E00               	movlw	0
  7396  0031B4  0012               	return		;funcret
  7397  0031B6                     __end_of_dir_next:
  7398                           	opt callstack 0
  7399                           
  7400 ;; *************** function _f_mount *****************
  7401 ;; Defined at:
  7402 ;;		line 2402 in file "ff.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  fs              2   81[COMRAM] PTR struct .
  7405 ;;		 -> FatFs(558), NULL(0), 
  7406 ;;  path            2   83[COMRAM] PTR const unsigned char 
  7407 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  7408 ;;		 -> STR_4(1), STR_3(1), 
  7409 ;;  opt             1   85[COMRAM] unsigned char 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  vol             2   91[COMRAM] int 
  7412 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  7413 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  7414 ;;		 -> STR_4(1), STR_3(1), 
  7415 ;;  cfs             2   87[COMRAM] PTR struct .
  7416 ;;		 -> FatFs(558), NULL(0), 
  7417 ;;  res             1   86[COMRAM] enum E93
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      enum E93
  7420 ;; Registers used:
  7421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7427 ;;      Params:         5       0       0       0       0       0       0       0       0
  7428 ;;      Locals:         7       0       0       0       0       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7430 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7431 ;;Total ram usage:       12 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:   10
  7434 ;; This function calls:
  7435 ;;		_find_volume
  7436 ;;		_get_ldnumber
  7437 ;; This function is called by:
  7438 ;;		_guardar
  7439 ;;		_reproducir
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text21
  7444  0053D6                     __ptext21:
  7445                           	opt callstack 0
  7446  0053D6                     _f_mount:
  7447                           	opt callstack 19
  7448                           
  7449                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  7450                           
  7451                           ;incstack = 0
  7452  0053D6  C054  F05A         	movff	f_mount@path,f_mount@rp
  7453  0053DA  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  7454                           
  7455                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  7456  0053DE  0E5A               	movlw	low f_mount@rp
  7457  0053E0  6E01               	movwf	get_ldnumber@path,c
  7458  0053E2  0E00               	movlw	high f_mount@rp
  7459  0053E4  6E02               	movwf	get_ldnumber@path+1,c
  7460  0053E6  EC7C  F027         	call	_get_ldnumber	;wreg free
  7461  0053EA  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  7462  0053EE  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  7463                           
  7464                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  7465  0053F2  AE5D               	btfss	f_mount@vol+1,7,c
  7466  0053F4  D002               	goto	l6340
  7467  0053F6  0E0B               	movlw	11
  7468  0053F8  0012               	return	
  7469  0053FA                     l6340:
  7470                           
  7471                           ;ff.c: 2416:  cfs = FatFs[vol];
  7472  0053FA  90D8               	bcf	status,0,c
  7473  0053FC  345C               	rlcf	f_mount@vol,w,c
  7474  0053FE  6ED9               	movwf	fsr2l,c
  7475  005400  345D               	rlcf	f_mount@vol+1,w,c
  7476  005402  6EDA               	movwf	fsr2h,c
  7477  005404  0EDC               	movlw	low ff@FatFs
  7478  005406  26D9               	addwf	fsr2l,f,c
  7479  005408  0E00               	movlw	high ff@FatFs
  7480  00540A  22DA               	addwfc	fsr2h,f,c
  7481  00540C  CFDE F058          	movff	postinc2,f_mount@cfs
  7482  005410  CFDD F059          	movff	postdec2,f_mount@cfs+1
  7483                           
  7484                           ;ff.c: 2418:  if (cfs) {
  7485  005414  5058               	movf	f_mount@cfs,w,c
  7486  005416  1059               	iorwf	f_mount@cfs+1,w,c
  7487  005418  B4D8               	btfsc	status,2,c
  7488  00541A  D006               	goto	l6346
  7489                           
  7490                           ;ff.c: 2425:   cfs->fs_type = 0;
  7491  00541C  C058  FFD9         	movff	f_mount@cfs,fsr2l
  7492  005420  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  7493  005424  0E00               	movlw	0
  7494  005426  6EDF               	movwf	indf2,c
  7495  005428                     l6346:
  7496                           
  7497                           ;ff.c: 2428:  if (fs) {
  7498  005428  5052               	movf	f_mount@fs,w,c
  7499  00542A  1053               	iorwf	f_mount@fs+1,w,c
  7500  00542C  B4D8               	btfsc	status,2,c
  7501  00542E  D006               	goto	l6350
  7502                           
  7503                           ;ff.c: 2429:   fs->fs_type = 0;
  7504  005430  C052  FFD9         	movff	f_mount@fs,fsr2l
  7505  005434  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  7506  005438  0E00               	movlw	0
  7507  00543A  6EDF               	movwf	indf2,c
  7508  00543C                     l6350:
  7509                           
  7510                           ;ff.c: 2434:  FatFs[vol] = fs;
  7511  00543C  90D8               	bcf	status,0,c
  7512  00543E  345C               	rlcf	f_mount@vol,w,c
  7513  005440  6ED9               	movwf	fsr2l,c
  7514  005442  345D               	rlcf	f_mount@vol+1,w,c
  7515  005444  6EDA               	movwf	fsr2h,c
  7516  005446  0EDC               	movlw	low ff@FatFs
  7517  005448  26D9               	addwf	fsr2l,f,c
  7518  00544A  0E00               	movlw	high ff@FatFs
  7519  00544C  22DA               	addwfc	fsr2h,f,c
  7520  00544E  C052  FFDE         	movff	f_mount@fs,postinc2
  7521  005452  C053  FFDD         	movff	f_mount@fs+1,postdec2
  7522                           
  7523                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  7524  005456  5052               	movf	f_mount@fs,w,c
  7525  005458  1053               	iorwf	f_mount@fs+1,w,c
  7526  00545A  B4D8               	btfsc	status,2,c
  7527  00545C  D003               	goto	u8400
  7528  00545E  0456               	decf	f_mount@opt,w,c
  7529  005460  B4D8               	btfsc	status,2,c
  7530  005462  D002               	goto	l6360
  7531  005464                     u8400:
  7532  005464  0E00               	movlw	0
  7533  005466  0012               	return	
  7534  005468                     l6360:
  7535                           
  7536                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  7537  005468  0E52               	movlw	low f_mount@fs
  7538  00546A  6E45               	movwf	find_volume@rfs,c
  7539  00546C  0E00               	movlw	high f_mount@fs
  7540  00546E  6E46               	movwf	find_volume@rfs+1,c
  7541  005470  0E54               	movlw	low f_mount@path
  7542  005472  6E47               	movwf	find_volume@path,c
  7543  005474  0E00               	movlw	high f_mount@path
  7544  005476  6E48               	movwf	find_volume@path+1,c
  7545  005478  0E00               	movlw	0
  7546  00547A  6E49               	movwf	find_volume@wmode,c
  7547  00547C  EC0E  F004         	call	_find_volume	;wreg free
  7548  005480  6E57               	movwf	f_mount@res,c
  7549                           
  7550                           ;ff.c: 2439:  return res;
  7551  005482  5057               	movf	f_mount@res,w,c
  7552  005484  0012               	return		;funcret
  7553  005486                     __end_of_f_mount:
  7554                           	opt callstack 0
  7555                           
  7556 ;; *************** function _find_volume *****************
  7557 ;; Defined at:
  7558 ;;		line 2203 in file "ff.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  7561 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7562 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  7563 ;;		 -> f_open@path(2), f_mount@path(2), 
  7564 ;;  wmode           1   72[COMRAM] unsigned char 
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;  br             16    0[BANK0 ] unsigned long [4]
  7567 ;;  bsect           4   49[BANK0 ] unsigned long 
  7568 ;;  fasize          4   45[BANK0 ] unsigned long 
  7569 ;;  nclst           4   40[BANK0 ] unsigned long 
  7570 ;;  tsect           4   36[BANK0 ] unsigned long 
  7571 ;;  sysect          4   28[BANK0 ] unsigned long 
  7572 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7573 ;;  fs              2   56[BANK0 ] PTR struct .
  7574 ;;		 -> FatFs(558), NULL(0), 
  7575 ;;  i               2   53[BANK0 ] unsigned short 
  7576 ;;  nrsv            2   34[BANK0 ] unsigned short 
  7577 ;;  vol             2   32[BANK0 ] int 
  7578 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7579 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  7580 ;;  fmt             1   55[BANK0 ] unsigned char 
  7581 ;;  stat            1   44[BANK0 ] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      enum E93
  7584 ;; Registers used:
  7585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7591 ;;      Params:         5       0       0       0       0       0       0       0       0
  7592 ;;      Locals:         0      58       0       0       0       0       0       0       0
  7593 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7594 ;;      Totals:        13      58       0       0       0       0       0       0       0
  7595 ;;Total ram usage:       71 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    9
  7598 ;; This function calls:
  7599 ;;		___lldiv
  7600 ;;		___lmul
  7601 ;;		_check_fs
  7602 ;;		_disk_initialize
  7603 ;;		_disk_status
  7604 ;;		_get_ldnumber
  7605 ;;		_move_window
  7606 ;; This function is called by:
  7607 ;;		_f_mount
  7608 ;;		_f_open
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text22
  7613  00081C                     __ptext22:
  7614                           	opt callstack 0
  7615  00081C                     _find_volume:
  7616                           	opt callstack 19
  7617                           
  7618                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  7619                           
  7620                           ;incstack = 0
  7621  00081C  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7622  000820  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7623  000824  0E00               	movlw	0
  7624  000826  6EDE               	movwf	postinc2,c
  7625  000828  0E00               	movlw	0
  7626  00082A  6EDD               	movwf	postdec2,c
  7627                           
  7628                           ;ff.c: 2220:  vol = get_ldnumber(path);
  7629  00082C  C047  F001         	movff	find_volume@path,get_ldnumber@path
  7630  000830  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7631  000834  EC7C  F027         	call	_get_ldnumber	;wreg free
  7632  000838  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7633  00083C  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7634                           
  7635                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  7636  000840  0100               	movlb	0	; () banked
  7637  000842  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7638  000844  D002               	goto	l5754
  7639                           
  7640                           ; BSR set to: 0
  7641  000846  0E0B               	movlw	11
  7642  000848  0012               	return	
  7643  00084A                     l5754:
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;ff.c: 2224:  fs = FatFs[vol];
  7647  00084A  90D8               	bcf	status,0,c
  7648  00084C  3580               	rlcf	find_volume@vol& (0+255),w,b
  7649  00084E  6ED9               	movwf	fsr2l,c
  7650  000850  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7651  000852  6EDA               	movwf	fsr2h,c
  7652  000854  0EDC               	movlw	low ff@FatFs
  7653  000856  26D9               	addwf	fsr2l,f,c
  7654  000858  0E00               	movlw	high ff@FatFs
  7655  00085A  22DA               	addwfc	fsr2h,f,c
  7656  00085C  CFDE F098          	movff	postinc2,find_volume@fs
  7657  000860  CFDD F099          	movff	postdec2,find_volume@fs+1
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  7661  000864  5198               	movf	find_volume@fs& (0+255),w,b
  7662  000866  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7663  000868  A4D8               	btfss	status,2,c
  7664  00086A  D002               	goto	l5762
  7665                           
  7666                           ; BSR set to: 0
  7667  00086C  0E0C               	movlw	12
  7668  00086E  0012               	return	
  7669  000870                     l5762:
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;ff.c: 2228:  *rfs = fs;
  7673  000870  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7674  000874  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7675  000878  C098  FFDE         	movff	find_volume@fs,postinc2
  7676  00087C  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;ff.c: 2230:  if (fs->fs_type) {
  7680  000880  C098  FFD9         	movff	find_volume@fs,fsr2l
  7681  000884  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7682  000888  50DF               	movf	indf2,w,c
  7683  00088A  B4D8               	btfsc	status,2,c
  7684  00088C  D015               	goto	l5782
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  7688  00088E  EE20 F001          	lfsr	2,1
  7689  000892  5198               	movf	find_volume@fs& (0+255),w,b
  7690  000894  26D9               	addwf	fsr2l,f,c
  7691  000896  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7692  000898  22DA               	addwfc	fsr2h,f,c
  7693  00089A  50DF               	movf	indf2,w,c
  7694  00089C  EC90  F02E         	call	_disk_status
  7695  0008A0  0100               	movlb	0	; () banked
  7696  0008A2  6F8C               	movwf	find_volume@stat& (0+255),b
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  7700  0008A4  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7701  0008A6  D008               	goto	l5782
  7702                           
  7703                           ; BSR set to: 0
  7704  0008A8  5049               	movf	find_volume@wmode,w,c
  7705  0008AA  A4D8               	btfss	status,2,c
  7706                           
  7707                           ; BSR set to: 0
  7708  0008AC  A58C               	btfss	find_volume@stat& (0+255),2,b
  7709  0008AE  D002               	goto	l5778
  7710  0008B0                     u7370:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  7714  0008B0  0E0A               	movlw	10
  7715  0008B2  0012               	return	
  7716  0008B4                     l5778:
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;ff.c: 2235:    return FR_OK;
  7720  0008B4  0E00               	movlw	0
  7721  0008B6  0012               	return	
  7722  0008B8                     l5782:
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;ff.c: 2242:  fs->fs_type = 0;
  7726  0008B8  C098  FFD9         	movff	find_volume@fs,fsr2l
  7727  0008BC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7728  0008C0  0E00               	movlw	0
  7729  0008C2  6EDF               	movwf	indf2,c
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  7733  0008C4  EE20 F001          	lfsr	2,1
  7734  0008C8  5198               	movf	find_volume@fs& (0+255),w,b
  7735  0008CA  26D9               	addwf	fsr2l,f,c
  7736  0008CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7737  0008CE  22DA               	addwfc	fsr2h,f,c
  7738  0008D0  C080  FFDF         	movff	find_volume@vol,indf2
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  7742  0008D4  EE20 F001          	lfsr	2,1
  7743  0008D8  5198               	movf	find_volume@fs& (0+255),w,b
  7744  0008DA  26D9               	addwf	fsr2l,f,c
  7745  0008DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7746  0008DE  22DA               	addwfc	fsr2h,f,c
  7747  0008E0  50DF               	movf	indf2,w,c
  7748  0008E2  EC97  F020         	call	_disk_initialize
  7749  0008E6  0100               	movlb	0	; () banked
  7750  0008E8  6F8C               	movwf	find_volume@stat& (0+255),b
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;ff.c: 2245:  if (stat & 0x01)
  7754  0008EA  A18C               	btfss	find_volume@stat& (0+255),0,b
  7755  0008EC  D002               	goto	l5794
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;ff.c: 2246:   return FR_NOT_READY;
  7759  0008EE  0E03               	movlw	3
  7760  0008F0  0012               	return	
  7761  0008F2                     l5794:
  7762                           
  7763                           ; BSR set to: 0
  7764  0008F2  5049               	movf	find_volume@wmode,w,c
  7765  0008F4  B4D8               	btfsc	status,2,c
  7766  0008F6  D002               	goto	l5802
  7767                           
  7768                           ; BSR set to: 0
  7769  0008F8  B58C               	btfsc	find_volume@stat& (0+255),2,b
  7770  0008FA  D7DA               	goto	u7370
  7771  0008FC                     l5802:
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;ff.c: 2254:  bsect = 0;
  7775  0008FC  0E00               	movlw	0
  7776  0008FE  6F91               	movwf	find_volume@bsect& (0+255),b
  7777  000900  0E00               	movlw	0
  7778  000902  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7779  000904  0E00               	movlw	0
  7780  000906  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7781  000908  0E00               	movlw	0
  7782  00090A  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  7786  00090C  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7787  000910  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7788  000914  0E00               	movlw	0
  7789  000916  6E3D               	movwf	check_fs@sect,c
  7790  000918  0E00               	movlw	0
  7791  00091A  6E3E               	movwf	check_fs@sect+1,c
  7792  00091C  0E00               	movlw	0
  7793  00091E  6E3F               	movwf	check_fs@sect+2,c
  7794  000920  0E00               	movlw	0
  7795  000922  6E40               	movwf	check_fs@sect+3,c
  7796  000924  EC06  F027         	call	_check_fs	;wreg free
  7797  000928  0100               	movlb	0	; () banked
  7798  00092A  6F97               	movwf	find_volume@fmt& (0+255),b
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  7802  00092C  0597               	decf	find_volume@fmt& (0+255),w,b
  7803  00092E  A4D8               	btfss	status,2,c
  7804  000930  D0AE               	goto	u7470
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  7808  000932  0E00               	movlw	0
  7809  000934  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7810  000936  0E00               	movlw	0
  7811  000938  6F95               	movwf	find_volume@i& (0+255),b
  7812  00093A                     l5814:
  7813                           
  7814                           ; BSR set to: 0
  7815  00093A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7816  00093C  E15A               	bnz	l5830
  7817  00093E  0E04               	movlw	4
  7818  000940  5D95               	subwf	find_volume@i& (0+255),w,b
  7819  000942  B0D8               	btfsc	status,0,c
  7820  000944  D056               	goto	l5830
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  7824  000946  C095  F04A         	movff	find_volume@i,??_find_volume
  7825  00094A  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  7826  00094E  3A4A               	swapf	??_find_volume,f,c
  7827  000950  3A4B               	swapf	??_find_volume+1,f,c
  7828  000952  0EF0               	movlw	240
  7829  000954  164B               	andwf	??_find_volume+1,f,c
  7830  000956  504A               	movf	??_find_volume,w,c
  7831  000958  0B0F               	andlw	15
  7832  00095A  124B               	iorwf	??_find_volume+1,f,c
  7833  00095C  0EF0               	movlw	240
  7834  00095E  164A               	andwf	??_find_volume,f,c
  7835  000960  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  7836  000964  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  7837  000968  504A               	movf	??_find_volume,w,c
  7838  00096A  264C               	addwf	??_find_volume+2,f,c
  7839  00096C  504B               	movf	??_find_volume+1,w,c
  7840  00096E  224D               	addwfc	??_find_volume+3,f,c
  7841  000970  0EEC               	movlw	236
  7842  000972  244C               	addwf	??_find_volume+2,w,c
  7843  000974  6F7A               	movwf	find_volume@pt& (0+255),b
  7844  000976  0E01               	movlw	1
  7845  000978  204D               	addwfc	??_find_volume+3,w,c
  7846  00097A  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7850  00097C  EE20 F004          	lfsr	2,4
  7851  000980  517A               	movf	find_volume@pt& (0+255),w,b
  7852  000982  26D9               	addwf	fsr2l,f,c
  7853  000984  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7854  000986  22DA               	addwfc	fsr2h,f,c
  7855  000988  50DF               	movf	indf2,w,c
  7856  00098A  A4D8               	btfss	status,2,c
  7857  00098C  D009               	goto	l5824
  7858                           
  7859                           ; BSR set to: 0
  7860  00098E  0E00               	movlw	0
  7861  000990  6F70               	movwf	_find_volume$728& (0+255),b
  7862  000992  0E00               	movlw	0
  7863  000994  6F71               	movwf	(_find_volume$728+1)& (0+255),b
  7864  000996  0E00               	movlw	0
  7865  000998  6F72               	movwf	(_find_volume$728+2)& (0+255),b
  7866  00099A  0E00               	movlw	0
  7867  00099C  6F73               	movwf	(_find_volume$728+3)& (0+255),b
  7868  00099E  D00E               	goto	l520
  7869  0009A0                     l5824:
  7870                           
  7871                           ; BSR set to: 0
  7872  0009A0  EE20 F008          	lfsr	2,8
  7873  0009A4  517A               	movf	find_volume@pt& (0+255),w,b
  7874  0009A6  26D9               	addwf	fsr2l,f,c
  7875  0009A8  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7876  0009AA  22DA               	addwfc	fsr2h,f,c
  7877  0009AC  CFDE F070          	movff	postinc2,_find_volume$728
  7878  0009B0  CFDE F071          	movff	postinc2,_find_volume$728+1
  7879  0009B4  CFDE F072          	movff	postinc2,_find_volume$728+2
  7880  0009B8  CFDE F073          	movff	postinc2,_find_volume$728+3
  7881  0009BC                     l520:
  7882                           
  7883                           ; BSR set to: 0
  7884  0009BC  0E60               	movlw	low find_volume@br
  7885  0009BE  6E4A               	movwf	??_find_volume& (0+255),c
  7886  0009C0  0E00               	movlw	high find_volume@br
  7887  0009C2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7888  0009C4  90D8               	bcf	status,0,c
  7889  0009C6  3595               	rlcf	find_volume@i& (0+255),w,b
  7890  0009C8  6ED9               	movwf	fsr2l,c
  7891  0009CA  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7892  0009CC  6EDA               	movwf	fsr2h,c
  7893  0009CE  90D8               	bcf	status,0,c
  7894  0009D0  36D9               	rlcf	fsr2l,f,c
  7895  0009D2  36DA               	rlcf	fsr2h,f,c
  7896  0009D4  504A               	movf	??_find_volume,w,c
  7897  0009D6  26D9               	addwf	fsr2l,f,c
  7898  0009D8  504B               	movf	??_find_volume+1,w,c
  7899  0009DA  22DA               	addwfc	fsr2h,f,c
  7900  0009DC  C070  FFDE         	movff	_find_volume$728,postinc2
  7901  0009E0  C071  FFDE         	movff	_find_volume$728+1,postinc2
  7902  0009E4  C072  FFDE         	movff	_find_volume$728+2,postinc2
  7903  0009E8  C073  FFDE         	movff	_find_volume$728+3,postinc2
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;ff.c: 2260:   }
  7907  0009EC  4B95               	infsnz	find_volume@i& (0+255),f,b
  7908  0009EE  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7909  0009F0  D7A4               	goto	l5814
  7910  0009F2                     l5830:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;ff.c: 2261:   i = 0;
  7914  0009F2  0E00               	movlw	0
  7915  0009F4  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7916  0009F6  0E00               	movlw	0
  7917  0009F8  6F95               	movwf	find_volume@i& (0+255),b
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;ff.c: 2262:   if (i) i--;
  7921  0009FA  5195               	movf	find_volume@i& (0+255),w,b
  7922  0009FC  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  7923  0009FE  B4D8               	btfsc	status,2,c
  7924  000A00  D003               	goto	l5836
  7925                           
  7926                           ; BSR set to: 0
  7927  000A02  0795               	decf	find_volume@i& (0+255),f,b
  7928  000A04  A0D8               	btfss	status,0,c
  7929  000A06  0796               	decf	(find_volume@i+1)& (0+255),f,b
  7930  000A08                     l5836:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;ff.c: 2264:    bsect = br[i];
  7934  000A08  0E60               	movlw	low find_volume@br
  7935  000A0A  6E4A               	movwf	??_find_volume& (0+255),c
  7936  000A0C  0E00               	movlw	high find_volume@br
  7937  000A0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7938  000A10  90D8               	bcf	status,0,c
  7939  000A12  3595               	rlcf	find_volume@i& (0+255),w,b
  7940  000A14  6ED9               	movwf	fsr2l,c
  7941  000A16  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7942  000A18  6EDA               	movwf	fsr2h,c
  7943  000A1A  90D8               	bcf	status,0,c
  7944  000A1C  36D9               	rlcf	fsr2l,f,c
  7945  000A1E  36DA               	rlcf	fsr2h,f,c
  7946  000A20  504A               	movf	??_find_volume,w,c
  7947  000A22  26D9               	addwf	fsr2l,f,c
  7948  000A24  504B               	movf	??_find_volume+1,w,c
  7949  000A26  22DA               	addwfc	fsr2h,f,c
  7950  000A28  CFDE F091          	movff	postinc2,find_volume@bsect
  7951  000A2C  CFDE F092          	movff	postinc2,find_volume@bsect+1
  7952  000A30  CFDE F093          	movff	postinc2,find_volume@bsect+2
  7953  000A34  CFDE F094          	movff	postinc2,find_volume@bsect+3
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  7957  000A38  5191               	movf	find_volume@bsect& (0+255),w,b
  7958  000A3A  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7959  000A3C  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7960  000A3E  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7961  000A40  A4D8               	btfss	status,2,c
  7962  000A42  D005               	goto	l5842
  7963                           
  7964                           ; BSR set to: 0
  7965  000A44  0E00               	movlw	0
  7966  000A46  6F75               	movwf	(_find_volume$729+1)& (0+255),b
  7967  000A48  0E02               	movlw	2
  7968  000A4A  6F74               	movwf	_find_volume$729& (0+255),b
  7969  000A4C  D013               	goto	l5844
  7970  000A4E                     l5842:
  7971                           
  7972                           ; BSR set to: 0
  7973  000A4E  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7974  000A52  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7975  000A56  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7976  000A5A  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7977  000A5E  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7978  000A62  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7979  000A66  EC06  F027         	call	_check_fs	;wreg free
  7980  000A6A  6E4A               	movwf	??_find_volume& (0+255),c
  7981  000A6C  504A               	movf	??_find_volume,w,c
  7982  000A6E  0100               	movlb	0	; () banked
  7983  000A70  6F74               	movwf	_find_volume$729& (0+255),b
  7984  000A72  6B75               	clrf	(_find_volume$729+1)& (0+255),b
  7985  000A74                     l5844:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  7989  000A74  C074  F097         	movff	_find_volume$729,find_volume@fmt
  7990                           
  7991                           ; BSR set to: 0
  7992  000A78  5197               	movf	find_volume@fmt& (0+255),w,b
  7993  000A7A  B4D8               	btfsc	status,2,c
  7994  000A7C  D008               	goto	u7470
  7995                           
  7996                           ; BSR set to: 0
  7997  000A7E  4B95               	infsnz	find_volume@i& (0+255),f,b
  7998  000A80  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7999  000A82  5196               	movf	(find_volume@i+1)& (0+255),w,b
  8000  000A84  E104               	bnz	u7470
  8001  000A86  0E04               	movlw	4
  8002  000A88  5D95               	subwf	find_volume@i& (0+255),w,b
  8003  000A8A  A0D8               	btfss	status,0,c
  8004  000A8C  D7BD               	goto	l5836
  8005  000A8E                     u7470:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  8009  000A8E  0E03               	movlw	3
  8010  000A90  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8011  000A92  A4D8               	btfss	status,2,c
  8012  000A94  D002               	goto	l5856
  8013                           
  8014                           ; BSR set to: 0
  8015  000A96  0E01               	movlw	1
  8016  000A98  0012               	return	
  8017  000A9A                     l5856:
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  8021  000A9A  5197               	movf	find_volume@fmt& (0+255),w,b
  8022  000A9C  B4D8               	btfsc	status,2,c
  8023  000A9E  D002               	goto	l5862
  8024  000AA0                     u7490:
  8025  000AA0                     l5858:
  8026                           
  8027                           ; BSR set to: 0
  8028  000AA0  0E0D               	movlw	13
  8029  000AA2  0012               	return	
  8030  000AA4                     l5862:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  8034  000AA4  EE20 F039          	lfsr	2,57
  8035  000AA8  5198               	movf	find_volume@fs& (0+255),w,b
  8036  000AAA  26D9               	addwf	fsr2l,f,c
  8037  000AAC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8038  000AAE  22DA               	addwfc	fsr2h,f,c
  8039  000AB0  50DE               	movf	postinc2,w,c
  8040  000AB2  E1F6               	bnz	l5858
  8041  000AB4  0E02               	movlw	2
  8042  000AB6  18DE               	xorwf	postinc2,w,c
  8043  000AB8  A4D8               	btfss	status,2,c
  8044  000ABA  D7F2               	goto	u7490
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  8048  000ABC  EE20 F044          	lfsr	2,68
  8049  000AC0  5198               	movf	find_volume@fs& (0+255),w,b
  8050  000AC2  26D9               	addwf	fsr2l,f,c
  8051  000AC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8052  000AC6  22DA               	addwfc	fsr2h,f,c
  8053  000AC8  CFDE F04A          	movff	postinc2,??_find_volume
  8054  000ACC  CFDD F04B          	movff	postdec2,??_find_volume+1
  8055  000AD0  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  8056  000AD4  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  8057  000AD8  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  8058  000ADA  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  8062  000ADC  518D               	movf	find_volume@fasize& (0+255),w,b
  8063  000ADE  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  8064  000AE0  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  8065  000AE2  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  8066  000AE4  A4D8               	btfss	status,2,c
  8067  000AE6  D00E               	goto	l533
  8068                           
  8069                           ; BSR set to: 0
  8070  000AE8  EE20 F052          	lfsr	2,82
  8071  000AEC  5198               	movf	find_volume@fs& (0+255),w,b
  8072  000AEE  26D9               	addwf	fsr2l,f,c
  8073  000AF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8074  000AF2  22DA               	addwfc	fsr2h,f,c
  8075  000AF4  CFDE F08D          	movff	postinc2,find_volume@fasize
  8076  000AF8  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  8077  000AFC  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  8078  000B00  CFDE F090          	movff	postinc2,find_volume@fasize+3
  8079  000B04                     l533:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;ff.c: 2278:  fs->fsize = fasize;
  8083  000B04  EE20 F016          	lfsr	2,22
  8084  000B08  5198               	movf	find_volume@fs& (0+255),w,b
  8085  000B0A  26D9               	addwf	fsr2l,f,c
  8086  000B0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8087  000B0E  22DA               	addwfc	fsr2h,f,c
  8088  000B10  C08D  FFDE         	movff	find_volume@fasize,postinc2
  8089  000B14  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  8090  000B18  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  8091  000B1C  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  8095  000B20  EE20 F03E          	lfsr	2,62
  8096  000B24  5198               	movf	find_volume@fs& (0+255),w,b
  8097  000B26  26D9               	addwf	fsr2l,f,c
  8098  000B28  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8099  000B2A  22DA               	addwfc	fsr2h,f,c
  8100  000B2C  EE10 F003          	lfsr	1,3
  8101  000B30  5198               	movf	find_volume@fs& (0+255),w,b
  8102  000B32  26E1               	addwf	fsr1l,f,c
  8103  000B34  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8104  000B36  22E2               	addwfc	fsr1h,f,c
  8105  000B38  CFDF FFE7          	movff	indf2,indf1
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  8109  000B3C  EE20 F003          	lfsr	2,3
  8110  000B40  5198               	movf	find_volume@fs& (0+255),w,b
  8111  000B42  26D9               	addwf	fsr2l,f,c
  8112  000B44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8113  000B46  22DA               	addwfc	fsr2h,f,c
  8114  000B48  04DE               	decf	postinc2,w,c
  8115  000B4A  B4D8               	btfsc	status,2,c
  8116  000B4C  D00A               	goto	l5884
  8117                           
  8118                           ; BSR set to: 0
  8119  000B4E  EE20 F003          	lfsr	2,3
  8120  000B52  5198               	movf	find_volume@fs& (0+255),w,b
  8121  000B54  26D9               	addwf	fsr2l,f,c
  8122  000B56  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8123  000B58  22DA               	addwfc	fsr2h,f,c
  8124  000B5A  0E02               	movlw	2
  8125  000B5C  18DE               	xorwf	postinc2,w,c
  8126  000B5E  A4D8               	btfss	status,2,c
  8127  000B60  D79F               	goto	u7490
  8128  000B62                     l5884:
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;ff.c: 2283:  fasize *= fs->n_fats;
  8132  000B62  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  8133  000B66  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  8134  000B6A  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  8135  000B6E  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  8136  000B72  EE20 F003          	lfsr	2,3
  8137  000B76  5198               	movf	find_volume@fs& (0+255),w,b
  8138  000B78  26D9               	addwf	fsr2l,f,c
  8139  000B7A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8140  000B7C  22DA               	addwfc	fsr2h,f,c
  8141  000B7E  50DF               	movf	indf2,w,c
  8142  000B80  6E4A               	movwf	??_find_volume& (0+255),c
  8143  000B82  504A               	movf	??_find_volume,w,c
  8144  000B84  6E05               	movwf	___lmul@multiplicand,c
  8145  000B86  6A06               	clrf	___lmul@multiplicand+1,c
  8146  000B88  6A07               	clrf	___lmul@multiplicand+2,c
  8147  000B8A  6A08               	clrf	___lmul@multiplicand+3,c
  8148  000B8C  EC61  F02D         	call	___lmul	;wreg free
  8149  000B90  C001  F08D         	movff	?___lmul,find_volume@fasize
  8150  000B94  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  8151  000B98  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  8152  000B9C  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  8153                           
  8154                           ;ff.c: 2285:  fs->csize = fs->win[13];
  8155  000BA0  0100               	movlb	0	; () banked
  8156  000BA2  EE20 F03B          	lfsr	2,59
  8157  000BA6  5198               	movf	find_volume@fs& (0+255),w,b
  8158  000BA8  26D9               	addwf	fsr2l,f,c
  8159  000BAA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8160  000BAC  22DA               	addwfc	fsr2h,f,c
  8161  000BAE  EE10 F002          	lfsr	1,2
  8162  000BB2  5198               	movf	find_volume@fs& (0+255),w,b
  8163  000BB4  26E1               	addwf	fsr1l,f,c
  8164  000BB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8165  000BB8  22E2               	addwfc	fsr1h,f,c
  8166  000BBA  CFDF FFE7          	movff	indf2,indf1
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  8170  000BBE  EE20 F002          	lfsr	2,2
  8171  000BC2  5198               	movf	find_volume@fs& (0+255),w,b
  8172  000BC4  26D9               	addwf	fsr2l,f,c
  8173  000BC6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8174  000BC8  22DA               	addwfc	fsr2h,f,c
  8175  000BCA  50DF               	movf	indf2,w,c
  8176  000BCC  B4D8               	btfsc	status,2,c
  8177  000BCE  D768               	goto	u7490
  8178                           
  8179                           ; BSR set to: 0
  8180  000BD0  0EFF               	movlw	255
  8181  000BD2  6E4A               	movwf	??_find_volume& (0+255),c
  8182  000BD4  0EFF               	movlw	255
  8183  000BD6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8184  000BD8  EE20 F002          	lfsr	2,2
  8185  000BDC  5198               	movf	find_volume@fs& (0+255),w,b
  8186  000BDE  26D9               	addwf	fsr2l,f,c
  8187  000BE0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8188  000BE2  22DA               	addwfc	fsr2h,f,c
  8189  000BE4  50DF               	movf	indf2,w,c
  8190  000BE6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8191  000BE8  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  8192  000BEA  504A               	movf	??_find_volume,w,c
  8193  000BEC  264C               	addwf	??_find_volume+2,f,c
  8194  000BEE  504B               	movf	??_find_volume+1,w,c
  8195  000BF0  224D               	addwfc	??_find_volume+3,f,c
  8196  000BF2  EE20 F002          	lfsr	2,2
  8197  000BF6  5198               	movf	find_volume@fs& (0+255),w,b
  8198  000BF8  26D9               	addwf	fsr2l,f,c
  8199  000BFA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8200  000BFC  22DA               	addwfc	fsr2h,f,c
  8201  000BFE  50DF               	movf	indf2,w,c
  8202  000C00  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8203  000C02  504E               	movf	??_find_volume+4,w,c
  8204  000C04  164C               	andwf	??_find_volume+2,f,c
  8205  000C06  0E00               	movlw	0
  8206  000C08  164D               	andwf	??_find_volume+3,f,c
  8207  000C0A  504C               	movf	??_find_volume+2,w,c
  8208  000C0C  104D               	iorwf	??_find_volume+3,w,c
  8209  000C0E  A4D8               	btfss	status,2,c
  8210  000C10  D747               	goto	u7490
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  8214  000C12  EE20 F03F          	lfsr	2,63
  8215  000C16  5198               	movf	find_volume@fs& (0+255),w,b
  8216  000C18  26D9               	addwf	fsr2l,f,c
  8217  000C1A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8218  000C1C  22DA               	addwfc	fsr2h,f,c
  8219  000C1E  EE10 F008          	lfsr	1,8
  8220  000C22  5198               	movf	find_volume@fs& (0+255),w,b
  8221  000C24  26E1               	addwf	fsr1l,f,c
  8222  000C26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8223  000C28  22E2               	addwfc	fsr1h,f,c
  8224  000C2A  CFDE FFE6          	movff	postinc2,postinc1
  8225  000C2E  CFDD FFE5          	movff	postdec2,postdec1
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  8229  000C32  EE20 F008          	lfsr	2,8
  8230  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  8231  000C38  26D9               	addwf	fsr2l,f,c
  8232  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8233  000C3C  22DA               	addwfc	fsr2h,f,c
  8234  000C3E  CFDE F04A          	movff	postinc2,??_find_volume
  8235  000C42  CFDD F04B          	movff	postdec2,??_find_volume+1
  8236  000C46  0E0F               	movlw	15
  8237  000C48  164A               	andwf	??_find_volume,f,c
  8238  000C4A  0E00               	movlw	0
  8239  000C4C  164B               	andwf	??_find_volume+1,f,c
  8240  000C4E  504A               	movf	??_find_volume,w,c
  8241  000C50  104B               	iorwf	??_find_volume+1,w,c
  8242  000C52  A4D8               	btfss	status,2,c
  8243  000C54  D725               	goto	u7490
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8247  000C56  EE20 F041          	lfsr	2,65
  8248  000C5A  5198               	movf	find_volume@fs& (0+255),w,b
  8249  000C5C  26D9               	addwf	fsr2l,f,c
  8250  000C5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8251  000C60  22DA               	addwfc	fsr2h,f,c
  8252  000C62  CFDE F04A          	movff	postinc2,??_find_volume
  8253  000C66  CFDD F04B          	movff	postdec2,??_find_volume+1
  8254  000C6A  C04A  F084         	movff	??_find_volume,find_volume@tsect
  8255  000C6E  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  8256  000C72  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  8257  000C74  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8261  000C76  5184               	movf	find_volume@tsect& (0+255),w,b
  8262  000C78  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8263  000C7A  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8264  000C7C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8265  000C7E  A4D8               	btfss	status,2,c
  8266  000C80  D00E               	goto	l539
  8267                           
  8268                           ; BSR set to: 0
  8269  000C82  EE20 F04E          	lfsr	2,78
  8270  000C86  5198               	movf	find_volume@fs& (0+255),w,b
  8271  000C88  26D9               	addwf	fsr2l,f,c
  8272  000C8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8273  000C8C  22DA               	addwfc	fsr2h,f,c
  8274  000C8E  CFDE F084          	movff	postinc2,find_volume@tsect
  8275  000C92  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8276  000C96  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8277  000C9A  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8278  000C9E                     l539:
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8282  000C9E  EE20 F03C          	lfsr	2,60
  8283  000CA2  5198               	movf	find_volume@fs& (0+255),w,b
  8284  000CA4  26D9               	addwf	fsr2l,f,c
  8285  000CA6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8286  000CA8  22DA               	addwfc	fsr2h,f,c
  8287  000CAA  CFDE F082          	movff	postinc2,find_volume@nrsv
  8288  000CAE  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  8292  000CB2  5182               	movf	find_volume@nrsv& (0+255),w,b
  8293  000CB4  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8294  000CB6  B4D8               	btfsc	status,2,c
  8295  000CB8  D6F3               	goto	u7490
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8299  000CBA  EE20 F008          	lfsr	2,8
  8300  000CBE  5198               	movf	find_volume@fs& (0+255),w,b
  8301  000CC0  26D9               	addwf	fsr2l,f,c
  8302  000CC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8303  000CC4  22DA               	addwfc	fsr2h,f,c
  8304  000CC6  CFDE F04A          	movff	postinc2,??_find_volume
  8305  000CCA  CFDD F04B          	movff	postdec2,??_find_volume+1
  8306  000CCE  0E04               	movlw	4
  8307  000CD0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8308  000CD2                     u7595:
  8309  000CD2  90D8               	bcf	status,0,c
  8310  000CD4  324B               	rrcf	??_find_volume+1,f,c
  8311  000CD6  324A               	rrcf	??_find_volume,f,c
  8312  000CD8  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  8313  000CDA  D7FB               	goto	u7595
  8314  000CDC  5182               	movf	find_volume@nrsv& (0+255),w,b
  8315  000CDE  244A               	addwf	??_find_volume,w,c
  8316  000CE0  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8317  000CE2  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8318  000CE4  204B               	addwfc	??_find_volume+1,w,c
  8319  000CE6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8320  000CE8  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  8321  000CEA  B0D8               	btfsc	status,0,c
  8322  000CEC  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  8323  000CEE  6A50               	clrf	(??_find_volume+6)& (0+255),c
  8324  000CF0  518D               	movf	find_volume@fasize& (0+255),w,b
  8325  000CF2  244D               	addwf	??_find_volume+3,w,c
  8326  000CF4  6F7C               	movwf	find_volume@sysect& (0+255),b
  8327  000CF6  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8328  000CF8  204E               	addwfc	??_find_volume+4,w,c
  8329  000CFA  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8330  000CFC  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8331  000CFE  204F               	addwfc	??_find_volume+5,w,c
  8332  000D00  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8333  000D02  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8334  000D04  2050               	addwfc	??_find_volume+6,w,c
  8335  000D06  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  8339  000D08  517C               	movf	find_volume@sysect& (0+255),w,b
  8340  000D0A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8341  000D0C  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8342  000D0E  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8343  000D10  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8344  000D12  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8345  000D14  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8346  000D16  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8347  000D18  A0D8               	btfss	status,0,c
  8348  000D1A  D6C2               	goto	u7490
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  8352  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  8353  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8354  000D20  6E01               	movwf	___lldiv@dividend,c
  8355  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8356  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8357  000D26  6E02               	movwf	___lldiv@dividend+1,c
  8358  000D28  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8359  000D2A  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8360  000D2C  6E03               	movwf	___lldiv@dividend+2,c
  8361  000D2E  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8362  000D30  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8363  000D32  6E04               	movwf	___lldiv@dividend+3,c
  8364  000D34  EE20 F002          	lfsr	2,2
  8365  000D38  5198               	movf	find_volume@fs& (0+255),w,b
  8366  000D3A  26D9               	addwf	fsr2l,f,c
  8367  000D3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8368  000D3E  22DA               	addwfc	fsr2h,f,c
  8369  000D40  50DF               	movf	indf2,w,c
  8370  000D42  6E4A               	movwf	??_find_volume& (0+255),c
  8371  000D44  504A               	movf	??_find_volume,w,c
  8372  000D46  6E05               	movwf	___lldiv@divisor,c
  8373  000D48  6A06               	clrf	___lldiv@divisor+1,c
  8374  000D4A  6A07               	clrf	___lldiv@divisor+2,c
  8375  000D4C  6A08               	clrf	___lldiv@divisor+3,c
  8376  000D4E  EC33  F02B         	call	___lldiv	;wreg free
  8377  000D52  C001  F088         	movff	?___lldiv,find_volume@nclst
  8378  000D56  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8379  000D5A  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8380  000D5E  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8381                           
  8382                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  8383  000D62  0100               	movlb	0	; () banked
  8384  000D64  5188               	movf	find_volume@nclst& (0+255),w,b
  8385  000D66  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8386  000D68  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8387  000D6A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8388  000D6C  B4D8               	btfsc	status,2,c
  8389  000D6E  D698               	goto	u7490
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;ff.c: 2304:  fmt = 1;
  8393  000D70  0E01               	movlw	1
  8394  000D72  6F97               	movwf	find_volume@fmt& (0+255),b
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  8398  000D74  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8399  000D76  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8400  000D78  E106               	bnz	u7620
  8401  000D7A  0EF6               	movlw	246
  8402  000D7C  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8403  000D7E  0E0F               	movlw	15
  8404  000D80  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8405  000D82  A0D8               	btfss	status,0,c
  8406  000D84  D002               	goto	l5938
  8407  000D86                     u7620:
  8408                           
  8409                           ; BSR set to: 0
  8410  000D86  0E02               	movlw	2
  8411  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  8412  000D8A                     l5938:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  8416  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8417  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8418  000D8E  E106               	bnz	u7630
  8419  000D90  0EF6               	movlw	246
  8420  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8421  000D94  0EFF               	movlw	255
  8422  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8423  000D98  A0D8               	btfss	status,0,c
  8424  000D9A  D002               	goto	l5942
  8425  000D9C                     u7630:
  8426                           
  8427                           ; BSR set to: 0
  8428  000D9C  0E03               	movlw	3
  8429  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  8430  000DA0                     l5942:
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  8434  000DA0  0E02               	movlw	2
  8435  000DA2  2588               	addwf	find_volume@nclst& (0+255),w,b
  8436  000DA4  6E4A               	movwf	??_find_volume& (0+255),c
  8437  000DA6  0E00               	movlw	0
  8438  000DA8  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8439  000DAA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8440  000DAC  0E00               	movlw	0
  8441  000DAE  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8442  000DB0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8443  000DB2  0E00               	movlw	0
  8444  000DB4  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8445  000DB6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8446  000DB8  EE20 F012          	lfsr	2,18
  8447  000DBC  5198               	movf	find_volume@fs& (0+255),w,b
  8448  000DBE  26D9               	addwf	fsr2l,f,c
  8449  000DC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8450  000DC2  22DA               	addwfc	fsr2h,f,c
  8451  000DC4  C04A  FFDE         	movff	??_find_volume,postinc2
  8452  000DC8  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8453  000DCC  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8454  000DD0  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;ff.c: 2310:  fs->volbase = bsect;
  8458  000DD4  EE20 F01A          	lfsr	2,26
  8459  000DD8  5198               	movf	find_volume@fs& (0+255),w,b
  8460  000DDA  26D9               	addwf	fsr2l,f,c
  8461  000DDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8462  000DDE  22DA               	addwfc	fsr2h,f,c
  8463  000DE0  C091  FFDE         	movff	find_volume@bsect,postinc2
  8464  000DE4  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8465  000DE8  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8466  000DEC  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  8470  000DF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  8471  000DF2  2591               	addwf	find_volume@bsect& (0+255),w,b
  8472  000DF4  6E4A               	movwf	??_find_volume& (0+255),c
  8473  000DF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8474  000DF8  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8475  000DFA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8476  000DFC  0E00               	movlw	0
  8477  000DFE  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8478  000E00  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8479  000E02  0E00               	movlw	0
  8480  000E04  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8481  000E06  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8482  000E08  EE20 F01E          	lfsr	2,30
  8483  000E0C  5198               	movf	find_volume@fs& (0+255),w,b
  8484  000E0E  26D9               	addwf	fsr2l,f,c
  8485  000E10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8486  000E12  22DA               	addwfc	fsr2h,f,c
  8487  000E14  C04A  FFDE         	movff	??_find_volume,postinc2
  8488  000E18  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8489  000E1C  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8490  000E20  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;ff.c: 2312:  fs->database = bsect + sysect;
  8494  000E24  517C               	movf	find_volume@sysect& (0+255),w,b
  8495  000E26  2591               	addwf	find_volume@bsect& (0+255),w,b
  8496  000E28  6E4A               	movwf	??_find_volume& (0+255),c
  8497  000E2A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8498  000E2C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8499  000E2E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8500  000E30  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8501  000E32  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8502  000E34  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8503  000E36  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8504  000E38  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8505  000E3A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8506  000E3C  EE20 F026          	lfsr	2,38
  8507  000E40  5198               	movf	find_volume@fs& (0+255),w,b
  8508  000E42  26D9               	addwf	fsr2l,f,c
  8509  000E44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8510  000E46  22DA               	addwfc	fsr2h,f,c
  8511  000E48  C04A  FFDE         	movff	??_find_volume,postinc2
  8512  000E4C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8513  000E50  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8514  000E54  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;ff.c: 2313:  if (fmt == 3) {
  8518  000E58  0E03               	movlw	3
  8519  000E5A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8520  000E5C  A4D8               	btfss	status,2,c
  8521  000E5E  D03D               	goto	l5962
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8525  000E60  EE20 F008          	lfsr	2,8
  8526  000E64  5198               	movf	find_volume@fs& (0+255),w,b
  8527  000E66  26D9               	addwf	fsr2l,f,c
  8528  000E68  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8529  000E6A  22DA               	addwfc	fsr2h,f,c
  8530  000E6C  50DE               	movf	postinc2,w,c
  8531  000E6E  10DE               	iorwf	postinc2,w,c
  8532  000E70  A4D8               	btfss	status,2,c
  8533  000E72  D616               	goto	u7490
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8537  000E74  EE20 F05A          	lfsr	2,90
  8538  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  8539  000E7A  26D9               	addwf	fsr2l,f,c
  8540  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8541  000E7E  22DA               	addwfc	fsr2h,f,c
  8542  000E80  EE10 F022          	lfsr	1,34
  8543  000E84  5198               	movf	find_volume@fs& (0+255),w,b
  8544  000E86  26E1               	addwf	fsr1l,f,c
  8545  000E88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8546  000E8A  22E2               	addwfc	fsr1h,f,c
  8547  000E8C  CFDE FFE6          	movff	postinc2,postinc1
  8548  000E90  CFDE FFE6          	movff	postinc2,postinc1
  8549  000E94  CFDE FFE6          	movff	postinc2,postinc1
  8550  000E98  CFDE FFE6          	movff	postinc2,postinc1
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  8554  000E9C  EE20 F012          	lfsr	2,18
  8555  000EA0  5198               	movf	find_volume@fs& (0+255),w,b
  8556  000EA2  26D9               	addwf	fsr2l,f,c
  8557  000EA4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8558  000EA6  22DA               	addwfc	fsr2h,f,c
  8559  000EA8  CFDE F04A          	movff	postinc2,??_find_volume
  8560  000EAC  CFDE F04B          	movff	postinc2,??_find_volume+1
  8561  000EB0  CFDE F04C          	movff	postinc2,??_find_volume+2
  8562  000EB4  CFDE F04D          	movff	postinc2,??_find_volume+3
  8563  000EB8  0E02               	movlw	2
  8564  000EBA                     u7665:
  8565  000EBA  90D8               	bcf	status,0,c
  8566  000EBC  364A               	rlcf	??_find_volume,f,c
  8567  000EBE  364B               	rlcf	??_find_volume+1,f,c
  8568  000EC0  364C               	rlcf	??_find_volume+2,f,c
  8569  000EC2  364D               	rlcf	??_find_volume+3,f,c
  8570  000EC4  2EE8               	decfsz	wreg,f,c
  8571  000EC6  D7F9               	goto	u7665
  8572  000EC8  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  8573  000ECC  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8574  000ED0  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8575  000ED4  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8576                           
  8577                           ;ff.c: 2317:  } else {
  8578  000ED8  D091               	goto	l547
  8579  000EDA                     l5962:
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8583  000EDA  EE20 F008          	lfsr	2,8
  8584  000EDE  5198               	movf	find_volume@fs& (0+255),w,b
  8585  000EE0  26D9               	addwf	fsr2l,f,c
  8586  000EE2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8587  000EE4  22DA               	addwfc	fsr2h,f,c
  8588  000EE6  50DE               	movf	postinc2,w,c
  8589  000EE8  10DE               	iorwf	postinc2,w,c
  8590  000EEA  B4D8               	btfsc	status,2,c
  8591  000EEC  D5D9               	goto	u7490
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  8595  000EEE  EE20 F01E          	lfsr	2,30
  8596  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  8597  000EF4  26D9               	addwf	fsr2l,f,c
  8598  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8599  000EF8  22DA               	addwfc	fsr2h,f,c
  8600  000EFA  CFDE F04A          	movff	postinc2,??_find_volume
  8601  000EFE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8602  000F02  CFDE F04C          	movff	postinc2,??_find_volume+2
  8603  000F06  CFDE F04D          	movff	postinc2,??_find_volume+3
  8604  000F0A  518D               	movf	find_volume@fasize& (0+255),w,b
  8605  000F0C  244A               	addwf	??_find_volume,w,c
  8606  000F0E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8607  000F10  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8608  000F12  204B               	addwfc	??_find_volume+1,w,c
  8609  000F14  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8610  000F16  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8611  000F18  204C               	addwfc	??_find_volume+2,w,c
  8612  000F1A  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8613  000F1C  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8614  000F1E  204D               	addwfc	??_find_volume+3,w,c
  8615  000F20  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8616  000F22  EE20 F022          	lfsr	2,34
  8617  000F26  5198               	movf	find_volume@fs& (0+255),w,b
  8618  000F28  26D9               	addwf	fsr2l,f,c
  8619  000F2A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8620  000F2C  22DA               	addwfc	fsr2h,f,c
  8621  000F2E  C04E  FFDE         	movff	??_find_volume+4,postinc2
  8622  000F32  C04F  FFDE         	movff	??_find_volume+5,postinc2
  8623  000F36  C050  FFDE         	movff	??_find_volume+6,postinc2
  8624  000F3A  C051  FFDE         	movff	??_find_volume+7,postinc2
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  8628  000F3E  0E02               	movlw	2
  8629  000F40  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8630  000F42  B4D8               	btfsc	status,2,c
  8631  000F44  D044               	goto	l5974
  8632                           
  8633                           ; BSR set to: 0
  8634  000F46  EE20 F012          	lfsr	2,18
  8635  000F4A  5198               	movf	find_volume@fs& (0+255),w,b
  8636  000F4C  26D9               	addwf	fsr2l,f,c
  8637  000F4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8638  000F50  22DA               	addwfc	fsr2h,f,c
  8639  000F52  CFDE F04A          	movff	postinc2,??_find_volume
  8640  000F56  CFDE F04B          	movff	postinc2,??_find_volume+1
  8641  000F5A  CFDE F04C          	movff	postinc2,??_find_volume+2
  8642  000F5E  CFDE F04D          	movff	postinc2,??_find_volume+3
  8643  000F62  0E01               	movlw	1
  8644  000F64  144A               	andwf	??_find_volume,w,c
  8645  000F66  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8646  000F68  0E00               	movlw	0
  8647  000F6A  144B               	andwf	??_find_volume+1,w,c
  8648  000F6C  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8649  000F6E  0E00               	movlw	0
  8650  000F70  144C               	andwf	??_find_volume+2,w,c
  8651  000F72  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8652  000F74  0E00               	movlw	0
  8653  000F76  144D               	andwf	??_find_volume+3,w,c
  8654  000F78  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8655  000F7A  EE20 F012          	lfsr	2,18
  8656  000F7E  5198               	movf	find_volume@fs& (0+255),w,b
  8657  000F80  26D9               	addwf	fsr2l,f,c
  8658  000F82  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8659  000F84  22DA               	addwfc	fsr2h,f,c
  8660  000F86  CFDE F001          	movff	postinc2,___lmul@multiplier
  8661  000F8A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8662  000F8E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8663  000F92  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8664  000F96  0E03               	movlw	3
  8665  000F98  6E05               	movwf	___lmul@multiplicand,c
  8666  000F9A  0E00               	movlw	0
  8667  000F9C  6E06               	movwf	___lmul@multiplicand+1,c
  8668  000F9E  0E00               	movlw	0
  8669  000FA0  6E07               	movwf	___lmul@multiplicand+2,c
  8670  000FA2  0E00               	movlw	0
  8671  000FA4  6E08               	movwf	___lmul@multiplicand+3,c
  8672  000FA6  EC61  F02D         	call	___lmul	;wreg free
  8673  000FAA  90D8               	bcf	status,0,c
  8674  000FAC  3204               	rrcf	?___lmul+3,f,c
  8675  000FAE  3203               	rrcf	?___lmul+2,f,c
  8676  000FB0  3202               	rrcf	?___lmul+1,f,c
  8677  000FB2  3201               	rrcf	?___lmul,f,c
  8678  000FB4  504E               	movf	??_find_volume+4,w,c
  8679  000FB6  2401               	addwf	?___lmul,w,c
  8680  000FB8  0100               	movlb	0	; () banked
  8681  000FBA  6F76               	movwf	find_volume@szbfat& (0+255),b
  8682  000FBC  504F               	movf	??_find_volume+5,w,c
  8683  000FBE  2002               	addwfc	?___lmul+1,w,c
  8684  000FC0  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8685  000FC2  5050               	movf	??_find_volume+6,w,c
  8686  000FC4  2003               	addwfc	?___lmul+2,w,c
  8687  000FC6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8688  000FC8  5051               	movf	??_find_volume+7,w,c
  8689  000FCA  2004               	addwfc	?___lmul+3,w,c
  8690  000FCC  D016               	goto	L6
  8691  000FCE                     l5974:
  8692                           
  8693                           ; BSR set to: 0
  8694  000FCE  EE20 F012          	lfsr	2,18
  8695  000FD2  5198               	movf	find_volume@fs& (0+255),w,b
  8696  000FD4  26D9               	addwf	fsr2l,f,c
  8697  000FD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8698  000FD8  22DA               	addwfc	fsr2h,f,c
  8699  000FDA  CFDE F04A          	movff	postinc2,??_find_volume
  8700  000FDE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8701  000FE2  CFDE F04C          	movff	postinc2,??_find_volume+2
  8702  000FE6  CFDE F04D          	movff	postinc2,??_find_volume+3
  8703  000FEA  90D8               	bcf	status,0,c
  8704  000FEC  344A               	rlcf	??_find_volume,w,c
  8705  000FEE  6F76               	movwf	find_volume@szbfat& (0+255),b
  8706  000FF0  344B               	rlcf	??_find_volume+1,w,c
  8707  000FF2  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8708  000FF4  344C               	rlcf	??_find_volume+2,w,c
  8709  000FF6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8710  000FF8  344D               	rlcf	??_find_volume+3,w,c
  8711  000FFA                     L6:
  8712  000FFA  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8713  000FFC                     l547:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8717  000FFC  0EFF               	movlw	255
  8718  000FFE  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8719  001000  6E4A               	movwf	??_find_volume& (0+255),c
  8720  001002  0E01               	movlw	1
  8721  001004  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8722  001006  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8723  001008  0E00               	movlw	0
  8724  00100A  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8725  00100C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8726  00100E  0E00               	movlw	0
  8727  001010  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8728  001012  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8729  001014  0E0A               	movlw	10
  8730  001016  D005               	goto	u7690
  8731  001018                     u7695:
  8732  001018  90D8               	bcf	status,0,c
  8733  00101A  324D               	rrcf	??_find_volume+3,f,c
  8734  00101C  324C               	rrcf	??_find_volume+2,f,c
  8735  00101E  324B               	rrcf	??_find_volume+1,f,c
  8736  001020  324A               	rrcf	??_find_volume,f,c
  8737  001022                     u7690:
  8738  001022  2EE8               	decfsz	wreg,f,c
  8739  001024  D7F9               	goto	u7695
  8740  001026  EE20 F016          	lfsr	2,22
  8741  00102A  5198               	movf	find_volume@fs& (0+255),w,b
  8742  00102C  26D9               	addwf	fsr2l,f,c
  8743  00102E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8744  001030  22DA               	addwfc	fsr2h,f,c
  8745  001032  504A               	movf	??_find_volume,w,c
  8746  001034  5CDE               	subwf	postinc2,w,c
  8747  001036  504B               	movf	??_find_volume+1,w,c
  8748  001038  58DE               	subwfb	postinc2,w,c
  8749  00103A  504C               	movf	??_find_volume+2,w,c
  8750  00103C  58DE               	subwfb	postinc2,w,c
  8751  00103E  504D               	movf	??_find_volume+3,w,c
  8752  001040  58DE               	subwfb	postinc2,w,c
  8753  001042  A0D8               	btfss	status,0,c
  8754  001044  D52D               	goto	u7490
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8758  001046  EE20 F00E          	lfsr	2,14
  8759  00104A  5198               	movf	find_volume@fs& (0+255),w,b
  8760  00104C  26D9               	addwf	fsr2l,f,c
  8761  00104E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8762  001050  22DA               	addwfc	fsr2h,f,c
  8763  001052  0EFF               	movlw	255
  8764  001054  6EDE               	movwf	postinc2,c
  8765  001056  0EFF               	movlw	255
  8766  001058  6EDE               	movwf	postinc2,c
  8767  00105A  0EFF               	movlw	255
  8768  00105C  6EDE               	movwf	postinc2,c
  8769  00105E  0EFF               	movlw	255
  8770  001060  6EDD               	movwf	postdec2,c
  8771  001062  52DD               	movf	postdec2,f,c
  8772  001064  52DD               	movf	postdec2,f,c
  8773  001066  EE10 F00A          	lfsr	1,10
  8774  00106A  5198               	movf	find_volume@fs& (0+255),w,b
  8775  00106C  26E1               	addwf	fsr1l,f,c
  8776  00106E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8777  001070  22E2               	addwfc	fsr1h,f,c
  8778  001072  CFDE FFE6          	movff	postinc2,postinc1
  8779  001076  CFDE FFE6          	movff	postinc2,postinc1
  8780  00107A  CFDE FFE6          	movff	postinc2,postinc1
  8781  00107E  CFDE FFE6          	movff	postinc2,postinc1
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  8785  001082  EE20 F005          	lfsr	2,5
  8786  001086  5198               	movf	find_volume@fs& (0+255),w,b
  8787  001088  26D9               	addwf	fsr2l,f,c
  8788  00108A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8789  00108C  22DA               	addwfc	fsr2h,f,c
  8790  00108E  0E80               	movlw	128
  8791  001090  6EDF               	movwf	indf2,c
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;ff.c: 2333:  if (fmt == 3
  8795  001092  0E03               	movlw	3
  8796  001094  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8797  001096  A4D8               	btfss	status,2,c
  8798  001098  D083               	goto	l5998
  8799                           
  8800                           ; BSR set to: 0
  8801  00109A  EE20 F05E          	lfsr	2,94
  8802  00109E  5198               	movf	find_volume@fs& (0+255),w,b
  8803  0010A0  26D9               	addwf	fsr2l,f,c
  8804  0010A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8805  0010A4  22DA               	addwfc	fsr2h,f,c
  8806  0010A6  04DE               	decf	postinc2,w,c
  8807  0010A8  10DE               	iorwf	postinc2,w,c
  8808  0010AA  A4D8               	btfss	status,2,c
  8809  0010AC  D079               	goto	l5998
  8810                           
  8811                           ; BSR set to: 0
  8812  0010AE  C098  F030         	movff	find_volume@fs,move_window@fs
  8813  0010B2  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  8814  0010B6  0E01               	movlw	1
  8815  0010B8  2591               	addwf	find_volume@bsect& (0+255),w,b
  8816  0010BA  6E32               	movwf	move_window@sector,c
  8817  0010BC  0E00               	movlw	0
  8818  0010BE  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8819  0010C0  6E33               	movwf	move_window@sector+1,c
  8820  0010C2  0E00               	movlw	0
  8821  0010C4  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8822  0010C6  6E34               	movwf	move_window@sector+2,c
  8823  0010C8  0E00               	movlw	0
  8824  0010CA  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8825  0010CC  6E35               	movwf	move_window@sector+3,c
  8826  0010CE  EC96  F02A         	call	_move_window	;wreg free
  8827  0010D2  0900               	iorlw	0
  8828  0010D4  A4D8               	btfss	status,2,c
  8829  0010D6  D064               	goto	l5998
  8830                           
  8831                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  8832  0010D8  0100               	movlb	0	; () banked
  8833  0010DA  EE20 F005          	lfsr	2,5
  8834  0010DE  5198               	movf	find_volume@fs& (0+255),w,b
  8835  0010E0  26D9               	addwf	fsr2l,f,c
  8836  0010E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8837  0010E4  22DA               	addwfc	fsr2h,f,c
  8838  0010E6  0E00               	movlw	0
  8839  0010E8  6EDF               	movwf	indf2,c
  8840                           
  8841                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8842  0010EA  EE22 F02C          	lfsr	2,556
  8843  0010EE  5198               	movf	find_volume@fs& (0+255),w,b
  8844  0010F0  26D9               	addwf	fsr2l,f,c
  8845  0010F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8846  0010F4  22DA               	addwfc	fsr2h,f,c
  8847  0010F6  0E55               	movlw	85
  8848  0010F8  18DE               	xorwf	postinc2,w,c
  8849  0010FA  E152               	bnz	l5998
  8850  0010FC  0EAA               	movlw	170
  8851  0010FE  18DE               	xorwf	postinc2,w,c
  8852  001100  A4D8               	btfss	status,2,c
  8853  001102  D04E               	goto	l5998
  8854                           
  8855                           ; BSR set to: 0
  8856  001104  EE20 F02E          	lfsr	2,46
  8857  001108  5198               	movf	find_volume@fs& (0+255),w,b
  8858  00110A  26D9               	addwf	fsr2l,f,c
  8859  00110C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8860  00110E  22DA               	addwfc	fsr2h,f,c
  8861  001110  0E52               	movlw	82
  8862  001112  18DE               	xorwf	postinc2,w,c
  8863  001114  E145               	bnz	l5998
  8864  001116  0E52               	movlw	82
  8865  001118  18DE               	xorwf	postinc2,w,c
  8866  00111A  E142               	bnz	l5998
  8867  00111C  0E61               	movlw	97
  8868  00111E  18DE               	xorwf	postinc2,w,c
  8869  001120  E13F               	bnz	l5998
  8870  001122  0E41               	movlw	65
  8871  001124  18DE               	xorwf	postinc2,w,c
  8872  001126  A4D8               	btfss	status,2,c
  8873  001128  D03B               	goto	l5998
  8874                           
  8875                           ; BSR set to: 0
  8876  00112A  EE22 F012          	lfsr	2,530
  8877  00112E  5198               	movf	find_volume@fs& (0+255),w,b
  8878  001130  26D9               	addwf	fsr2l,f,c
  8879  001132  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8880  001134  22DA               	addwfc	fsr2h,f,c
  8881  001136  0E72               	movlw	114
  8882  001138  18DE               	xorwf	postinc2,w,c
  8883  00113A  E132               	bnz	l5998
  8884  00113C  0E72               	movlw	114
  8885  00113E  18DE               	xorwf	postinc2,w,c
  8886  001140  E12F               	bnz	l5998
  8887  001142  0E41               	movlw	65
  8888  001144  18DE               	xorwf	postinc2,w,c
  8889  001146  E12C               	bnz	l5998
  8890  001148  0E61               	movlw	97
  8891  00114A  18DE               	xorwf	postinc2,w,c
  8892  00114C  A4D8               	btfss	status,2,c
  8893  00114E  D028               	goto	l5998
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  8897  001150  EE22 F016          	lfsr	2,534
  8898  001154  5198               	movf	find_volume@fs& (0+255),w,b
  8899  001156  26D9               	addwf	fsr2l,f,c
  8900  001158  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8901  00115A  22DA               	addwfc	fsr2h,f,c
  8902  00115C  EE10 F00E          	lfsr	1,14
  8903  001160  5198               	movf	find_volume@fs& (0+255),w,b
  8904  001162  26E1               	addwf	fsr1l,f,c
  8905  001164  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8906  001166  22E2               	addwfc	fsr1h,f,c
  8907  001168  CFDE FFE6          	movff	postinc2,postinc1
  8908  00116C  CFDE FFE6          	movff	postinc2,postinc1
  8909  001170  CFDE FFE6          	movff	postinc2,postinc1
  8910  001174  CFDE FFE6          	movff	postinc2,postinc1
  8911                           
  8912                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8913  001178  EE22 F01A          	lfsr	2,538
  8914  00117C  5198               	movf	find_volume@fs& (0+255),w,b
  8915  00117E  26D9               	addwf	fsr2l,f,c
  8916  001180  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8917  001182  22DA               	addwfc	fsr2h,f,c
  8918  001184  EE10 F00A          	lfsr	1,10
  8919  001188  5198               	movf	find_volume@fs& (0+255),w,b
  8920  00118A  26E1               	addwf	fsr1l,f,c
  8921  00118C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8922  00118E  22E2               	addwfc	fsr1h,f,c
  8923  001190  CFDE FFE6          	movff	postinc2,postinc1
  8924  001194  CFDE FFE6          	movff	postinc2,postinc1
  8925  001198  CFDE FFE6          	movff	postinc2,postinc1
  8926  00119C  CFDE FFE6          	movff	postinc2,postinc1
  8927  0011A0                     l5998:
  8928                           
  8929                           ;ff.c: 2352:  fs->fs_type = fmt;
  8930  0011A0  C098  FFD9         	movff	find_volume@fs,fsr2l
  8931  0011A4  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8932  0011A8  C097  FFDF         	movff	find_volume@fmt,indf2
  8933                           
  8934                           ;ff.c: 2353:  fs->id = ++Fsid;
  8935  0011AC  0100               	movlb	0	; () banked
  8936  0011AE  4BDA               	infsnz	_Fsid& (0+255),f,b
  8937  0011B0  2BDB               	incf	(_Fsid+1)& (0+255),f,b
  8938  0011B2  EE20 F006          	lfsr	2,6
  8939  0011B6  5198               	movf	find_volume@fs& (0+255),w,b
  8940  0011B8  26D9               	addwf	fsr2l,f,c
  8941  0011BA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8942  0011BC  22DA               	addwfc	fsr2h,f,c
  8943  0011BE  C0DA  FFDE         	movff	_Fsid,postinc2
  8944  0011C2  C0DB  FFDD         	movff	_Fsid+1,postdec2
  8945  0011C6  EF5A  F004         	goto	l5778
  8946  0011CA                     __end_of_find_volume:
  8947                           	opt callstack 0
  8948                           
  8949 ;; *************** function _get_ldnumber *****************
  8950 ;; Defined at:
  8951 ;;		line 2114 in file "ff.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  8954 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  8957 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  8958 ;;		 -> STR_4(1), STR_3(1), 
  8959 ;;  i               2   10[COMRAM] unsigned short 
  8960 ;;  vol             2    8[COMRAM] int 
  8961 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  8962 ;;		 -> STR_8(11), STR_7(1), STR_6(1), STR_5(11), 
  8963 ;;		 -> STR_4(1), STR_3(1), 
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  2    0[COMRAM] int 
  8966 ;; Registers used:
  8967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8973 ;;      Params:         2       0       0       0       0       0       0       0       0
  8974 ;;      Locals:        10       0       0       0       0       0       0       0       0
  8975 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8976 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8977 ;;Total ram usage:       14 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; This function calls:
  8980 ;;		Nothing
  8981 ;; This function is called by:
  8982 ;;		_find_volume
  8983 ;;		_f_mount
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text23
  8988  004EF8                     __ptext23:
  8989                           	opt callstack 0
  8990  004EF8                     _get_ldnumber:
  8991                           	opt callstack 27
  8992                           
  8993                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;incstack = 0
  8997  004EF8  6809               	setf	get_ldnumber@vol,c
  8998  004EFA  680A               	setf	get_ldnumber@vol+1,c
  8999                           
  9000                           ;ff.c: 2129:  if (*path) {
  9001  004EFC  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9002  004F00  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9003  004F04  50DE               	movf	postinc2,w,c
  9004  004F06  10DE               	iorwf	postinc2,w,c
  9005  004F08  B4D8               	btfsc	status,2,c
  9006  004F0A  D05B               	goto	l5554
  9007                           
  9008                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  9009  004F0C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9010  004F10  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9011  004F14  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  9012  004F18  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  9013  004F1C  D002               	goto	l5528
  9014  004F1E                     l5526:
  9015  004F1E  4A0D               	infsnz	get_ldnumber@tt,f,c
  9016  004F20  2A0E               	incf	get_ldnumber@tt+1,f,c
  9017  004F22                     l5528:
  9018  004F22  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9019  004F26  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9020  004F2A                     	if	0	;tblptru may be non-zero
  9021  004F2A                     	endif
  9022  004F2A                     	if	0	;tblptru may be non-zero
  9023  004F2A                     	endif
  9024  004F2A  0E20               	movlw	32
  9025  004F2C  0008               	tblrd		*
  9026  004F2E  64F5               	cpfsgt	tablat,c
  9027  004F30  D009               	goto	u6960
  9028  004F32  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9029  004F36  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9030  004F3A                     	if	0	;tblptru may be non-zero
  9031  004F3A                     	endif
  9032  004F3A                     	if	0	;tblptru may be non-zero
  9033  004F3A                     	endif
  9034  004F3A  0008               	tblrd		*
  9035  004F3C  50F5               	movf	tablat,w,c
  9036  004F3E  0A3A               	xorlw	58
  9037  004F40  A4D8               	btfss	status,2,c
  9038  004F42  D7ED               	goto	l5526
  9039  004F44                     u6960:
  9040                           
  9041                           ;ff.c: 2131:   if (*tt == ':') {
  9042  004F44  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  9043  004F48  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  9044  004F4C                     	if	0	;tblptru may be non-zero
  9045  004F4C                     	endif
  9046  004F4C                     	if	0	;tblptru may be non-zero
  9047  004F4C                     	endif
  9048  004F4C  0008               	tblrd		*
  9049  004F4E  50F5               	movf	tablat,w,c
  9050  004F50  0A3A               	xorlw	58
  9051  004F52  A4D8               	btfss	status,2,c
  9052  004F54  D03B               	goto	l5558
  9053                           
  9054                           ;ff.c: 2132:    tp = *path;
  9055  004F56  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9056  004F5A  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9057  004F5E  CFDE F007          	movff	postinc2,get_ldnumber@tp
  9058  004F62  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  9059                           
  9060                           ;ff.c: 2133:    i = *tp++ - '0';
  9061  004F66  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  9062  004F6A  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  9063  004F6E                     	if	0	;tblptru may be non-zero
  9064  004F6E                     	endif
  9065  004F6E                     	if	0	;tblptru may be non-zero
  9066  004F6E                     	endif
  9067  004F6E  0008               	tblrd		*
  9068  004F70  CFF5 F003          	movff	tablat,??_get_ldnumber
  9069  004F74  0ED0               	movlw	208
  9070  004F76  2403               	addwf	??_get_ldnumber,w,c
  9071  004F78  6E0B               	movwf	get_ldnumber@i,c
  9072  004F7A  6A0C               	clrf	get_ldnumber@i+1,c
  9073  004F7C  0EFF               	movlw	255
  9074  004F7E  220C               	addwfc	get_ldnumber@i+1,f,c
  9075  004F80  4A07               	infsnz	get_ldnumber@tp,f,c
  9076  004F82  2A08               	incf	get_ldnumber@tp+1,f,c
  9077                           
  9078                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  9079  004F84  500C               	movf	get_ldnumber@i+1,w,c
  9080  004F86  E11D               	bnz	l5554
  9081  004F88  0E0A               	movlw	10
  9082  004F8A  5C0B               	subwf	get_ldnumber@i,w,c
  9083  004F8C  B0D8               	btfsc	status,0,c
  9084  004F8E  D019               	goto	l5554
  9085  004F90  500D               	movf	get_ldnumber@tt,w,c
  9086  004F92  1807               	xorwf	get_ldnumber@tp,w,c
  9087  004F94  E116               	bnz	l5554
  9088  004F96  500E               	movf	get_ldnumber@tt+1,w,c
  9089  004F98  1808               	xorwf	get_ldnumber@tp+1,w,c
  9090  004F9A  A4D8               	btfss	status,2,c
  9091  004F9C  D012               	goto	l5554
  9092                           
  9093                           ;ff.c: 2135:     if (i < 1) {
  9094  004F9E  500B               	movf	get_ldnumber@i,w,c
  9095  004FA0  100C               	iorwf	get_ldnumber@i+1,w,c
  9096  004FA2  A4D8               	btfss	status,2,c
  9097  004FA4  D00E               	goto	l5554
  9098                           
  9099                           ;ff.c: 2136:      vol = (int)i;
  9100  004FA6  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  9101  004FAA  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  9102                           
  9103                           ;ff.c: 2137:      *path = ++tt;
  9104  004FAE  4A0D               	infsnz	get_ldnumber@tt,f,c
  9105  004FB0  2A0E               	incf	get_ldnumber@tt+1,f,c
  9106  004FB2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  9107  004FB6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  9108  004FBA  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  9109  004FBE  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  9110  004FC2                     l5554:
  9111                           
  9112                           ;ff.c: 2156:    return vol;
  9113  004FC2  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  9114  004FC6  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  9115  004FCA  0012               	return	
  9116  004FCC                     l5558:
  9117                           
  9118                           ;ff.c: 2161:   vol = 0;
  9119  004FCC  0E00               	movlw	0
  9120  004FCE  6E0A               	movwf	get_ldnumber@vol+1,c
  9121  004FD0  0E00               	movlw	0
  9122  004FD2  6E09               	movwf	get_ldnumber@vol,c
  9123  004FD4  D7F6               	goto	l5554
  9124  004FD6                     __end_of_get_ldnumber:
  9125                           	opt callstack 0
  9126                           
  9127 ;; *************** function _disk_initialize *****************
  9128 ;; Defined at:
  9129 ;;		line 296 in file "diskio.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  pdrv            1    wreg     unsigned char 
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;  pdrv            1   17[COMRAM] unsigned char 
  9134 ;;  ocr             4   18[COMRAM] unsigned char [4]
  9135 ;;  tmr             2   26[COMRAM] unsigned short 
  9136 ;;  n               1   28[COMRAM] unsigned char 
  9137 ;;  ty              1   25[COMRAM] unsigned char 
  9138 ;;  cmd             1   24[COMRAM] unsigned char 
  9139 ;; Return value:  Size  Location     Type
  9140 ;;                  1    wreg      unsigned char 
  9141 ;; Registers used:
  9142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0
  9149 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9150 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9151 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9152 ;;Total ram usage:       13 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    5
  9155 ;; This function calls:
  9156 ;;		_SPI1_Exchange8bit
  9157 ;;		_SPI1_Initialize
  9158 ;;		_SPI1_Open
  9159 ;;		_deselect
  9160 ;;		_send_cmd
  9161 ;; This function is called by:
  9162 ;;		_find_volume
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text24
  9167  00412E                     __ptext24:
  9168                           	opt callstack 0
  9169  00412E                     _disk_initialize:
  9170                           	opt callstack 22
  9171                           
  9172                           ;incstack = 0
  9173                           ;disk_initialize@pdrv stored from wreg
  9174  00412E  6E12               	movwf	disk_initialize@pdrv,c
  9175                           
  9176                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  9177  004130  5012               	movf	disk_initialize@pdrv,w,c
  9178  004132  B4D8               	btfsc	status,2,c
  9179  004134  D002               	goto	l70
  9180  004136  0E01               	movlw	1
  9181  004138  0012               	return	
  9182  00413A                     l70:
  9183                           
  9184                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  9185  00413A  0100               	movlb	0	; () banked
  9186  00413C  A3F2               	btfss	_Stat& (0+255),1,b
  9187  00413E  D003               	goto	l5158
  9188  004140                     u6250:
  9189  004140  0100               	movlb	0	; () banked
  9190  004142  51F2               	movf	_Stat& (0+255),w,b
  9191  004144  0012               	return	
  9192  004146                     l5158:
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;diskio.c: 308:  SPI1_Initialize();
  9196  004146  ECC2  F02E         	call	_SPI1_Initialize	;wreg free
  9197                           
  9198                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  9199  00414A  0E0A               	movlw	10
  9200  00414C  6E1D               	movwf	disk_initialize@n,c
  9201  00414E  D004               	goto	l5166
  9202  004150                     l5162:
  9203  004150  0EFF               	movlw	255
  9204  004152  ECAB  F02E         	call	_SPI1_Exchange8bit
  9205  004156  061D               	decf	disk_initialize@n,f,c
  9206  004158                     l5166:
  9207  004158  501D               	movf	disk_initialize@n,w,c
  9208  00415A  A4D8               	btfss	status,2,c
  9209  00415C  D7F9               	goto	l5162
  9210                           
  9211                           ;diskio.c: 311:  ty = 0;
  9212  00415E  0E00               	movlw	0
  9213  004160  6E1A               	movwf	disk_initialize@ty,c
  9214                           
  9215                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  9216  004162  0E00               	movlw	0
  9217  004164  6E0B               	movwf	send_cmd@arg,c
  9218  004166  0E00               	movlw	0
  9219  004168  6E0C               	movwf	send_cmd@arg+1,c
  9220  00416A  0E00               	movlw	0
  9221  00416C  6E0D               	movwf	send_cmd@arg+2,c
  9222  00416E  0E00               	movlw	0
  9223  004170  6E0E               	movwf	send_cmd@arg+3,c
  9224  004172  0E00               	movlw	0
  9225  004174  ECB0  F02D         	call	_send_cmd
  9226  004178  06E8               	decf	wreg,f,c
  9227  00417A  A4D8               	btfss	status,2,c
  9228  00417C  D0C1               	goto	l92
  9229                           
  9230                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  9231  00417E  0EAA               	movlw	170
  9232  004180  6E0B               	movwf	send_cmd@arg,c
  9233  004182  0E01               	movlw	1
  9234  004184  6E0C               	movwf	send_cmd@arg+1,c
  9235  004186  0E00               	movlw	0
  9236  004188  6E0D               	movwf	send_cmd@arg+2,c
  9237  00418A  0E00               	movlw	0
  9238  00418C  6E0E               	movwf	send_cmd@arg+3,c
  9239  00418E  0E08               	movlw	8
  9240  004190  ECB0  F02D         	call	_send_cmd
  9241  004194  06E8               	decf	wreg,f,c
  9242  004196  A4D8               	btfss	status,2,c
  9243  004198  D067               	goto	l5222
  9244                           
  9245                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9246  00419A  0E00               	movlw	0
  9247  00419C  6E1D               	movwf	disk_initialize@n,c
  9248  00419E                     l5180:
  9249  00419E  0E13               	movlw	low disk_initialize@ocr
  9250  0041A0  241D               	addwf	disk_initialize@n,w,c
  9251  0041A2  6ED9               	movwf	fsr2l,c
  9252  0041A4  6ADA               	clrf	fsr2h,c
  9253  0041A6  0E00               	movlw	high disk_initialize@ocr
  9254  0041A8  22DA               	addwfc	fsr2h,f,c
  9255  0041AA  0EFF               	movlw	255
  9256  0041AC  ECAB  F02E         	call	_SPI1_Exchange8bit
  9257  0041B0  6EDF               	movwf	indf2,c
  9258  0041B2  2A1D               	incf	disk_initialize@n,f,c
  9259  0041B4  0E03               	movlw	3
  9260  0041B6  641D               	cpfsgt	disk_initialize@n,c
  9261  0041B8  D7F2               	goto	l5180
  9262                           
  9263                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9264  0041BA  0415               	decf	disk_initialize@ocr+2,w,c
  9265  0041BC  A4D8               	btfss	status,2,c
  9266  0041BE  D0A0               	goto	l92
  9267  0041C0  0EAA               	movlw	170
  9268  0041C2  1816               	xorwf	disk_initialize@ocr+3,w,c
  9269  0041C4  A4D8               	btfss	status,2,c
  9270  0041C6  D09C               	goto	l92
  9271                           
  9272                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  9273  0041C8  0E03               	movlw	3
  9274  0041CA  6E1C               	movwf	disk_initialize@tmr+1,c
  9275  0041CC  0EE8               	movlw	232
  9276  0041CE  6E1B               	movwf	disk_initialize@tmr,c
  9277  0041D0  D018               	goto	l81
  9278  0041D2                     l5192:
  9279                           
  9280                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9281  0041D2  0E00               	movlw	0
  9282  0041D4  6E0B               	movwf	send_cmd@arg,c
  9283  0041D6  0E00               	movlw	0
  9284  0041D8  6E0C               	movwf	send_cmd@arg+1,c
  9285  0041DA  0E00               	movlw	0
  9286  0041DC  6E0D               	movwf	send_cmd@arg+2,c
  9287  0041DE  0E40               	movlw	64
  9288  0041E0  6E0E               	movwf	send_cmd@arg+3,c
  9289  0041E2  0EA9               	movlw	169
  9290  0041E4  ECB0  F02D         	call	_send_cmd
  9291  0041E8  0900               	iorlw	0
  9292  0041EA  B4D8               	btfsc	status,2,c
  9293  0041EC  D00E               	goto	u6330
  9294                           
  9295                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  9296  0041EE  0E03               	movlw	3
  9297  0041F0  6E11               	movwf	??_disk_initialize& (0+255),c
  9298  0041F2  0E98               	movlw	152
  9299  0041F4                     u9117:
  9300  0041F4  2EE8               	decfsz	wreg,f,c
  9301  0041F6  D7FE               	bra	u9117
  9302  0041F8  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9303  0041FA  D7FC               	bra	u9117
  9304                           
  9305                           ;diskio.c: 319:     }
  9306  0041FC  061B               	decf	disk_initialize@tmr,f,c
  9307  0041FE  A0D8               	btfss	status,0,c
  9308  004200  061C               	decf	disk_initialize@tmr+1,f,c
  9309  004202                     l81:
  9310  004202  501B               	movf	disk_initialize@tmr,w,c
  9311  004204  101C               	iorwf	disk_initialize@tmr+1,w,c
  9312  004206  A4D8               	btfss	status,2,c
  9313  004208  D7E4               	goto	l5192
  9314  00420A                     u6330:
  9315                           
  9316                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  9317  00420A  501B               	movf	disk_initialize@tmr,w,c
  9318  00420C  101C               	iorwf	disk_initialize@tmr+1,w,c
  9319  00420E  B4D8               	btfsc	status,2,c
  9320  004210  D077               	goto	l92
  9321  004212  0E00               	movlw	0
  9322  004214  6E0B               	movwf	send_cmd@arg,c
  9323  004216  0E00               	movlw	0
  9324  004218  6E0C               	movwf	send_cmd@arg+1,c
  9325  00421A  0E00               	movlw	0
  9326  00421C  6E0D               	movwf	send_cmd@arg+2,c
  9327  00421E  0E00               	movlw	0
  9328  004220  6E0E               	movwf	send_cmd@arg+3,c
  9329  004222  0E3A               	movlw	58
  9330  004224  ECB0  F02D         	call	_send_cmd
  9331  004228  0900               	iorlw	0
  9332  00422A  A4D8               	btfss	status,2,c
  9333  00422C  D069               	goto	l92
  9334                           
  9335                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9336  00422E  0E00               	movlw	0
  9337  004230  6E1D               	movwf	disk_initialize@n,c
  9338  004232                     l5210:
  9339  004232  0E13               	movlw	low disk_initialize@ocr
  9340  004234  241D               	addwf	disk_initialize@n,w,c
  9341  004236  6ED9               	movwf	fsr2l,c
  9342  004238  6ADA               	clrf	fsr2h,c
  9343  00423A  0E00               	movlw	high disk_initialize@ocr
  9344  00423C  22DA               	addwfc	fsr2h,f,c
  9345  00423E  0EFF               	movlw	255
  9346  004240  ECAB  F02E         	call	_SPI1_Exchange8bit
  9347  004244  6EDF               	movwf	indf2,c
  9348  004246  2A1D               	incf	disk_initialize@n,f,c
  9349  004248  0E03               	movlw	3
  9350  00424A  641D               	cpfsgt	disk_initialize@n,c
  9351  00424C  D7F2               	goto	l5210
  9352                           
  9353                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9354  00424E  BC13               	btfsc	disk_initialize@ocr,6,c
  9355  004250  D004               	goto	l5218
  9356  004252  0E00               	movlw	0
  9357  004254  6E18               	movwf	_disk_initialize$134+1,c
  9358  004256  0E04               	movlw	4
  9359  004258  D003               	goto	L7
  9360  00425A                     l5218:
  9361  00425A  0E00               	movlw	0
  9362  00425C  6E18               	movwf	_disk_initialize$134+1,c
  9363  00425E  0E0C               	movlw	12
  9364  004260                     L7:
  9365  004260  6E17               	movwf	_disk_initialize$134,c
  9366  004262  C017  F01A         	movff	_disk_initialize$134,disk_initialize@ty
  9367  004266  D04C               	goto	l92
  9368  004268                     l5222:
  9369                           
  9370                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  9371  004268  0E00               	movlw	0
  9372  00426A  6E0B               	movwf	send_cmd@arg,c
  9373  00426C  0E00               	movlw	0
  9374  00426E  6E0C               	movwf	send_cmd@arg+1,c
  9375  004270  0E00               	movlw	0
  9376  004272  6E0D               	movwf	send_cmd@arg+2,c
  9377  004274  0E00               	movlw	0
  9378  004276  6E0E               	movwf	send_cmd@arg+3,c
  9379  004278  0EA9               	movlw	169
  9380  00427A  ECB0  F02D         	call	_send_cmd
  9381  00427E  6E11               	movwf	??_disk_initialize& (0+255),c
  9382  004280  0E02               	movlw	2
  9383  004282  6011               	cpfslt	??_disk_initialize,c
  9384  004284  D004               	goto	l5226
  9385                           
  9386                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  9387  004286  0E02               	movlw	2
  9388  004288  6E1A               	movwf	disk_initialize@ty,c
  9389  00428A  0EA9               	movlw	169
  9390  00428C  D003               	goto	L8
  9391  00428E                     l5226:
  9392                           
  9393                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  9394  00428E  0E01               	movlw	1
  9395  004290  6E1A               	movwf	disk_initialize@ty,c
  9396  004292  0E01               	movlw	1
  9397  004294                     L8:
  9398  004294  6E19               	movwf	disk_initialize@cmd,c
  9399                           
  9400                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  9401                           
  9402                           ;diskio.c: 330:    }
  9403  004296  0E03               	movlw	3
  9404  004298  6E1C               	movwf	disk_initialize@tmr+1,c
  9405  00429A  0EE8               	movlw	232
  9406  00429C  6E1B               	movwf	disk_initialize@tmr,c
  9407  00429E  D018               	goto	l95
  9408  0042A0                     l5228:
  9409                           
  9410                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  9411  0042A0  0E00               	movlw	0
  9412  0042A2  6E0B               	movwf	send_cmd@arg,c
  9413  0042A4  0E00               	movlw	0
  9414  0042A6  6E0C               	movwf	send_cmd@arg+1,c
  9415  0042A8  0E00               	movlw	0
  9416  0042AA  6E0D               	movwf	send_cmd@arg+2,c
  9417  0042AC  0E00               	movlw	0
  9418  0042AE  6E0E               	movwf	send_cmd@arg+3,c
  9419  0042B0  5019               	movf	disk_initialize@cmd,w,c
  9420  0042B2  ECB0  F02D         	call	_send_cmd
  9421  0042B6  0900               	iorlw	0
  9422  0042B8  B4D8               	btfsc	status,2,c
  9423  0042BA  D00E               	goto	u6400
  9424                           
  9425                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  9426  0042BC  0E03               	movlw	3
  9427  0042BE  6E11               	movwf	??_disk_initialize& (0+255),c
  9428  0042C0  0E98               	movlw	152
  9429  0042C2                     u9127:
  9430  0042C2  2EE8               	decfsz	wreg,f,c
  9431  0042C4  D7FE               	bra	u9127
  9432  0042C6  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9433  0042C8  D7FC               	bra	u9127
  9434                           
  9435                           ;diskio.c: 334:    }
  9436  0042CA  061B               	decf	disk_initialize@tmr,f,c
  9437  0042CC  A0D8               	btfss	status,0,c
  9438  0042CE  061C               	decf	disk_initialize@tmr+1,f,c
  9439  0042D0                     l95:
  9440  0042D0  501B               	movf	disk_initialize@tmr,w,c
  9441  0042D2  101C               	iorwf	disk_initialize@tmr+1,w,c
  9442  0042D4  A4D8               	btfss	status,2,c
  9443  0042D6  D7E4               	goto	l5228
  9444  0042D8                     u6400:
  9445                           
  9446                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  9447  0042D8  501B               	movf	disk_initialize@tmr,w,c
  9448  0042DA  101C               	iorwf	disk_initialize@tmr+1,w,c
  9449  0042DC  B4D8               	btfsc	status,2,c
  9450  0042DE  D00E               	goto	u6420
  9451  0042E0  0E00               	movlw	0
  9452  0042E2  6E0B               	movwf	send_cmd@arg,c
  9453  0042E4  0E02               	movlw	2
  9454  0042E6  6E0C               	movwf	send_cmd@arg+1,c
  9455  0042E8  0E00               	movlw	0
  9456  0042EA  6E0D               	movwf	send_cmd@arg+2,c
  9457  0042EC  0E00               	movlw	0
  9458  0042EE  6E0E               	movwf	send_cmd@arg+3,c
  9459  0042F0  0E10               	movlw	16
  9460  0042F2  ECB0  F02D         	call	_send_cmd
  9461  0042F6  0900               	iorlw	0
  9462  0042F8  B4D8               	btfsc	status,2,c
  9463  0042FA  D002               	goto	l92
  9464  0042FC                     u6420:
  9465                           
  9466                           ;diskio.c: 336:     ty = 0;
  9467  0042FC  0E00               	movlw	0
  9468  0042FE  6E1A               	movwf	disk_initialize@ty,c
  9469  004300                     l92:
  9470                           
  9471                           ;diskio.c: 339:  CardType = ty;
  9472  004300  C01A  F0DF         	movff	disk_initialize@ty,_CardType
  9473                           
  9474                           ;diskio.c: 340:  deselect();
  9475  004304  ECCF  F02E         	call	_deselect	;wreg free
  9476                           
  9477                           ;diskio.c: 342:  if (ty) {
  9478  004308  501A               	movf	disk_initialize@ty,w,c
  9479  00430A  B4D8               	btfsc	status,2,c
  9480  00430C  D719               	goto	u6250
  9481                           
  9482                           ;diskio.c: 343:   Stat &= ~0x01;
  9483  00430E  0100               	movlb	0	; () banked
  9484  004310  91F2               	bcf	_Stat& (0+255),0,b
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;diskio.c: 344:   SPI1_Open();
  9488  004312  ECBB  F02E         	call	_SPI1_Open	;wreg free
  9489  004316  D714               	goto	u6250
  9490  004318                     __end_of_disk_initialize:
  9491                           	opt callstack 0
  9492                           
  9493 ;; *************** function _SPI1_Open *****************
  9494 ;; Defined at:
  9495 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;		None
  9498 ;; Auto vars:     Size  Location     Type
  9499 ;;		None
  9500 ;; Return value:  Size  Location     Type
  9501 ;;                  1    wreg      void 
  9502 ;; Registers used:
  9503 ;;		wreg, status,2
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9509 ;;      Params:         0       0       0       0       0       0       0       0       0
  9510 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9512 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9513 ;;Total ram usage:        0 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; This function calls:
  9516 ;;		Nothing
  9517 ;; This function is called by:
  9518 ;;		_disk_initialize
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           	psect	text25
  9523  005D76                     __ptext25:
  9524                           	opt callstack 0
  9525  005D76                     _SPI1_Open:
  9526                           	opt callstack 26
  9527                           
  9528                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  9529                           
  9530                           ;incstack = 0
  9531  005D76  0E40               	movlw	64
  9532  005D78  6EC7               	movwf	4039,c	;volatile
  9533                           
  9534                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  9535  005D7A  0E20               	movlw	32
  9536  005D7C  6EC6               	movwf	4038,c	;volatile
  9537                           
  9538                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  9539  005D7E  0E00               	movlw	0
  9540  005D80  6EC8               	movwf	4040,c	;volatile
  9541  005D82  0012               	return		;funcret
  9542  005D84                     __end_of_SPI1_Open:
  9543                           	opt callstack 0
  9544                           
  9545 ;; *************** function _check_fs *****************
  9546 ;; Defined at:
  9547 ;;		line 2175 in file "ff.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  fs              2   58[COMRAM] PTR struct .
  9550 ;;		 -> FatFs(558), NULL(0), 
  9551 ;;  sect            4   60[COMRAM] unsigned long 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      unsigned char 
  9556 ;; Registers used:
  9557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9563 ;;      Params:         6       0       0       0       0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9565 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9566 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9567 ;;Total ram usage:       10 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    8
  9570 ;; This function calls:
  9571 ;;		_move_window
  9572 ;; This function is called by:
  9573 ;;		_find_volume
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text26
  9578  004E0C                     __ptext26:
  9579                           	opt callstack 0
  9580  004E0C                     _check_fs:
  9581                           	opt callstack 19
  9582                           
  9583                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  9584                           
  9585                           ;incstack = 0
  9586  004E0C  EE20 F004          	lfsr	2,4
  9587  004E10  503B               	movf	check_fs@fs,w,c
  9588  004E12  26D9               	addwf	fsr2l,f,c
  9589  004E14  503C               	movf	check_fs@fs+1,w,c
  9590  004E16  22DA               	addwfc	fsr2h,f,c
  9591  004E18  0E00               	movlw	0
  9592  004E1A  6EDF               	movwf	indf2,c
  9593  004E1C  EE20 F02A          	lfsr	2,42
  9594  004E20  503B               	movf	check_fs@fs,w,c
  9595  004E22  26D9               	addwf	fsr2l,f,c
  9596  004E24  503C               	movf	check_fs@fs+1,w,c
  9597  004E26  22DA               	addwfc	fsr2h,f,c
  9598  004E28  0EFF               	movlw	255
  9599  004E2A  6EDE               	movwf	postinc2,c
  9600  004E2C  0EFF               	movlw	255
  9601  004E2E  6EDE               	movwf	postinc2,c
  9602  004E30  0EFF               	movlw	255
  9603  004E32  6EDE               	movwf	postinc2,c
  9604  004E34  0EFF               	movlw	255
  9605  004E36  6EDD               	movwf	postdec2,c
  9606                           
  9607                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  9608  004E38  C03B  F030         	movff	check_fs@fs,move_window@fs
  9609  004E3C  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9610  004E40  C03D  F032         	movff	check_fs@sect,move_window@sector
  9611  004E44  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9612  004E48  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9613  004E4C  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9614  004E50  EC96  F02A         	call	_move_window	;wreg free
  9615  004E54  0900               	iorlw	0
  9616  004E56  B4D8               	btfsc	status,2,c
  9617  004E58  D002               	goto	l5572
  9618                           
  9619                           ;ff.c: 2182:   return 3;
  9620  004E5A  0E03               	movlw	3
  9621  004E5C  0012               	return	
  9622  004E5E                     l5572:
  9623                           
  9624                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9625  004E5E  EE22 F02C          	lfsr	2,556
  9626  004E62  503B               	movf	check_fs@fs,w,c
  9627  004E64  26D9               	addwf	fsr2l,f,c
  9628  004E66  503C               	movf	check_fs@fs+1,w,c
  9629  004E68  22DA               	addwfc	fsr2h,f,c
  9630  004E6A  0E55               	movlw	85
  9631  004E6C  18DE               	xorwf	postinc2,w,c
  9632  004E6E  E104               	bnz	u7020
  9633  004E70  0EAA               	movlw	170
  9634  004E72  18DE               	xorwf	postinc2,w,c
  9635  004E74  B4D8               	btfsc	status,2,c
  9636  004E76  D002               	goto	l5578
  9637  004E78                     u7020:
  9638                           
  9639                           ;ff.c: 2185:   return 2;
  9640  004E78  0E02               	movlw	2
  9641  004E7A  0012               	return	
  9642  004E7C                     l5578:
  9643                           
  9644                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9645  004E7C  EE20 F064          	lfsr	2,100
  9646  004E80  503B               	movf	check_fs@fs,w,c
  9647  004E82  26D9               	addwf	fsr2l,f,c
  9648  004E84  503C               	movf	check_fs@fs+1,w,c
  9649  004E86  22DA               	addwfc	fsr2h,f,c
  9650  004E88  0EFF               	movlw	255
  9651  004E8A  14DE               	andwf	postinc2,w,c
  9652  004E8C  6E41               	movwf	??_check_fs& (0+255),c
  9653  004E8E  0EFF               	movlw	255
  9654  004E90  14DE               	andwf	postinc2,w,c
  9655  004E92  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9656  004E94  0EFF               	movlw	255
  9657  004E96  14DE               	andwf	postinc2,w,c
  9658  004E98  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9659  004E9A  0E00               	movlw	0
  9660  004E9C  14DE               	andwf	postinc2,w,c
  9661  004E9E  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9662  004EA0  0E46               	movlw	70
  9663  004EA2  1841               	xorwf	??_check_fs,w,c
  9664  004EA4  E10A               	bnz	l5584
  9665  004EA6  0E41               	movlw	65
  9666  004EA8  1842               	xorwf	??_check_fs+1,w,c
  9667  004EAA  E107               	bnz	l5584
  9668  004EAC  0E54               	movlw	84
  9669  004EAE  1843               	xorwf	??_check_fs+2,w,c
  9670  004EB0  1044               	iorwf	??_check_fs+3,w,c
  9671  004EB2  A4D8               	btfss	status,2,c
  9672  004EB4  D002               	goto	l5584
  9673  004EB6                     u7030:
  9674                           
  9675                           ;ff.c: 2188:   return 0;
  9676  004EB6  0E00               	movlw	0
  9677  004EB8  0012               	return	
  9678  004EBA                     l5584:
  9679                           
  9680                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9681  004EBA  EE20 F080          	lfsr	2,128
  9682  004EBE  503B               	movf	check_fs@fs,w,c
  9683  004EC0  26D9               	addwf	fsr2l,f,c
  9684  004EC2  503C               	movf	check_fs@fs+1,w,c
  9685  004EC4  22DA               	addwfc	fsr2h,f,c
  9686  004EC6  0EFF               	movlw	255
  9687  004EC8  14DE               	andwf	postinc2,w,c
  9688  004ECA  6E41               	movwf	??_check_fs& (0+255),c
  9689  004ECC  0EFF               	movlw	255
  9690  004ECE  14DE               	andwf	postinc2,w,c
  9691  004ED0  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9692  004ED2  0EFF               	movlw	255
  9693  004ED4  14DE               	andwf	postinc2,w,c
  9694  004ED6  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9695  004ED8  0E00               	movlw	0
  9696  004EDA  14DE               	andwf	postinc2,w,c
  9697  004EDC  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9698  004EDE  0E46               	movlw	70
  9699  004EE0  1841               	xorwf	??_check_fs,w,c
  9700  004EE2  E108               	bnz	l5590
  9701  004EE4  0E41               	movlw	65
  9702  004EE6  1842               	xorwf	??_check_fs+1,w,c
  9703  004EE8  E105               	bnz	l5590
  9704  004EEA  0E54               	movlw	84
  9705  004EEC  1843               	xorwf	??_check_fs+2,w,c
  9706  004EEE  1044               	iorwf	??_check_fs+3,w,c
  9707  004EF0  B4D8               	btfsc	status,2,c
  9708  004EF2  D7E1               	goto	u7030
  9709  004EF4                     l5590:
  9710                           
  9711                           ;ff.c: 2192:  return 1;
  9712  004EF4  0E01               	movlw	1
  9713  004EF6  0012               	return		;funcret
  9714  004EF8                     __end_of_check_fs:
  9715                           	opt callstack 0
  9716                           
  9717 ;; *************** function _f_lseek *****************
  9718 ;; Defined at:
  9719 ;;		line 3033 in file "ff.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  fp              2   13[BANK0 ] PTR struct .
  9722 ;;		 -> Fil(32), 
  9723 ;;  ofs             4   15[BANK0 ] unsigned long 
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  clst            4   48[BANK0 ] unsigned long 
  9726 ;;  bcs             4   44[BANK0 ] unsigned long 
  9727 ;;  nsect           4   40[BANK0 ] unsigned long 
  9728 ;;  ifptr           4   35[BANK0 ] unsigned long 
  9729 ;;  res             1   39[BANK0 ] enum E93
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  1    wreg      enum E93
  9732 ;; Registers used:
  9733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9739 ;;      Params:         0       6       0       0       0       0       0       0       0
  9740 ;;      Locals:         0      17       0       0       0       0       0       0       0
  9741 ;;      Temps:          0      16       0       0       0       0       0       0       0
  9742 ;;      Totals:         0      39       0       0       0       0       0       0       0
  9743 ;;Total ram usage:       39 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:   10
  9746 ;; This function calls:
  9747 ;;		___lldiv
  9748 ;;		_clust2sect
  9749 ;;		_create_chain
  9750 ;;		_get_fat
  9751 ;;		_validate
  9752 ;; This function is called by:
  9753 ;;		_guardar
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           	psect	text27
  9758  00192E                     __ptext27:
  9759                           	opt callstack 0
  9760  00192E                     _f_lseek:
  9761                           	opt callstack 19
  9762                           
  9763                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  9764                           
  9765                           ;incstack = 0
  9766  00192E  C06D  F002         	movff	f_lseek@fp,validate@obj
  9767  001932  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9768  001936  ECE9  F02A         	call	_validate	;wreg free
  9769  00193A  0100               	movlb	0	; () banked
  9770  00193C  6F87               	movwf	f_lseek@res& (0+255),b
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;ff.c: 3046:  if (res != FR_OK) return res;
  9774  00193E  5187               	movf	f_lseek@res& (0+255),w,b
  9775  001940  B4D8               	btfsc	status,2,c
  9776  001942  D002               	goto	l6500
  9777  001944                     u8630:
  9778                           
  9779                           ; BSR set to: 0
  9780  001944  5187               	movf	f_lseek@res& (0+255),w,b
  9781  001946  0012               	return	
  9782  001948                     l6500:
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;ff.c: 3047:  if (fp->err)
  9786  001948  EE20 F005          	lfsr	2,5
  9787  00194C  516D               	movf	f_lseek@fp& (0+255),w,b
  9788  00194E  26D9               	addwf	fsr2l,f,c
  9789  001950  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9790  001952  22DA               	addwfc	fsr2h,f,c
  9791  001954  50DF               	movf	indf2,w,c
  9792  001956  B4D8               	btfsc	status,2,c
  9793  001958  D008               	goto	l6506
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;ff.c: 3048:   return (FRESULT)fp->err;
  9797  00195A  EE20 F005          	lfsr	2,5
  9798  00195E  516D               	movf	f_lseek@fp& (0+255),w,b
  9799  001960  26D9               	addwf	fsr2l,f,c
  9800  001962  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9801  001964  22DA               	addwfc	fsr2h,f,c
  9802  001966  50DF               	movf	indf2,w,c
  9803  001968  0012               	return	
  9804  00196A                     l6506:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  9808  00196A  EE20 F00A          	lfsr	2,10
  9809  00196E  516D               	movf	f_lseek@fp& (0+255),w,b
  9810  001970  26D9               	addwf	fsr2l,f,c
  9811  001972  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9812  001974  22DA               	addwfc	fsr2h,f,c
  9813  001976  516F               	movf	f_lseek@ofs& (0+255),w,b
  9814  001978  5CDE               	subwf	postinc2,w,c
  9815  00197A  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9816  00197C  58DE               	subwfb	postinc2,w,c
  9817  00197E  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9818  001980  58DE               	subwfb	postinc2,w,c
  9819  001982  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9820  001984  58DE               	subwfb	postinc2,w,c
  9821  001986  B0D8               	btfsc	status,0,c
  9822  001988  D016               	goto	l667
  9823                           
  9824                           ; BSR set to: 0
  9825  00198A  EE20 F004          	lfsr	2,4
  9826  00198E  516D               	movf	f_lseek@fp& (0+255),w,b
  9827  001990  26D9               	addwf	fsr2l,f,c
  9828  001992  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9829  001994  22DA               	addwfc	fsr2h,f,c
  9830  001996  B2DF               	btfsc	indf2,1,c
  9831  001998  D00E               	goto	l667
  9832                           
  9833                           ; BSR set to: 0
  9834                           ;ff.c: 3111:    ) ofs = fp->fsize;
  9835  00199A  EE20 F00A          	lfsr	2,10
  9836  00199E  516D               	movf	f_lseek@fp& (0+255),w,b
  9837  0019A0  26D9               	addwf	fsr2l,f,c
  9838  0019A2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9839  0019A4  22DA               	addwfc	fsr2h,f,c
  9840  0019A6  CFDE F06F          	movff	postinc2,f_lseek@ofs
  9841  0019AA  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  9842  0019AE  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  9843  0019B2  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  9844  0019B6                     l667:
  9845                           
  9846                           ; BSR set to: 0
  9847                           ;ff.c: 3113:   ifptr = fp->fptr;
  9848  0019B6  EE20 F006          	lfsr	2,6
  9849  0019BA  516D               	movf	f_lseek@fp& (0+255),w,b
  9850  0019BC  26D9               	addwf	fsr2l,f,c
  9851  0019BE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9852  0019C0  22DA               	addwfc	fsr2h,f,c
  9853  0019C2  CFDE F083          	movff	postinc2,f_lseek@ifptr
  9854  0019C6  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  9855  0019CA  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  9856  0019CE  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  9857                           
  9858                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  9859  0019D2  0E00               	movlw	0
  9860  0019D4  6F88               	movwf	f_lseek@nsect& (0+255),b
  9861  0019D6  0E00               	movlw	0
  9862  0019D8  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  9863  0019DA  0E00               	movlw	0
  9864  0019DC  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  9865  0019DE  0E00               	movlw	0
  9866  0019E0  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  9867  0019E2  EE20 F006          	lfsr	2,6
  9868  0019E6  516D               	movf	f_lseek@fp& (0+255),w,b
  9869  0019E8  26D9               	addwf	fsr2l,f,c
  9870  0019EA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9871  0019EC  22DA               	addwfc	fsr2h,f,c
  9872  0019EE  C088  FFDE         	movff	f_lseek@nsect,postinc2
  9873  0019F2  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  9874  0019F6  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  9875  0019FA  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;ff.c: 3115:   if (ofs) {
  9879  0019FE  516F               	movf	f_lseek@ofs& (0+255),w,b
  9880  001A00  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  9881  001A02  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  9882  001A04  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  9883  001A06  B4D8               	btfsc	status,2,c
  9884  001A08  D22D               	goto	l6600
  9885                           
  9886                           ; BSR set to: 0
  9887                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  9888  001A0A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9889  001A0E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9890  001A12  EE10 F002          	lfsr	1,2
  9891  001A16  50DE               	movf	postinc2,w,c
  9892  001A18  26E1               	addwf	fsr1l,f,c
  9893  001A1A  50DD               	movf	postdec2,w,c
  9894  001A1C  22E2               	addwfc	fsr1h,f,c
  9895  001A1E  50E7               	movf	indf1,w,c
  9896  001A20  6F73               	movwf	??_f_lseek& (0+255),b
  9897  001A22  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  9898  001A26  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  9899  001A28  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  9900  001A2A  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  9901  001A2C  0E09               	movlw	9
  9902  001A2E                     u8685:
  9903  001A2E  90D8               	bcf	status,0,c
  9904  001A30  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  9905  001A32  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  9906  001A34  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  9907  001A36  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  9908  001A38  2EE8               	decfsz	wreg,f,c
  9909  001A3A  D7F9               	goto	u8685
  9910  001A3C  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  9911  001A40  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  9912  001A44  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  9913  001A48  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;ff.c: 3117:    if (ifptr > 0 &&
  9917  001A4C  5183               	movf	f_lseek@ifptr& (0+255),w,b
  9918  001A4E  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  9919  001A50  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  9920  001A52  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  9921  001A54  B4D8               	btfsc	status,2,c
  9922  001A56  D097               	goto	l6522
  9923                           
  9924                           ; BSR set to: 0
  9925  001A58  0EFF               	movlw	255
  9926  001A5A  256F               	addwf	f_lseek@ofs& (0+255),w,b
  9927  001A5C  6E01               	movwf	___lldiv@dividend,c
  9928  001A5E  0EFF               	movlw	255
  9929  001A60  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  9930  001A62  6E02               	movwf	___lldiv@dividend+1,c
  9931  001A64  0EFF               	movlw	255
  9932  001A66  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  9933  001A68  6E03               	movwf	___lldiv@dividend+2,c
  9934  001A6A  0EFF               	movlw	255
  9935  001A6C  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  9936  001A6E  6E04               	movwf	___lldiv@dividend+3,c
  9937  001A70  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9938  001A74  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9939  001A78  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9940  001A7C  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9941  001A80  EC33  F02B         	call	___lldiv	;wreg free
  9942  001A84  C001  F073         	movff	?___lldiv,??_f_lseek
  9943  001A88  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  9944  001A8C  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  9945  001A90  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  9946  001A94  0EFF               	movlw	255
  9947  001A96  0100               	movlb	0	; () banked
  9948  001A98  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  9949  001A9A  6E01               	movwf	___lldiv@dividend,c
  9950  001A9C  0EFF               	movlw	255
  9951  001A9E  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  9952  001AA0  6E02               	movwf	___lldiv@dividend+1,c
  9953  001AA2  0EFF               	movlw	255
  9954  001AA4  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  9955  001AA6  6E03               	movwf	___lldiv@dividend+2,c
  9956  001AA8  0EFF               	movlw	255
  9957  001AAA  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  9958  001AAC  6E04               	movwf	___lldiv@dividend+3,c
  9959  001AAE  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9960  001AB2  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9961  001AB6  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9962  001ABA  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9963  001ABE  EC33  F02B         	call	___lldiv	;wreg free
  9964  001AC2  5001               	movf	?___lldiv,w,c
  9965  001AC4  0100               	movlb	0	; () banked
  9966  001AC6  5D73               	subwf	??_f_lseek& (0+255),w,b
  9967  001AC8  5002               	movf	?___lldiv+1,w,c
  9968  001ACA  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  9969  001ACC  5003               	movf	?___lldiv+2,w,c
  9970  001ACE  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  9971  001AD0  5004               	movf	?___lldiv+3,w,c
  9972  001AD2  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  9973  001AD4  A0D8               	btfss	status,0,c
  9974  001AD6  D057               	goto	l6522
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  9978  001AD8  0EFF               	movlw	255
  9979  001ADA  258C               	addwf	f_lseek@bcs& (0+255),w,b
  9980  001ADC  6F73               	movwf	??_f_lseek& (0+255),b
  9981  001ADE  0EFF               	movlw	255
  9982  001AE0  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  9983  001AE2  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  9984  001AE4  0EFF               	movlw	255
  9985  001AE6  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  9986  001AE8  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  9987  001AEA  0EFF               	movlw	255
  9988  001AEC  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  9989  001AEE  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  9990  001AF0  1D73               	comf	??_f_lseek& (0+255),w,b
  9991  001AF2  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  9992  001AF4  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  9993  001AF6  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  9994  001AF8  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  9995  001AFA  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  9996  001AFC  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  9997  001AFE  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  9998  001B00  0EFF               	movlw	255
  9999  001B02  2583               	addwf	f_lseek@ifptr& (0+255),w,b
 10000  001B04  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
 10001  001B06  0EFF               	movlw	255
 10002  001B08  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
 10003  001B0A  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
 10004  001B0C  0EFF               	movlw	255
 10005  001B0E  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
 10006  001B10  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
 10007  001B12  0EFF               	movlw	255
 10008  001B14  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
 10009  001B16  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
 10010  001B18  5177               	movf	(??_f_lseek+4)& (0+255),w,b
 10011  001B1A  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
 10012  001B1C  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
 10013  001B1E  5178               	movf	(??_f_lseek+5)& (0+255),w,b
 10014  001B20  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
 10015  001B22  6F80               	movwf	(??_f_lseek+13)& (0+255),b
 10016  001B24  5179               	movf	(??_f_lseek+6)& (0+255),w,b
 10017  001B26  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
 10018  001B28  6F81               	movwf	(??_f_lseek+14)& (0+255),b
 10019  001B2A  517A               	movf	(??_f_lseek+7)& (0+255),w,b
 10020  001B2C  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
 10021  001B2E  6F82               	movwf	(??_f_lseek+15)& (0+255),b
 10022  001B30  EE20 F006          	lfsr	2,6
 10023  001B34  516D               	movf	f_lseek@fp& (0+255),w,b
 10024  001B36  26D9               	addwf	fsr2l,f,c
 10025  001B38  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10026  001B3A  22DA               	addwfc	fsr2h,f,c
 10027  001B3C  C07F  FFDE         	movff	??_f_lseek+12,postinc2
 10028  001B40  C080  FFDE         	movff	??_f_lseek+13,postinc2
 10029  001B44  C081  FFDE         	movff	??_f_lseek+14,postinc2
 10030  001B48  C082  FFDE         	movff	??_f_lseek+15,postinc2
 10031                           
 10032                           ;ff.c: 3120:     ofs -= fp->fptr;
 10033  001B4C  EE20 F006          	lfsr	2,6
 10034  001B50  516D               	movf	f_lseek@fp& (0+255),w,b
 10035  001B52  26D9               	addwf	fsr2l,f,c
 10036  001B54  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10037  001B56  22DA               	addwfc	fsr2h,f,c
 10038  001B58  50DE               	movf	postinc2,w,c
 10039  001B5A  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10040  001B5C  50DE               	movf	postinc2,w,c
 10041  001B5E  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10042  001B60  50DE               	movf	postinc2,w,c
 10043  001B62  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10044  001B64  50DD               	movf	postdec2,w,c
 10045  001B66  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10046                           
 10047                           ;ff.c: 3121:     clst = fp->clust;
 10048  001B68  EE20 F012          	lfsr	2,18
 10049  001B6C  516D               	movf	f_lseek@fp& (0+255),w,b
 10050  001B6E  26D9               	addwf	fsr2l,f,c
 10051  001B70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10052  001B72  22DA               	addwfc	fsr2h,f,c
 10053  001B74  CFDE F090          	movff	postinc2,f_lseek@clst
 10054  001B78  CFDE F091          	movff	postinc2,f_lseek@clst+1
 10055  001B7C  CFDE F092          	movff	postinc2,f_lseek@clst+2
 10056  001B80  CFDE F093          	movff	postinc2,f_lseek@clst+3
 10057                           
 10058                           ;ff.c: 3122:    } else {
 10059  001B84  D06E               	goto	l6546
 10060  001B86                     l6522:
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;ff.c: 3123:     clst = fp->sclust;
 10064  001B86  EE20 F00E          	lfsr	2,14
 10065  001B8A  516D               	movf	f_lseek@fp& (0+255),w,b
 10066  001B8C  26D9               	addwf	fsr2l,f,c
 10067  001B8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10068  001B90  22DA               	addwfc	fsr2h,f,c
 10069  001B92  CFDE F090          	movff	postinc2,f_lseek@clst
 10070  001B96  CFDE F091          	movff	postinc2,f_lseek@clst+1
 10071  001B9A  CFDE F092          	movff	postinc2,f_lseek@clst+2
 10072  001B9E  CFDE F093          	movff	postinc2,f_lseek@clst+3
 10073                           
 10074                           ; BSR set to: 0
 10075                           ;ff.c: 3125:     if (clst == 0) {
 10076  001BA2  5190               	movf	f_lseek@clst& (0+255),w,b
 10077  001BA4  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10078  001BA6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10079  001BA8  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10080  001BAA  A4D8               	btfss	status,2,c
 10081  001BAC  D04C               	goto	l671
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
 10085  001BAE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10086  001BB2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10087  001BB6  CFDE F056          	movff	postinc2,create_chain@fs
 10088  001BBA  CFDD F057          	movff	postdec2,create_chain@fs+1
 10089  001BBE  0E00               	movlw	0
 10090  001BC0  6E58               	movwf	create_chain@clst,c
 10091  001BC2  0E00               	movlw	0
 10092  001BC4  6E59               	movwf	create_chain@clst+1,c
 10093  001BC6  0E00               	movlw	0
 10094  001BC8  6E5A               	movwf	create_chain@clst+2,c
 10095  001BCA  0E00               	movlw	0
 10096  001BCC  6E5B               	movwf	create_chain@clst+3,c
 10097  001BCE  EC77  F01C         	call	_create_chain	;wreg free
 10098  001BD2  C056  F090         	movff	?_create_chain,f_lseek@clst
 10099  001BD6  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
 10100  001BDA  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
 10101  001BDE  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
 10102                           
 10103                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10104  001BE2  0100               	movlb	0	; () banked
 10105  001BE4  0590               	decf	f_lseek@clst& (0+255),w,b
 10106  001BE6  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10107  001BE8  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10108  001BEA  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10109  001BEC  A4D8               	btfss	status,2,c
 10110  001BEE  D00A               	goto	l6536
 10111  001BF0                     u8720:
 10112                           
 10113                           ; BSR set to: 0
 10114  001BF0  EE20 F005          	lfsr	2,5
 10115  001BF4  516D               	movf	f_lseek@fp& (0+255),w,b
 10116  001BF6  26D9               	addwf	fsr2l,f,c
 10117  001BF8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10118  001BFA  22DA               	addwfc	fsr2h,f,c
 10119  001BFC  0E02               	movlw	2
 10120  001BFE  6EDF               	movwf	indf2,c
 10121                           
 10122                           ; BSR set to: 0
 10123  001C00  0E02               	movlw	2
 10124  001C02  0012               	return	
 10125  001C04                     l6536:
 10126                           
 10127                           ; BSR set to: 0
 10128                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10129  001C04  2990               	incf	f_lseek@clst& (0+255),w,b
 10130  001C06  E111               	bnz	l6544
 10131  001C08  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
 10132  001C0A  E10F               	bnz	l6544
 10133  001C0C  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
 10134  001C0E  E10D               	bnz	l6544
 10135  001C10  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
 10136  001C12  A4D8               	btfss	status,2,c
 10137  001C14  D00A               	goto	l6544
 10138  001C16                     u8730:
 10139                           
 10140                           ; BSR set to: 0
 10141  001C16  EE20 F005          	lfsr	2,5
 10142  001C1A  516D               	movf	f_lseek@fp& (0+255),w,b
 10143  001C1C  26D9               	addwf	fsr2l,f,c
 10144  001C1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10145  001C20  22DA               	addwfc	fsr2h,f,c
 10146  001C22  0E01               	movlw	1
 10147  001C24  6EDF               	movwf	indf2,c
 10148                           
 10149                           ; BSR set to: 0
 10150  001C26  0E01               	movlw	1
 10151  001C28  0012               	return	
 10152  001C2A                     l6544:
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;ff.c: 3129:      fp->sclust = clst;
 10156  001C2A  EE20 F00E          	lfsr	2,14
 10157  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
 10158  001C30  26D9               	addwf	fsr2l,f,c
 10159  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10160  001C34  22DA               	addwfc	fsr2h,f,c
 10161  001C36  C090  FFDE         	movff	f_lseek@clst,postinc2
 10162  001C3A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10163  001C3E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10164  001C42  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10165  001C46                     l671:
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;ff.c: 3132:     fp->clust = clst;
 10169  001C46  EE20 F012          	lfsr	2,18
 10170  001C4A  516D               	movf	f_lseek@fp& (0+255),w,b
 10171  001C4C  26D9               	addwf	fsr2l,f,c
 10172  001C4E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10173  001C50  22DA               	addwfc	fsr2h,f,c
 10174  001C52  C090  FFDE         	movff	f_lseek@clst,postinc2
 10175  001C56  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10176  001C5A  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10177  001C5E  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10178  001C62                     l6546:
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;ff.c: 3134:    if (clst != 0) {
 10182  001C62  5190               	movf	f_lseek@clst& (0+255),w,b
 10183  001C64  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10184  001C66  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10185  001C68  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10186  001C6A  A4D8               	btfss	status,2,c
 10187  001C6C  D097               	goto	l6582
 10188  001C6E  D0FA               	goto	l6600
 10189  001C70                     l6550:
 10190                           
 10191                           ; BSR set to: 0
 10192                           ;ff.c: 3137:      if (fp->flag & 0x02) {
 10193  001C70  EE20 F004          	lfsr	2,4
 10194  001C74  516D               	movf	f_lseek@fp& (0+255),w,b
 10195  001C76  26D9               	addwf	fsr2l,f,c
 10196  001C78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10197  001C7A  22DA               	addwfc	fsr2h,f,c
 10198  001C7C  A2DF               	btfss	indf2,1,c
 10199  001C7E  D02A               	goto	l6558
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
 10203  001C80  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10204  001C84  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10205  001C88  CFDE F056          	movff	postinc2,create_chain@fs
 10206  001C8C  CFDD F057          	movff	postdec2,create_chain@fs+1
 10207  001C90  C090  F058         	movff	f_lseek@clst,create_chain@clst
 10208  001C94  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
 10209  001C98  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
 10210  001C9C  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
 10211  001CA0  EC77  F01C         	call	_create_chain	;wreg free
 10212  001CA4  C056  F090         	movff	?_create_chain,f_lseek@clst
 10213  001CA8  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
 10214  001CAC  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
 10215  001CB0  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
 10216                           
 10217                           ;ff.c: 3139:       if (clst == 0) {
 10218  001CB4  0100               	movlb	0	; () banked
 10219  001CB6  5190               	movf	f_lseek@clst& (0+255),w,b
 10220  001CB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10221  001CBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10222  001CBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10223  001CBE  A4D8               	btfss	status,2,c
 10224  001CC0  D023               	goto	l6560
 10225                           
 10226                           ; BSR set to: 0
 10227                           ;ff.c: 3140:        ofs = bcs; break;
 10228  001CC2  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
 10229  001CC6  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10230  001CCA  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10231  001CCE  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10232  001CD2  D06E               	goto	u8800
 10233  001CD4                     l6558:
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
 10237  001CD4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10238  001CD8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10239  001CDC  CFDE F03B          	movff	postinc2,get_fat@fs
 10240  001CE0  CFDD F03C          	movff	postdec2,get_fat@fs+1
 10241  001CE4  C090  F03D         	movff	f_lseek@clst,get_fat@clst
 10242  001CE8  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
 10243  001CEC  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
 10244  001CF0  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
 10245  001CF4  ECDB  F018         	call	_get_fat	;wreg free
 10246  001CF8  C03B  F090         	movff	?_get_fat,f_lseek@clst
 10247  001CFC  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
 10248  001D00  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
 10249  001D04  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
 10250  001D08                     l6560:
 10251                           
 10252                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10253  001D08  0100               	movlb	0	; () banked
 10254  001D0A  2990               	incf	f_lseek@clst& (0+255),w,b
 10255  001D0C  E107               	bnz	l6568
 10256  001D0E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
 10257  001D10  E105               	bnz	l6568
 10258  001D12  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
 10259  001D14  E103               	bnz	l6568
 10260  001D16  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
 10261  001D18  B4D8               	btfsc	status,2,c
 10262  001D1A  D77D               	goto	u8730
 10263  001D1C                     l6568:
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
 10267  001D1C  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
 10268  001D1E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10269  001D20  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10270  001D22  E104               	bnz	u8780
 10271  001D24  0E02               	movlw	2
 10272  001D26  5D90               	subwf	f_lseek@clst& (0+255),w,b
 10273  001D28  A0D8               	btfss	status,0,c
 10274  001D2A  D762               	goto	u8720
 10275  001D2C                     u8780:
 10276                           
 10277                           ; BSR set to: 0
 10278  001D2C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10279  001D30  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10280  001D34  EE10 F012          	lfsr	1,18
 10281  001D38  50DE               	movf	postinc2,w,c
 10282  001D3A  26E1               	addwf	fsr1l,f,c
 10283  001D3C  50DD               	movf	postdec2,w,c
 10284  001D3E  22E2               	addwfc	fsr1h,f,c
 10285  001D40  50E6               	movf	postinc1,w,c
 10286  001D42  5D90               	subwf	f_lseek@clst& (0+255),w,b
 10287  001D44  50E6               	movf	postinc1,w,c
 10288  001D46  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10289  001D48  50E6               	movf	postinc1,w,c
 10290  001D4A  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10291  001D4C  50E6               	movf	postinc1,w,c
 10292  001D4E  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10293  001D50  B0D8               	btfsc	status,0,c
 10294  001D52  D74E               	goto	u8720
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;ff.c: 3147:      fp->clust = clst;
 10298                           
 10299                           ; BSR set to: 0
 10300  001D54  EE20 F012          	lfsr	2,18
 10301  001D58  516D               	movf	f_lseek@fp& (0+255),w,b
 10302  001D5A  26D9               	addwf	fsr2l,f,c
 10303  001D5C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10304  001D5E  22DA               	addwfc	fsr2h,f,c
 10305  001D60  C090  FFDE         	movff	f_lseek@clst,postinc2
 10306  001D64  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10307  001D68  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10308  001D6C  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10309                           
 10310                           ;ff.c: 3148:      fp->fptr += bcs;
 10311  001D70  EE20 F006          	lfsr	2,6
 10312  001D74  516D               	movf	f_lseek@fp& (0+255),w,b
 10313  001D76  26D9               	addwf	fsr2l,f,c
 10314  001D78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10315  001D7A  22DA               	addwfc	fsr2h,f,c
 10316  001D7C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10317  001D7E  26DE               	addwf	postinc2,f,c
 10318  001D80  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10319  001D82  22DE               	addwfc	postinc2,f,c
 10320  001D84  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10321  001D86  22DE               	addwfc	postinc2,f,c
 10322  001D88  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10323  001D8A  22DE               	addwfc	postinc2,f,c
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;ff.c: 3149:      ofs -= bcs;
 10327  001D8C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10328  001D8E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10329  001D90  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10330  001D92  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10331  001D94  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10332  001D96  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10333  001D98  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10334  001D9A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10335  001D9C                     l6582:
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;ff.c: 3135:     while (ofs > bcs) {
 10339  001D9C  516F               	movf	f_lseek@ofs& (0+255),w,b
 10340  001D9E  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
 10341  001DA0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10342  001DA2  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10343  001DA4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10344  001DA6  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10345  001DA8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10346  001DAA  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10347  001DAC  A0D8               	btfss	status,0,c
 10348  001DAE  D760               	goto	l6550
 10349  001DB0                     u8800:
 10350                           
 10351                           ; BSR set to: 0
 10352                           ;ff.c: 3151:     fp->fptr += ofs;
 10353  001DB0  EE20 F006          	lfsr	2,6
 10354  001DB4  516D               	movf	f_lseek@fp& (0+255),w,b
 10355  001DB6  26D9               	addwf	fsr2l,f,c
 10356  001DB8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10357  001DBA  22DA               	addwfc	fsr2h,f,c
 10358  001DBC  516F               	movf	f_lseek@ofs& (0+255),w,b
 10359  001DBE  26DE               	addwf	postinc2,f,c
 10360  001DC0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10361  001DC2  22DE               	addwfc	postinc2,f,c
 10362  001DC4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10363  001DC6  22DE               	addwfc	postinc2,f,c
 10364  001DC8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10365  001DCA  22DE               	addwfc	postinc2,f,c
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 10369  001DCC  0EFF               	movlw	255
 10370  001DCE  156F               	andwf	f_lseek@ofs& (0+255),w,b
 10371  001DD0  6F73               	movwf	??_f_lseek& (0+255),b
 10372  001DD2  0E01               	movlw	1
 10373  001DD4  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10374  001DD6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10375  001DD8  0E00               	movlw	0
 10376  001DDA  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10377  001DDC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10378  001DDE  0E00               	movlw	0
 10379  001DE0  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10380  001DE2  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10381  001DE4  5173               	movf	??_f_lseek& (0+255),w,b
 10382  001DE6  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10383  001DE8  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10384  001DEA  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10385  001DEC  B4D8               	btfsc	status,2,c
 10386  001DEE  D03A               	goto	l6600
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 10390  001DF0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10391  001DF4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10392  001DF8  CFDE F00D          	movff	postinc2,clust2sect@fs
 10393  001DFC  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10394  001E00  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
 10395  001E04  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10396  001E08  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10397  001E0C  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10398  001E10  EC8E  F029         	call	_clust2sect	;wreg free
 10399  001E14  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
 10400  001E18  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
 10401  001E1C  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
 10402  001E20  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
 10403                           
 10404                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10405  001E24  0100               	movlb	0	; () banked
 10406  001E26  5188               	movf	f_lseek@nsect& (0+255),w,b
 10407  001E28  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10408  001E2A  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10409  001E2C  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10410  001E2E  B4D8               	btfsc	status,2,c
 10411  001E30  D6DF               	goto	u8720
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 10415                           
 10416                           ; BSR set to: 0
 10417  001E32  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
 10418  001E36  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
 10419  001E3A  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
 10420  001E3E  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
 10421  001E42  0E0A               	movlw	10
 10422  001E44  D005               	goto	u8830
 10423  001E46                     u8835:
 10424  001E46  90D8               	bcf	status,0,c
 10425  001E48  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10426  001E4A  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10427  001E4C  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10428  001E4E  3373               	rrcf	??_f_lseek& (0+255),f,b
 10429  001E50                     u8830:
 10430  001E50  2EE8               	decfsz	wreg,f,c
 10431  001E52  D7F9               	goto	u8835
 10432  001E54  5173               	movf	??_f_lseek& (0+255),w,b
 10433  001E56  2788               	addwf	f_lseek@nsect& (0+255),f,b
 10434  001E58  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10435  001E5A  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10436  001E5C  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10437  001E5E  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10438  001E60  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10439  001E62  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10440  001E64                     l6600:
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10444  001E64  EE20 F006          	lfsr	2,6
 10445  001E68  516D               	movf	f_lseek@fp& (0+255),w,b
 10446  001E6A  26D9               	addwf	fsr2l,f,c
 10447  001E6C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10448  001E6E  22DA               	addwfc	fsr2h,f,c
 10449  001E70  0EFF               	movlw	255
 10450  001E72  14DE               	andwf	postinc2,w,c
 10451  001E74  6F73               	movwf	??_f_lseek& (0+255),b
 10452  001E76  0E01               	movlw	1
 10453  001E78  14DE               	andwf	postinc2,w,c
 10454  001E7A  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10455  001E7C  0E00               	movlw	0
 10456  001E7E  14DE               	andwf	postinc2,w,c
 10457  001E80  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10458  001E82  0E00               	movlw	0
 10459  001E84  14DE               	andwf	postinc2,w,c
 10460  001E86  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10461  001E88  5173               	movf	??_f_lseek& (0+255),w,b
 10462  001E8A  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10463  001E8C  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10464  001E8E  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10465  001E90  B4D8               	btfsc	status,2,c
 10466  001E92  D021               	goto	l6606
 10467                           
 10468                           ; BSR set to: 0
 10469  001E94  EE20 F016          	lfsr	2,22
 10470  001E98  516D               	movf	f_lseek@fp& (0+255),w,b
 10471  001E9A  26D9               	addwf	fsr2l,f,c
 10472  001E9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10473  001E9E  22DA               	addwfc	fsr2h,f,c
 10474  001EA0  5188               	movf	f_lseek@nsect& (0+255),w,b
 10475  001EA2  18DE               	xorwf	postinc2,w,c
 10476  001EA4  E10A               	bnz	u8850
 10477  001EA6  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10478  001EA8  18DE               	xorwf	postinc2,w,c
 10479  001EAA  E107               	bnz	u8850
 10480  001EAC  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10481  001EAE  18DE               	xorwf	postinc2,w,c
 10482  001EB0  E104               	bnz	u8850
 10483  001EB2  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10484  001EB4  18DE               	xorwf	postinc2,w,c
 10485  001EB6  B4D8               	btfsc	status,2,c
 10486  001EB8  D00E               	goto	l6606
 10487  001EBA                     u8850:
 10488                           
 10489                           ; BSR set to: 0
 10490                           ;ff.c: 3171:    fp->dsect = nsect;
 10491  001EBA  EE20 F016          	lfsr	2,22
 10492  001EBE  516D               	movf	f_lseek@fp& (0+255),w,b
 10493  001EC0  26D9               	addwf	fsr2l,f,c
 10494  001EC2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10495  001EC4  22DA               	addwfc	fsr2h,f,c
 10496  001EC6  C088  FFDE         	movff	f_lseek@nsect,postinc2
 10497  001ECA  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
 10498  001ECE  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
 10499  001ED2  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
 10500  001ED6                     l6606:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 10504  001ED6  EE20 F006          	lfsr	2,6
 10505  001EDA  516D               	movf	f_lseek@fp& (0+255),w,b
 10506  001EDC  26D9               	addwf	fsr2l,f,c
 10507  001EDE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10508  001EE0  22DA               	addwfc	fsr2h,f,c
 10509  001EE2  EE10 F00A          	lfsr	1,10
 10510  001EE6  516D               	movf	f_lseek@fp& (0+255),w,b
 10511  001EE8  26E1               	addwf	fsr1l,f,c
 10512  001EEA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10513  001EEC  22E2               	addwfc	fsr1h,f,c
 10514  001EEE  50DE               	movf	postinc2,w,c
 10515  001EF0  5CE6               	subwf	postinc1,w,c
 10516  001EF2  50DE               	movf	postinc2,w,c
 10517  001EF4  58E6               	subwfb	postinc1,w,c
 10518  001EF6  50DE               	movf	postinc2,w,c
 10519  001EF8  58E6               	subwfb	postinc1,w,c
 10520  001EFA  50DE               	movf	postinc2,w,c
 10521  001EFC  58E6               	subwfb	postinc1,w,c
 10522  001EFE  B0D8               	btfsc	status,0,c
 10523  001F00  D521               	goto	u8630
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 10527  001F02  EE20 F006          	lfsr	2,6
 10528  001F06  516D               	movf	f_lseek@fp& (0+255),w,b
 10529  001F08  26D9               	addwf	fsr2l,f,c
 10530  001F0A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10531  001F0C  22DA               	addwfc	fsr2h,f,c
 10532  001F0E  EE10 F00A          	lfsr	1,10
 10533  001F12  516D               	movf	f_lseek@fp& (0+255),w,b
 10534  001F14  26E1               	addwf	fsr1l,f,c
 10535  001F16  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10536  001F18  22E2               	addwfc	fsr1h,f,c
 10537  001F1A  CFDE FFE6          	movff	postinc2,postinc1
 10538  001F1E  CFDE FFE6          	movff	postinc2,postinc1
 10539  001F22  CFDE FFE6          	movff	postinc2,postinc1
 10540  001F26  CFDE FFE6          	movff	postinc2,postinc1
 10541                           
 10542                           ; BSR set to: 0
 10543                           ;ff.c: 3176:    fp->flag |= 0x20;
 10544  001F2A  EE20 F004          	lfsr	2,4
 10545  001F2E  516D               	movf	f_lseek@fp& (0+255),w,b
 10546  001F30  26D9               	addwf	fsr2l,f,c
 10547  001F32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10548  001F34  22DA               	addwfc	fsr2h,f,c
 10549  001F36  0E00               	movlw	0
 10550  001F38  8ADB               	bsf	plusw2,5,c
 10551  001F3A  D504               	goto	u8630
 10552  001F3C                     __end_of_f_lseek:
 10553                           	opt callstack 0
 10554                           
 10555 ;; *************** function _create_chain *****************
 10556 ;; Defined at:
 10557 ;;		line 990 in file "ff.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  fs              2   85[COMRAM] PTR struct .
 10560 ;;		 -> FatFs(558), NULL(0), 
 10561 ;;  clst            4   87[COMRAM] unsigned long 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  cs              4    9[BANK0 ] unsigned long 
 10564 ;;  ncl             4    5[BANK0 ] unsigned long 
 10565 ;;  scl             4    1[BANK0 ] unsigned long 
 10566 ;;  res             1    0[BANK0 ] enum E93
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  4   85[COMRAM] unsigned long 
 10569 ;; Registers used:
 10570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10576 ;;      Params:         6       0       0       0       0       0       0       0       0
 10577 ;;      Locals:         0      13       0       0       0       0       0       0       0
 10578 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10579 ;;      Totals:        10      13       0       0       0       0       0       0       0
 10580 ;;Total ram usage:       23 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    9
 10583 ;; This function calls:
 10584 ;;		_get_fat
 10585 ;;		_put_fat
 10586 ;; This function is called by:
 10587 ;;		_dir_next
 10588 ;;		_f_write
 10589 ;;		_f_lseek
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           	psect	text28
 10594  0038EE                     __ptext28:
 10595                           	opt callstack 0
 10596  0038EE                     _create_chain:
 10597                           	opt callstack 16
 10598                           
 10599                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;incstack = 0
 10603  0038EE  5058               	movf	create_chain@clst,w,c
 10604  0038F0  1059               	iorwf	create_chain@clst+1,w,c
 10605  0038F2  105A               	iorwf	create_chain@clst+2,w,c
 10606  0038F4  105B               	iorwf	create_chain@clst+3,w,c
 10607  0038F6  A4D8               	btfss	status,2,c
 10608  0038F8  D02E               	goto	l4758
 10609                           
 10610                           ;ff.c: 1000:   scl = fs->last_clust;
 10611  0038FA  EE20 F00A          	lfsr	2,10
 10612  0038FE  5056               	movf	create_chain@fs,w,c
 10613  003900  26D9               	addwf	fsr2l,f,c
 10614  003902  5057               	movf	create_chain@fs+1,w,c
 10615  003904  22DA               	addwfc	fsr2h,f,c
 10616  003906  CFDE F061          	movff	postinc2,create_chain@scl
 10617  00390A  CFDE F062          	movff	postinc2,create_chain@scl+1
 10618  00390E  CFDE F063          	movff	postinc2,create_chain@scl+2
 10619  003912  CFDE F064          	movff	postinc2,create_chain@scl+3
 10620                           
 10621                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 10622  003916  0100               	movlb	0	; () banked
 10623  003918  5161               	movf	create_chain@scl& (0+255),w,b
 10624  00391A  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10625  00391C  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10626  00391E  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10627  003920  B4D8               	btfsc	status,2,c
 10628  003922  D010               	goto	u5430
 10629                           
 10630                           ; BSR set to: 0
 10631  003924  EE20 F012          	lfsr	2,18
 10632  003928  5056               	movf	create_chain@fs,w,c
 10633  00392A  26D9               	addwf	fsr2l,f,c
 10634  00392C  5057               	movf	create_chain@fs+1,w,c
 10635  00392E  22DA               	addwfc	fsr2h,f,c
 10636  003930  50DE               	movf	postinc2,w,c
 10637  003932  5D61               	subwf	create_chain@scl& (0+255),w,b
 10638  003934  50DE               	movf	postinc2,w,c
 10639  003936  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10640  003938  50DE               	movf	postinc2,w,c
 10641  00393A  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10642  00393C  50DE               	movf	postinc2,w,c
 10643  00393E  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10644  003940  A0D8               	btfss	status,0,c
 10645  003942  D05B               	goto	l317
 10646  003944                     u5430:
 10647                           
 10648                           ; BSR set to: 0
 10649  003944  0E01               	movlw	1
 10650  003946  6F61               	movwf	create_chain@scl& (0+255),b
 10651  003948  0E00               	movlw	0
 10652  00394A  6F62               	movwf	(create_chain@scl+1)& (0+255),b
 10653  00394C  0E00               	movlw	0
 10654  00394E  6F63               	movwf	(create_chain@scl+2)& (0+255),b
 10655  003950  0E00               	movlw	0
 10656  003952  6F64               	movwf	(create_chain@scl+3)& (0+255),b
 10657  003954  D052               	goto	l317
 10658  003956                     l4758:
 10659                           
 10660                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 10661  003956  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10662  00395A  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10663  00395E  C058  F03D         	movff	create_chain@clst,get_fat@clst
 10664  003962  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 10665  003966  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 10666  00396A  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 10667  00396E  ECDB  F018         	call	_get_fat	;wreg free
 10668  003972  C03B  F069         	movff	?_get_fat,create_chain@cs
 10669  003976  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10670  00397A  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10671  00397E  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10672                           
 10673                           ;ff.c: 1005:   if (cs < 2) return 1;
 10674  003982  0100               	movlb	0	; () banked
 10675  003984  516C               	movf	(create_chain@cs+3)& (0+255),w,b
 10676  003986  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10677  003988  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10678  00398A  E10D               	bnz	l4766
 10679  00398C  0E02               	movlw	2
 10680  00398E  5D69               	subwf	create_chain@cs& (0+255),w,b
 10681  003990  B0D8               	btfsc	status,0,c
 10682  003992  D009               	goto	l4766
 10683                           
 10684                           ; BSR set to: 0
 10685  003994  0E01               	movlw	1
 10686  003996  6E56               	movwf	?_create_chain,c
 10687  003998  0E00               	movlw	0
 10688  00399A  6E57               	movwf	?_create_chain+1,c
 10689  00399C  0E00               	movlw	0
 10690  00399E  6E58               	movwf	?_create_chain+2,c
 10691  0039A0  0E00               	movlw	0
 10692  0039A2  6E59               	movwf	?_create_chain+3,c
 10693  0039A4  0012               	return	
 10694  0039A6                     l4766:
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 10698  0039A6  2969               	incf	create_chain@cs& (0+255),w,b
 10699  0039A8  E110               	bnz	l4770
 10700  0039AA  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 10701  0039AC  E10E               	bnz	l4770
 10702  0039AE  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 10703  0039B0  E10C               	bnz	l4770
 10704  0039B2  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 10705  0039B4  A4D8               	btfss	status,2,c
 10706  0039B6  D009               	goto	l4770
 10707  0039B8                     u5450:
 10708                           
 10709                           ; BSR set to: 0
 10710  0039B8  C069  F056         	movff	create_chain@cs,?_create_chain
 10711  0039BC  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 10712  0039C0  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 10713  0039C4  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 10714  0039C8  0012               	return	
 10715  0039CA                     l4770:
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 10719  0039CA  EE20 F012          	lfsr	2,18
 10720  0039CE  5056               	movf	create_chain@fs,w,c
 10721  0039D0  26D9               	addwf	fsr2l,f,c
 10722  0039D2  5057               	movf	create_chain@fs+1,w,c
 10723  0039D4  22DA               	addwfc	fsr2h,f,c
 10724  0039D6  50DE               	movf	postinc2,w,c
 10725  0039D8  5D69               	subwf	create_chain@cs& (0+255),w,b
 10726  0039DA  50DE               	movf	postinc2,w,c
 10727  0039DC  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10728  0039DE  50DE               	movf	postinc2,w,c
 10729  0039E0  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10730  0039E2  50DE               	movf	postinc2,w,c
 10731  0039E4  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10732  0039E6  A0D8               	btfss	status,0,c
 10733  0039E8  D7E7               	goto	u5450
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;ff.c: 1008:   scl = clst;
 10737  0039EA  C058  F061         	movff	create_chain@clst,create_chain@scl
 10738  0039EE  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 10739  0039F2  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 10740  0039F6  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 10741  0039FA                     l317:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;ff.c: 1011:  ncl = scl;
 10745  0039FA  C061  F065         	movff	create_chain@scl,create_chain@ncl
 10746  0039FE  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 10747  003A02  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 10748  003A06  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 10749  003A0A                     l4774:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;ff.c: 1013:   ncl++;
 10753  003A0A  0E01               	movlw	1
 10754  003A0C  2765               	addwf	create_chain@ncl& (0+255),f,b
 10755  003A0E  0E00               	movlw	0
 10756  003A10  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10757  003A12  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10758  003A14  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 10762  003A16  EE20 F012          	lfsr	2,18
 10763  003A1A  5056               	movf	create_chain@fs,w,c
 10764  003A1C  26D9               	addwf	fsr2l,f,c
 10765  003A1E  5057               	movf	create_chain@fs+1,w,c
 10766  003A20  22DA               	addwfc	fsr2h,f,c
 10767  003A22  50DE               	movf	postinc2,w,c
 10768  003A24  5D65               	subwf	create_chain@ncl& (0+255),w,b
 10769  003A26  50DE               	movf	postinc2,w,c
 10770  003A28  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10771  003A2A  50DE               	movf	postinc2,w,c
 10772  003A2C  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10773  003A2E  50DE               	movf	postinc2,w,c
 10774  003A30  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10775  003A32  A0D8               	btfss	status,0,c
 10776  003A34  D019               	goto	l4786
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;ff.c: 1015:    ncl = 2;
 10780  003A36  0E02               	movlw	2
 10781  003A38  6F65               	movwf	create_chain@ncl& (0+255),b
 10782  003A3A  0E00               	movlw	0
 10783  003A3C  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 10784  003A3E  0E00               	movlw	0
 10785  003A40  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 10786  003A42  0E00               	movlw	0
 10787  003A44  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;ff.c: 1016:    if (ncl > scl) return 0;
 10791  003A46  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 10792  003A48  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10793  003A4A  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10794  003A4C  E10D               	bnz	l4786
 10795  003A4E  0E02               	movlw	2
 10796  003A50  5D61               	subwf	create_chain@scl& (0+255),w,b
 10797  003A52  B0D8               	btfsc	status,0,c
 10798  003A54  D009               	goto	l4786
 10799  003A56                     u5480:
 10800                           
 10801                           ; BSR set to: 0
 10802  003A56  0E00               	movlw	0
 10803  003A58  6E56               	movwf	?_create_chain,c
 10804  003A5A  0E00               	movlw	0
 10805  003A5C  6E57               	movwf	?_create_chain+1,c
 10806  003A5E  0E00               	movlw	0
 10807  003A60  6E58               	movwf	?_create_chain+2,c
 10808  003A62  0E00               	movlw	0
 10809  003A64  6E59               	movwf	?_create_chain+3,c
 10810  003A66  0012               	return	
 10811  003A68                     l4786:
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 10815  003A68  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10816  003A6C  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10817  003A70  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 10818  003A74  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 10819  003A78  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 10820  003A7C  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 10821  003A80  ECDB  F018         	call	_get_fat	;wreg free
 10822  003A84  C03B  F069         	movff	?_get_fat,create_chain@cs
 10823  003A88  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10824  003A8C  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10825  003A90  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10826                           
 10827                           ;ff.c: 1019:   if (cs == 0) break;
 10828  003A94  0100               	movlb	0	; () banked
 10829  003A96  5169               	movf	create_chain@cs& (0+255),w,b
 10830  003A98  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10831  003A9A  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10832  003A9C  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10833  003A9E  B4D8               	btfsc	status,2,c
 10834  003AA0  D01D               	goto	l4802
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 10838  003AA2  2969               	incf	create_chain@cs& (0+255),w,b
 10839  003AA4  E107               	bnz	u5500
 10840  003AA6  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 10841  003AA8  E105               	bnz	u5500
 10842  003AAA  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 10843  003AAC  E103               	bnz	u5500
 10844  003AAE  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 10845  003AB0  B4D8               	btfsc	status,2,c
 10846  003AB2  D782               	goto	u5450
 10847  003AB4                     u5500:
 10848                           
 10849                           ; BSR set to: 0
 10850  003AB4  0569               	decf	create_chain@cs& (0+255),w,b
 10851  003AB6  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10852  003AB8  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10853  003ABA  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10854  003ABC  B4D8               	btfsc	status,2,c
 10855  003ABE  D77C               	goto	u5450
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;ff.c: 1022:   if (ncl == scl) return 0;
 10859  003AC0  5161               	movf	create_chain@scl& (0+255),w,b
 10860  003AC2  1965               	xorwf	create_chain@ncl& (0+255),w,b
 10861  003AC4  E1A2               	bnz	l4774
 10862  003AC6  5162               	movf	(create_chain@scl+1)& (0+255),w,b
 10863  003AC8  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 10864  003ACA  E19F               	bnz	l4774
 10865  003ACC  5163               	movf	(create_chain@scl+2)& (0+255),w,b
 10866  003ACE  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 10867  003AD0  E19C               	bnz	l4774
 10868  003AD2  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 10869  003AD4  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 10870  003AD6  B4D8               	btfsc	status,2,c
 10871  003AD8  D7BE               	goto	u5480
 10872  003ADA  D797               	goto	l4774
 10873  003ADC                     l4802:
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 10877  003ADC  C056  F03B         	movff	create_chain@fs,put_fat@fs
 10878  003AE0  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 10879  003AE4  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 10880  003AE8  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 10881  003AEC  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 10882  003AF0  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 10883  003AF4  0EFF               	movlw	255
 10884  003AF6  6E41               	movwf	put_fat@val,c
 10885  003AF8  0EFF               	movlw	255
 10886  003AFA  6E42               	movwf	put_fat@val+1,c
 10887  003AFC  0EFF               	movlw	255
 10888  003AFE  6E43               	movwf	put_fat@val+2,c
 10889  003B00  0E0F               	movlw	15
 10890  003B02  6E44               	movwf	put_fat@val+3,c
 10891  003B04  ECC3  F014         	call	_put_fat	;wreg free
 10892  003B08  0100               	movlb	0	; () banked
 10893  003B0A  6F60               	movwf	create_chain@res& (0+255),b
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 10897  003B0C  5160               	movf	create_chain@res& (0+255),w,b
 10898  003B0E  A4D8               	btfss	status,2,c
 10899  003B10  D01E               	goto	l4810
 10900                           
 10901                           ; BSR set to: 0
 10902  003B12  5058               	movf	create_chain@clst,w,c
 10903  003B14  1059               	iorwf	create_chain@clst+1,w,c
 10904  003B16  105A               	iorwf	create_chain@clst+2,w,c
 10905  003B18  105B               	iorwf	create_chain@clst+3,w,c
 10906  003B1A  B4D8               	btfsc	status,2,c
 10907  003B1C  D018               	goto	l4810
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 10911  003B1E  C056  F03B         	movff	create_chain@fs,put_fat@fs
 10912  003B22  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 10913  003B26  C058  F03D         	movff	create_chain@clst,put_fat@clst
 10914  003B2A  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 10915  003B2E  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 10916  003B32  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 10917  003B36  C065  F041         	movff	create_chain@ncl,put_fat@val
 10918  003B3A  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 10919  003B3E  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 10920  003B42  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 10921  003B46  ECC3  F014         	call	_put_fat	;wreg free
 10922  003B4A  0100               	movlb	0	; () banked
 10923  003B4C  6F60               	movwf	create_chain@res& (0+255),b
 10924  003B4E                     l4810:
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;ff.c: 1029:  if (res == FR_OK) {
 10928  003B4E  5160               	movf	create_chain@res& (0+255),w,b
 10929  003B50  A4D8               	btfss	status,2,c
 10930  003B52  D031               	goto	l4816
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;ff.c: 1030:   fs->last_clust = ncl;
 10934  003B54  EE20 F00A          	lfsr	2,10
 10935  003B58  5056               	movf	create_chain@fs,w,c
 10936  003B5A  26D9               	addwf	fsr2l,f,c
 10937  003B5C  5057               	movf	create_chain@fs+1,w,c
 10938  003B5E  22DA               	addwfc	fsr2h,f,c
 10939  003B60  C065  FFDE         	movff	create_chain@ncl,postinc2
 10940  003B64  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 10941  003B68  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 10942  003B6C  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 10943                           
 10944                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 10945  003B70  EE20 F00E          	lfsr	2,14
 10946  003B74  5056               	movf	create_chain@fs,w,c
 10947  003B76  26D9               	addwf	fsr2l,f,c
 10948  003B78  5057               	movf	create_chain@fs+1,w,c
 10949  003B7A  22DA               	addwfc	fsr2h,f,c
 10950  003B7C  28DE               	incf	postinc2,w,c
 10951  003B7E  E107               	bnz	u5560
 10952  003B80  28DE               	incf	postinc2,w,c
 10953  003B82  E105               	bnz	u5560
 10954  003B84  28DE               	incf	postinc2,w,c
 10955  003B86  E103               	bnz	u5560
 10956  003B88  28DE               	incf	postinc2,w,c
 10957  003B8A  B4D8               	btfsc	status,2,c
 10958  003B8C  D024               	goto	l334
 10959  003B8E                     u5560:
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;ff.c: 1032:    fs->free_clust--;
 10963  003B8E  EE20 F00E          	lfsr	2,14
 10964  003B92  5056               	movf	create_chain@fs,w,c
 10965  003B94  26D9               	addwf	fsr2l,f,c
 10966  003B96  5057               	movf	create_chain@fs+1,w,c
 10967  003B98  22DA               	addwfc	fsr2h,f,c
 10968  003B9A  06DE               	decf	postinc2,f,c
 10969  003B9C  0E00               	movlw	0
 10970  003B9E  5ADE               	subwfb	postinc2,f,c
 10971  003BA0  5ADE               	subwfb	postinc2,f,c
 10972  003BA2  5ADE               	subwfb	postinc2,f,c
 10973                           
 10974                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 10975  003BA4  EE20 F005          	lfsr	2,5
 10976  003BA8  5056               	movf	create_chain@fs,w,c
 10977  003BAA  26D9               	addwf	fsr2l,f,c
 10978  003BAC  5057               	movf	create_chain@fs+1,w,c
 10979  003BAE  22DA               	addwfc	fsr2h,f,c
 10980  003BB0  0E00               	movlw	0
 10981  003BB2  80DB               	bsf	plusw2,0,c
 10982  003BB4  D010               	goto	l334
 10983  003BB6                     l4816:
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 10987  003BB6  0560               	decf	create_chain@res& (0+255),w,b
 10988  003BB8  B4D8               	btfsc	status,2,c
 10989  003BBA  D009               	goto	l336
 10990                           
 10991                           ; BSR set to: 0
 10992  003BBC  0E01               	movlw	1
 10993  003BBE  6F65               	movwf	create_chain@ncl& (0+255),b
 10994  003BC0  0E00               	movlw	0
 10995  003BC2  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 10996  003BC4  0E00               	movlw	0
 10997  003BC6  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 10998  003BC8  0E00               	movlw	0
 10999  003BCA  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 11000  003BCC  D004               	goto	l334
 11001  003BCE                     l336:
 11002                           
 11003                           ; BSR set to: 0
 11004  003BCE  6965               	setf	create_chain@ncl& (0+255),b
 11005  003BD0  6966               	setf	(create_chain@ncl+1)& (0+255),b
 11006  003BD2  6967               	setf	(create_chain@ncl+2)& (0+255),b
 11007  003BD4  6968               	setf	(create_chain@ncl+3)& (0+255),b
 11008  003BD6                     l334:
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;ff.c: 1039:  return ncl;
 11012  003BD6  C065  F056         	movff	create_chain@ncl,?_create_chain
 11013  003BDA  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 11014  003BDE  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 11015  003BE2  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 11016                           
 11017                           ; BSR set to: 0
 11018  003BE6  0012               	return		;funcret
 11019  003BE8                     __end_of_create_chain:
 11020                           	opt callstack 0
 11021                           
 11022 ;; *************** function _put_fat *****************
 11023 ;; Defined at:
 11024 ;;		line 873 in file "ff.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  fs              2   58[COMRAM] PTR struct .
 11027 ;;		 -> FatFs(558), NULL(0), 
 11028 ;;  clst            4   60[COMRAM] unsigned long 
 11029 ;;  val             4   64[COMRAM] unsigned long 
 11030 ;; Auto vars:     Size  Location     Type
 11031 ;;  p               2   83[COMRAM] PTR unsigned char 
 11032 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11033 ;;  bc              2   80[COMRAM] unsigned short 
 11034 ;;  res             1   82[COMRAM] enum E93
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      enum E93
 11037 ;; Registers used:
 11038 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11044 ;;      Params:        10       0       0       0       0       0       0       0       0
 11045 ;;      Locals:         9       0       0       0       0       0       0       0       0
 11046 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11047 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11048 ;;Total ram usage:       27 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    8
 11051 ;; This function calls:
 11052 ;;		_move_window
 11053 ;; This function is called by:
 11054 ;;		_remove_chain
 11055 ;;		_create_chain
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text29
 11060  002986                     __ptext29:
 11061                           	opt callstack 0
 11062  002986                     _put_fat:
 11063                           	opt callstack 19
 11064                           
 11065                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;incstack = 0
 11069  002986  5040               	movf	put_fat@clst+3,w,c
 11070  002988  103F               	iorwf	put_fat@clst+2,w,c
 11071  00298A  103E               	iorwf	put_fat@clst+1,w,c
 11072  00298C  E104               	bnz	u5250
 11073  00298E  0E02               	movlw	2
 11074  002990  5C3D               	subwf	put_fat@clst,w,c
 11075  002992  A0D8               	btfss	status,0,c
 11076  002994  D010               	goto	u5260
 11077  002996                     u5250:
 11078  002996  EE20 F012          	lfsr	2,18
 11079  00299A  503B               	movf	put_fat@fs,w,c
 11080  00299C  26D9               	addwf	fsr2l,f,c
 11081  00299E  503C               	movf	put_fat@fs+1,w,c
 11082  0029A0  22DA               	addwfc	fsr2h,f,c
 11083  0029A2  50DE               	movf	postinc2,w,c
 11084  0029A4  5C3D               	subwf	put_fat@clst,w,c
 11085  0029A6  50DE               	movf	postinc2,w,c
 11086  0029A8  583E               	subwfb	put_fat@clst+1,w,c
 11087  0029AA  50DE               	movf	postinc2,w,c
 11088  0029AC  583F               	subwfb	put_fat@clst+2,w,c
 11089  0029AE  50DE               	movf	postinc2,w,c
 11090  0029B0  5840               	subwfb	put_fat@clst+3,w,c
 11091  0029B2  A0D8               	btfss	status,0,c
 11092  0029B4  D1E5               	goto	l4708
 11093  0029B6                     u5260:
 11094                           
 11095                           ;ff.c: 885:   res = FR_INT_ERR;
 11096  0029B6  0E02               	movlw	2
 11097  0029B8  6E53               	movwf	put_fat@res,c
 11098                           
 11099                           ;ff.c: 887:  } else {
 11100  0029BA  D1F8               	goto	l4710
 11101  0029BC                     l278:
 11102                           
 11103                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 11104  0029BC  C03D  F051         	movff	put_fat@clst,put_fat@bc
 11105  0029C0  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 11106  0029C4  90D8               	bcf	status,0,c
 11107  0029C6  3052               	rrcf	put_fat@bc+1,w,c
 11108  0029C8  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11109  0029CA  3051               	rrcf	put_fat@bc,w,c
 11110  0029CC  6E45               	movwf	??_put_fat& (0+255),c
 11111  0029CE  5045               	movf	??_put_fat,w,c
 11112  0029D0  2651               	addwf	put_fat@bc,f,c
 11113  0029D2  5046               	movf	??_put_fat+1,w,c
 11114  0029D4  2252               	addwfc	put_fat@bc+1,f,c
 11115                           
 11116                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11117  0029D6  C03B  F030         	movff	put_fat@fs,move_window@fs
 11118  0029DA  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11119  0029DE  EE20 F01E          	lfsr	2,30
 11120  0029E2  503B               	movf	put_fat@fs,w,c
 11121  0029E4  26D9               	addwf	fsr2l,f,c
 11122  0029E6  503C               	movf	put_fat@fs+1,w,c
 11123  0029E8  22DA               	addwfc	fsr2h,f,c
 11124  0029EA  CFDE F045          	movff	postinc2,??_put_fat
 11125  0029EE  CFDE F046          	movff	postinc2,??_put_fat+1
 11126  0029F2  CFDE F047          	movff	postinc2,??_put_fat+2
 11127  0029F6  CFDE F048          	movff	postinc2,??_put_fat+3
 11128  0029FA  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11129  0029FE  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11130  002A02  0E09               	movlw	9
 11131  002A04  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11132  002A06                     u5275:
 11133  002A06  90D8               	bcf	status,0,c
 11134  002A08  324A               	rrcf	??_put_fat+5,f,c
 11135  002A0A  3249               	rrcf	??_put_fat+4,f,c
 11136  002A0C  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11137  002A0E  D7FB               	goto	u5275
 11138  002A10  5049               	movf	??_put_fat+4,w,c
 11139  002A12  2445               	addwf	??_put_fat,w,c
 11140  002A14  6E32               	movwf	move_window@sector,c
 11141  002A16  504A               	movf	??_put_fat+5,w,c
 11142  002A18  2046               	addwfc	??_put_fat+1,w,c
 11143  002A1A  6E33               	movwf	move_window@sector+1,c
 11144  002A1C  0E00               	movlw	0
 11145  002A1E  2047               	addwfc	??_put_fat+2,w,c
 11146  002A20  6E34               	movwf	move_window@sector+2,c
 11147  002A22  0E00               	movlw	0
 11148  002A24  2048               	addwfc	??_put_fat+3,w,c
 11149  002A26  6E35               	movwf	move_window@sector+3,c
 11150  002A28  EC96  F02A         	call	_move_window	;wreg free
 11151  002A2C  6E53               	movwf	put_fat@res,c
 11152                           
 11153                           ;ff.c: 892:    if (res != FR_OK) break;
 11154  002A2E  5053               	movf	put_fat@res,w,c
 11155  002A30  A4D8               	btfss	status,2,c
 11156  002A32  D1BC               	goto	l4710
 11157                           
 11158                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 11159  002A34  0EFF               	movlw	255
 11160  002A36  6E45               	movwf	??_put_fat& (0+255),c
 11161  002A38  0E01               	movlw	1
 11162  002A3A  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11163  002A3C  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11164  002A40  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11165  002A44  5045               	movf	??_put_fat,w,c
 11166  002A46  1647               	andwf	??_put_fat+2,f,c
 11167  002A48  5046               	movf	??_put_fat+1,w,c
 11168  002A4A  1648               	andwf	??_put_fat+3,f,c
 11169  002A4C  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11170  002A50  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11171  002A54  5047               	movf	??_put_fat+2,w,c
 11172  002A56  2649               	addwf	??_put_fat+4,f,c
 11173  002A58  5048               	movf	??_put_fat+3,w,c
 11174  002A5A  224A               	addwfc	??_put_fat+5,f,c
 11175  002A5C  0E2E               	movlw	46
 11176  002A5E  2449               	addwf	??_put_fat+4,w,c
 11177  002A60  6E54               	movwf	put_fat@p,c
 11178  002A62  0E00               	movlw	0
 11179  002A64  204A               	addwfc	??_put_fat+5,w,c
 11180  002A66  6E55               	movwf	put_fat@p+1,c
 11181  002A68  4A51               	infsnz	put_fat@bc,f,c
 11182  002A6A  2A52               	incf	put_fat@bc+1,f,c
 11183                           
 11184                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 11185  002A6C  B03D               	btfsc	put_fat@clst,0,c
 11186  002A6E  D004               	goto	l4662
 11187  002A70  C041  F04D         	movff	put_fat@val,_put_fat$400
 11188  002A74  6A4E               	clrf	_put_fat$400+1,c
 11189  002A76  D01A               	goto	l4664
 11190  002A78                     l4662:
 11191  002A78  5041               	movf	put_fat@val,w,c
 11192  002A7A  6E45               	movwf	??_put_fat& (0+255),c
 11193  002A7C  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11194  002A7E  3A45               	swapf	??_put_fat,f,c
 11195  002A80  3A46               	swapf	??_put_fat+1,f,c
 11196  002A82  0EF0               	movlw	240
 11197  002A84  1646               	andwf	??_put_fat+1,f,c
 11198  002A86  5045               	movf	??_put_fat,w,c
 11199  002A88  0B0F               	andlw	15
 11200  002A8A  1246               	iorwf	??_put_fat+1,f,c
 11201  002A8C  0EF0               	movlw	240
 11202  002A8E  1645               	andwf	??_put_fat,f,c
 11203  002A90  C054  FFD9         	movff	put_fat@p,fsr2l
 11204  002A94  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11205  002A98  50DF               	movf	indf2,w,c
 11206  002A9A  0B0F               	andlw	15
 11207  002A9C  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11208  002A9E  6A48               	clrf	(??_put_fat+3)& (0+255),c
 11209  002AA0  5045               	movf	??_put_fat,w,c
 11210  002AA2  1047               	iorwf	??_put_fat+2,w,c
 11211  002AA4  6E4D               	movwf	_put_fat$400,c
 11212  002AA6  5046               	movf	??_put_fat+1,w,c
 11213  002AA8  1048               	iorwf	??_put_fat+3,w,c
 11214  002AAA  6E4E               	movwf	_put_fat$400+1,c
 11215  002AAC                     l4664:
 11216  002AAC  C054  FFD9         	movff	put_fat@p,fsr2l
 11217  002AB0  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11218  002AB4  C04D  FFDF         	movff	_put_fat$400,indf2
 11219                           
 11220                           ;ff.c: 895:    fs->wflag = 1;
 11221  002AB8  EE20 F004          	lfsr	2,4
 11222  002ABC  503B               	movf	put_fat@fs,w,c
 11223  002ABE  26D9               	addwf	fsr2l,f,c
 11224  002AC0  503C               	movf	put_fat@fs+1,w,c
 11225  002AC2  22DA               	addwfc	fsr2h,f,c
 11226  002AC4  0E01               	movlw	1
 11227  002AC6  6EDF               	movwf	indf2,c
 11228                           
 11229                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11230  002AC8  C03B  F030         	movff	put_fat@fs,move_window@fs
 11231  002ACC  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11232  002AD0  EE20 F01E          	lfsr	2,30
 11233  002AD4  503B               	movf	put_fat@fs,w,c
 11234  002AD6  26D9               	addwf	fsr2l,f,c
 11235  002AD8  503C               	movf	put_fat@fs+1,w,c
 11236  002ADA  22DA               	addwfc	fsr2h,f,c
 11237  002ADC  CFDE F045          	movff	postinc2,??_put_fat
 11238  002AE0  CFDE F046          	movff	postinc2,??_put_fat+1
 11239  002AE4  CFDE F047          	movff	postinc2,??_put_fat+2
 11240  002AE8  CFDE F048          	movff	postinc2,??_put_fat+3
 11241  002AEC  C051  F049         	movff	put_fat@bc,??_put_fat+4
 11242  002AF0  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 11243  002AF4  0E09               	movlw	9
 11244  002AF6  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 11245  002AF8                     u5305:
 11246  002AF8  90D8               	bcf	status,0,c
 11247  002AFA  324A               	rrcf	??_put_fat+5,f,c
 11248  002AFC  3249               	rrcf	??_put_fat+4,f,c
 11249  002AFE  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 11250  002B00  D7FB               	goto	u5305
 11251  002B02  5049               	movf	??_put_fat+4,w,c
 11252  002B04  2445               	addwf	??_put_fat,w,c
 11253  002B06  6E32               	movwf	move_window@sector,c
 11254  002B08  504A               	movf	??_put_fat+5,w,c
 11255  002B0A  2046               	addwfc	??_put_fat+1,w,c
 11256  002B0C  6E33               	movwf	move_window@sector+1,c
 11257  002B0E  0E00               	movlw	0
 11258  002B10  2047               	addwfc	??_put_fat+2,w,c
 11259  002B12  6E34               	movwf	move_window@sector+2,c
 11260  002B14  0E00               	movlw	0
 11261  002B16  2048               	addwfc	??_put_fat+3,w,c
 11262  002B18  6E35               	movwf	move_window@sector+3,c
 11263  002B1A  EC96  F02A         	call	_move_window	;wreg free
 11264  002B1E  6E53               	movwf	put_fat@res,c
 11265                           
 11266                           ;ff.c: 897:    if (res != FR_OK) break;
 11267  002B20  5053               	movf	put_fat@res,w,c
 11268  002B22  A4D8               	btfss	status,2,c
 11269  002B24  D143               	goto	l4710
 11270                           
 11271                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 11272  002B26  0EFF               	movlw	255
 11273  002B28  6E45               	movwf	??_put_fat& (0+255),c
 11274  002B2A  0E01               	movlw	1
 11275  002B2C  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11276  002B2E  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11277  002B32  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11278  002B36  5045               	movf	??_put_fat,w,c
 11279  002B38  1647               	andwf	??_put_fat+2,f,c
 11280  002B3A  5046               	movf	??_put_fat+1,w,c
 11281  002B3C  1648               	andwf	??_put_fat+3,f,c
 11282  002B3E  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11283  002B42  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11284  002B46  5047               	movf	??_put_fat+2,w,c
 11285  002B48  2649               	addwf	??_put_fat+4,f,c
 11286  002B4A  5048               	movf	??_put_fat+3,w,c
 11287  002B4C  224A               	addwfc	??_put_fat+5,f,c
 11288  002B4E  0E2E               	movlw	46
 11289  002B50  2449               	addwf	??_put_fat+4,w,c
 11290  002B52  6E54               	movwf	put_fat@p,c
 11291  002B54  0E00               	movlw	0
 11292  002B56  204A               	addwfc	??_put_fat+5,w,c
 11293  002B58  6E55               	movwf	put_fat@p+1,c
 11294                           
 11295                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 11296  002B5A  B03D               	btfsc	put_fat@clst,0,c
 11297  002B5C  D01B               	goto	l4680
 11298  002B5E  C041  F045         	movff	put_fat@val,??_put_fat
 11299  002B62  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11300  002B66  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11301  002B6A  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11302  002B6E  C046  F045         	movff	??_put_fat+1,??_put_fat
 11303  002B72  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11304  002B76  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11305  002B7A  6A48               	clrf	??_put_fat+3,c
 11306  002B7C  0E0F               	movlw	15
 11307  002B7E  1645               	andwf	??_put_fat,f,c
 11308  002B80  C054  FFD9         	movff	put_fat@p,fsr2l
 11309  002B84  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11310  002B88  50DF               	movf	indf2,w,c
 11311  002B8A  0BF0               	andlw	240
 11312  002B8C  1045               	iorwf	??_put_fat,w,c
 11313  002B8E  6E49               	movwf	(??_put_fat+4)& (0+255),c
 11314  002B90  5049               	movf	??_put_fat+4,w,c
 11315  002B92  D012               	goto	L9
 11316  002B94                     l4680:
 11317  002B94  C041  F045         	movff	put_fat@val,??_put_fat
 11318  002B98  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11319  002B9C  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11320  002BA0  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11321  002BA4  0E05               	movlw	5
 11322  002BA6  D005               	goto	u5330
 11323  002BA8                     u5335:
 11324  002BA8  90D8               	bcf	status,0,c
 11325  002BAA  3248               	rrcf	??_put_fat+3,f,c
 11326  002BAC  3247               	rrcf	??_put_fat+2,f,c
 11327  002BAE  3246               	rrcf	??_put_fat+1,f,c
 11328  002BB0  3245               	rrcf	??_put_fat,f,c
 11329  002BB2                     u5330:
 11330  002BB2  2EE8               	decfsz	wreg,f,c
 11331  002BB4  D7F9               	goto	u5335
 11332  002BB6  5045               	movf	??_put_fat,w,c
 11333  002BB8                     L9:
 11334  002BB8  6E4F               	movwf	_put_fat$401,c
 11335  002BBA  6A50               	clrf	_put_fat$401+1,c
 11336  002BBC  C054  FFD9         	movff	put_fat@p,fsr2l
 11337  002BC0  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11338  002BC4  C04F  FFDF         	movff	_put_fat$401,indf2
 11339  002BC8  D0D2               	goto	l4704
 11340  002BCA                     l4684:
 11341                           
 11342                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11343  002BCA  C03B  F030         	movff	put_fat@fs,move_window@fs
 11344  002BCE  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11345  002BD2  EE20 F01E          	lfsr	2,30
 11346  002BD6  503B               	movf	put_fat@fs,w,c
 11347  002BD8  26D9               	addwf	fsr2l,f,c
 11348  002BDA  503C               	movf	put_fat@fs+1,w,c
 11349  002BDC  22DA               	addwfc	fsr2h,f,c
 11350  002BDE  CFDE F045          	movff	postinc2,??_put_fat
 11351  002BE2  CFDE F046          	movff	postinc2,??_put_fat+1
 11352  002BE6  CFDE F047          	movff	postinc2,??_put_fat+2
 11353  002BEA  CFDE F048          	movff	postinc2,??_put_fat+3
 11354  002BEE  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11355  002BF2  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11356  002BF6  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11357  002BFA  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11358  002BFE  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11359  002C02  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11360  002C06  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11361  002C0A  6A4C               	clrf	??_put_fat+7,c
 11362  002C0C  5045               	movf	??_put_fat,w,c
 11363  002C0E  2449               	addwf	??_put_fat+4,w,c
 11364  002C10  6E32               	movwf	move_window@sector,c
 11365  002C12  5046               	movf	??_put_fat+1,w,c
 11366  002C14  204A               	addwfc	??_put_fat+5,w,c
 11367  002C16  6E33               	movwf	move_window@sector+1,c
 11368  002C18  5047               	movf	??_put_fat+2,w,c
 11369  002C1A  204B               	addwfc	??_put_fat+6,w,c
 11370  002C1C  6E34               	movwf	move_window@sector+2,c
 11371  002C1E  5048               	movf	??_put_fat+3,w,c
 11372  002C20  204C               	addwfc	??_put_fat+7,w,c
 11373  002C22  6E35               	movwf	move_window@sector+3,c
 11374  002C24  EC96  F02A         	call	_move_window	;wreg free
 11375  002C28  6E53               	movwf	put_fat@res,c
 11376                           
 11377                           ;ff.c: 905:    if (res != FR_OK) break;
 11378  002C2A  5053               	movf	put_fat@res,w,c
 11379  002C2C  A4D8               	btfss	status,2,c
 11380  002C2E  D0BE               	goto	l4710
 11381                           
 11382                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 11383  002C30  0EFF               	movlw	255
 11384  002C32  6E45               	movwf	??_put_fat& (0+255),c
 11385  002C34  0E01               	movlw	1
 11386  002C36  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11387  002C38  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11388  002C3C  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11389  002C40  90D8               	bcf	status,0,c
 11390  002C42  3647               	rlcf	??_put_fat+2,f,c
 11391  002C44  3648               	rlcf	??_put_fat+3,f,c
 11392  002C46  5045               	movf	??_put_fat,w,c
 11393  002C48  1647               	andwf	??_put_fat+2,f,c
 11394  002C4A  5046               	movf	??_put_fat+1,w,c
 11395  002C4C  1648               	andwf	??_put_fat+3,f,c
 11396  002C4E  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11397  002C52  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11398  002C56  5047               	movf	??_put_fat+2,w,c
 11399  002C58  2649               	addwf	??_put_fat+4,f,c
 11400  002C5A  5048               	movf	??_put_fat+3,w,c
 11401  002C5C  224A               	addwfc	??_put_fat+5,f,c
 11402  002C5E  0E2E               	movlw	46
 11403  002C60  2449               	addwf	??_put_fat+4,w,c
 11404  002C62  6E54               	movwf	put_fat@p,c
 11405  002C64  0E00               	movlw	0
 11406  002C66  204A               	addwfc	??_put_fat+5,w,c
 11407  002C68  6E55               	movwf	put_fat@p+1,c
 11408                           
 11409                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11410  002C6A  C054  FFD9         	movff	put_fat@p,fsr2l
 11411  002C6E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11412  002C72  C041  FFDE         	movff	put_fat@val,postinc2
 11413  002C76  C042  FFDD         	movff	put_fat@val+1,postdec2
 11414  002C7A  D079               	goto	l4704
 11415  002C7C                     l4694:
 11416                           
 11417                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11418  002C7C  C03B  F030         	movff	put_fat@fs,move_window@fs
 11419  002C80  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11420  002C84  EE20 F01E          	lfsr	2,30
 11421  002C88  503B               	movf	put_fat@fs,w,c
 11422  002C8A  26D9               	addwf	fsr2l,f,c
 11423  002C8C  503C               	movf	put_fat@fs+1,w,c
 11424  002C8E  22DA               	addwfc	fsr2h,f,c
 11425  002C90  CFDE F045          	movff	postinc2,??_put_fat
 11426  002C94  CFDE F046          	movff	postinc2,??_put_fat+1
 11427  002C98  CFDE F047          	movff	postinc2,??_put_fat+2
 11428  002C9C  CFDE F048          	movff	postinc2,??_put_fat+3
 11429  002CA0  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11430  002CA4  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11431  002CA8  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11432  002CAC  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11433  002CB0  0E08               	movlw	8
 11434  002CB2  D005               	goto	u5350
 11435  002CB4                     u5355:
 11436  002CB4  90D8               	bcf	status,0,c
 11437  002CB6  324C               	rrcf	??_put_fat+7,f,c
 11438  002CB8  324B               	rrcf	??_put_fat+6,f,c
 11439  002CBA  324A               	rrcf	??_put_fat+5,f,c
 11440  002CBC  3249               	rrcf	??_put_fat+4,f,c
 11441  002CBE                     u5350:
 11442  002CBE  2EE8               	decfsz	wreg,f,c
 11443  002CC0  D7F9               	goto	u5355
 11444  002CC2  5045               	movf	??_put_fat,w,c
 11445  002CC4  2449               	addwf	??_put_fat+4,w,c
 11446  002CC6  6E32               	movwf	move_window@sector,c
 11447  002CC8  5046               	movf	??_put_fat+1,w,c
 11448  002CCA  204A               	addwfc	??_put_fat+5,w,c
 11449  002CCC  6E33               	movwf	move_window@sector+1,c
 11450  002CCE  5047               	movf	??_put_fat+2,w,c
 11451  002CD0  204B               	addwfc	??_put_fat+6,w,c
 11452  002CD2  6E34               	movwf	move_window@sector+2,c
 11453  002CD4  5048               	movf	??_put_fat+3,w,c
 11454  002CD6  204C               	addwfc	??_put_fat+7,w,c
 11455  002CD8  6E35               	movwf	move_window@sector+3,c
 11456  002CDA  EC96  F02A         	call	_move_window	;wreg free
 11457  002CDE  6E53               	movwf	put_fat@res,c
 11458                           
 11459                           ;ff.c: 913:    if (res != FR_OK) break;
 11460  002CE0  5053               	movf	put_fat@res,w,c
 11461  002CE2  A4D8               	btfss	status,2,c
 11462  002CE4  D063               	goto	l4710
 11463                           
 11464                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 11465  002CE6  0EFF               	movlw	255
 11466  002CE8  6E45               	movwf	??_put_fat& (0+255),c
 11467  002CEA  0E01               	movlw	1
 11468  002CEC  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11469  002CEE  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11470  002CF2  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11471  002CF6  90D8               	bcf	status,0,c
 11472  002CF8  3647               	rlcf	??_put_fat+2,f,c
 11473  002CFA  3648               	rlcf	??_put_fat+3,f,c
 11474  002CFC  90D8               	bcf	status,0,c
 11475  002CFE  3647               	rlcf	??_put_fat+2,f,c
 11476  002D00  3648               	rlcf	??_put_fat+3,f,c
 11477  002D02  5045               	movf	??_put_fat,w,c
 11478  002D04  1647               	andwf	??_put_fat+2,f,c
 11479  002D06  5046               	movf	??_put_fat+1,w,c
 11480  002D08  1648               	andwf	??_put_fat+3,f,c
 11481  002D0A  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11482  002D0E  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11483  002D12  5047               	movf	??_put_fat+2,w,c
 11484  002D14  2649               	addwf	??_put_fat+4,f,c
 11485  002D16  5048               	movf	??_put_fat+3,w,c
 11486  002D18  224A               	addwfc	??_put_fat+5,f,c
 11487  002D1A  0E2E               	movlw	46
 11488  002D1C  2449               	addwf	??_put_fat+4,w,c
 11489  002D1E  6E54               	movwf	put_fat@p,c
 11490  002D20  0E00               	movlw	0
 11491  002D22  204A               	addwfc	??_put_fat+5,w,c
 11492  002D24  6E55               	movwf	put_fat@p+1,c
 11493                           
 11494                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 11495  002D26  C054  FFD9         	movff	put_fat@p,fsr2l
 11496  002D2A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11497  002D2E  0E00               	movlw	0
 11498  002D30  14DE               	andwf	postinc2,w,c
 11499  002D32  6E45               	movwf	??_put_fat& (0+255),c
 11500  002D34  0E00               	movlw	0
 11501  002D36  14DE               	andwf	postinc2,w,c
 11502  002D38  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11503  002D3A  0E00               	movlw	0
 11504  002D3C  14DE               	andwf	postinc2,w,c
 11505  002D3E  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11506  002D40  0EF0               	movlw	240
 11507  002D42  14DE               	andwf	postinc2,w,c
 11508  002D44  6E48               	movwf	(??_put_fat+3)& (0+255),c
 11509  002D46  5045               	movf	??_put_fat,w,c
 11510  002D48  1241               	iorwf	put_fat@val,f,c
 11511  002D4A  5046               	movf	??_put_fat+1,w,c
 11512  002D4C  1242               	iorwf	put_fat@val+1,f,c
 11513  002D4E  5047               	movf	??_put_fat+2,w,c
 11514  002D50  1243               	iorwf	put_fat@val+2,f,c
 11515  002D52  5048               	movf	??_put_fat+3,w,c
 11516  002D54  1244               	iorwf	put_fat@val+3,f,c
 11517                           
 11518                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 11519  002D56  C054  FFD9         	movff	put_fat@p,fsr2l
 11520  002D5A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11521  002D5E  C041  FFDE         	movff	put_fat@val,postinc2
 11522  002D62  C042  FFDE         	movff	put_fat@val+1,postinc2
 11523  002D66  C043  FFDE         	movff	put_fat@val+2,postinc2
 11524  002D6A  C044  FFDE         	movff	put_fat@val+3,postinc2
 11525  002D6E                     l4704:
 11526                           
 11527                           ;ff.c: 917:    fs->wflag = 1;
 11528  002D6E  EE20 F004          	lfsr	2,4
 11529  002D72  503B               	movf	put_fat@fs,w,c
 11530  002D74  26D9               	addwf	fsr2l,f,c
 11531  002D76  503C               	movf	put_fat@fs+1,w,c
 11532  002D78  22DA               	addwfc	fsr2h,f,c
 11533  002D7A  0E01               	movlw	1
 11534  002D7C  6EDF               	movwf	indf2,c
 11535                           
 11536                           ;ff.c: 918:    break;
 11537  002D7E  D016               	goto	l4710
 11538  002D80                     l4708:
 11539  002D80  C03B  FFD9         	movff	put_fat@fs,fsr2l
 11540  002D84  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 11541  002D88  50DF               	movf	indf2,w,c
 11542  002D8A  6E45               	movwf	??_put_fat& (0+255),c
 11543  002D8C  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11544                           
 11545                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11546                           ; Switch size 1, requested type "simple"
 11547                           ; Number of cases is 1, Range of values is 0 to 0
 11548                           ; switch strategies available:
 11549                           ; Name         Instructions Cycles
 11550                           ; simple_byte            4     3 (average)
 11551                           ;	Chosen strategy is simple_byte
 11552  002D8E  5046               	movf	??_put_fat+1,w,c
 11553  002D90  0A00               	xorlw	0	; case 0
 11554  002D92  A4D8               	btfss	status,2,c
 11555  002D94  D610               	goto	u5260
 11556                           
 11557                           ; Switch size 1, requested type "simple"
 11558                           ; Number of cases is 3, Range of values is 1 to 3
 11559                           ; switch strategies available:
 11560                           ; Name         Instructions Cycles
 11561                           ; simple_byte           10     6 (average)
 11562                           ;	Chosen strategy is simple_byte
 11563  002D96  5045               	movf	??_put_fat,w,c
 11564  002D98  0A01               	xorlw	1	; case 1
 11565  002D9A  B4D8               	btfsc	status,2,c
 11566  002D9C  D60F               	goto	l278
 11567  002D9E  0A03               	xorlw	3	; case 2
 11568  002DA0  B4D8               	btfsc	status,2,c
 11569  002DA2  D713               	goto	l4684
 11570  002DA4  0A01               	xorlw	1	; case 3
 11571  002DA6  B4D8               	btfsc	status,2,c
 11572  002DA8  D769               	goto	l4694
 11573  002DAA  D605               	goto	u5260
 11574  002DAC                     l4710:
 11575                           
 11576                           ;ff.c: 925:  return res;
 11577  002DAC  5053               	movf	put_fat@res,w,c
 11578  002DAE  0012               	return		;funcret
 11579  002DB0                     __end_of_put_fat:
 11580                           	opt callstack 0
 11581                           
 11582 ;; *************** function _get_fat *****************
 11583 ;; Defined at:
 11584 ;;		line 818 in file "ff.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  fs              2   58[COMRAM] PTR struct .
 11587 ;;		 -> FatFs(558), NULL(0), 
 11588 ;;  clst            4   60[COMRAM] unsigned long 
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;  val             4   75[COMRAM] unsigned long 
 11591 ;;  bc              2   83[COMRAM] unsigned short 
 11592 ;;  p               2   81[COMRAM] PTR unsigned char 
 11593 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11594 ;;  wc              2   79[COMRAM] unsigned short 
 11595 ;; Return value:  Size  Location     Type
 11596 ;;                  4   58[COMRAM] unsigned long 
 11597 ;; Registers used:
 11598 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11604 ;;      Params:         6       0       0       0       0       0       0       0       0
 11605 ;;      Locals:        12       0       0       0       0       0       0       0       0
 11606 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11607 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11608 ;;Total ram usage:       27 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    8
 11611 ;; This function calls:
 11612 ;;		_move_window
 11613 ;; This function is called by:
 11614 ;;		_remove_chain
 11615 ;;		_create_chain
 11616 ;;		_dir_sdi
 11617 ;;		_dir_next
 11618 ;;		_f_read
 11619 ;;		_f_lseek
 11620 ;; This function uses a non-reentrant model
 11621 ;;
 11622                           
 11623                           	psect	text30
 11624  0031B6                     __ptext30:
 11625                           	opt callstack 0
 11626  0031B6                     _get_fat:
 11627                           	opt callstack 19
 11628                           
 11629                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 11630                           
 11631                           ;incstack = 0
 11632  0031B6  5040               	movf	get_fat@clst+3,w,c
 11633  0031B8  103F               	iorwf	get_fat@clst+2,w,c
 11634  0031BA  103E               	iorwf	get_fat@clst+1,w,c
 11635  0031BC  E104               	bnz	u5140
 11636  0031BE  0E02               	movlw	2
 11637  0031C0  5C3D               	subwf	get_fat@clst,w,c
 11638  0031C2  A0D8               	btfss	status,0,c
 11639  0031C4  D010               	goto	u5150
 11640  0031C6                     u5140:
 11641  0031C6  EE20 F012          	lfsr	2,18
 11642  0031CA  503B               	movf	get_fat@fs,w,c
 11643  0031CC  26D9               	addwf	fsr2l,f,c
 11644  0031CE  503C               	movf	get_fat@fs+1,w,c
 11645  0031D0  22DA               	addwfc	fsr2h,f,c
 11646  0031D2  50DE               	movf	postinc2,w,c
 11647  0031D4  5C3D               	subwf	get_fat@clst,w,c
 11648  0031D6  50DE               	movf	postinc2,w,c
 11649  0031D8  583E               	subwfb	get_fat@clst+1,w,c
 11650  0031DA  50DE               	movf	postinc2,w,c
 11651  0031DC  583F               	subwfb	get_fat@clst+2,w,c
 11652  0031DE  50DE               	movf	postinc2,w,c
 11653  0031E0  5840               	subwfb	get_fat@clst+3,w,c
 11654  0031E2  A0D8               	btfss	status,0,c
 11655  0031E4  D008               	goto	l252
 11656  0031E6                     u5150:
 11657                           
 11658                           ;ff.c: 829:   val = 1;
 11659  0031E6  0E01               	movlw	1
 11660  0031E8  6E4C               	movwf	get_fat@val,c
 11661  0031EA  0E00               	movlw	0
 11662  0031EC  6E4D               	movwf	get_fat@val+1,c
 11663  0031EE  0E00               	movlw	0
 11664  0031F0  6E4E               	movwf	get_fat@val+2,c
 11665  0031F2  0E00               	movlw	0
 11666  0031F4  D190               	goto	L11
 11667  0031F6                     l252:
 11668                           
 11669                           ;ff.c: 832:   val = 0xFFFFFFFF;
 11670  0031F6  684C               	setf	get_fat@val,c
 11671  0031F8  684D               	setf	get_fat@val+1,c
 11672  0031FA  684E               	setf	get_fat@val+2,c
 11673  0031FC  684F               	setf	get_fat@val+3,c
 11674                           
 11675                           ;ff.c: 834:   switch (fs->fs_type) {
 11676  0031FE  D18D               	goto	l4634
 11677  003200                     l257:
 11678                           
 11679                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 11680  003200  C03D  F054         	movff	get_fat@clst,get_fat@bc
 11681  003204  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 11682  003208  90D8               	bcf	status,0,c
 11683  00320A  3055               	rrcf	get_fat@bc+1,w,c
 11684  00320C  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11685  00320E  3054               	rrcf	get_fat@bc,w,c
 11686  003210  6E41               	movwf	??_get_fat& (0+255),c
 11687  003212  5041               	movf	??_get_fat,w,c
 11688  003214  2654               	addwf	get_fat@bc,f,c
 11689  003216  5042               	movf	??_get_fat+1,w,c
 11690  003218  2255               	addwfc	get_fat@bc+1,f,c
 11691                           
 11692                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11693  00321A  C03B  F030         	movff	get_fat@fs,move_window@fs
 11694  00321E  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11695  003222  EE20 F01E          	lfsr	2,30
 11696  003226  503B               	movf	get_fat@fs,w,c
 11697  003228  26D9               	addwf	fsr2l,f,c
 11698  00322A  503C               	movf	get_fat@fs+1,w,c
 11699  00322C  22DA               	addwfc	fsr2h,f,c
 11700  00322E  CFDE F041          	movff	postinc2,??_get_fat
 11701  003232  CFDE F042          	movff	postinc2,??_get_fat+1
 11702  003236  CFDE F043          	movff	postinc2,??_get_fat+2
 11703  00323A  CFDE F044          	movff	postinc2,??_get_fat+3
 11704  00323E  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11705  003242  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11706  003246  0E09               	movlw	9
 11707  003248  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11708  00324A                     u5165:
 11709  00324A  90D8               	bcf	status,0,c
 11710  00324C  3246               	rrcf	??_get_fat+5,f,c
 11711  00324E  3245               	rrcf	??_get_fat+4,f,c
 11712  003250  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11713  003252  D7FB               	goto	u5165
 11714  003254  5045               	movf	??_get_fat+4,w,c
 11715  003256  2441               	addwf	??_get_fat,w,c
 11716  003258  6E32               	movwf	move_window@sector,c
 11717  00325A  5046               	movf	??_get_fat+5,w,c
 11718  00325C  2042               	addwfc	??_get_fat+1,w,c
 11719  00325E  6E33               	movwf	move_window@sector+1,c
 11720  003260  0E00               	movlw	0
 11721  003262  2043               	addwfc	??_get_fat+2,w,c
 11722  003264  6E34               	movwf	move_window@sector+2,c
 11723  003266  0E00               	movlw	0
 11724  003268  2044               	addwfc	??_get_fat+3,w,c
 11725  00326A  6E35               	movwf	move_window@sector+3,c
 11726  00326C  EC96  F02A         	call	_move_window	;wreg free
 11727  003270  0900               	iorlw	0
 11728  003272  A4D8               	btfss	status,2,c
 11729  003274  D168               	goto	l255
 11730                           
 11731                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 11732  003276  0EFF               	movlw	255
 11733  003278  6E41               	movwf	??_get_fat& (0+255),c
 11734  00327A  0E01               	movlw	1
 11735  00327C  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11736  00327E  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11737  003282  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11738  003286  5041               	movf	??_get_fat,w,c
 11739  003288  1643               	andwf	??_get_fat+2,f,c
 11740  00328A  5042               	movf	??_get_fat+1,w,c
 11741  00328C  1644               	andwf	??_get_fat+3,f,c
 11742  00328E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11743  003292  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11744  003296  5043               	movf	??_get_fat+2,w,c
 11745  003298  2645               	addwf	??_get_fat+4,f,c
 11746  00329A  5044               	movf	??_get_fat+3,w,c
 11747  00329C  2246               	addwfc	??_get_fat+5,f,c
 11748  00329E  0E2E               	movlw	46
 11749  0032A0  2445               	addwf	??_get_fat+4,w,c
 11750  0032A2  6ED9               	movwf	fsr2l,c
 11751  0032A4  0E00               	movlw	0
 11752  0032A6  2046               	addwfc	??_get_fat+5,w,c
 11753  0032A8  6EDA               	movwf	fsr2h,c
 11754  0032AA  50DF               	movf	indf2,w,c
 11755  0032AC  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11756  0032AE  5047               	movf	??_get_fat+6,w,c
 11757  0032B0  6E50               	movwf	get_fat@wc,c
 11758  0032B2  6A51               	clrf	get_fat@wc+1,c
 11759  0032B4  4A54               	infsnz	get_fat@bc,f,c
 11760  0032B6  2A55               	incf	get_fat@bc+1,f,c
 11761                           
 11762                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11763  0032B8  C03B  F030         	movff	get_fat@fs,move_window@fs
 11764  0032BC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11765  0032C0  EE20 F01E          	lfsr	2,30
 11766  0032C4  503B               	movf	get_fat@fs,w,c
 11767  0032C6  26D9               	addwf	fsr2l,f,c
 11768  0032C8  503C               	movf	get_fat@fs+1,w,c
 11769  0032CA  22DA               	addwfc	fsr2h,f,c
 11770  0032CC  CFDE F041          	movff	postinc2,??_get_fat
 11771  0032D0  CFDE F042          	movff	postinc2,??_get_fat+1
 11772  0032D4  CFDE F043          	movff	postinc2,??_get_fat+2
 11773  0032D8  CFDE F044          	movff	postinc2,??_get_fat+3
 11774  0032DC  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11775  0032E0  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11776  0032E4  0E09               	movlw	9
 11777  0032E6  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11778  0032E8                     u5185:
 11779  0032E8  90D8               	bcf	status,0,c
 11780  0032EA  3246               	rrcf	??_get_fat+5,f,c
 11781  0032EC  3245               	rrcf	??_get_fat+4,f,c
 11782  0032EE  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11783  0032F0  D7FB               	goto	u5185
 11784  0032F2  5045               	movf	??_get_fat+4,w,c
 11785  0032F4  2441               	addwf	??_get_fat,w,c
 11786  0032F6  6E32               	movwf	move_window@sector,c
 11787  0032F8  5046               	movf	??_get_fat+5,w,c
 11788  0032FA  2042               	addwfc	??_get_fat+1,w,c
 11789  0032FC  6E33               	movwf	move_window@sector+1,c
 11790  0032FE  0E00               	movlw	0
 11791  003300  2043               	addwfc	??_get_fat+2,w,c
 11792  003302  6E34               	movwf	move_window@sector+2,c
 11793  003304  0E00               	movlw	0
 11794  003306  2044               	addwfc	??_get_fat+3,w,c
 11795  003308  6E35               	movwf	move_window@sector+3,c
 11796  00330A  EC96  F02A         	call	_move_window	;wreg free
 11797  00330E  0900               	iorlw	0
 11798  003310  A4D8               	btfss	status,2,c
 11799  003312  D119               	goto	l255
 11800                           
 11801                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 11802  003314  0EFF               	movlw	255
 11803  003316  6E41               	movwf	??_get_fat& (0+255),c
 11804  003318  0E01               	movlw	1
 11805  00331A  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11806  00331C  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11807  003320  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11808  003324  5041               	movf	??_get_fat,w,c
 11809  003326  1643               	andwf	??_get_fat+2,f,c
 11810  003328  5042               	movf	??_get_fat+1,w,c
 11811  00332A  1644               	andwf	??_get_fat+3,f,c
 11812  00332C  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11813  003330  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11814  003334  5043               	movf	??_get_fat+2,w,c
 11815  003336  2645               	addwf	??_get_fat+4,f,c
 11816  003338  5044               	movf	??_get_fat+3,w,c
 11817  00333A  2246               	addwfc	??_get_fat+5,f,c
 11818  00333C  0E2E               	movlw	46
 11819  00333E  2445               	addwf	??_get_fat+4,w,c
 11820  003340  6ED9               	movwf	fsr2l,c
 11821  003342  0E00               	movlw	0
 11822  003344  2046               	addwfc	??_get_fat+5,w,c
 11823  003346  6EDA               	movwf	fsr2h,c
 11824  003348  50DF               	movf	indf2,w,c
 11825  00334A  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11826  00334C  5047               	movf	??_get_fat+6,w,c
 11827  00334E  6E49               	movwf	(??_get_fat+8)& (0+255),c
 11828  003350  6A48               	clrf	(??_get_fat+7)& (0+255),c
 11829  003352  5048               	movf	??_get_fat+7,w,c
 11830  003354  1250               	iorwf	get_fat@wc,f,c
 11831  003356  5049               	movf	??_get_fat+8,w,c
 11832  003358  1251               	iorwf	get_fat@wc+1,f,c
 11833                           
 11834                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 11835  00335A  B03D               	btfsc	get_fat@clst,0,c
 11836  00335C  D007               	goto	l4612
 11837  00335E  0EFF               	movlw	255
 11838  003360  1450               	andwf	get_fat@wc,w,c
 11839  003362  6E4A               	movwf	_get_fat$374,c
 11840  003364  0E0F               	movlw	15
 11841  003366  1451               	andwf	get_fat@wc+1,w,c
 11842  003368  6E4B               	movwf	_get_fat$374+1,c
 11843  00336A  D00F               	goto	l4614
 11844  00336C                     l4612:
 11845  00336C  C050  F041         	movff	get_fat@wc,??_get_fat
 11846  003370  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 11847  003374  0E04               	movlw	4
 11848  003376  6E43               	movwf	(??_get_fat+2)& (0+255),c
 11849  003378                     u5215:
 11850  003378  90D8               	bcf	status,0,c
 11851  00337A  3242               	rrcf	??_get_fat+1,f,c
 11852  00337C  3241               	rrcf	??_get_fat,f,c
 11853  00337E  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 11854  003380  D7FB               	goto	u5215
 11855  003382  C041  F04A         	movff	??_get_fat,_get_fat$374
 11856  003386  C042  F04B         	movff	??_get_fat+1,_get_fat$374+1
 11857  00338A                     l4614:
 11858  00338A  C04A  F04C         	movff	_get_fat$374,get_fat@val
 11859  00338E  C04B  F04D         	movff	_get_fat$374+1,get_fat@val+1
 11860  003392  D05B               	goto	L12
 11861  003394                     l4616:
 11862                           
 11863                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 11864  003394  C03B  F030         	movff	get_fat@fs,move_window@fs
 11865  003398  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11866  00339C  EE20 F01E          	lfsr	2,30
 11867  0033A0  503B               	movf	get_fat@fs,w,c
 11868  0033A2  26D9               	addwf	fsr2l,f,c
 11869  0033A4  503C               	movf	get_fat@fs+1,w,c
 11870  0033A6  22DA               	addwfc	fsr2h,f,c
 11871  0033A8  CFDE F041          	movff	postinc2,??_get_fat
 11872  0033AC  CFDE F042          	movff	postinc2,??_get_fat+1
 11873  0033B0  CFDE F043          	movff	postinc2,??_get_fat+2
 11874  0033B4  CFDE F044          	movff	postinc2,??_get_fat+3
 11875  0033B8  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 11876  0033BC  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 11877  0033C0  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 11878  0033C4  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 11879  0033C8  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 11880  0033CC  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 11881  0033D0  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 11882  0033D4  6A48               	clrf	??_get_fat+7,c
 11883  0033D6  5041               	movf	??_get_fat,w,c
 11884  0033D8  2445               	addwf	??_get_fat+4,w,c
 11885  0033DA  6E32               	movwf	move_window@sector,c
 11886  0033DC  5042               	movf	??_get_fat+1,w,c
 11887  0033DE  2046               	addwfc	??_get_fat+5,w,c
 11888  0033E0  6E33               	movwf	move_window@sector+1,c
 11889  0033E2  5043               	movf	??_get_fat+2,w,c
 11890  0033E4  2047               	addwfc	??_get_fat+6,w,c
 11891  0033E6  6E34               	movwf	move_window@sector+2,c
 11892  0033E8  5044               	movf	??_get_fat+3,w,c
 11893  0033EA  2048               	addwfc	??_get_fat+7,w,c
 11894  0033EC  6E35               	movwf	move_window@sector+3,c
 11895  0033EE  EC96  F02A         	call	_move_window	;wreg free
 11896  0033F2  0900               	iorlw	0
 11897  0033F4  A4D8               	btfss	status,2,c
 11898  0033F6  D0A7               	goto	l255
 11899                           
 11900                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 11901  0033F8  0EFF               	movlw	255
 11902  0033FA  6E41               	movwf	??_get_fat& (0+255),c
 11903  0033FC  0E01               	movlw	1
 11904  0033FE  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11905  003400  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 11906  003404  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 11907  003408  90D8               	bcf	status,0,c
 11908  00340A  3643               	rlcf	??_get_fat+2,f,c
 11909  00340C  3644               	rlcf	??_get_fat+3,f,c
 11910  00340E  5041               	movf	??_get_fat,w,c
 11911  003410  1643               	andwf	??_get_fat+2,f,c
 11912  003412  5042               	movf	??_get_fat+1,w,c
 11913  003414  1644               	andwf	??_get_fat+3,f,c
 11914  003416  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11915  00341A  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11916  00341E  5043               	movf	??_get_fat+2,w,c
 11917  003420  2645               	addwf	??_get_fat+4,f,c
 11918  003422  5044               	movf	??_get_fat+3,w,c
 11919  003424  2246               	addwfc	??_get_fat+5,f,c
 11920  003426  0E2E               	movlw	46
 11921  003428  2445               	addwf	??_get_fat+4,w,c
 11922  00342A  6E52               	movwf	get_fat@p,c
 11923  00342C  0E00               	movlw	0
 11924  00342E  2046               	addwfc	??_get_fat+5,w,c
 11925  003430  6E53               	movwf	get_fat@p+1,c
 11926                           
 11927                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 11928  003432  C052  FFD9         	movff	get_fat@p,fsr2l
 11929  003436  C053  FFDA         	movff	get_fat@p+1,fsr2h
 11930  00343A  CFDE F041          	movff	postinc2,??_get_fat
 11931  00343E  CFDD F042          	movff	postdec2,??_get_fat+1
 11932  003442  C041  F04C         	movff	??_get_fat,get_fat@val
 11933  003446  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 11934  00344A                     L12:
 11935  00344A  6A4E               	clrf	get_fat@val+2,c
 11936  00344C  6A4F               	clrf	get_fat@val+3,c
 11937                           
 11938                           ;ff.c: 848:    break;
 11939  00344E  D07B               	goto	l255
 11940  003450                     l4624:
 11941                           
 11942                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 11943  003450  C03B  F030         	movff	get_fat@fs,move_window@fs
 11944  003454  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11945  003458  EE20 F01E          	lfsr	2,30
 11946  00345C  503B               	movf	get_fat@fs,w,c
 11947  00345E  26D9               	addwf	fsr2l,f,c
 11948  003460  503C               	movf	get_fat@fs+1,w,c
 11949  003462  22DA               	addwfc	fsr2h,f,c
 11950  003464  CFDE F041          	movff	postinc2,??_get_fat
 11951  003468  CFDE F042          	movff	postinc2,??_get_fat+1
 11952  00346C  CFDE F043          	movff	postinc2,??_get_fat+2
 11953  003470  CFDE F044          	movff	postinc2,??_get_fat+3
 11954  003474  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 11955  003478  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 11956  00347C  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 11957  003480  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 11958  003484  0E08               	movlw	8
 11959  003486  D005               	goto	u5230
 11960  003488                     u5235:
 11961  003488  90D8               	bcf	status,0,c
 11962  00348A  3248               	rrcf	??_get_fat+7,f,c
 11963  00348C  3247               	rrcf	??_get_fat+6,f,c
 11964  00348E  3246               	rrcf	??_get_fat+5,f,c
 11965  003490  3245               	rrcf	??_get_fat+4,f,c
 11966  003492                     u5230:
 11967  003492  2EE8               	decfsz	wreg,f,c
 11968  003494  D7F9               	goto	u5235
 11969  003496  5041               	movf	??_get_fat,w,c
 11970  003498  2445               	addwf	??_get_fat+4,w,c
 11971  00349A  6E32               	movwf	move_window@sector,c
 11972  00349C  5042               	movf	??_get_fat+1,w,c
 11973  00349E  2046               	addwfc	??_get_fat+5,w,c
 11974  0034A0  6E33               	movwf	move_window@sector+1,c
 11975  0034A2  5043               	movf	??_get_fat+2,w,c
 11976  0034A4  2047               	addwfc	??_get_fat+6,w,c
 11977  0034A6  6E34               	movwf	move_window@sector+2,c
 11978  0034A8  5044               	movf	??_get_fat+3,w,c
 11979  0034AA  2048               	addwfc	??_get_fat+7,w,c
 11980  0034AC  6E35               	movwf	move_window@sector+3,c
 11981  0034AE  EC96  F02A         	call	_move_window	;wreg free
 11982  0034B2  0900               	iorlw	0
 11983  0034B4  A4D8               	btfss	status,2,c
 11984  0034B6  D047               	goto	l255
 11985                           
 11986                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 11987  0034B8  0EFF               	movlw	255
 11988  0034BA  6E41               	movwf	??_get_fat& (0+255),c
 11989  0034BC  0E01               	movlw	1
 11990  0034BE  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11991  0034C0  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 11992  0034C4  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 11993  0034C8  90D8               	bcf	status,0,c
 11994  0034CA  3643               	rlcf	??_get_fat+2,f,c
 11995  0034CC  3644               	rlcf	??_get_fat+3,f,c
 11996  0034CE  90D8               	bcf	status,0,c
 11997  0034D0  3643               	rlcf	??_get_fat+2,f,c
 11998  0034D2  3644               	rlcf	??_get_fat+3,f,c
 11999  0034D4  5041               	movf	??_get_fat,w,c
 12000  0034D6  1643               	andwf	??_get_fat+2,f,c
 12001  0034D8  5042               	movf	??_get_fat+1,w,c
 12002  0034DA  1644               	andwf	??_get_fat+3,f,c
 12003  0034DC  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 12004  0034E0  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 12005  0034E4  5043               	movf	??_get_fat+2,w,c
 12006  0034E6  2645               	addwf	??_get_fat+4,f,c
 12007  0034E8  5044               	movf	??_get_fat+3,w,c
 12008  0034EA  2246               	addwfc	??_get_fat+5,f,c
 12009  0034EC  0E2E               	movlw	46
 12010  0034EE  2445               	addwf	??_get_fat+4,w,c
 12011  0034F0  6E52               	movwf	get_fat@p,c
 12012  0034F2  0E00               	movlw	0
 12013  0034F4  2046               	addwfc	??_get_fat+5,w,c
 12014  0034F6  6E53               	movwf	get_fat@p+1,c
 12015                           
 12016                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 12017  0034F8  C052  FFD9         	movff	get_fat@p,fsr2l
 12018  0034FC  C053  FFDA         	movff	get_fat@p+1,fsr2h
 12019  003500  0EFF               	movlw	255
 12020  003502  14DE               	andwf	postinc2,w,c
 12021  003504  6E4C               	movwf	get_fat@val,c
 12022  003506  0EFF               	movlw	255
 12023  003508  14DE               	andwf	postinc2,w,c
 12024  00350A  6E4D               	movwf	get_fat@val+1,c
 12025  00350C  0EFF               	movlw	255
 12026  00350E  14DE               	andwf	postinc2,w,c
 12027  003510  6E4E               	movwf	get_fat@val+2,c
 12028  003512  0E0F               	movlw	15
 12029  003514  14DE               	andwf	postinc2,w,c
 12030  003516                     L11:
 12031  003516  6E4F               	movwf	get_fat@val+3,c
 12032                           
 12033                           ;ff.c: 854:    break;
 12034  003518  D016               	goto	l255
 12035  00351A                     l4634:
 12036  00351A  C03B  FFD9         	movff	get_fat@fs,fsr2l
 12037  00351E  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 12038  003522  50DF               	movf	indf2,w,c
 12039  003524  6E41               	movwf	??_get_fat& (0+255),c
 12040  003526  6A42               	clrf	(??_get_fat+1)& (0+255),c
 12041                           
 12042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12043                           ; Switch size 1, requested type "simple"
 12044                           ; Number of cases is 1, Range of values is 0 to 0
 12045                           ; switch strategies available:
 12046                           ; Name         Instructions Cycles
 12047                           ; simple_byte            4     3 (average)
 12048                           ;	Chosen strategy is simple_byte
 12049  003528  5042               	movf	??_get_fat+1,w,c
 12050  00352A  0A00               	xorlw	0	; case 0
 12051  00352C  A4D8               	btfss	status,2,c
 12052  00352E  D65B               	goto	u5150
 12053                           
 12054                           ; Switch size 1, requested type "simple"
 12055                           ; Number of cases is 3, Range of values is 1 to 3
 12056                           ; switch strategies available:
 12057                           ; Name         Instructions Cycles
 12058                           ; simple_byte           10     6 (average)
 12059                           ;	Chosen strategy is simple_byte
 12060  003530  5041               	movf	??_get_fat,w,c
 12061  003532  0A01               	xorlw	1	; case 1
 12062  003534  B4D8               	btfsc	status,2,c
 12063  003536  D664               	goto	l257
 12064  003538  0A03               	xorlw	3	; case 2
 12065  00353A  B4D8               	btfsc	status,2,c
 12066  00353C  D72B               	goto	l4616
 12067  00353E  0A01               	xorlw	1	; case 3
 12068  003540  B4D8               	btfsc	status,2,c
 12069  003542  D786               	goto	l4624
 12070  003544  D650               	goto	u5150
 12071  003546                     l255:
 12072                           
 12073                           ;ff.c: 861:  return val;
 12074  003546  C04C  F03B         	movff	get_fat@val,?_get_fat
 12075  00354A  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 12076  00354E  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 12077  003552  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 12078  003556  0012               	return		;funcret
 12079  003558                     __end_of_get_fat:
 12080                           	opt callstack 0
 12081                           
 12082 ;; *************** function _clust2sect *****************
 12083 ;; Defined at:
 12084 ;;		line 800 in file "ff.c"
 12085 ;; Parameters:    Size  Location     Type
 12086 ;;  fs              2   12[COMRAM] PTR struct .
 12087 ;;		 -> FatFs(558), NULL(0), 
 12088 ;;  clst            4   14[COMRAM] unsigned long 
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;		None
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  4   12[COMRAM] unsigned long 
 12093 ;; Registers used:
 12094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12100 ;;      Params:         6       0       0       0       0       0       0       0       0
 12101 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12102 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12103 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12104 ;;Total ram usage:       11 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    1
 12107 ;; This function calls:
 12108 ;;		___lmul
 12109 ;; This function is called by:
 12110 ;;		_dir_sdi
 12111 ;;		_dir_next
 12112 ;;		_f_read
 12113 ;;		_f_write
 12114 ;;		_f_lseek
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text31
 12119  00531C                     __ptext31:
 12120                           	opt callstack 0
 12121  00531C                     _clust2sect:
 12122                           	opt callstack 26
 12123                           
 12124                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 12125                           
 12126                           ;incstack = 0
 12127  00531C  0E02               	movlw	2
 12128  00531E  5E0F               	subwf	clust2sect@clst,f,c
 12129  005320  0E00               	movlw	0
 12130  005322  5A10               	subwfb	clust2sect@clst+1,f,c
 12131  005324  5A11               	subwfb	clust2sect@clst+2,f,c
 12132  005326  5A12               	subwfb	clust2sect@clst+3,f,c
 12133                           
 12134                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 12135  005328  EE20 F012          	lfsr	2,18
 12136  00532C  500D               	movf	clust2sect@fs,w,c
 12137  00532E  26D9               	addwf	fsr2l,f,c
 12138  005330  500E               	movf	clust2sect@fs+1,w,c
 12139  005332  22DA               	addwfc	fsr2h,f,c
 12140  005334  0EFE               	movlw	254
 12141  005336  24DE               	addwf	postinc2,w,c
 12142  005338  6E13               	movwf	??_clust2sect& (0+255),c
 12143  00533A  0EFF               	movlw	255
 12144  00533C  20DE               	addwfc	postinc2,w,c
 12145  00533E  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 12146  005340  0EFF               	movlw	255
 12147  005342  20DE               	addwfc	postinc2,w,c
 12148  005344  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 12149  005346  0EFF               	movlw	255
 12150  005348  20DE               	addwfc	postinc2,w,c
 12151  00534A  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 12152  00534C  5013               	movf	??_clust2sect,w,c
 12153  00534E  5C0F               	subwf	clust2sect@clst,w,c
 12154  005350  5014               	movf	??_clust2sect+1,w,c
 12155  005352  5810               	subwfb	clust2sect@clst+1,w,c
 12156  005354  5015               	movf	??_clust2sect+2,w,c
 12157  005356  5811               	subwfb	clust2sect@clst+2,w,c
 12158  005358  5016               	movf	??_clust2sect+3,w,c
 12159  00535A  5812               	subwfb	clust2sect@clst+3,w,c
 12160  00535C  A0D8               	btfss	status,0,c
 12161  00535E  D009               	goto	l4744
 12162  005360  0E00               	movlw	0
 12163  005362  6E0D               	movwf	?_clust2sect,c
 12164  005364  0E00               	movlw	0
 12165  005366  6E0E               	movwf	?_clust2sect+1,c
 12166  005368  0E00               	movlw	0
 12167  00536A  6E0F               	movwf	?_clust2sect+2,c
 12168  00536C  0E00               	movlw	0
 12169  00536E  6E10               	movwf	?_clust2sect+3,c
 12170  005370  0012               	return	
 12171  005372                     l4744:
 12172                           
 12173                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 12174  005372  EE20 F026          	lfsr	2,38
 12175  005376  500D               	movf	clust2sect@fs,w,c
 12176  005378  26D9               	addwf	fsr2l,f,c
 12177  00537A  500E               	movf	clust2sect@fs+1,w,c
 12178  00537C  22DA               	addwfc	fsr2h,f,c
 12179  00537E  CFDE F013          	movff	postinc2,??_clust2sect
 12180  005382  CFDE F014          	movff	postinc2,??_clust2sect+1
 12181  005386  CFDE F015          	movff	postinc2,??_clust2sect+2
 12182  00538A  CFDE F016          	movff	postinc2,??_clust2sect+3
 12183  00538E  EE20 F002          	lfsr	2,2
 12184  005392  500D               	movf	clust2sect@fs,w,c
 12185  005394  26D9               	addwf	fsr2l,f,c
 12186  005396  500E               	movf	clust2sect@fs+1,w,c
 12187  005398  22DA               	addwfc	fsr2h,f,c
 12188  00539A  50DF               	movf	indf2,w,c
 12189  00539C  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 12190  00539E  5017               	movf	??_clust2sect+4,w,c
 12191  0053A0  6E01               	movwf	___lmul@multiplier,c
 12192  0053A2  6A02               	clrf	___lmul@multiplier+1,c
 12193  0053A4  6A03               	clrf	___lmul@multiplier+2,c
 12194  0053A6  6A04               	clrf	___lmul@multiplier+3,c
 12195  0053A8  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 12196  0053AC  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 12197  0053B0  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 12198  0053B4  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 12199  0053B8  EC61  F02D         	call	___lmul	;wreg free
 12200  0053BC  5013               	movf	??_clust2sect,w,c
 12201  0053BE  2401               	addwf	?___lmul,w,c
 12202  0053C0  6E0D               	movwf	?_clust2sect,c
 12203  0053C2  5014               	movf	??_clust2sect+1,w,c
 12204  0053C4  2002               	addwfc	?___lmul+1,w,c
 12205  0053C6  6E0E               	movwf	?_clust2sect+1,c
 12206  0053C8  5015               	movf	??_clust2sect+2,w,c
 12207  0053CA  2003               	addwfc	?___lmul+2,w,c
 12208  0053CC  6E0F               	movwf	?_clust2sect+2,c
 12209  0053CE  5016               	movf	??_clust2sect+3,w,c
 12210  0053D0  2004               	addwfc	?___lmul+3,w,c
 12211  0053D2  6E10               	movwf	?_clust2sect+3,c
 12212  0053D4  0012               	return		;funcret
 12213  0053D6                     __end_of_clust2sect:
 12214                           	opt callstack 0
 12215                           
 12216 ;; *************** function ___lmul *****************
 12217 ;; Defined at:
 12218 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;  multiplier      4    0[COMRAM] unsigned long 
 12221 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  product         4    8[COMRAM] unsigned long 
 12224 ;; Return value:  Size  Location     Type
 12225 ;;                  4    0[COMRAM] unsigned long 
 12226 ;; Registers used:
 12227 ;;		wreg, status,2, status,0
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/0
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12233 ;;      Params:         8       0       0       0       0       0       0       0       0
 12234 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12235 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12236 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12237 ;;Total ram usage:       12 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; This function calls:
 12240 ;;		Nothing
 12241 ;; This function is called by:
 12242 ;;		_clust2sect
 12243 ;;		_find_volume
 12244 ;; This function uses a non-reentrant model
 12245 ;;
 12246                           
 12247                           	psect	text32
 12248  005AC2                     __ptext32:
 12249                           	opt callstack 0
 12250  005AC2                     ___lmul:
 12251                           	opt callstack 26
 12252                           
 12253                           ;incstack = 0
 12254  005AC2  0E00               	movlw	0
 12255  005AC4  6E09               	movwf	___lmul@product,c
 12256  005AC6  0E00               	movlw	0
 12257  005AC8  6E0A               	movwf	___lmul@product+1,c
 12258  005ACA  0E00               	movlw	0
 12259  005ACC  6E0B               	movwf	___lmul@product+2,c
 12260  005ACE  0E00               	movlw	0
 12261  005AD0  6E0C               	movwf	___lmul@product+3,c
 12262  005AD2                     l4720:
 12263  005AD2  A001               	btfss	___lmul@multiplier,0,c
 12264  005AD4  D008               	goto	l4724
 12265  005AD6  5005               	movf	___lmul@multiplicand,w,c
 12266  005AD8  2609               	addwf	___lmul@product,f,c
 12267  005ADA  5006               	movf	___lmul@multiplicand+1,w,c
 12268  005ADC  220A               	addwfc	___lmul@product+1,f,c
 12269  005ADE  5007               	movf	___lmul@multiplicand+2,w,c
 12270  005AE0  220B               	addwfc	___lmul@product+2,f,c
 12271  005AE2  5008               	movf	___lmul@multiplicand+3,w,c
 12272  005AE4  220C               	addwfc	___lmul@product+3,f,c
 12273  005AE6                     l4724:
 12274  005AE6  90D8               	bcf	status,0,c
 12275  005AE8  3605               	rlcf	___lmul@multiplicand,f,c
 12276  005AEA  3606               	rlcf	___lmul@multiplicand+1,f,c
 12277  005AEC  3607               	rlcf	___lmul@multiplicand+2,f,c
 12278  005AEE  3608               	rlcf	___lmul@multiplicand+3,f,c
 12279  005AF0  90D8               	bcf	status,0,c
 12280  005AF2  3204               	rrcf	___lmul@multiplier+3,f,c
 12281  005AF4  3203               	rrcf	___lmul@multiplier+2,f,c
 12282  005AF6  3202               	rrcf	___lmul@multiplier+1,f,c
 12283  005AF8  3201               	rrcf	___lmul@multiplier,f,c
 12284  005AFA  5001               	movf	___lmul@multiplier,w,c
 12285  005AFC  1002               	iorwf	___lmul@multiplier+1,w,c
 12286  005AFE  1003               	iorwf	___lmul@multiplier+2,w,c
 12287  005B00  1004               	iorwf	___lmul@multiplier+3,w,c
 12288  005B02  A4D8               	btfss	status,2,c
 12289  005B04  D7E6               	goto	l4720
 12290  005B06  C009  F001         	movff	___lmul@product,?___lmul
 12291  005B0A  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12292  005B0E  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12293  005B12  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12294  005B16  0012               	return		;funcret
 12295  005B18                     __end_of___lmul:
 12296                           	opt callstack 0
 12297                           
 12298 ;; *************** function ___lldiv *****************
 12299 ;; Defined at:
 12300 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  dividend        4    0[COMRAM] unsigned long 
 12303 ;;  divisor         4    4[COMRAM] unsigned long 
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;  quotient        4    8[COMRAM] unsigned long 
 12306 ;;  counter         1   12[COMRAM] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  4    0[COMRAM] unsigned long 
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12316 ;;      Params:         8       0       0       0       0       0       0       0       0
 12317 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12319 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12320 ;;Total ram usage:       13 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; This function calls:
 12323 ;;		Nothing
 12324 ;; This function is called by:
 12325 ;;		_find_volume
 12326 ;;		_f_lseek
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text33
 12331  005666                     __ptext33:
 12332                           	opt callstack 0
 12333  005666                     ___lldiv:
 12334                           	opt callstack 27
 12335                           
 12336                           ;incstack = 0
 12337  005666  0E00               	movlw	0
 12338  005668  6E09               	movwf	___lldiv@quotient,c
 12339  00566A  0E00               	movlw	0
 12340  00566C  6E0A               	movwf	___lldiv@quotient+1,c
 12341  00566E  0E00               	movlw	0
 12342  005670  6E0B               	movwf	___lldiv@quotient+2,c
 12343  005672  0E00               	movlw	0
 12344  005674  6E0C               	movwf	___lldiv@quotient+3,c
 12345  005676  5005               	movf	___lldiv@divisor,w,c
 12346  005678  1006               	iorwf	___lldiv@divisor+1,w,c
 12347  00567A  1007               	iorwf	___lldiv@divisor+2,w,c
 12348  00567C  1008               	iorwf	___lldiv@divisor+3,w,c
 12349  00567E  B4D8               	btfsc	status,2,c
 12350  005680  D02A               	goto	l1012
 12351  005682  0E01               	movlw	1
 12352  005684  6E0D               	movwf	___lldiv@counter,c
 12353  005686  D006               	goto	l5620
 12354  005688                     l5618:
 12355  005688  90D8               	bcf	status,0,c
 12356  00568A  3605               	rlcf	___lldiv@divisor,f,c
 12357  00568C  3606               	rlcf	___lldiv@divisor+1,f,c
 12358  00568E  3607               	rlcf	___lldiv@divisor+2,f,c
 12359  005690  3608               	rlcf	___lldiv@divisor+3,f,c
 12360  005692  2A0D               	incf	___lldiv@counter,f,c
 12361  005694                     l5620:
 12362  005694  AE08               	btfss	___lldiv@divisor+3,7,c
 12363  005696  D7F8               	goto	l5618
 12364  005698                     u7110:
 12365  005698  90D8               	bcf	status,0,c
 12366  00569A  3609               	rlcf	___lldiv@quotient,f,c
 12367  00569C  360A               	rlcf	___lldiv@quotient+1,f,c
 12368  00569E  360B               	rlcf	___lldiv@quotient+2,f,c
 12369  0056A0  360C               	rlcf	___lldiv@quotient+3,f,c
 12370  0056A2  5005               	movf	___lldiv@divisor,w,c
 12371  0056A4  5C01               	subwf	___lldiv@dividend,w,c
 12372  0056A6  5006               	movf	___lldiv@divisor+1,w,c
 12373  0056A8  5802               	subwfb	___lldiv@dividend+1,w,c
 12374  0056AA  5007               	movf	___lldiv@divisor+2,w,c
 12375  0056AC  5803               	subwfb	___lldiv@dividend+2,w,c
 12376  0056AE  5008               	movf	___lldiv@divisor+3,w,c
 12377  0056B0  5804               	subwfb	___lldiv@dividend+3,w,c
 12378  0056B2  A0D8               	btfss	status,0,c
 12379  0056B4  D009               	goto	l5630
 12380  0056B6  5005               	movf	___lldiv@divisor,w,c
 12381  0056B8  5E01               	subwf	___lldiv@dividend,f,c
 12382  0056BA  5006               	movf	___lldiv@divisor+1,w,c
 12383  0056BC  5A02               	subwfb	___lldiv@dividend+1,f,c
 12384  0056BE  5007               	movf	___lldiv@divisor+2,w,c
 12385  0056C0  5A03               	subwfb	___lldiv@dividend+2,f,c
 12386  0056C2  5008               	movf	___lldiv@divisor+3,w,c
 12387  0056C4  5A04               	subwfb	___lldiv@dividend+3,f,c
 12388  0056C6  8009               	bsf	___lldiv@quotient,0,c
 12389  0056C8                     l5630:
 12390  0056C8  90D8               	bcf	status,0,c
 12391  0056CA  3208               	rrcf	___lldiv@divisor+3,f,c
 12392  0056CC  3207               	rrcf	___lldiv@divisor+2,f,c
 12393  0056CE  3206               	rrcf	___lldiv@divisor+1,f,c
 12394  0056D0  3205               	rrcf	___lldiv@divisor,f,c
 12395  0056D2  2E0D               	decfsz	___lldiv@counter,f,c
 12396  0056D4  D7E1               	goto	u7110
 12397  0056D6                     l1012:
 12398  0056D6  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12399  0056DA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12400  0056DE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12401  0056E2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12402  0056E6  0012               	return		;funcret
 12403  0056E8                     __end_of___lldiv:
 12404                           	opt callstack 0
 12405                           
 12406 ;; *************** function _f_close *****************
 12407 ;; Defined at:
 12408 ;;		line 2861 in file "ff.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;  fp              2   77[COMRAM] PTR struct .
 12411 ;;		 -> Fil(32), 
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;  res             1   79[COMRAM] enum E93
 12414 ;; Return value:  Size  Location     Type
 12415 ;;                  1    wreg      enum E93
 12416 ;; Registers used:
 12417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12423 ;;      Params:         2       0       0       0       0       0       0       0       0
 12424 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12426 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12427 ;;Total ram usage:        3 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; Hardware stack levels required when called:    9
 12430 ;; This function calls:
 12431 ;;		_f_sync
 12432 ;;		_validate
 12433 ;; This function is called by:
 12434 ;;		_guardar
 12435 ;;		_reproducir
 12436 ;; This function uses a non-reentrant model
 12437 ;;
 12438                           
 12439                           	psect	text34
 12440  005BDE                     __ptext34:
 12441                           	opt callstack 0
 12442  005BDE                     _f_close:
 12443                           	opt callstack 20
 12444                           
 12445                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 12446                           
 12447                           ;incstack = 0
 12448  005BDE  C04E  F045         	movff	f_close@fp,f_sync@fp
 12449  005BE2  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 12450  005BE6  EC60  F024         	call	_f_sync	;wreg free
 12451  005BEA  6E50               	movwf	f_close@res,c
 12452                           
 12453                           ;ff.c: 2870:  if (res == FR_OK)
 12454  005BEC  5050               	movf	f_close@res,w,c
 12455  005BEE  A4D8               	btfss	status,2,c
 12456  005BF0  0012               	return	
 12457                           
 12458                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 12459  005BF2  C04E  F002         	movff	f_close@fp,validate@obj
 12460  005BF6  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 12461  005BFA  ECE9  F02A         	call	_validate	;wreg free
 12462  005BFE  6E50               	movwf	f_close@res,c
 12463                           
 12464                           ;ff.c: 2874:   if (res == FR_OK) {
 12465  005C00  5050               	movf	f_close@res,w,c
 12466  005C02  A4D8               	btfss	status,2,c
 12467  005C04  0012               	return	
 12468                           
 12469                           ;ff.c: 2882:     fp->fs = 0;
 12470  005C06  C04E  FFD9         	movff	f_close@fp,fsr2l
 12471  005C0A  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 12472  005C0E  0E00               	movlw	0
 12473  005C10  6EDE               	movwf	postinc2,c
 12474  005C12  0E00               	movlw	0
 12475  005C14  6EDD               	movwf	postdec2,c
 12476  005C16  0012               	return		;funcret
 12477  005C18                     __end_of_f_close:
 12478                           	opt callstack 0
 12479                           
 12480 ;; *************** function _f_sync *****************
 12481 ;; Defined at:
 12482 ;;		line 2813 in file "ff.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  fp              2   68[COMRAM] PTR struct .
 12485 ;;		 -> Fil(32), 
 12486 ;; Auto vars:     Size  Location     Type
 12487 ;;  tm              4    0        unsigned long 
 12488 ;;  dir             2   75[COMRAM] PTR unsigned char 
 12489 ;;		 -> FatFs(558), NULL(0), 
 12490 ;;  res             1   74[COMRAM] enum E93
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      enum E93
 12493 ;; Registers used:
 12494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12500 ;;      Params:         2       0       0       0       0       0       0       0       0
 12501 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12503 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12504 ;;Total ram usage:        9 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    8
 12507 ;; This function calls:
 12508 ;;		_move_window
 12509 ;;		_st_clust
 12510 ;;		_sync_fs
 12511 ;;		_validate
 12512 ;; This function is called by:
 12513 ;;		_f_close
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           	psect	text35
 12518  0048C0                     __ptext35:
 12519                           	opt callstack 0
 12520  0048C0                     _f_sync:
 12521                           	opt callstack 20
 12522                           
 12523                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 12524                           
 12525                           ;incstack = 0
 12526  0048C0  C045  F002         	movff	f_sync@fp,validate@obj
 12527  0048C4  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 12528  0048C8  ECE9  F02A         	call	_validate	;wreg free
 12529  0048CC  6E4B               	movwf	f_sync@res,c
 12530                           
 12531                           ;ff.c: 2823:  if (res == FR_OK) {
 12532  0048CE  504B               	movf	f_sync@res,w,c
 12533  0048D0  A4D8               	btfss	status,2,c
 12534  0048D2  D095               	goto	l6276
 12535                           
 12536                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 12537  0048D4  EE20 F004          	lfsr	2,4
 12538  0048D8  5045               	movf	f_sync@fp,w,c
 12539  0048DA  26D9               	addwf	fsr2l,f,c
 12540  0048DC  5046               	movf	f_sync@fp+1,w,c
 12541  0048DE  22DA               	addwfc	fsr2h,f,c
 12542  0048E0  AADF               	btfss	indf2,5,c
 12543  0048E2  D08D               	goto	l6276
 12544                           
 12545                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 12546  0048E4  C045  FFD9         	movff	f_sync@fp,fsr2l
 12547  0048E8  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12548  0048EC  CFDE F030          	movff	postinc2,move_window@fs
 12549  0048F0  CFDD F031          	movff	postdec2,move_window@fs+1
 12550  0048F4  EE20 F01A          	lfsr	2,26
 12551  0048F8  5045               	movf	f_sync@fp,w,c
 12552  0048FA  26D9               	addwf	fsr2l,f,c
 12553  0048FC  5046               	movf	f_sync@fp+1,w,c
 12554  0048FE  22DA               	addwfc	fsr2h,f,c
 12555  004900  CFDE F032          	movff	postinc2,move_window@sector
 12556  004904  CFDE F033          	movff	postinc2,move_window@sector+1
 12557  004908  CFDE F034          	movff	postinc2,move_window@sector+2
 12558  00490C  CFDE F035          	movff	postinc2,move_window@sector+3
 12559  004910  EC96  F02A         	call	_move_window	;wreg free
 12560  004914  6E4B               	movwf	f_sync@res,c
 12561                           
 12562                           ;ff.c: 2834:    if (res == FR_OK) {
 12563  004916  504B               	movf	f_sync@res,w,c
 12564  004918  A4D8               	btfss	status,2,c
 12565  00491A  D071               	goto	l6276
 12566                           
 12567                           ;ff.c: 2835:     dir = fp->dir_ptr;
 12568  00491C  EE20 F01E          	lfsr	2,30
 12569  004920  5045               	movf	f_sync@fp,w,c
 12570  004922  26D9               	addwf	fsr2l,f,c
 12571  004924  5046               	movf	f_sync@fp+1,w,c
 12572  004926  22DA               	addwfc	fsr2h,f,c
 12573  004928  CFDE F04C          	movff	postinc2,f_sync@dir
 12574  00492C  CFDD F04D          	movff	postdec2,f_sync@dir+1
 12575                           
 12576                           ;ff.c: 2836:     dir[11] |= 0x20;
 12577  004930  EE20 F00B          	lfsr	2,11
 12578  004934  504C               	movf	f_sync@dir,w,c
 12579  004936  26D9               	addwf	fsr2l,f,c
 12580  004938  504D               	movf	f_sync@dir+1,w,c
 12581  00493A  22DA               	addwfc	fsr2h,f,c
 12582  00493C  0E00               	movlw	0
 12583  00493E  8ADB               	bsf	plusw2,5,c
 12584                           
 12585                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 12586  004940  EE20 F00A          	lfsr	2,10
 12587  004944  5045               	movf	f_sync@fp,w,c
 12588  004946  26D9               	addwf	fsr2l,f,c
 12589  004948  5046               	movf	f_sync@fp+1,w,c
 12590  00494A  22DA               	addwfc	fsr2h,f,c
 12591  00494C  EE10 F01C          	lfsr	1,28
 12592  004950  504C               	movf	f_sync@dir,w,c
 12593  004952  26E1               	addwf	fsr1l,f,c
 12594  004954  504D               	movf	f_sync@dir+1,w,c
 12595  004956  22E2               	addwfc	fsr1h,f,c
 12596  004958  CFDE FFE6          	movff	postinc2,postinc1
 12597  00495C  CFDE FFE6          	movff	postinc2,postinc1
 12598  004960  CFDE FFE6          	movff	postinc2,postinc1
 12599  004964  CFDE FFE6          	movff	postinc2,postinc1
 12600                           
 12601                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 12602  004968  C04C  F001         	movff	f_sync@dir,st_clust@dir
 12603  00496C  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 12604  004970  EE20 F00E          	lfsr	2,14
 12605  004974  5045               	movf	f_sync@fp,w,c
 12606  004976  26D9               	addwf	fsr2l,f,c
 12607  004978  5046               	movf	f_sync@fp+1,w,c
 12608  00497A  22DA               	addwfc	fsr2h,f,c
 12609  00497C  CFDE F003          	movff	postinc2,st_clust@cl
 12610  004980  CFDE F004          	movff	postinc2,st_clust@cl+1
 12611  004984  CFDE F005          	movff	postinc2,st_clust@cl+2
 12612  004988  CFDE F006          	movff	postinc2,st_clust@cl+3
 12613  00498C  EC3E  F02E         	call	_st_clust	;wreg free
 12614                           
 12615                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 12616  004990  EE20 F016          	lfsr	2,22
 12617  004994  504C               	movf	f_sync@dir,w,c
 12618  004996  26D9               	addwf	fsr2l,f,c
 12619  004998  504D               	movf	f_sync@dir+1,w,c
 12620  00499A  22DA               	addwfc	fsr2h,f,c
 12621  00499C  0E00               	movlw	0
 12622  00499E  6EDE               	movwf	postinc2,c
 12623  0049A0  0E00               	movlw	0
 12624  0049A2  6EDE               	movwf	postinc2,c
 12625  0049A4  0E21               	movlw	33
 12626  0049A6  6EDE               	movwf	postinc2,c
 12627  0049A8  0E46               	movlw	70
 12628  0049AA  6EDD               	movwf	postdec2,c
 12629                           
 12630                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 12631  0049AC  EE20 F012          	lfsr	2,18
 12632  0049B0  504C               	movf	f_sync@dir,w,c
 12633  0049B2  26D9               	addwf	fsr2l,f,c
 12634  0049B4  504D               	movf	f_sync@dir+1,w,c
 12635  0049B6  22DA               	addwfc	fsr2h,f,c
 12636  0049B8  0E00               	movlw	0
 12637  0049BA  6EDE               	movwf	postinc2,c
 12638  0049BC  0E00               	movlw	0
 12639  0049BE  6EDD               	movwf	postdec2,c
 12640                           
 12641                           ;ff.c: 2842:     fp->flag &= ~0x20;
 12642  0049C0  EE20 F004          	lfsr	2,4
 12643  0049C4  5045               	movf	f_sync@fp,w,c
 12644  0049C6  26D9               	addwf	fsr2l,f,c
 12645  0049C8  5046               	movf	f_sync@fp+1,w,c
 12646  0049CA  22DA               	addwfc	fsr2h,f,c
 12647  0049CC  0EDF               	movlw	223
 12648  0049CE  16DF               	andwf	indf2,f,c
 12649                           
 12650                           ;ff.c: 2843:     fp->fs->wflag = 1;
 12651  0049D0  C045  FFD9         	movff	f_sync@fp,fsr2l
 12652  0049D4  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12653  0049D8  EE10 F004          	lfsr	1,4
 12654  0049DC  50DE               	movf	postinc2,w,c
 12655  0049DE  26E1               	addwf	fsr1l,f,c
 12656  0049E0  50DD               	movf	postdec2,w,c
 12657  0049E2  22E2               	addwfc	fsr1h,f,c
 12658  0049E4  0E01               	movlw	1
 12659  0049E6  6EE7               	movwf	indf1,c
 12660                           
 12661                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 12662  0049E8  C045  FFD9         	movff	f_sync@fp,fsr2l
 12663  0049EC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12664  0049F0  CFDE F03A          	movff	postinc2,sync_fs@fs
 12665  0049F4  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 12666  0049F8  EC8C  F021         	call	_sync_fs	;wreg free
 12667  0049FC  6E4B               	movwf	f_sync@res,c
 12668  0049FE                     l6276:
 12669                           
 12670                           ;ff.c: 2849:  return res;
 12671  0049FE  504B               	movf	f_sync@res,w,c
 12672  004A00  0012               	return		;funcret
 12673  004A02                     __end_of_f_sync:
 12674                           	opt callstack 0
 12675                           
 12676 ;; *************** function _validate *****************
 12677 ;; Defined at:
 12678 ;;		line 2372 in file "ff.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;  obj             2    1[COMRAM] PTR void 
 12681 ;;		 -> Fil(32), 
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;  fil             2    7[COMRAM] PTR struct .
 12684 ;;		 -> Fil(32), 
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      enum E93
 12687 ;; Registers used:
 12688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12694 ;;      Params:         2       0       0       0       0       0       0       0       0
 12695 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12696 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12697 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12698 ;;Total ram usage:        8 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    1
 12701 ;; This function calls:
 12702 ;;		_disk_status
 12703 ;; This function is called by:
 12704 ;;		_f_read
 12705 ;;		_f_write
 12706 ;;		_f_sync
 12707 ;;		_f_close
 12708 ;;		_f_lseek
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text36
 12713  0055D2                     __ptext36:
 12714                           	opt callstack 0
 12715  0055D2                     _validate:
 12716                           	opt callstack 26
 12717                           
 12718                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 12719                           
 12720                           ;incstack = 0
 12721  0055D2  C002  F008         	movff	validate@obj,validate@fil
 12722  0055D6  C003  F009         	movff	validate@obj+1,validate@fil+1
 12723                           
 12724                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 12725  0055DA  5008               	movf	validate@fil,w,c
 12726  0055DC  1009               	iorwf	validate@fil+1,w,c
 12727  0055DE  B4D8               	btfsc	status,2,c
 12728  0055E0  D03E               	goto	u7090
 12729  0055E2  C008  FFD9         	movff	validate@fil,fsr2l
 12730  0055E6  C009  FFDA         	movff	validate@fil+1,fsr2h
 12731  0055EA  50DE               	movf	postinc2,w,c
 12732  0055EC  10DE               	iorwf	postinc2,w,c
 12733  0055EE  B4D8               	btfsc	status,2,c
 12734  0055F0  D036               	goto	u7090
 12735  0055F2  C008  FFD9         	movff	validate@fil,fsr2l
 12736  0055F6  C009  FFDA         	movff	validate@fil+1,fsr2h
 12737  0055FA  CFDE F004          	movff	postinc2,??_validate
 12738  0055FE  CFDD F005          	movff	postdec2,??_validate+1
 12739  005602  C004  FFD9         	movff	??_validate,fsr2l
 12740  005606  C005  FFDA         	movff	??_validate+1,fsr2h
 12741  00560A  50DF               	movf	indf2,w,c
 12742  00560C  B4D8               	btfsc	status,2,c
 12743  00560E  D027               	goto	u7090
 12744  005610  EE20 F002          	lfsr	2,2
 12745  005614  5008               	movf	validate@fil,w,c
 12746  005616  26D9               	addwf	fsr2l,f,c
 12747  005618  5009               	movf	validate@fil+1,w,c
 12748  00561A  22DA               	addwfc	fsr2h,f,c
 12749  00561C  C008  FFE1         	movff	validate@fil,fsr1l
 12750  005620  C009  FFE2         	movff	validate@fil+1,fsr1h
 12751  005624  EE00 F006          	lfsr	0,6
 12752  005628  50E6               	movf	postinc1,w,c
 12753  00562A  26E9               	addwf	fsr0l,f,c
 12754  00562C  50E5               	movf	postdec1,w,c
 12755  00562E  22EA               	addwfc	fsr0h,f,c
 12756  005630  50DE               	movf	postinc2,w,c
 12757  005632  18EE               	xorwf	postinc0,w,c
 12758  005634  E114               	bnz	l5604
 12759  005636  50DE               	movf	postinc2,w,c
 12760  005638  18EE               	xorwf	postinc0,w,c
 12761  00563A  A4D8               	btfss	status,2,c
 12762  00563C  D010               	goto	u7090
 12763  00563E  C008  FFD9         	movff	validate@fil,fsr2l
 12764  005642  C009  FFDA         	movff	validate@fil+1,fsr2h
 12765  005646  EE10 F001          	lfsr	1,1
 12766  00564A  50DE               	movf	postinc2,w,c
 12767  00564C  26E1               	addwf	fsr1l,f,c
 12768  00564E  50DD               	movf	postdec2,w,c
 12769  005650  22E2               	addwfc	fsr1h,f,c
 12770  005652  50E7               	movf	indf1,w,c
 12771  005654  EC90  F02E         	call	_disk_status
 12772  005658  6E04               	movwf	??_validate& (0+255),c
 12773  00565A  A004               	btfss	??_validate,0,c
 12774  00565C  D002               	goto	l5608
 12775  00565E                     u7090:
 12776  00565E                     l5604:
 12777                           
 12778                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 12779  00565E  0E09               	movlw	9
 12780  005660  0012               	return	
 12781  005662                     l5608:
 12782                           
 12783                           ;ff.c: 2384:  return FR_OK;
 12784  005662  0E00               	movlw	0
 12785  005664  0012               	return		;funcret
 12786  005666                     __end_of_validate:
 12787                           	opt callstack 0
 12788                           
 12789 ;; *************** function _disk_status *****************
 12790 ;; Defined at:
 12791 ;;		line 356 in file "diskio.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  pdrv            1    wreg     unsigned char 
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;  pdrv            1    0[COMRAM] unsigned char 
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      unsigned char 
 12798 ;; Registers used:
 12799 ;;		wreg, status,2
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12805 ;;      Params:         0       0       0       0       0       0       0       0       0
 12806 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12808 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12809 ;;Total ram usage:        1 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; This function calls:
 12812 ;;		Nothing
 12813 ;; This function is called by:
 12814 ;;		_find_volume
 12815 ;;		_validate
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text37
 12820  005D20                     __ptext37:
 12821                           	opt callstack 0
 12822  005D20                     _disk_status:
 12823                           	opt callstack 26
 12824                           
 12825                           ;incstack = 0
 12826                           ;disk_status@pdrv stored from wreg
 12827  005D20  6E01               	movwf	disk_status@pdrv,c
 12828                           
 12829                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 12830  005D22  5001               	movf	disk_status@pdrv,w,c
 12831  005D24  B4D8               	btfsc	status,2,c
 12832  005D26  D002               	goto	l4836
 12833  005D28  0E01               	movlw	1
 12834  005D2A  0012               	return	
 12835  005D2C                     l4836:
 12836                           
 12837                           ;diskio.c: 361:  return Stat;
 12838  005D2C  0100               	movlb	0	; () banked
 12839  005D2E  51F2               	movf	_Stat& (0+255),w,b
 12840  005D30  0012               	return		;funcret
 12841  005D32                     __end_of_disk_status:
 12842                           	opt callstack 0
 12843                           
 12844 ;; *************** function _sync_fs *****************
 12845 ;; Defined at:
 12846 ;;		line 760 in file "ff.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;  fs              2   57[COMRAM] PTR struct .
 12849 ;;		 -> FatFs(558), NULL(0), 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  res             1   67[COMRAM] enum E93
 12852 ;; Return value:  Size  Location     Type
 12853 ;;                  1    wreg      enum E93
 12854 ;; Registers used:
 12855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12856 ;; Tracked objects:
 12857 ;;		On entry : 0/0
 12858 ;;		On exit  : 0/0
 12859 ;;		Unchanged: 0/0
 12860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12861 ;;      Params:         2       0       0       0       0       0       0       0       0
 12862 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12863 ;;      Temps:          8       0       0       0       0       0       0       0       0
 12864 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12865 ;;Total ram usage:       11 bytes
 12866 ;; Hardware stack levels used:    1
 12867 ;; Hardware stack levels required when called:    7
 12868 ;; This function calls:
 12869 ;;		_disk_ioctl
 12870 ;;		_disk_write
 12871 ;;		_mem_set
 12872 ;;		_sync_window
 12873 ;; This function is called by:
 12874 ;;		_f_sync
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           	psect	text38
 12879  004318                     __ptext38:
 12880                           	opt callstack 0
 12881  004318                     _sync_fs:
 12882                           	opt callstack 20
 12883                           
 12884                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 12885                           
 12886                           ;incstack = 0
 12887  004318  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 12888  00431C  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 12889  004320  EC6C  F022         	call	_sync_window	;wreg free
 12890  004324  6E44               	movwf	sync_fs@res,c
 12891                           
 12892                           ;ff.c: 768:  if (res == FR_OK) {
 12893  004326  5044               	movf	sync_fs@res,w,c
 12894  004328  A4D8               	btfss	status,2,c
 12895  00432A  D0D4               	goto	l242
 12896                           
 12897                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 12898  00432C  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 12899  004330  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 12900  004334  0E03               	movlw	3
 12901  004336  18DE               	xorwf	postinc2,w,c
 12902  004338  A4D8               	btfss	status,2,c
 12903  00433A  D0B8               	goto	l5300
 12904  00433C  EE20 F005          	lfsr	2,5
 12905  004340  503A               	movf	sync_fs@fs,w,c
 12906  004342  26D9               	addwf	fsr2l,f,c
 12907  004344  503B               	movf	sync_fs@fs+1,w,c
 12908  004346  22DA               	addwfc	fsr2h,f,c
 12909  004348  04DE               	decf	postinc2,w,c
 12910  00434A  A4D8               	btfss	status,2,c
 12911  00434C  D0AF               	goto	l5300
 12912                           
 12913                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 12914  00434E  0E2E               	movlw	46
 12915  004350  243A               	addwf	sync_fs@fs,w,c
 12916  004352  6E01               	movwf	mem_set@dst,c
 12917  004354  0E00               	movlw	0
 12918  004356  203B               	addwfc	sync_fs@fs+1,w,c
 12919  004358  6E02               	movwf	mem_set@dst+1,c
 12920  00435A  0E00               	movlw	0
 12921  00435C  6E04               	movwf	mem_set@val+1,c
 12922  00435E  0E00               	movlw	0
 12923  004360  6E03               	movwf	mem_set@val,c
 12924  004362  0E02               	movlw	2
 12925  004364  6E06               	movwf	mem_set@cnt+1,c
 12926  004366  0E00               	movlw	0
 12927  004368  6E05               	movwf	mem_set@cnt,c
 12928  00436A  EC28  F02E         	call	_mem_set	;wreg free
 12929                           
 12930                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 12931  00436E  EE22 F02C          	lfsr	2,556
 12932  004372  503A               	movf	sync_fs@fs,w,c
 12933  004374  26D9               	addwf	fsr2l,f,c
 12934  004376  503B               	movf	sync_fs@fs+1,w,c
 12935  004378  22DA               	addwfc	fsr2h,f,c
 12936  00437A  0E55               	movlw	85
 12937  00437C  6EDE               	movwf	postinc2,c
 12938  00437E  0EAA               	movlw	170
 12939  004380  6EDD               	movwf	postdec2,c
 12940                           
 12941                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 12942  004382  EE20 F02E          	lfsr	2,46
 12943  004386  503A               	movf	sync_fs@fs,w,c
 12944  004388  26D9               	addwf	fsr2l,f,c
 12945  00438A  503B               	movf	sync_fs@fs+1,w,c
 12946  00438C  22DA               	addwfc	fsr2h,f,c
 12947  00438E  0E52               	movlw	82
 12948  004390  6EDE               	movwf	postinc2,c
 12949  004392  0E52               	movlw	82
 12950  004394  6EDE               	movwf	postinc2,c
 12951  004396  0E61               	movlw	97
 12952  004398  6EDE               	movwf	postinc2,c
 12953  00439A  0E41               	movlw	65
 12954  00439C  6EDD               	movwf	postdec2,c
 12955                           
 12956                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 12957  00439E  EE22 F012          	lfsr	2,530
 12958  0043A2  503A               	movf	sync_fs@fs,w,c
 12959  0043A4  26D9               	addwf	fsr2l,f,c
 12960  0043A6  503B               	movf	sync_fs@fs+1,w,c
 12961  0043A8  22DA               	addwfc	fsr2h,f,c
 12962  0043AA  0E72               	movlw	114
 12963  0043AC  6EDE               	movwf	postinc2,c
 12964  0043AE  0E72               	movlw	114
 12965  0043B0  6EDE               	movwf	postinc2,c
 12966  0043B2  0E41               	movlw	65
 12967  0043B4  6EDE               	movwf	postinc2,c
 12968  0043B6  0E61               	movlw	97
 12969  0043B8  6EDD               	movwf	postdec2,c
 12970                           
 12971                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 12972  0043BA  EE20 F00E          	lfsr	2,14
 12973  0043BE  503A               	movf	sync_fs@fs,w,c
 12974  0043C0  26D9               	addwf	fsr2l,f,c
 12975  0043C2  503B               	movf	sync_fs@fs+1,w,c
 12976  0043C4  22DA               	addwfc	fsr2h,f,c
 12977  0043C6  EE12 F016          	lfsr	1,534
 12978  0043CA  503A               	movf	sync_fs@fs,w,c
 12979  0043CC  26E1               	addwf	fsr1l,f,c
 12980  0043CE  503B               	movf	sync_fs@fs+1,w,c
 12981  0043D0  22E2               	addwfc	fsr1h,f,c
 12982  0043D2  CFDE FFE6          	movff	postinc2,postinc1
 12983  0043D6  CFDE FFE6          	movff	postinc2,postinc1
 12984  0043DA  CFDE FFE6          	movff	postinc2,postinc1
 12985  0043DE  CFDE FFE6          	movff	postinc2,postinc1
 12986                           
 12987                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 12988  0043E2  EE20 F00A          	lfsr	2,10
 12989  0043E6  503A               	movf	sync_fs@fs,w,c
 12990  0043E8  26D9               	addwf	fsr2l,f,c
 12991  0043EA  503B               	movf	sync_fs@fs+1,w,c
 12992  0043EC  22DA               	addwfc	fsr2h,f,c
 12993  0043EE  EE12 F01A          	lfsr	1,538
 12994  0043F2  503A               	movf	sync_fs@fs,w,c
 12995  0043F4  26E1               	addwf	fsr1l,f,c
 12996  0043F6  503B               	movf	sync_fs@fs+1,w,c
 12997  0043F8  22E2               	addwfc	fsr1h,f,c
 12998  0043FA  CFDE FFE6          	movff	postinc2,postinc1
 12999  0043FE  CFDE FFE6          	movff	postinc2,postinc1
 13000  004402  CFDE FFE6          	movff	postinc2,postinc1
 13001  004406  CFDE FFE6          	movff	postinc2,postinc1
 13002                           
 13003                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 13004  00440A  EE20 F01A          	lfsr	2,26
 13005  00440E  503A               	movf	sync_fs@fs,w,c
 13006  004410  26D9               	addwf	fsr2l,f,c
 13007  004412  503B               	movf	sync_fs@fs+1,w,c
 13008  004414  22DA               	addwfc	fsr2h,f,c
 13009  004416  CFDE F03C          	movff	postinc2,??_sync_fs
 13010  00441A  CFDE F03D          	movff	postinc2,??_sync_fs+1
 13011  00441E  CFDE F03E          	movff	postinc2,??_sync_fs+2
 13012  004422  CFDE F03F          	movff	postinc2,??_sync_fs+3
 13013  004426  0E01               	movlw	1
 13014  004428  243C               	addwf	??_sync_fs,w,c
 13015  00442A  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 13016  00442C  0E00               	movlw	0
 13017  00442E  203D               	addwfc	??_sync_fs+1,w,c
 13018  004430  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 13019  004432  0E00               	movlw	0
 13020  004434  203E               	addwfc	??_sync_fs+2,w,c
 13021  004436  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 13022  004438  0E00               	movlw	0
 13023  00443A  203F               	addwfc	??_sync_fs+3,w,c
 13024  00443C  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 13025  00443E  EE20 F02A          	lfsr	2,42
 13026  004442  503A               	movf	sync_fs@fs,w,c
 13027  004444  26D9               	addwf	fsr2l,f,c
 13028  004446  503B               	movf	sync_fs@fs+1,w,c
 13029  004448  22DA               	addwfc	fsr2h,f,c
 13030  00444A  C040  FFDE         	movff	??_sync_fs+4,postinc2
 13031  00444E  C041  FFDE         	movff	??_sync_fs+5,postinc2
 13032  004452  C042  FFDE         	movff	??_sync_fs+6,postinc2
 13033  004456  C043  FFDE         	movff	??_sync_fs+7,postinc2
 13034                           
 13035                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 13036  00445A  0E2E               	movlw	46
 13037  00445C  243A               	addwf	sync_fs@fs,w,c
 13038  00445E  6E11               	movwf	disk_write@buff,c
 13039  004460  0E00               	movlw	0
 13040  004462  203B               	addwfc	sync_fs@fs+1,w,c
 13041  004464  6E12               	movwf	disk_write@buff+1,c
 13042  004466  EE20 F02A          	lfsr	2,42
 13043  00446A  503A               	movf	sync_fs@fs,w,c
 13044  00446C  26D9               	addwf	fsr2l,f,c
 13045  00446E  503B               	movf	sync_fs@fs+1,w,c
 13046  004470  22DA               	addwfc	fsr2h,f,c
 13047  004472  CFDE F013          	movff	postinc2,disk_write@sector
 13048  004476  CFDE F014          	movff	postinc2,disk_write@sector+1
 13049  00447A  CFDE F015          	movff	postinc2,disk_write@sector+2
 13050  00447E  CFDE F016          	movff	postinc2,disk_write@sector+3
 13051  004482  0E00               	movlw	0
 13052  004484  6E18               	movwf	disk_write@count+1,c
 13053  004486  0E01               	movlw	1
 13054  004488  6E17               	movwf	disk_write@count,c
 13055  00448A  EE20 F001          	lfsr	2,1
 13056  00448E  503A               	movf	sync_fs@fs,w,c
 13057  004490  26D9               	addwf	fsr2l,f,c
 13058  004492  503B               	movf	sync_fs@fs+1,w,c
 13059  004494  22DA               	addwfc	fsr2h,f,c
 13060  004496  50DF               	movf	indf2,w,c
 13061  004498  EC90  F025         	call	_disk_write
 13062                           
 13063                           ;ff.c: 781:    fs->fsi_flag = 0;
 13064  00449C  EE20 F005          	lfsr	2,5
 13065  0044A0  503A               	movf	sync_fs@fs,w,c
 13066  0044A2  26D9               	addwf	fsr2l,f,c
 13067  0044A4  503B               	movf	sync_fs@fs+1,w,c
 13068  0044A6  22DA               	addwfc	fsr2h,f,c
 13069  0044A8  0E00               	movlw	0
 13070  0044AA  6EDF               	movwf	indf2,c
 13071  0044AC                     l5300:
 13072                           
 13073                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 13074  0044AC  0E00               	movlw	0
 13075  0044AE  6E11               	movwf	disk_ioctl@cmd,c
 13076  0044B0  0E00               	movlw	0
 13077  0044B2  6E12               	movwf	disk_ioctl@buff,c
 13078  0044B4  0E00               	movlw	0
 13079  0044B6  6E13               	movwf	disk_ioctl@buff+1,c
 13080  0044B8  EE20 F001          	lfsr	2,1
 13081  0044BC  503A               	movf	sync_fs@fs,w,c
 13082  0044BE  26D9               	addwf	fsr2l,f,c
 13083  0044C0  503B               	movf	sync_fs@fs+1,w,c
 13084  0044C2  22DA               	addwfc	fsr2h,f,c
 13085  0044C4  50DF               	movf	indf2,w,c
 13086  0044C6  EC74  F012         	call	_disk_ioctl
 13087  0044CA  0900               	iorlw	0
 13088  0044CC  B4D8               	btfsc	status,2,c
 13089  0044CE  D002               	goto	l242
 13090                           
 13091                           ;ff.c: 785:    res = FR_DISK_ERR;
 13092  0044D0  0E01               	movlw	1
 13093  0044D2  6E44               	movwf	sync_fs@res,c
 13094  0044D4                     l242:
 13095                           
 13096                           ;ff.c: 788:  return res;
 13097  0044D4  5044               	movf	sync_fs@res,w,c
 13098  0044D6  0012               	return		;funcret
 13099  0044D8                     __end_of_sync_fs:
 13100                           	opt callstack 0
 13101                           
 13102 ;; *************** function _mem_set *****************
 13103 ;; Defined at:
 13104 ;;		line 524 in file "ff.c"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;  dst             2    0[COMRAM] PTR void 
 13107 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13108 ;;  val             2    2[COMRAM] int 
 13109 ;;  cnt             2    4[COMRAM] unsigned short 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  d               2    6[COMRAM] PTR unsigned char 
 13112 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 13113 ;; Return value:  Size  Location     Type
 13114 ;;                  1    wreg      void 
 13115 ;; Registers used:
 13116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13117 ;; Tracked objects:
 13118 ;;		On entry : 0/0
 13119 ;;		On exit  : 0/0
 13120 ;;		Unchanged: 0/0
 13121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13122 ;;      Params:         6       0       0       0       0       0       0       0       0
 13123 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13125 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13126 ;;Total ram usage:        8 bytes
 13127 ;; Hardware stack levels used:    1
 13128 ;; This function calls:
 13129 ;;		Nothing
 13130 ;; This function is called by:
 13131 ;;		_sync_fs
 13132 ;;		_dir_next
 13133 ;;		_dir_register
 13134 ;;		_create_name
 13135 ;; This function uses a non-reentrant model
 13136 ;;
 13137                           
 13138                           	psect	text39
 13139  005C50                     __ptext39:
 13140                           	opt callstack 0
 13141  005C50                     _mem_set:
 13142                           	opt callstack 25
 13143                           
 13144                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 13145                           
 13146                           ;incstack = 0
 13147  005C50  C001  F007         	movff	mem_set@dst,mem_set@d
 13148  005C54  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 13149                           
 13150                           ;ff.c: 527:  while (cnt--)
 13151  005C58  D008               	goto	l4734
 13152  005C5A                     l4730:
 13153                           
 13154                           ;ff.c: 528:   *d++ = (BYTE)val;
 13155  005C5A  C007  FFD9         	movff	mem_set@d,fsr2l
 13156  005C5E  C008  FFDA         	movff	mem_set@d+1,fsr2h
 13157  005C62  C003  FFDF         	movff	mem_set@val,indf2
 13158  005C66  4A07               	infsnz	mem_set@d,f,c
 13159  005C68  2A08               	incf	mem_set@d+1,f,c
 13160  005C6A                     l4734:
 13161                           
 13162                           ;ff.c: 527:  while (cnt--)
 13163  005C6A  0605               	decf	mem_set@cnt,f,c
 13164  005C6C  A0D8               	btfss	status,0,c
 13165  005C6E  0606               	decf	mem_set@cnt+1,f,c
 13166  005C70  2805               	incf	mem_set@cnt,w,c
 13167  005C72  E1F3               	bnz	l4730
 13168  005C74  2806               	incf	mem_set@cnt+1,w,c
 13169  005C76  B4D8               	btfsc	status,2,c
 13170  005C78  0012               	return	
 13171  005C7A  D7EF               	goto	l4730
 13172  005C7C                     __end_of_mem_set:
 13173                           	opt callstack 0
 13174                           
 13175 ;; *************** function _disk_ioctl *****************
 13176 ;; Defined at:
 13177 ;;		line 446 in file "diskio.c"
 13178 ;; Parameters:    Size  Location     Type
 13179 ;;  pdrv            1    wreg     unsigned char 
 13180 ;;  cmd             1   16[COMRAM] unsigned char 
 13181 ;;  buff            2   17[COMRAM] PTR void 
 13182 ;;		 -> NULL(0), 
 13183 ;; Auto vars:     Size  Location     Type
 13184 ;;  pdrv            1   48[COMRAM] unsigned char 
 13185 ;;  csd            16   32[COMRAM] unsigned char [16]
 13186 ;;  csize           4   49[COMRAM] unsigned long 
 13187 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 13188 ;;		 -> NULL(0), 
 13189 ;;  n               1   54[COMRAM] unsigned char 
 13190 ;;  res             1   53[COMRAM] enum E43
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  1    wreg      enum E43
 13193 ;; Registers used:
 13194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13195 ;; Tracked objects:
 13196 ;;		On entry : 0/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13200 ;;      Params:         3       0       0       0       0       0       0       0       0
 13201 ;;      Locals:        25       0       0       0       0       0       0       0       0
 13202 ;;      Temps:         13       0       0       0       0       0       0       0       0
 13203 ;;      Totals:        41       0       0       0       0       0       0       0       0
 13204 ;;Total ram usage:       41 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; Hardware stack levels required when called:    5
 13207 ;; This function calls:
 13208 ;;		_SPI1_Exchange8bit
 13209 ;;		___wmul
 13210 ;;		_deselect
 13211 ;;		_rcvr_datablock
 13212 ;;		_select
 13213 ;;		_send_cmd
 13214 ;; This function is called by:
 13215 ;;		_sync_fs
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           	psect	text40
 13220  0024E8                     __ptext40:
 13221                           	opt callstack 0
 13222  0024E8                     _disk_ioctl:
 13223                           	opt callstack 21
 13224                           
 13225                           ;incstack = 0
 13226                           ;disk_ioctl@pdrv stored from wreg
 13227  0024E8  6E31               	movwf	disk_ioctl@pdrv,c
 13228                           
 13229                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 13230  0024EA  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 13231  0024EE  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 13232                           
 13233                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 13234  0024F2  5031               	movf	disk_ioctl@pdrv,w,c
 13235  0024F4  B4D8               	btfsc	status,2,c
 13236  0024F6  D002               	goto	l4848
 13237  0024F8  0E04               	movlw	4
 13238  0024FA  0012               	return	
 13239  0024FC                     l4848:
 13240                           
 13241                           ;diskio.c: 459:  res = RES_ERROR;
 13242  0024FC  0E01               	movlw	1
 13243  0024FE  6E36               	movwf	disk_ioctl@res,c
 13244                           
 13245                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 13246  002500  0100               	movlb	0	; () banked
 13247  002502  A1F2               	btfss	_Stat& (0+255),0,b
 13248  002504  D21B               	goto	l4948
 13249                           
 13250                           ; BSR set to: 0
 13251  002506  0E03               	movlw	3
 13252  002508  0012               	return	
 13253  00250A                     l4856:
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;diskio.c: 465:   if (select()) res = RES_OK;
 13257  00250A  EC76  F02E         	call	_select	;wreg free
 13258  00250E  0900               	iorlw	0
 13259  002510  B4D8               	btfsc	status,2,c
 13260  002512  D235               	goto	l4950
 13261  002514                     u5610:
 13262  002514  0E00               	movlw	0
 13263  002516  D210               	goto	L13
 13264  002518                     l4860:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13268  002518  0E00               	movlw	0
 13269  00251A  6E0B               	movwf	send_cmd@arg,c
 13270  00251C  0E00               	movlw	0
 13271  00251E  6E0C               	movwf	send_cmd@arg+1,c
 13272  002520  0E00               	movlw	0
 13273  002522  6E0D               	movwf	send_cmd@arg+2,c
 13274  002524  0E00               	movlw	0
 13275  002526  6E0E               	movwf	send_cmd@arg+3,c
 13276  002528  0E09               	movlw	9
 13277  00252A  ECB0  F02D         	call	_send_cmd
 13278  00252E  0900               	iorlw	0
 13279  002530  A4D8               	btfss	status,2,c
 13280  002532  D225               	goto	l4950
 13281  002534  0E21               	movlw	low disk_ioctl@csd
 13282  002536  6E02               	movwf	rcvr_datablock@buff,c
 13283  002538  0E00               	movlw	high disk_ioctl@csd
 13284  00253A  6E03               	movwf	rcvr_datablock@buff+1,c
 13285  00253C  0E00               	movlw	0
 13286  00253E  6E05               	movwf	rcvr_datablock@btr+1,c
 13287  002540  0E10               	movlw	16
 13288  002542  6E04               	movwf	rcvr_datablock@btr,c
 13289  002544  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13290  002548  0900               	iorlw	0
 13291  00254A  B4D8               	btfsc	status,2,c
 13292  00254C  D218               	goto	l4950
 13293                           
 13294                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 13295  00254E  4421               	rlncf	disk_ioctl@csd,w,c
 13296  002550  46E8               	rlncf	wreg,f,c
 13297  002552  0B03               	andlw	3
 13298  002554  06E8               	decf	wreg,f,c
 13299  002556  A4D8               	btfss	status,2,c
 13300  002558  D04E               	goto	l4870
 13301                           
 13302                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 13303  00255A  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 13304  00255E  0E3F               	movlw	63
 13305  002560  1614               	andwf	??_disk_ioctl,f,c
 13306  002562  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 13307  002566  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13308  002568  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13309  00256A  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13310  00256C  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 13311  002570  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 13312  002574  6A16               	clrf	??_disk_ioctl+2,c
 13313  002576  6A15               	clrf	??_disk_ioctl+1,c
 13314  002578  5029               	movf	disk_ioctl@csd+8,w,c
 13315  00257A  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13316  00257C  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13317  00257E  502A               	movf	disk_ioctl@csd+9,w,c
 13318  002580  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 13319  002582  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13320  002584  5019               	movf	??_disk_ioctl+5,w,c
 13321  002586  261B               	addwf	??_disk_ioctl+7,f,c
 13322  002588  501A               	movf	??_disk_ioctl+6,w,c
 13323  00258A  221C               	addwfc	??_disk_ioctl+8,f,c
 13324  00258C  501B               	movf	??_disk_ioctl+7,w,c
 13325  00258E  2415               	addwf	??_disk_ioctl+1,w,c
 13326  002590  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 13327  002592  501C               	movf	??_disk_ioctl+8,w,c
 13328  002594  2016               	addwfc	??_disk_ioctl+2,w,c
 13329  002596  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 13330  002598  0E00               	movlw	0
 13331  00259A  2017               	addwfc	??_disk_ioctl+3,w,c
 13332  00259C  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 13333  00259E  0E00               	movlw	0
 13334  0025A0  2018               	addwfc	??_disk_ioctl+4,w,c
 13335  0025A2  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 13336  0025A4  0E01               	movlw	1
 13337  0025A6  241D               	addwf	??_disk_ioctl+9,w,c
 13338  0025A8  6E32               	movwf	disk_ioctl@csize,c
 13339  0025AA  0E00               	movlw	0
 13340  0025AC  201E               	addwfc	??_disk_ioctl+10,w,c
 13341  0025AE  6E33               	movwf	disk_ioctl@csize+1,c
 13342  0025B0  0E00               	movlw	0
 13343  0025B2  201F               	addwfc	??_disk_ioctl+11,w,c
 13344  0025B4  6E34               	movwf	disk_ioctl@csize+2,c
 13345  0025B6  0E00               	movlw	0
 13346  0025B8  2020               	addwfc	??_disk_ioctl+12,w,c
 13347  0025BA  6E35               	movwf	disk_ioctl@csize+3,c
 13348                           
 13349                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 13350  0025BC  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 13351  0025C0  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 13352  0025C4  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 13353  0025C8  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 13354  0025CC  0E0A               	movlw	10
 13355  0025CE                     u5655:
 13356  0025CE  90D8               	bcf	status,0,c
 13357  0025D0  3614               	rlcf	??_disk_ioctl,f,c
 13358  0025D2  3615               	rlcf	??_disk_ioctl+1,f,c
 13359  0025D4  3616               	rlcf	??_disk_ioctl+2,f,c
 13360  0025D6  3617               	rlcf	??_disk_ioctl+3,f,c
 13361  0025D8  2EE8               	decfsz	wreg,f,c
 13362  0025DA  D7F9               	goto	u5655
 13363  0025DC  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13364  0025E0  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13365  0025E4  C014  FFDE         	movff	??_disk_ioctl,postinc2
 13366  0025E8  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13367  0025EC  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13368  0025F0  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13369                           
 13370                           ;diskio.c: 473:    } else {
 13371  0025F4  D78F               	goto	u5610
 13372  0025F6                     l4870:
 13373                           
 13374                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 13375  0025F6  6A14               	clrf	??_disk_ioctl& (0+255),c
 13376  0025F8  AE2B               	btfss	disk_ioctl@csd+10,7,c
 13377  0025FA  D001               	bra	u5665
 13378  0025FC  2A14               	incf	??_disk_ioctl& (0+255),f,c
 13379  0025FE                     u5665:
 13380  0025FE  0E01               	movlw	1
 13381  002600  1614               	andwf	??_disk_ioctl,f,c
 13382  002602  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 13383  002606  0E0F               	movlw	15
 13384  002608  1615               	andwf	??_disk_ioctl+1,f,c
 13385  00260A  502A               	movf	disk_ioctl@csd+9,w,c
 13386  00260C  0B03               	andlw	3
 13387  00260E  0D02               	mullw	2
 13388  002610  50F3               	movf	prodl,w,c
 13389  002612  2415               	addwf	??_disk_ioctl+1,w,c
 13390  002614  2414               	addwf	??_disk_ioctl,w,c
 13391  002616  0F02               	addlw	2
 13392  002618  6E37               	movwf	disk_ioctl@n,c
 13393                           
 13394                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 13395  00261A  5027               	movf	disk_ioctl@csd+6,w,c
 13396  00261C  0B03               	andlw	3
 13397  00261E  6E14               	movwf	??_disk_ioctl& (0+255),c
 13398  002620  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13399  002622  0E0A               	movlw	10
 13400  002624                     u5675:
 13401  002624  90D8               	bcf	status,0,c
 13402  002626  3614               	rlcf	??_disk_ioctl,f,c
 13403  002628  3615               	rlcf	??_disk_ioctl+1,f,c
 13404  00262A  2EE8               	decfsz	wreg,f,c
 13405  00262C  D7FB               	goto	u5675
 13406  00262E  5028               	movf	disk_ioctl@csd+7,w,c
 13407  002630  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13408  002632  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13409  002634  90D8               	bcf	status,0,c
 13410  002636  3616               	rlcf	??_disk_ioctl+2,f,c
 13411  002638  3617               	rlcf	??_disk_ioctl+3,f,c
 13412  00263A  90D8               	bcf	status,0,c
 13413  00263C  3616               	rlcf	??_disk_ioctl+2,f,c
 13414  00263E  3617               	rlcf	??_disk_ioctl+3,f,c
 13415  002640  4429               	rlncf	disk_ioctl@csd+8,w,c
 13416  002642  46E8               	rlncf	wreg,f,c
 13417  002644  0B03               	andlw	3
 13418  002646  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13419  002648  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13420  00264A  5016               	movf	??_disk_ioctl+2,w,c
 13421  00264C  2618               	addwf	??_disk_ioctl+4,f,c
 13422  00264E  5017               	movf	??_disk_ioctl+3,w,c
 13423  002650  2219               	addwfc	??_disk_ioctl+5,f,c
 13424  002652  5014               	movf	??_disk_ioctl,w,c
 13425  002654  2618               	addwf	??_disk_ioctl+4,f,c
 13426  002656  5015               	movf	??_disk_ioctl+1,w,c
 13427  002658  2219               	addwfc	??_disk_ioctl+5,f,c
 13428  00265A  0E01               	movlw	1
 13429  00265C  2618               	addwf	??_disk_ioctl+4,f,c
 13430  00265E  0E00               	movlw	0
 13431  002660  2219               	addwfc	??_disk_ioctl+5,f,c
 13432  002662  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 13433  002666  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 13434  00266A  6A34               	clrf	disk_ioctl@csize+2,c
 13435  00266C  6A35               	clrf	disk_ioctl@csize+3,c
 13436                           
 13437                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 13438  00266E  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 13439  002672  0EF7               	movlw	-9
 13440  002674  2614               	addwf	??_disk_ioctl,f,c
 13441  002676  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 13442  00267A  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 13443  00267E  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 13444  002682  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 13445  002686  2A14               	incf	??_disk_ioctl,f,c
 13446  002688  D005               	goto	u5680
 13447  00268A                     u5685:
 13448  00268A  90D8               	bcf	status,0,c
 13449  00268C  3615               	rlcf	??_disk_ioctl+1,f,c
 13450  00268E  3616               	rlcf	??_disk_ioctl+2,f,c
 13451  002690  3617               	rlcf	??_disk_ioctl+3,f,c
 13452  002692  3618               	rlcf	??_disk_ioctl+4,f,c
 13453  002694                     u5680:
 13454  002694  2E14               	decfsz	??_disk_ioctl,f,c
 13455  002696  D7F9               	goto	u5685
 13456  002698  D03D               	goto	L15
 13457  00269A                     l155:
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;diskio.c: 483:   if (CardType & 0x04) {
 13461  00269A  A5DF               	btfss	_CardType& (0+255),2,b
 13462  00269C  D048               	goto	l4896
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 13466  00269E  0E00               	movlw	0
 13467  0026A0  6E0B               	movwf	send_cmd@arg,c
 13468  0026A2  0E00               	movlw	0
 13469  0026A4  6E0C               	movwf	send_cmd@arg+1,c
 13470  0026A6  0E00               	movlw	0
 13471  0026A8  6E0D               	movwf	send_cmd@arg+2,c
 13472  0026AA  0E00               	movlw	0
 13473  0026AC  6E0E               	movwf	send_cmd@arg+3,c
 13474  0026AE  0E8D               	movlw	141
 13475  0026B0  ECB0  F02D         	call	_send_cmd
 13476  0026B4  0900               	iorlw	0
 13477  0026B6  A4D8               	btfss	status,2,c
 13478  0026B8  D162               	goto	l4950
 13479                           
 13480                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 13481  0026BA  0EFF               	movlw	255
 13482  0026BC  ECAB  F02E         	call	_SPI1_Exchange8bit
 13483                           
 13484                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 13485  0026C0  0E21               	movlw	low disk_ioctl@csd
 13486  0026C2  6E02               	movwf	rcvr_datablock@buff,c
 13487  0026C4  0E00               	movlw	high disk_ioctl@csd
 13488  0026C6  6E03               	movwf	rcvr_datablock@buff+1,c
 13489  0026C8  0E00               	movlw	0
 13490  0026CA  6E05               	movwf	rcvr_datablock@btr+1,c
 13491  0026CC  0E10               	movlw	16
 13492  0026CE  6E04               	movwf	rcvr_datablock@btr,c
 13493  0026D0  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13494  0026D4  0900               	iorlw	0
 13495  0026D6  B4D8               	btfsc	status,2,c
 13496  0026D8  D152               	goto	l4950
 13497                           
 13498                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 13499  0026DA  0E30               	movlw	48
 13500  0026DC  6E37               	movwf	disk_ioctl@n,c
 13501  0026DE  D004               	goto	l4890
 13502  0026E0                     l4886:
 13503  0026E0  0EFF               	movlw	255
 13504  0026E2  ECAB  F02E         	call	_SPI1_Exchange8bit
 13505  0026E6  0637               	decf	disk_ioctl@n,f,c
 13506  0026E8                     l4890:
 13507  0026E8  5037               	movf	disk_ioctl@n,w,c
 13508  0026EA  A4D8               	btfss	status,2,c
 13509  0026EC  D7F9               	goto	l4886
 13510                           
 13511                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 13512  0026EE  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13513  0026F2  3A14               	swapf	??_disk_ioctl,f,c
 13514  0026F4  0E0F               	movlw	15
 13515  0026F6  1614               	andwf	??_disk_ioctl,f,c
 13516  0026F8  0E10               	movlw	16
 13517  0026FA  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13518  0026FC  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13519  0026FE  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13520  002700  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13521  002702  2A14               	incf	??_disk_ioctl,f,c
 13522  002704  D005               	goto	u5730
 13523  002706                     u5735:
 13524  002706  90D8               	bcf	status,0,c
 13525  002708  3615               	rlcf	??_disk_ioctl+1,f,c
 13526  00270A  3616               	rlcf	??_disk_ioctl+2,f,c
 13527  00270C  3617               	rlcf	??_disk_ioctl+3,f,c
 13528  00270E  3618               	rlcf	??_disk_ioctl+4,f,c
 13529  002710                     u5730:
 13530  002710  2E14               	decfsz	??_disk_ioctl,f,c
 13531  002712  D7F9               	goto	u5735
 13532  002714                     L15:
 13533  002714  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13534  002718  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13535  00271C  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13536  002720  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13537  002724  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13538  002728  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13539  00272C  D6F3               	goto	u5610
 13540  00272E                     l4896:
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13544  00272E  0E00               	movlw	0
 13545  002730  6E0B               	movwf	send_cmd@arg,c
 13546  002732  0E00               	movlw	0
 13547  002734  6E0C               	movwf	send_cmd@arg+1,c
 13548  002736  0E00               	movlw	0
 13549  002738  6E0D               	movwf	send_cmd@arg+2,c
 13550  00273A  0E00               	movlw	0
 13551  00273C  6E0E               	movwf	send_cmd@arg+3,c
 13552  00273E  0E09               	movlw	9
 13553  002740  ECB0  F02D         	call	_send_cmd
 13554  002744  0900               	iorlw	0
 13555  002746  A4D8               	btfss	status,2,c
 13556  002748  D11A               	goto	l4950
 13557  00274A  0E21               	movlw	low disk_ioctl@csd
 13558  00274C  6E02               	movwf	rcvr_datablock@buff,c
 13559  00274E  0E00               	movlw	high disk_ioctl@csd
 13560  002750  6E03               	movwf	rcvr_datablock@buff+1,c
 13561  002752  0E00               	movlw	0
 13562  002754  6E05               	movwf	rcvr_datablock@btr+1,c
 13563  002756  0E10               	movlw	16
 13564  002758  6E04               	movwf	rcvr_datablock@btr,c
 13565  00275A  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13566  00275E  0900               	iorlw	0
 13567  002760  B4D8               	btfsc	status,2,c
 13568  002762  D10D               	goto	l4950
 13569                           
 13570                           ;diskio.c: 494:     if (CardType & 0x02) {
 13571  002764  0100               	movlb	0	; () banked
 13572  002766  A3DF               	btfss	_CardType& (0+255),1,b
 13573  002768  D02A               	goto	l4904
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 13577  00276A  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 13578  00276E  0E06               	movlw	6
 13579  002770  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13580  002772                     u5775:
 13581  002772  90D8               	bcf	status,0,c
 13582  002774  3214               	rrcf	??_disk_ioctl,f,c
 13583  002776  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 13584  002778  D7FC               	goto	u5775
 13585  00277A  0EFF               	movlw	-1
 13586  00277C  2614               	addwf	??_disk_ioctl,f,c
 13587  00277E  502B               	movf	disk_ioctl@csd+10,w,c
 13588  002780  0B3F               	andlw	63
 13589  002782  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13590  002784  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13591  002786  90D8               	bcf	status,0,c
 13592  002788  3616               	rlcf	??_disk_ioctl+2,f,c
 13593  00278A  3617               	rlcf	??_disk_ioctl+3,f,c
 13594  00278C  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13595  00278E  AE2C               	btfss	disk_ioctl@csd+11,7,c
 13596  002790  D001               	bra	u5785
 13597  002792  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 13598  002794                     u5785:
 13599  002794  0E01               	movlw	1
 13600  002796  1618               	andwf	??_disk_ioctl+4,f,c
 13601  002798  5018               	movf	??_disk_ioctl+4,w,c
 13602  00279A  2616               	addwf	??_disk_ioctl+2,f,c
 13603  00279C  0E00               	movlw	0
 13604  00279E  2217               	addwfc	??_disk_ioctl+3,f,c
 13605  0027A0  0E01               	movlw	1
 13606  0027A2  2616               	addwf	??_disk_ioctl+2,f,c
 13607  0027A4  0E00               	movlw	0
 13608  0027A6  2217               	addwfc	??_disk_ioctl+3,f,c
 13609  0027A8  2A14               	incf	??_disk_ioctl,f,c
 13610  0027AA  D003               	goto	u5794
 13611  0027AC                     u5795:
 13612  0027AC  90D8               	bcf	status,0,c
 13613  0027AE  3616               	rlcf	??_disk_ioctl+2,f,c
 13614  0027B0  3617               	rlcf	??_disk_ioctl+3,f,c
 13615  0027B2                     u5794:
 13616  0027B2  2E14               	decfsz	??_disk_ioctl,f,c
 13617  0027B4  D7FB               	goto	u5795
 13618  0027B6  5016               	movf	??_disk_ioctl+2,w,c
 13619  0027B8  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13620  0027BA  5017               	movf	??_disk_ioctl+3,w,c
 13621  0027BC  D034               	goto	L16
 13622  0027BE                     l4904:
 13623                           
 13624                           ; BSR set to: 0
 13625                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 13626  0027BE  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13627  0027C2  90D8               	bcf	status,0,c
 13628  0027C4  3214               	rrcf	??_disk_ioctl,f,c
 13629  0027C6  90D8               	bcf	status,0,c
 13630  0027C8  3214               	rrcf	??_disk_ioctl,f,c
 13631  0027CA  0E1F               	movlw	31
 13632  0027CC  1614               	andwf	??_disk_ioctl,f,c
 13633  0027CE  0E01               	movlw	1
 13634  0027D0  2414               	addwf	??_disk_ioctl,w,c
 13635  0027D2  6E01               	movwf	___wmul@multiplier,c
 13636  0027D4  6A02               	clrf	___wmul@multiplier+1,c
 13637  0027D6  0E00               	movlw	0
 13638  0027D8  2202               	addwfc	___wmul@multiplier+1,f,c
 13639  0027DA  502C               	movf	disk_ioctl@csd+11,w,c
 13640  0027DC  0B03               	andlw	3
 13641  0027DE  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13642  0027E0  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13643  0027E2  90D8               	bcf	status,0,c
 13644  0027E4  3615               	rlcf	??_disk_ioctl+1,f,c
 13645  0027E6  3616               	rlcf	??_disk_ioctl+2,f,c
 13646  0027E8  90D8               	bcf	status,0,c
 13647  0027EA  3615               	rlcf	??_disk_ioctl+1,f,c
 13648  0027EC  3616               	rlcf	??_disk_ioctl+2,f,c
 13649  0027EE  90D8               	bcf	status,0,c
 13650  0027F0  3615               	rlcf	??_disk_ioctl+1,f,c
 13651  0027F2  3616               	rlcf	??_disk_ioctl+2,f,c
 13652  0027F4  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 13653  0027F8  0E05               	movlw	5
 13654  0027FA  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13655  0027FC                     u5805:
 13656  0027FC  90D8               	bcf	status,0,c
 13657  0027FE  3217               	rrcf	??_disk_ioctl+3,f,c
 13658  002800  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 13659  002802  D7FC               	goto	u5805
 13660  002804  0E07               	movlw	7
 13661  002806  1617               	andwf	??_disk_ioctl+3,f,c
 13662  002808  5017               	movf	??_disk_ioctl+3,w,c
 13663  00280A  2615               	addwf	??_disk_ioctl+1,f,c
 13664  00280C  0E00               	movlw	0
 13665  00280E  2216               	addwfc	??_disk_ioctl+2,f,c
 13666  002810  0E01               	movlw	1
 13667  002812  2415               	addwf	??_disk_ioctl+1,w,c
 13668  002814  6E03               	movwf	___wmul@multiplicand,c
 13669  002816  0E00               	movlw	0
 13670  002818  2016               	addwfc	??_disk_ioctl+2,w,c
 13671  00281A  6E04               	movwf	___wmul@multiplicand+1,c
 13672  00281C  EC53  F02E         	call	___wmul	;wreg free
 13673  002820  5001               	movf	?___wmul,w,c
 13674  002822  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13675  002824  5002               	movf	?___wmul+1,w,c
 13676  002826                     L16:
 13677  002826  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13678  002828  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 13679  00282A  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13680  00282C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13681  002830  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13682  002834  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 13683  002838  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 13684  00283C  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 13685  002840  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 13686  002844  D667               	goto	u5610
 13687  002846                     l4908:
 13688                           
 13689                           ; BSR set to: 0
 13690                           ;diskio.c: 507:   *ptr = CardType;
 13691  002846  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13692  00284A  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13693  00284E  C0DF  FFDF         	movff	_CardType,indf2
 13694  002852  D660               	goto	u5610
 13695  002854                     l4912:
 13696                           
 13697                           ; BSR set to: 0
 13698                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 13699  002854  0E00               	movlw	0
 13700  002856  6E0B               	movwf	send_cmd@arg,c
 13701  002858  0E00               	movlw	0
 13702  00285A  6E0C               	movwf	send_cmd@arg+1,c
 13703  00285C  0E00               	movlw	0
 13704  00285E  6E0D               	movwf	send_cmd@arg+2,c
 13705  002860  0E00               	movlw	0
 13706  002862  6E0E               	movwf	send_cmd@arg+3,c
 13707  002864  0E09               	movlw	9
 13708  002866  ECB0  F02D         	call	_send_cmd
 13709  00286A  0900               	iorlw	0
 13710  00286C  A4D8               	btfss	status,2,c
 13711  00286E  D087               	goto	l4950
 13712  002870  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13713  002874  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13714  002878  0E00               	movlw	0
 13715  00287A  6E05               	movwf	rcvr_datablock@btr+1,c
 13716  00287C  0E10               	movlw	16
 13717  00287E  6E04               	movwf	rcvr_datablock@btr,c
 13718  002880  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13719  002884                     L14:
 13720  002884  0900               	iorlw	0
 13721  002886  A4D8               	btfss	status,2,c
 13722  002888  D645               	goto	u5610
 13723  00288A  D079               	goto	l4950
 13724  00288C                     l4918:
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 13728  00288C  0E00               	movlw	0
 13729  00288E  6E0B               	movwf	send_cmd@arg,c
 13730  002890  0E00               	movlw	0
 13731  002892  6E0C               	movwf	send_cmd@arg+1,c
 13732  002894  0E00               	movlw	0
 13733  002896  6E0D               	movwf	send_cmd@arg+2,c
 13734  002898  0E00               	movlw	0
 13735  00289A  6E0E               	movwf	send_cmd@arg+3,c
 13736  00289C  0E0A               	movlw	10
 13737  00289E  ECB0  F02D         	call	_send_cmd
 13738  0028A2  0900               	iorlw	0
 13739  0028A4  A4D8               	btfss	status,2,c
 13740  0028A6  D06B               	goto	l4950
 13741  0028A8  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13742  0028AC  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13743  0028B0  0E00               	movlw	0
 13744  0028B2  6E05               	movwf	rcvr_datablock@btr+1,c
 13745  0028B4  0E10               	movlw	16
 13746  0028B6  6E04               	movwf	rcvr_datablock@btr,c
 13747  0028B8  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13748  0028BC  D7E3               	goto	L14
 13749  0028BE                     l4924:
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 13753  0028BE  0E00               	movlw	0
 13754  0028C0  6E0B               	movwf	send_cmd@arg,c
 13755  0028C2  0E00               	movlw	0
 13756  0028C4  6E0C               	movwf	send_cmd@arg+1,c
 13757  0028C6  0E00               	movlw	0
 13758  0028C8  6E0D               	movwf	send_cmd@arg+2,c
 13759  0028CA  0E00               	movlw	0
 13760  0028CC  6E0E               	movwf	send_cmd@arg+3,c
 13761  0028CE  0E3A               	movlw	58
 13762  0028D0  ECB0  F02D         	call	_send_cmd
 13763  0028D4  0900               	iorlw	0
 13764  0028D6  A4D8               	btfss	status,2,c
 13765  0028D8  D052               	goto	l4950
 13766                           
 13767                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 13768  0028DA  0E04               	movlw	4
 13769  0028DC  6E37               	movwf	disk_ioctl@n,c
 13770  0028DE  D00B               	goto	l4934
 13771  0028E0                     l4928:
 13772  0028E0  0EFF               	movlw	255
 13773  0028E2  ECAB  F02E         	call	_SPI1_Exchange8bit
 13774  0028E6  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13775  0028EA  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13776  0028EE  6EDF               	movwf	indf2,c
 13777  0028F0  4A38               	infsnz	disk_ioctl@ptr,f,c
 13778  0028F2  2A39               	incf	disk_ioctl@ptr+1,f,c
 13779  0028F4  0637               	decf	disk_ioctl@n,f,c
 13780  0028F6                     l4934:
 13781  0028F6  5037               	movf	disk_ioctl@n,w,c
 13782  0028F8  B4D8               	btfsc	status,2,c
 13783  0028FA  D60C               	goto	u5610
 13784  0028FC  D7F1               	goto	l4928
 13785  0028FE                     l4938:
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 13789  0028FE  0E00               	movlw	0
 13790  002900  6E0B               	movwf	send_cmd@arg,c
 13791  002902  0E00               	movlw	0
 13792  002904  6E0C               	movwf	send_cmd@arg+1,c
 13793  002906  0E00               	movlw	0
 13794  002908  6E0D               	movwf	send_cmd@arg+2,c
 13795  00290A  0E00               	movlw	0
 13796  00290C  6E0E               	movwf	send_cmd@arg+3,c
 13797  00290E  0E8D               	movlw	141
 13798  002910  ECB0  F02D         	call	_send_cmd
 13799  002914  0900               	iorlw	0
 13800  002916  A4D8               	btfss	status,2,c
 13801  002918  D032               	goto	l4950
 13802                           
 13803                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 13804  00291A  0EFF               	movlw	255
 13805  00291C  ECAB  F02E         	call	_SPI1_Exchange8bit
 13806                           
 13807                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 13808  002920  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13809  002924  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13810  002928  0E00               	movlw	0
 13811  00292A  6E05               	movwf	rcvr_datablock@btr+1,c
 13812  00292C  0E40               	movlw	64
 13813  00292E  6E04               	movwf	rcvr_datablock@btr,c
 13814  002930  EC69  F02C         	call	_rcvr_datablock	;wreg free
 13815  002934  D7A7               	goto	L14
 13816  002936                     l4946:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;diskio.c: 539:   res = RES_PARERR;
 13820  002936  0E04               	movlw	4
 13821  002938                     L13:
 13822  002938  6E36               	movwf	disk_ioctl@res,c
 13823                           
 13824                           ;diskio.c: 540:  }
 13825  00293A  D021               	goto	l4950
 13826  00293C                     l4948:
 13827                           
 13828                           ; BSR set to: 0
 13829  00293C  5011               	movf	disk_ioctl@cmd,w,c
 13830  00293E  6E14               	movwf	??_disk_ioctl& (0+255),c
 13831  002940  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13832                           
 13833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13834                           ; Switch size 1, requested type "simple"
 13835                           ; Number of cases is 1, Range of values is 0 to 0
 13836                           ; switch strategies available:
 13837                           ; Name         Instructions Cycles
 13838                           ; simple_byte            4     3 (average)
 13839                           ;	Chosen strategy is simple_byte
 13840  002942  5015               	movf	??_disk_ioctl+1,w,c
 13841  002944  0A00               	xorlw	0	; case 0
 13842  002946  A4D8               	btfss	status,2,c
 13843  002948  D7F6               	goto	l4946
 13844                           
 13845                           ; BSR set to: 0
 13846                           ; Switch size 1, requested type "simple"
 13847                           ; Number of cases is 8, Range of values is 0 to 14
 13848                           ; switch strategies available:
 13849                           ; Name         Instructions Cycles
 13850                           ; simple_byte           25    13 (average)
 13851                           ;	Chosen strategy is simple_byte
 13852  00294A  5014               	movf	??_disk_ioctl,w,c
 13853  00294C  0A00               	xorlw	0	; case 0
 13854  00294E  B4D8               	btfsc	status,2,c
 13855  002950  D5DC               	goto	l4856
 13856  002952  0A01               	xorlw	1	; case 1
 13857  002954  B4D8               	btfsc	status,2,c
 13858  002956  D5E0               	goto	l4860
 13859  002958  0A02               	xorlw	2	; case 3
 13860  00295A  B4D8               	btfsc	status,2,c
 13861  00295C  D69E               	goto	l155
 13862  00295E  0A09               	xorlw	9	; case 10
 13863  002960  B4D8               	btfsc	status,2,c
 13864  002962  D771               	goto	l4908
 13865  002964  0A01               	xorlw	1	; case 11
 13866  002966  B4D8               	btfsc	status,2,c
 13867  002968  D775               	goto	l4912
 13868  00296A  0A07               	xorlw	7	; case 12
 13869  00296C  B4D8               	btfsc	status,2,c
 13870  00296E  D78E               	goto	l4918
 13871  002970  0A01               	xorlw	1	; case 13
 13872  002972  B4D8               	btfsc	status,2,c
 13873  002974  D7A4               	goto	l4924
 13874  002976  0A03               	xorlw	3	; case 14
 13875  002978  B4D8               	btfsc	status,2,c
 13876  00297A  D7C1               	goto	l4938
 13877  00297C  D7DC               	goto	l4946
 13878  00297E                     l4950:
 13879                           
 13880                           ;diskio.c: 542:  deselect();
 13881  00297E  ECCF  F02E         	call	_deselect	;wreg free
 13882                           
 13883                           ;diskio.c: 544:  return res;
 13884  002982  5036               	movf	disk_ioctl@res,w,c
 13885  002984  0012               	return		;funcret
 13886  002986                     __end_of_disk_ioctl:
 13887                           	opt callstack 0
 13888                           
 13889 ;; *************** function ___wmul *****************
 13890 ;; Defined at:
 13891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  multiplier      2    0[COMRAM] unsigned int 
 13894 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;  product         2    4[COMRAM] unsigned int 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  2    0[COMRAM] unsigned int 
 13899 ;; Registers used:
 13900 ;;		wreg, status,2, status,0, prodl, prodh
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13906 ;;      Params:         4       0       0       0       0       0       0       0       0
 13907 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13909 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        6 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; This function calls:
 13913 ;;		Nothing
 13914 ;; This function is called by:
 13915 ;;		_disk_ioctl
 13916 ;; This function uses a non-reentrant model
 13917 ;;
 13918                           
 13919                           	psect	text41
 13920  005CA6                     __ptext41:
 13921                           	opt callstack 0
 13922  005CA6                     ___wmul:
 13923                           	opt callstack 25
 13924                           
 13925                           ;incstack = 0
 13926  005CA6  5001               	movf	___wmul@multiplier,w,c
 13927  005CA8  0203               	mulwf	___wmul@multiplicand,c
 13928  005CAA  CFF3 F005          	movff	prodl,___wmul@product
 13929  005CAE  CFF4 F006          	movff	prodh,___wmul@product+1
 13930  005CB2  5001               	movf	___wmul@multiplier,w,c
 13931  005CB4  0204               	mulwf	___wmul@multiplicand+1,c
 13932  005CB6  50F3               	movf	prodl,w,c
 13933  005CB8  2606               	addwf	___wmul@product+1,f,c
 13934  005CBA  5002               	movf	___wmul@multiplier+1,w,c
 13935  005CBC  0203               	mulwf	___wmul@multiplicand,c
 13936  005CBE  50F3               	movf	prodl,w,c
 13937  005CC0  2606               	addwf	___wmul@product+1,f,c
 13938  005CC2  C005  F001         	movff	___wmul@product,?___wmul
 13939  005CC6  C006  F002         	movff	___wmul@product+1,?___wmul+1
 13940  005CCA  0012               	return		;funcret
 13941  005CCC                     __end_of___wmul:
 13942                           	opt callstack 0
 13943                           
 13944 ;; *************** function _st_clust *****************
 13945 ;; Defined at:
 13946 ;;		line 1252 in file "ff.c"
 13947 ;; Parameters:    Size  Location     Type
 13948 ;;  dir             2    0[COMRAM] PTR unsigned char 
 13949 ;;		 -> FatFs(558), NULL(0), 
 13950 ;;  cl              4    2[COMRAM] unsigned long 
 13951 ;; Auto vars:     Size  Location     Type
 13952 ;;		None
 13953 ;; Return value:  Size  Location     Type
 13954 ;;                  1    wreg      void 
 13955 ;; Registers used:
 13956 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13957 ;; Tracked objects:
 13958 ;;		On entry : 0/0
 13959 ;;		On exit  : 0/0
 13960 ;;		Unchanged: 0/0
 13961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13962 ;;      Params:         6       0       0       0       0       0       0       0       0
 13963 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13964 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13965 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13966 ;;Total ram usage:        6 bytes
 13967 ;; Hardware stack levels used:    1
 13968 ;; This function calls:
 13969 ;;		Nothing
 13970 ;; This function is called by:
 13971 ;;		_f_open
 13972 ;;		_f_sync
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           	psect	text42
 13977  005C7C                     __ptext42:
 13978                           	opt callstack 0
 13979  005C7C                     _st_clust:
 13980                           	opt callstack 28
 13981                           
 13982                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 13983                           
 13984                           ;incstack = 0
 13985  005C7C  EE20 F01A          	lfsr	2,26
 13986  005C80  5001               	movf	st_clust@dir,w,c
 13987  005C82  26D9               	addwf	fsr2l,f,c
 13988  005C84  5002               	movf	st_clust@dir+1,w,c
 13989  005C86  22DA               	addwfc	fsr2h,f,c
 13990  005C88  C003  FFDE         	movff	st_clust@cl,postinc2
 13991  005C8C  C004  FFDD         	movff	st_clust@cl+1,postdec2
 13992                           
 13993                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 13994  005C90  EE20 F014          	lfsr	2,20
 13995  005C94  5001               	movf	st_clust@dir,w,c
 13996  005C96  26D9               	addwf	fsr2l,f,c
 13997  005C98  5002               	movf	st_clust@dir+1,w,c
 13998  005C9A  22DA               	addwfc	fsr2h,f,c
 13999  005C9C  C005  FFDE         	movff	st_clust@cl+2,postinc2
 14000  005CA0  C006  FFDD         	movff	st_clust@cl+3,postdec2
 14001  005CA4  0012               	return		;funcret
 14002  005CA6                     __end_of_st_clust:
 14003                           	opt callstack 0
 14004                           
 14005 ;; *************** function _move_window *****************
 14006 ;; Defined at:
 14007 ;;		line 729 in file "ff.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  fs              2   47[COMRAM] PTR struct .
 14010 ;;		 -> FatFs(558), NULL(0), 
 14011 ;;  sector          4   49[COMRAM] unsigned long 
 14012 ;; Auto vars:     Size  Location     Type
 14013 ;;  res             1   57[COMRAM] enum E93
 14014 ;; Return value:  Size  Location     Type
 14015 ;;                  1    wreg      enum E93
 14016 ;; Registers used:
 14017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14018 ;; Tracked objects:
 14019 ;;		On entry : 0/0
 14020 ;;		On exit  : 0/0
 14021 ;;		Unchanged: 0/0
 14022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14023 ;;      Params:         6       0       0       0       0       0       0       0       0
 14024 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14025 ;;      Temps:          4       0       0       0       0       0       0       0       0
 14026 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14027 ;;Total ram usage:       11 bytes
 14028 ;; Hardware stack levels used:    1
 14029 ;; Hardware stack levels required when called:    7
 14030 ;; This function calls:
 14031 ;;		_disk_read
 14032 ;;		_sync_window
 14033 ;; This function is called by:
 14034 ;;		_get_fat
 14035 ;;		_put_fat
 14036 ;;		_dir_alloc
 14037 ;;		_dir_find
 14038 ;;		_dir_register
 14039 ;;		_check_fs
 14040 ;;		_find_volume
 14041 ;;		_f_open
 14042 ;;		_f_read
 14043 ;;		_f_write
 14044 ;;		_f_sync
 14045 ;; This function uses a non-reentrant model
 14046 ;;
 14047                           
 14048                           	psect	text43
 14049  00552C                     __ptext43:
 14050                           	opt callstack 0
 14051  00552C                     _move_window:
 14052                           	opt callstack 20
 14053                           
 14054                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 14055                           
 14056                           ;incstack = 0
 14057  00552C  0E00               	movlw	0
 14058  00552E  6E3A               	movwf	move_window@res,c
 14059                           
 14060                           ;ff.c: 737:  if (sector != fs->winsect) {
 14061  005530  EE20 F02A          	lfsr	2,42
 14062  005534  5030               	movf	move_window@fs,w,c
 14063  005536  26D9               	addwf	fsr2l,f,c
 14064  005538  5031               	movf	move_window@fs+1,w,c
 14065  00553A  22DA               	addwfc	fsr2h,f,c
 14066  00553C  5032               	movf	move_window@sector,w,c
 14067  00553E  18DE               	xorwf	postinc2,w,c
 14068  005540  E10A               	bnz	u5110
 14069  005542  5033               	movf	move_window@sector+1,w,c
 14070  005544  18DE               	xorwf	postinc2,w,c
 14071  005546  E107               	bnz	u5110
 14072  005548  5034               	movf	move_window@sector+2,w,c
 14073  00554A  18DE               	xorwf	postinc2,w,c
 14074  00554C  E104               	bnz	u5110
 14075  00554E  5035               	movf	move_window@sector+3,w,c
 14076  005550  18DE               	xorwf	postinc2,w,c
 14077  005552  B4D8               	btfsc	status,2,c
 14078  005554  D03C               	goto	l4582
 14079  005556                     u5110:
 14080                           
 14081                           ;ff.c: 739:   res = sync_window(fs);
 14082  005556  C030  F01B         	movff	move_window@fs,sync_window@fs
 14083  00555A  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 14084  00555E  EC6C  F022         	call	_sync_window	;wreg free
 14085  005562  6E3A               	movwf	move_window@res,c
 14086                           
 14087                           ;ff.c: 741:   if (res == FR_OK) {
 14088  005564  503A               	movf	move_window@res,w,c
 14089  005566  A4D8               	btfss	status,2,c
 14090  005568  D032               	goto	l4582
 14091                           
 14092                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 14093  00556A  0E2E               	movlw	46
 14094  00556C  2430               	addwf	move_window@fs,w,c
 14095  00556E  6E11               	movwf	disk_read@buff,c
 14096  005570  0E00               	movlw	0
 14097  005572  2031               	addwfc	move_window@fs+1,w,c
 14098  005574  6E12               	movwf	disk_read@buff+1,c
 14099  005576  C032  F013         	movff	move_window@sector,disk_read@sector
 14100  00557A  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 14101  00557E  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 14102  005582  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 14103  005586  0E00               	movlw	0
 14104  005588  6E18               	movwf	disk_read@count+1,c
 14105  00558A  0E01               	movlw	1
 14106  00558C  6E17               	movwf	disk_read@count,c
 14107  00558E  EE20 F001          	lfsr	2,1
 14108  005592  5030               	movf	move_window@fs,w,c
 14109  005594  26D9               	addwf	fsr2l,f,c
 14110  005596  5031               	movf	move_window@fs+1,w,c
 14111  005598  22DA               	addwfc	fsr2h,f,c
 14112  00559A  50DF               	movf	indf2,w,c
 14113  00559C  ECC3  F028         	call	_disk_read
 14114  0055A0  0900               	iorlw	0
 14115  0055A2  B4D8               	btfsc	status,2,c
 14116  0055A4  D006               	goto	l4580
 14117                           
 14118                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 14119  0055A6  6832               	setf	move_window@sector,c
 14120  0055A8  6833               	setf	move_window@sector+1,c
 14121  0055AA  6834               	setf	move_window@sector+2,c
 14122  0055AC  6835               	setf	move_window@sector+3,c
 14123                           
 14124                           ;ff.c: 744:     res = FR_DISK_ERR;
 14125  0055AE  0E01               	movlw	1
 14126  0055B0  6E3A               	movwf	move_window@res,c
 14127  0055B2                     l4580:
 14128                           
 14129                           ;ff.c: 746:    fs->winsect = sector;
 14130  0055B2  EE20 F02A          	lfsr	2,42
 14131  0055B6  5030               	movf	move_window@fs,w,c
 14132  0055B8  26D9               	addwf	fsr2l,f,c
 14133  0055BA  5031               	movf	move_window@fs+1,w,c
 14134  0055BC  22DA               	addwfc	fsr2h,f,c
 14135  0055BE  C032  FFDE         	movff	move_window@sector,postinc2
 14136  0055C2  C033  FFDE         	movff	move_window@sector+1,postinc2
 14137  0055C6  C034  FFDE         	movff	move_window@sector+2,postinc2
 14138  0055CA  C035  FFDE         	movff	move_window@sector+3,postinc2
 14139  0055CE                     l4582:
 14140                           
 14141                           ;ff.c: 749:  return res;
 14142  0055CE  503A               	movf	move_window@res,w,c
 14143  0055D0  0012               	return		;funcret
 14144  0055D2                     __end_of_move_window:
 14145                           	opt callstack 0
 14146                           
 14147 ;; *************** function _sync_window *****************
 14148 ;; Defined at:
 14149 ;;		line 700 in file "ff.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  fs              2   26[COMRAM] PTR struct .
 14152 ;;		 -> FatFs(558), NULL(0), 
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;  wsect           4   43[COMRAM] unsigned long 
 14155 ;;  nf              2   41[COMRAM] unsigned short 
 14156 ;;  res             1   40[COMRAM] enum E93
 14157 ;; Return value:  Size  Location     Type
 14158 ;;                  1    wreg      enum E93
 14159 ;; Registers used:
 14160 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14161 ;; Tracked objects:
 14162 ;;		On entry : 0/0
 14163 ;;		On exit  : 0/0
 14164 ;;		Unchanged: 0/0
 14165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14166 ;;      Params:         2       0       0       0       0       0       0       0       0
 14167 ;;      Locals:         7       0       0       0       0       0       0       0       0
 14168 ;;      Temps:         12       0       0       0       0       0       0       0       0
 14169 ;;      Totals:        21       0       0       0       0       0       0       0       0
 14170 ;;Total ram usage:       21 bytes
 14171 ;; Hardware stack levels used:    1
 14172 ;; Hardware stack levels required when called:    6
 14173 ;; This function calls:
 14174 ;;		_disk_write
 14175 ;; This function is called by:
 14176 ;;		_move_window
 14177 ;;		_sync_fs
 14178 ;;		_dir_next
 14179 ;;		_f_write
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           	psect	text44
 14184  0044D8                     __ptext44:
 14185                           	opt callstack 0
 14186  0044D8                     _sync_window:
 14187                           	opt callstack 20
 14188                           
 14189                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 14190                           
 14191                           ;incstack = 0
 14192  0044D8  0E00               	movlw	0
 14193  0044DA  6E29               	movwf	sync_window@res,c
 14194                           
 14195                           ;ff.c: 709:  if (fs->wflag) {
 14196  0044DC  EE20 F004          	lfsr	2,4
 14197  0044E0  501B               	movf	sync_window@fs,w,c
 14198  0044E2  26D9               	addwf	fsr2l,f,c
 14199  0044E4  501C               	movf	sync_window@fs+1,w,c
 14200  0044E6  22DA               	addwfc	fsr2h,f,c
 14201  0044E8  50DF               	movf	indf2,w,c
 14202  0044EA  B4D8               	btfsc	status,2,c
 14203  0044EC  D09F               	goto	l4562
 14204                           
 14205                           ;ff.c: 710:   wsect = fs->winsect;
 14206  0044EE  EE20 F02A          	lfsr	2,42
 14207  0044F2  501B               	movf	sync_window@fs,w,c
 14208  0044F4  26D9               	addwf	fsr2l,f,c
 14209  0044F6  501C               	movf	sync_window@fs+1,w,c
 14210  0044F8  22DA               	addwfc	fsr2h,f,c
 14211  0044FA  CFDE F02C          	movff	postinc2,sync_window@wsect
 14212  0044FE  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 14213  004502  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 14214  004506  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 14215                           
 14216                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 14217  00450A  0E2E               	movlw	46
 14218  00450C  241B               	addwf	sync_window@fs,w,c
 14219  00450E  6E11               	movwf	disk_write@buff,c
 14220  004510  0E00               	movlw	0
 14221  004512  201C               	addwfc	sync_window@fs+1,w,c
 14222  004514  6E12               	movwf	disk_write@buff+1,c
 14223  004516  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14224  00451A  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14225  00451E  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14226  004522  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14227  004526  0E00               	movlw	0
 14228  004528  6E18               	movwf	disk_write@count+1,c
 14229  00452A  0E01               	movlw	1
 14230  00452C  6E17               	movwf	disk_write@count,c
 14231  00452E  EE20 F001          	lfsr	2,1
 14232  004532  501B               	movf	sync_window@fs,w,c
 14233  004534  26D9               	addwf	fsr2l,f,c
 14234  004536  501C               	movf	sync_window@fs+1,w,c
 14235  004538  22DA               	addwfc	fsr2h,f,c
 14236  00453A  50DF               	movf	indf2,w,c
 14237  00453C  EC90  F025         	call	_disk_write
 14238  004540  0900               	iorlw	0
 14239  004542  B4D8               	btfsc	status,2,c
 14240  004544  D003               	goto	l4544
 14241                           
 14242                           ;ff.c: 712:    res = FR_DISK_ERR;
 14243  004546  0E01               	movlw	1
 14244  004548  6E29               	movwf	sync_window@res,c
 14245                           
 14246                           ;ff.c: 713:   } else {
 14247  00454A  D070               	goto	l4562
 14248  00454C                     l4544:
 14249                           
 14250                           ;ff.c: 714:    fs->wflag = 0;
 14251  00454C  EE20 F004          	lfsr	2,4
 14252  004550  501B               	movf	sync_window@fs,w,c
 14253  004552  26D9               	addwf	fsr2l,f,c
 14254  004554  501C               	movf	sync_window@fs+1,w,c
 14255  004556  22DA               	addwfc	fsr2h,f,c
 14256  004558  0E00               	movlw	0
 14257  00455A  6EDF               	movwf	indf2,c
 14258                           
 14259                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 14260  00455C  EE20 F016          	lfsr	2,22
 14261  004560  501B               	movf	sync_window@fs,w,c
 14262  004562  26D9               	addwf	fsr2l,f,c
 14263  004564  501C               	movf	sync_window@fs+1,w,c
 14264  004566  22DA               	addwfc	fsr2h,f,c
 14265  004568  EE10 F01E          	lfsr	1,30
 14266  00456C  501B               	movf	sync_window@fs,w,c
 14267  00456E  26E1               	addwf	fsr1l,f,c
 14268  004570  501C               	movf	sync_window@fs+1,w,c
 14269  004572  22E2               	addwfc	fsr1h,f,c
 14270  004574  CFE6 F021          	movff	postinc1,??_sync_window+4
 14271  004578  CFE6 F022          	movff	postinc1,??_sync_window+5
 14272  00457C  CFE6 F023          	movff	postinc1,??_sync_window+6
 14273  004580  CFE6 F024          	movff	postinc1,??_sync_window+7
 14274  004584  5021               	movf	??_sync_window+4,w,c
 14275  004586  5C2C               	subwf	sync_window@wsect,w,c
 14276  004588  6E25               	movwf	(??_sync_window+8)& (0+255),c
 14277  00458A  5022               	movf	??_sync_window+5,w,c
 14278  00458C  582D               	subwfb	sync_window@wsect+1,w,c
 14279  00458E  6E26               	movwf	(??_sync_window+9)& (0+255),c
 14280  004590  5023               	movf	??_sync_window+6,w,c
 14281  004592  582E               	subwfb	sync_window@wsect+2,w,c
 14282  004594  6E27               	movwf	(??_sync_window+10)& (0+255),c
 14283  004596  5024               	movf	??_sync_window+7,w,c
 14284  004598  582F               	subwfb	sync_window@wsect+3,w,c
 14285  00459A  6E28               	movwf	(??_sync_window+11)& (0+255),c
 14286  00459C  50DE               	movf	postinc2,w,c
 14287  00459E  5C25               	subwf	??_sync_window+8,w,c
 14288  0045A0  50DE               	movf	postinc2,w,c
 14289  0045A2  5826               	subwfb	??_sync_window+9,w,c
 14290  0045A4  50DE               	movf	postinc2,w,c
 14291  0045A6  5827               	subwfb	??_sync_window+10,w,c
 14292  0045A8  50DE               	movf	postinc2,w,c
 14293  0045AA  5828               	subwfb	??_sync_window+11,w,c
 14294  0045AC  B0D8               	btfsc	status,0,c
 14295  0045AE  D03E               	goto	l4562
 14296                           
 14297                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 14298  0045B0  EE20 F003          	lfsr	2,3
 14299  0045B4  501B               	movf	sync_window@fs,w,c
 14300  0045B6  26D9               	addwf	fsr2l,f,c
 14301  0045B8  501C               	movf	sync_window@fs+1,w,c
 14302  0045BA  22DA               	addwfc	fsr2h,f,c
 14303  0045BC  50DF               	movf	indf2,w,c
 14304  0045BE  6E1D               	movwf	??_sync_window& (0+255),c
 14305  0045C0  501D               	movf	??_sync_window,w,c
 14306  0045C2  6E2A               	movwf	sync_window@nf,c
 14307  0045C4  6A2B               	clrf	sync_window@nf+1,c
 14308  0045C6                     l4550:
 14309  0045C6  502B               	movf	sync_window@nf+1,w,c
 14310  0045C8  E104               	bnz	l4554
 14311  0045CA  0E02               	movlw	2
 14312  0045CC  5C2A               	subwf	sync_window@nf,w,c
 14313  0045CE  A0D8               	btfss	status,0,c
 14314  0045D0  D02D               	goto	l4562
 14315  0045D2                     l4554:
 14316                           
 14317                           ;ff.c: 717:      wsect += fs->fsize;
 14318  0045D2  EE20 F016          	lfsr	2,22
 14319  0045D6  501B               	movf	sync_window@fs,w,c
 14320  0045D8  26D9               	addwf	fsr2l,f,c
 14321  0045DA  501C               	movf	sync_window@fs+1,w,c
 14322  0045DC  22DA               	addwfc	fsr2h,f,c
 14323  0045DE  50DE               	movf	postinc2,w,c
 14324  0045E0  262C               	addwf	sync_window@wsect,f,c
 14325  0045E2  50DE               	movf	postinc2,w,c
 14326  0045E4  222D               	addwfc	sync_window@wsect+1,f,c
 14327  0045E6  50DE               	movf	postinc2,w,c
 14328  0045E8  222E               	addwfc	sync_window@wsect+2,f,c
 14329  0045EA  50DD               	movf	postdec2,w,c
 14330  0045EC  222F               	addwfc	sync_window@wsect+3,f,c
 14331                           
 14332                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 14333  0045EE  0E2E               	movlw	46
 14334  0045F0  241B               	addwf	sync_window@fs,w,c
 14335  0045F2  6E11               	movwf	disk_write@buff,c
 14336  0045F4  0E00               	movlw	0
 14337  0045F6  201C               	addwfc	sync_window@fs+1,w,c
 14338  0045F8  6E12               	movwf	disk_write@buff+1,c
 14339  0045FA  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14340  0045FE  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14341  004602  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14342  004606  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14343  00460A  0E00               	movlw	0
 14344  00460C  6E18               	movwf	disk_write@count+1,c
 14345  00460E  0E01               	movlw	1
 14346  004610  6E17               	movwf	disk_write@count,c
 14347  004612  EE20 F001          	lfsr	2,1
 14348  004616  501B               	movf	sync_window@fs,w,c
 14349  004618  26D9               	addwf	fsr2l,f,c
 14350  00461A  501C               	movf	sync_window@fs+1,w,c
 14351  00461C  22DA               	addwfc	fsr2h,f,c
 14352  00461E  50DF               	movf	indf2,w,c
 14353  004620  EC90  F025         	call	_disk_write
 14354                           
 14355                           ;ff.c: 719:     }
 14356  004624  062A               	decf	sync_window@nf,f,c
 14357  004626  A0D8               	btfss	status,0,c
 14358  004628  062B               	decf	sync_window@nf+1,f,c
 14359  00462A  D7CD               	goto	l4550
 14360  00462C                     l4562:
 14361                           
 14362                           ;ff.c: 723:  return res;
 14363  00462C  5029               	movf	sync_window@res,w,c
 14364  00462E  0012               	return		;funcret
 14365  004630                     __end_of_sync_window:
 14366                           	opt callstack 0
 14367                           
 14368 ;; *************** function _disk_write *****************
 14369 ;; Defined at:
 14370 ;;		line 405 in file "diskio.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;  pdrv            1    wreg     unsigned char 
 14373 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 14374 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14375 ;;  sector          4   18[COMRAM] unsigned long 
 14376 ;;  count           2   22[COMRAM] unsigned short 
 14377 ;; Auto vars:     Size  Location     Type
 14378 ;;  pdrv            1   25[COMRAM] unsigned char 
 14379 ;; Return value:  Size  Location     Type
 14380 ;;                  1    wreg      enum E43
 14381 ;; Registers used:
 14382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14383 ;; Tracked objects:
 14384 ;;		On entry : 0/0
 14385 ;;		On exit  : 0/0
 14386 ;;		Unchanged: 0/0
 14387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14388 ;;      Params:         8       0       0       0       0       0       0       0       0
 14389 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14390 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14391 ;;      Totals:        10       0       0       0       0       0       0       0       0
 14392 ;;Total ram usage:       10 bytes
 14393 ;; Hardware stack levels used:    1
 14394 ;; Hardware stack levels required when called:    5
 14395 ;; This function calls:
 14396 ;;		_deselect
 14397 ;;		_send_cmd
 14398 ;;		_xmit_datablock
 14399 ;; This function is called by:
 14400 ;;		_sync_window
 14401 ;;		_sync_fs
 14402 ;;		_f_write
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           	psect	text45
 14407  004B20                     __ptext45:
 14408                           	opt callstack 0
 14409  004B20                     _disk_write:
 14410                           	opt callstack 20
 14411                           
 14412                           ;incstack = 0
 14413                           ;disk_write@pdrv stored from wreg
 14414  004B20  6E1A               	movwf	disk_write@pdrv,c
 14415                           
 14416                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 14417  004B22  501A               	movf	disk_write@pdrv,w,c
 14418  004B24  A4D8               	btfss	status,2,c
 14419  004B26  D004               	goto	u4800
 14420  004B28  5017               	movf	disk_write@count,w,c
 14421  004B2A  1018               	iorwf	disk_write@count+1,w,c
 14422  004B2C  A4D8               	btfss	status,2,c
 14423  004B2E  D002               	goto	l126
 14424  004B30                     u4800:
 14425  004B30  0E04               	movlw	4
 14426  004B32  0012               	return	
 14427  004B34                     l126:
 14428                           
 14429                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 14430  004B34  0100               	movlb	0	; () banked
 14431  004B36  A1F2               	btfss	_Stat& (0+255),0,b
 14432  004B38  D002               	goto	l130
 14433                           
 14434                           ; BSR set to: 0
 14435  004B3A  0E03               	movlw	3
 14436  004B3C  0012               	return	
 14437  004B3E                     l130:
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 14441  004B3E  A5F2               	btfss	_Stat& (0+255),2,b
 14442  004B40  D002               	goto	l131
 14443                           
 14444                           ; BSR set to: 0
 14445  004B42  0E02               	movlw	2
 14446  004B44  0012               	return	
 14447  004B46                     l131:
 14448                           
 14449                           ; BSR set to: 0
 14450                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 14451  004B46  B7DF               	btfsc	_CardType& (0+255),3,b
 14452  004B48  D008               	goto	l132
 14453                           
 14454                           ; BSR set to: 0
 14455  004B4A  0E09               	movlw	9
 14456  004B4C                     u4845:
 14457  004B4C  90D8               	bcf	status,0,c
 14458  004B4E  3613               	rlcf	disk_write@sector,f,c
 14459  004B50  3614               	rlcf	disk_write@sector+1,f,c
 14460  004B52  3615               	rlcf	disk_write@sector+2,f,c
 14461  004B54  3616               	rlcf	disk_write@sector+3,f,c
 14462  004B56  2EE8               	decfsz	wreg,f,c
 14463  004B58  D7F9               	goto	u4845
 14464  004B5A                     l132:
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;diskio.c: 418:  if (count == 1) {
 14468  004B5A  0417               	decf	disk_write@count,w,c
 14469  004B5C  1018               	iorwf	disk_write@count+1,w,c
 14470  004B5E  A4D8               	btfss	status,2,c
 14471  004B60  D01D               	goto	l4476
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 14475  004B62  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14476  004B66  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14477  004B6A  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14478  004B6E  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14479  004B72  0E18               	movlw	24
 14480  004B74  ECB0  F02D         	call	_send_cmd
 14481  004B78  0900               	iorlw	0
 14482  004B7A  A4D8               	btfss	status,2,c
 14483  004B7C  D04F               	goto	l4490
 14484  004B7E  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14485  004B82  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14486  004B86  0EFE               	movlw	254
 14487  004B88  6E06               	movwf	xmit_datablock@token,c
 14488  004B8A  ECD2  F02C         	call	_xmit_datablock	;wreg free
 14489  004B8E  0900               	iorlw	0
 14490  004B90  B4D8               	btfsc	status,2,c
 14491  004B92  D044               	goto	l4490
 14492                           
 14493                           ;diskio.c: 421:    count = 0;
 14494  004B94  0E00               	movlw	0
 14495  004B96  6E18               	movwf	disk_write@count+1,c
 14496  004B98  0E00               	movlw	0
 14497  004B9A  D03F               	goto	L17
 14498  004B9C                     l4476:
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 14502  004B9C  C0DF  F019         	movff	_CardType,??_disk_write
 14503  004BA0  0E06               	movlw	6
 14504  004BA2  1619               	andwf	??_disk_write,f,c
 14505  004BA4  B4D8               	btfsc	status,2,c
 14506  004BA6  D009               	goto	l136
 14507                           
 14508                           ; BSR set to: 0
 14509  004BA8  C017  F00B         	movff	disk_write@count,send_cmd@arg
 14510  004BAC  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 14511  004BB0  6A0D               	clrf	send_cmd@arg+2,c
 14512  004BB2  6A0E               	clrf	send_cmd@arg+3,c
 14513  004BB4  0E97               	movlw	151
 14514  004BB6  ECB0  F02D         	call	_send_cmd
 14515  004BBA                     l136:
 14516                           
 14517                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 14518  004BBA  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14519  004BBE  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14520  004BC2  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14521  004BC6  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14522  004BCA  0E19               	movlw	25
 14523  004BCC  ECB0  F02D         	call	_send_cmd
 14524  004BD0  0900               	iorlw	0
 14525  004BD2  A4D8               	btfss	status,2,c
 14526  004BD4  D023               	goto	l4490
 14527  004BD6                     u4890:
 14528                           
 14529                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 14530  004BD6  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14531  004BDA  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14532  004BDE  0EFC               	movlw	252
 14533  004BE0  6E06               	movwf	xmit_datablock@token,c
 14534  004BE2  ECD2  F02C         	call	_xmit_datablock	;wreg free
 14535  004BE6  0900               	iorlw	0
 14536  004BE8  B4D8               	btfsc	status,2,c
 14537  004BEA  D009               	goto	u4910
 14538                           
 14539                           ;diskio.c: 428:     buff += 512;
 14540  004BEC  0E02               	movlw	2
 14541  004BEE  2612               	addwf	disk_write@buff+1,f,c
 14542                           
 14543                           ;diskio.c: 429:    } while (--count);
 14544  004BF0  0617               	decf	disk_write@count,f,c
 14545  004BF2  A0D8               	btfss	status,0,c
 14546  004BF4  0618               	decf	disk_write@count+1,f,c
 14547  004BF6  5017               	movf	disk_write@count,w,c
 14548  004BF8  1018               	iorwf	disk_write@count+1,w,c
 14549  004BFA  A4D8               	btfss	status,2,c
 14550  004BFC  D7EC               	goto	u4890
 14551  004BFE                     u4910:
 14552                           
 14553                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 14554  004BFE  0E00               	movlw	0
 14555  004C00  6E04               	movwf	xmit_datablock@buff,c
 14556  004C02  0E00               	movlw	0
 14557  004C04  6E05               	movwf	xmit_datablock@buff+1,c
 14558  004C06  0EFD               	movlw	253
 14559  004C08  6E06               	movwf	xmit_datablock@token,c
 14560  004C0A  ECD2  F02C         	call	_xmit_datablock	;wreg free
 14561  004C0E  0900               	iorlw	0
 14562  004C10  A4D8               	btfss	status,2,c
 14563  004C12  D004               	goto	l4490
 14564                           
 14565                           ;diskio.c: 431:     count = 1;
 14566  004C14  0E00               	movlw	0
 14567  004C16  6E18               	movwf	disk_write@count+1,c
 14568  004C18  0E01               	movlw	1
 14569  004C1A                     L17:
 14570  004C1A  6E17               	movwf	disk_write@count,c
 14571  004C1C                     l4490:
 14572                           
 14573                           ;diskio.c: 434:  deselect();
 14574  004C1C  ECCF  F02E         	call	_deselect	;wreg free
 14575                           
 14576                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 14577  004C20  5017               	movf	disk_write@count,w,c
 14578  004C22  1018               	iorwf	disk_write@count+1,w,c
 14579  004C24  B4D8               	btfsc	status,2,c
 14580  004C26  D002               	goto	u4930
 14581  004C28  0E01               	movlw	1
 14582  004C2A  0012               	return	
 14583  004C2C                     u4930:
 14584  004C2C  0E00               	movlw	0
 14585  004C2E  0012               	return		;funcret
 14586  004C30                     __end_of_disk_write:
 14587                           	opt callstack 0
 14588                           
 14589 ;; *************** function _xmit_datablock *****************
 14590 ;; Defined at:
 14591 ;;		line 156 in file "diskio.c"
 14592 ;; Parameters:    Size  Location     Type
 14593 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 14594 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14595 ;;  token           1    5[COMRAM] unsigned char 
 14596 ;; Auto vars:     Size  Location     Type
 14597 ;;  i               2    6[COMRAM] unsigned short 
 14598 ;;  resp            1    8[COMRAM] unsigned char 
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  1    wreg      unsigned char 
 14601 ;; Registers used:
 14602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14608 ;;      Params:         3       0       0       0       0       0       0       0       0
 14609 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14611 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14612 ;;Total ram usage:        6 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    2
 14615 ;; This function calls:
 14616 ;;		_SPI1_Exchange8bit
 14617 ;;		_wait_ready
 14618 ;; This function is called by:
 14619 ;;		_disk_write
 14620 ;; This function uses a non-reentrant model
 14621 ;;
 14622                           
 14623                           	psect	text46
 14624  0059A4                     __ptext46:
 14625                           	opt callstack 0
 14626  0059A4                     _xmit_datablock:
 14627                           	opt callstack 22
 14628                           
 14629                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 14630                           
 14631                           ;incstack = 0
 14632  0059A4  ECD1  F02D         	call	_wait_ready	;wreg free
 14633  0059A8  0900               	iorlw	0
 14634  0059AA  A4D8               	btfss	status,2,c
 14635  0059AC  D002               	goto	l4382
 14636  0059AE                     u4690:
 14637  0059AE  0E00               	movlw	0
 14638  0059B0  0012               	return	
 14639  0059B2                     l4382:
 14640                           
 14641                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 14642  0059B2  5006               	movf	xmit_datablock@token,w,c
 14643  0059B4  ECAB  F02E         	call	_SPI1_Exchange8bit
 14644                           
 14645                           ;diskio.c: 168:  if (token != 0xFD) {
 14646  0059B8  0EFD               	movlw	253
 14647  0059BA  1806               	xorwf	xmit_datablock@token,w,c
 14648  0059BC  B4D8               	btfsc	status,2,c
 14649  0059BE  D023               	goto	l4402
 14650                           
 14651                           ;diskio.c: 169:   i = 512;
 14652  0059C0  0E02               	movlw	2
 14653  0059C2  6E08               	movwf	xmit_datablock@i+1,c
 14654  0059C4  0E00               	movlw	0
 14655  0059C6  6E07               	movwf	xmit_datablock@i,c
 14656  0059C8                     l4388:
 14657                           
 14658                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 14659  0059C8  C004  FFD9         	movff	xmit_datablock@buff,fsr2l
 14660  0059CC  C005  FFDA         	movff	xmit_datablock@buff+1,fsr2h
 14661  0059D0  50DF               	movf	indf2,w,c
 14662  0059D2  ECAB  F02E         	call	_SPI1_Exchange8bit
 14663  0059D6  4A04               	infsnz	xmit_datablock@buff,f,c
 14664  0059D8  2A05               	incf	xmit_datablock@buff+1,f,c
 14665  0059DA  0607               	decf	xmit_datablock@i,f,c
 14666  0059DC  A0D8               	btfss	status,0,c
 14667  0059DE  0608               	decf	xmit_datablock@i+1,f,c
 14668  0059E0  5007               	movf	xmit_datablock@i,w,c
 14669  0059E2  1008               	iorwf	xmit_datablock@i+1,w,c
 14670  0059E4  A4D8               	btfss	status,2,c
 14671  0059E6  D7F0               	goto	l4388
 14672                           
 14673                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 14674  0059E8  0EFF               	movlw	255
 14675  0059EA  ECAB  F02E         	call	_SPI1_Exchange8bit
 14676                           
 14677                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 14678  0059EE  0EFF               	movlw	255
 14679  0059F0  ECAB  F02E         	call	_SPI1_Exchange8bit
 14680                           
 14681                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 14682  0059F4  0EFF               	movlw	255
 14683  0059F6  ECAB  F02E         	call	_SPI1_Exchange8bit
 14684  0059FA  6E09               	movwf	xmit_datablock@resp,c
 14685                           
 14686                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 14687  0059FC  5009               	movf	xmit_datablock@resp,w,c
 14688  0059FE  0B1F               	andlw	31
 14689  005A00  0A05               	xorlw	5
 14690  005A02  A4D8               	btfss	status,2,c
 14691  005A04  D7D4               	goto	u4690
 14692  005A06                     l4402:
 14693                           
 14694                           ;diskio.c: 180:  return 1;
 14695  005A06  0E01               	movlw	1
 14696  005A08  0012               	return		;funcret
 14697  005A0A                     __end_of_xmit_datablock:
 14698                           	opt callstack 0
 14699                           
 14700 ;; *************** function _disk_read *****************
 14701 ;; Defined at:
 14702 ;;		line 370 in file "diskio.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  pdrv            1    wreg     unsigned char 
 14705 ;;  buff            2   16[COMRAM] PTR unsigned char 
 14706 ;;		 -> FatFs(558), ND(2), NULL(0), 
 14707 ;;  sector          4   18[COMRAM] unsigned long 
 14708 ;;  count           2   22[COMRAM] unsigned short 
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;  pdrv            1   24[COMRAM] unsigned char 
 14711 ;;  cmd             1   27[COMRAM] unsigned char 
 14712 ;; Return value:  Size  Location     Type
 14713 ;;                  1    wreg      enum E43
 14714 ;; Registers used:
 14715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14716 ;; Tracked objects:
 14717 ;;		On entry : 0/0
 14718 ;;		On exit  : 0/0
 14719 ;;		Unchanged: 0/0
 14720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14721 ;;      Params:         8       0       0       0       0       0       0       0       0
 14722 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14724 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14725 ;;Total ram usage:       12 bytes
 14726 ;; Hardware stack levels used:    1
 14727 ;; Hardware stack levels required when called:    5
 14728 ;; This function calls:
 14729 ;;		_deselect
 14730 ;;		_rcvr_datablock
 14731 ;;		_send_cmd
 14732 ;; This function is called by:
 14733 ;;		_move_window
 14734 ;;		_f_read
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text47
 14739  005186                     __ptext47:
 14740                           	opt callstack 0
 14741  005186                     _disk_read:
 14742                           	opt callstack 21
 14743                           
 14744                           ;incstack = 0
 14745                           ;disk_read@pdrv stored from wreg
 14746  005186  6E19               	movwf	disk_read@pdrv,c
 14747                           
 14748                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 14749  005188  5019               	movf	disk_read@pdrv,w,c
 14750  00518A  A4D8               	btfss	status,2,c
 14751  00518C  D004               	goto	u4960
 14752  00518E  5017               	movf	disk_read@count,w,c
 14753  005190  1018               	iorwf	disk_read@count+1,w,c
 14754  005192  A4D8               	btfss	status,2,c
 14755  005194  D002               	goto	l109
 14756  005196                     u4960:
 14757  005196  0E04               	movlw	4
 14758  005198  0012               	return	
 14759  00519A                     l109:
 14760                           
 14761                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 14762  00519A  0100               	movlb	0	; () banked
 14763  00519C  A1F2               	btfss	_Stat& (0+255),0,b
 14764  00519E  D002               	goto	l113
 14765                           
 14766                           ; BSR set to: 0
 14767  0051A0  0E03               	movlw	3
 14768  0051A2  0012               	return	
 14769  0051A4                     l113:
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 14773  0051A4  B7DF               	btfsc	_CardType& (0+255),3,b
 14774  0051A6  D008               	goto	l114
 14775                           
 14776                           ; BSR set to: 0
 14777  0051A8  0E09               	movlw	9
 14778  0051AA                     u4995:
 14779  0051AA  90D8               	bcf	status,0,c
 14780  0051AC  3613               	rlcf	disk_read@sector,f,c
 14781  0051AE  3614               	rlcf	disk_read@sector+1,f,c
 14782  0051B0  3615               	rlcf	disk_read@sector+2,f,c
 14783  0051B2  3616               	rlcf	disk_read@sector+3,f,c
 14784  0051B4  2EE8               	decfsz	wreg,f,c
 14785  0051B6  D7F9               	goto	u4995
 14786  0051B8                     l114:
 14787                           
 14788                           ; BSR set to: 0
 14789                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 14790  0051B8  5018               	movf	disk_read@count+1,w,c
 14791  0051BA  E108               	bnz	l4512
 14792  0051BC  0E02               	movlw	2
 14793  0051BE  5C17               	subwf	disk_read@count,w,c
 14794  0051C0  B0D8               	btfsc	status,0,c
 14795  0051C2  D004               	goto	l4512
 14796                           
 14797                           ; BSR set to: 0
 14798  0051C4  0E00               	movlw	0
 14799  0051C6  6E1B               	movwf	_disk_read$143+1,c
 14800  0051C8  0E11               	movlw	17
 14801  0051CA  D003               	goto	L18
 14802  0051CC                     l4512:
 14803                           
 14804                           ; BSR set to: 0
 14805  0051CC  0E00               	movlw	0
 14806  0051CE  6E1B               	movwf	_disk_read$143+1,c
 14807  0051D0  0E12               	movlw	18
 14808  0051D2                     L18:
 14809  0051D2  6E1A               	movwf	_disk_read$143,c
 14810                           
 14811                           ; BSR set to: 0
 14812  0051D4  C01A  F01C         	movff	_disk_read$143,disk_read@cmd
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 14816  0051D8  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 14817  0051DC  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 14818  0051E0  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 14819  0051E4  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 14820  0051E8  501C               	movf	disk_read@cmd,w,c
 14821  0051EA  ECB0  F02D         	call	_send_cmd
 14822  0051EE  0900               	iorlw	0
 14823  0051F0  A4D8               	btfss	status,2,c
 14824  0051F2  D025               	goto	l4528
 14825  0051F4                     u5010:
 14826                           
 14827                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 14828  0051F4  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 14829  0051F8  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 14830  0051FC  0E02               	movlw	2
 14831  0051FE  6E05               	movwf	rcvr_datablock@btr+1,c
 14832  005200  0E00               	movlw	0
 14833  005202  6E04               	movwf	rcvr_datablock@btr,c
 14834  005204  EC69  F02C         	call	_rcvr_datablock	;wreg free
 14835  005208  0900               	iorlw	0
 14836  00520A  B4D8               	btfsc	status,2,c
 14837  00520C  D009               	goto	u5030
 14838                           
 14839                           ;diskio.c: 389:    buff += 512;
 14840  00520E  0E02               	movlw	2
 14841  005210  2612               	addwf	disk_read@buff+1,f,c
 14842                           
 14843                           ;diskio.c: 390:   } while (--count);
 14844  005212  0617               	decf	disk_read@count,f,c
 14845  005214  A0D8               	btfss	status,0,c
 14846  005216  0618               	decf	disk_read@count+1,f,c
 14847  005218  5017               	movf	disk_read@count,w,c
 14848  00521A  1018               	iorwf	disk_read@count+1,w,c
 14849  00521C  A4D8               	btfss	status,2,c
 14850  00521E  D7EA               	goto	u5010
 14851  005220                     u5030:
 14852                           
 14853                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 14854  005220  0E12               	movlw	18
 14855  005222  181C               	xorwf	disk_read@cmd,w,c
 14856  005224  A4D8               	btfss	status,2,c
 14857  005226  D00B               	goto	l4528
 14858  005228  0E00               	movlw	0
 14859  00522A  6E0B               	movwf	send_cmd@arg,c
 14860  00522C  0E00               	movlw	0
 14861  00522E  6E0C               	movwf	send_cmd@arg+1,c
 14862  005230  0E00               	movlw	0
 14863  005232  6E0D               	movwf	send_cmd@arg+2,c
 14864  005234  0E00               	movlw	0
 14865  005236  6E0E               	movwf	send_cmd@arg+3,c
 14866  005238  0E0C               	movlw	12
 14867  00523A  ECB0  F02D         	call	_send_cmd
 14868  00523E                     l4528:
 14869                           
 14870                           ;diskio.c: 393:  deselect();
 14871  00523E  ECCF  F02E         	call	_deselect	;wreg free
 14872                           
 14873                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 14874  005242  5017               	movf	disk_read@count,w,c
 14875  005244  1018               	iorwf	disk_read@count+1,w,c
 14876  005246  B4D8               	btfsc	status,2,c
 14877  005248  D002               	goto	u5050
 14878  00524A  0E01               	movlw	1
 14879  00524C  0012               	return	
 14880  00524E                     u5050:
 14881  00524E  0E00               	movlw	0
 14882  005250  0012               	return		;funcret
 14883  005252                     __end_of_disk_read:
 14884                           	opt callstack 0
 14885                           
 14886 ;; *************** function _send_cmd *****************
 14887 ;; Defined at:
 14888 ;;		line 231 in file "diskio.c"
 14889 ;; Parameters:    Size  Location     Type
 14890 ;;  cmd             1    wreg     unsigned char 
 14891 ;;  arg             4   10[COMRAM] unsigned long 
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;  cmd             1   14[COMRAM] unsigned char 
 14894 ;;  res             1   15[COMRAM] unsigned char 
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      unsigned char 
 14897 ;; Registers used:
 14898 ;;		wreg, status,2, status,0, cstack
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14904 ;;      Params:         4       0       0       0       0       0       0       0       0
 14905 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14906 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14907 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14908 ;;Total ram usage:        6 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; Hardware stack levels required when called:    4
 14911 ;; This function calls:
 14912 ;;		___send_cmd
 14913 ;; This function is called by:
 14914 ;;		_disk_initialize
 14915 ;;		_disk_read
 14916 ;;		_disk_write
 14917 ;;		_disk_ioctl
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text48
 14922  005B60                     __ptext48:
 14923                           	opt callstack 0
 14924  005B60                     _send_cmd:
 14925                           	opt callstack 20
 14926                           
 14927                           ;incstack = 0
 14928                           ;send_cmd@cmd stored from wreg
 14929  005B60  6E0F               	movwf	send_cmd@cmd,c
 14930                           
 14931                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 14932  005B62  AE0F               	btfss	send_cmd@cmd,7,c
 14933  005B64  D012               	goto	l4418
 14934                           
 14935                           ;diskio.c: 243:   cmd &= 0x7F;
 14936  005B66  9E0F               	bcf	send_cmd@cmd,7,c
 14937                           
 14938                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 14939  005B68  0E00               	movlw	0
 14940  005B6A  6E04               	movwf	___send_cmd@arg,c
 14941  005B6C  0E00               	movlw	0
 14942  005B6E  6E05               	movwf	___send_cmd@arg+1,c
 14943  005B70  0E00               	movlw	0
 14944  005B72  6E06               	movwf	___send_cmd@arg+2,c
 14945  005B74  0E00               	movlw	0
 14946  005B76  6E07               	movwf	___send_cmd@arg+3,c
 14947  005B78  0E37               	movlw	55
 14948  005B7A  EC74  F02B         	call	___send_cmd
 14949  005B7E  6E10               	movwf	send_cmd@res,c
 14950                           
 14951                           ;diskio.c: 249:   if (res > 1) return res;
 14952  005B80  0E01               	movlw	1
 14953  005B82  6410               	cpfsgt	send_cmd@res,c
 14954  005B84  D002               	goto	l4418
 14955  005B86  5010               	movf	send_cmd@res,w,c
 14956  005B88  0012               	return	
 14957  005B8A                     l4418:
 14958                           
 14959                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 14960  005B8A  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 14961  005B8E  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 14962  005B92  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 14963  005B96  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 14964  005B9A  500F               	movf	send_cmd@cmd,w,c
 14965  005B9C  EC74  F02B         	call	___send_cmd
 14966  005BA0  0012               	return		;funcret
 14967  005BA2                     __end_of_send_cmd:
 14968                           	opt callstack 0
 14969                           
 14970 ;; *************** function ___send_cmd *****************
 14971 ;; Defined at:
 14972 ;;		line 195 in file "diskio.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  cmd             1    wreg     unsigned char 
 14975 ;;  arg             4    3[COMRAM] unsigned long 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  cmd             1    9[COMRAM] unsigned char 
 14978 ;;  n               1    8[COMRAM] unsigned char 
 14979 ;;  res             1    7[COMRAM] unsigned char 
 14980 ;; Return value:  Size  Location     Type
 14981 ;;                  1    wreg      unsigned char 
 14982 ;; Registers used:
 14983 ;;		wreg, status,2, status,0, cstack
 14984 ;; Tracked objects:
 14985 ;;		On entry : 0/0
 14986 ;;		On exit  : 0/0
 14987 ;;		Unchanged: 0/0
 14988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14989 ;;      Params:         4       0       0       0       0       0       0       0       0
 14990 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14991 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14992 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14993 ;;Total ram usage:        7 bytes
 14994 ;; Hardware stack levels used:    1
 14995 ;; Hardware stack levels required when called:    3
 14996 ;; This function calls:
 14997 ;;		_SPI1_Exchange8bit
 14998 ;;		_deselect
 14999 ;;		_select
 15000 ;; This function is called by:
 15001 ;;		_send_cmd
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           	psect	text49
 15006  0056E8                     __ptext49:
 15007                           	opt callstack 0
 15008  0056E8                     ___send_cmd:
 15009                           	opt callstack 20
 15010                           
 15011                           ;incstack = 0
 15012                           ;___send_cmd@cmd stored from wreg
 15013  0056E8  6E0A               	movwf	___send_cmd@cmd,c
 15014                           
 15015                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 15016  0056EA  0E0C               	movlw	12
 15017  0056EC  180A               	xorwf	___send_cmd@cmd,w,c
 15018  0056EE  B4D8               	btfsc	status,2,c
 15019  0056F0  D009               	goto	l4338
 15020                           
 15021                           ;diskio.c: 204:   deselect();
 15022  0056F2  ECCF  F02E         	call	_deselect	;wreg free
 15023                           
 15024                           ;diskio.c: 205:   if (!select()) return 0xFF;
 15025  0056F6  EC76  F02E         	call	_select	;wreg free
 15026  0056FA  0900               	iorlw	0
 15027  0056FC  A4D8               	btfss	status,2,c
 15028  0056FE  D002               	goto	l4338
 15029  005700  0EFF               	movlw	255
 15030  005702  0012               	return	
 15031  005704                     l4338:
 15032                           
 15033                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 15034  005704  500A               	movf	___send_cmd@cmd,w,c
 15035  005706  0940               	iorlw	64
 15036  005708  ECAB  F02E         	call	_SPI1_Exchange8bit
 15037                           
 15038                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 15039  00570C  5007               	movf	___send_cmd@arg+3,w,c
 15040  00570E  ECAB  F02E         	call	_SPI1_Exchange8bit
 15041                           
 15042                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 15043  005712  5006               	movf	___send_cmd@arg+2,w,c
 15044  005714  ECAB  F02E         	call	_SPI1_Exchange8bit
 15045                           
 15046                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 15047  005718  5005               	movf	___send_cmd@arg+1,w,c
 15048  00571A  ECAB  F02E         	call	_SPI1_Exchange8bit
 15049                           
 15050                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 15051  00571E  5004               	movf	___send_cmd@arg,w,c
 15052  005720  ECAB  F02E         	call	_SPI1_Exchange8bit
 15053                           
 15054                           ;diskio.c: 214:  n = 0x01;
 15055  005724  0E01               	movlw	1
 15056  005726  6E09               	movwf	___send_cmd@n,c
 15057                           
 15058                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 15059  005728  500A               	movf	___send_cmd@cmd,w,c
 15060  00572A  A4D8               	btfss	status,2,c
 15061  00572C  D002               	goto	l4354
 15062  00572E  0E95               	movlw	149
 15063  005730  6E09               	movwf	___send_cmd@n,c
 15064  005732                     l4354:
 15065                           
 15066                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 15067  005732  0E08               	movlw	8
 15068  005734  180A               	xorwf	___send_cmd@cmd,w,c
 15069  005736  A4D8               	btfss	status,2,c
 15070  005738  D002               	goto	l4358
 15071  00573A  0E87               	movlw	135
 15072  00573C  6E09               	movwf	___send_cmd@n,c
 15073  00573E                     l4358:
 15074                           
 15075                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 15076  00573E  5009               	movf	___send_cmd@n,w,c
 15077  005740  ECAB  F02E         	call	_SPI1_Exchange8bit
 15078                           
 15079                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 15080  005744  0E0C               	movlw	12
 15081  005746  180A               	xorwf	___send_cmd@cmd,w,c
 15082  005748  A4D8               	btfss	status,2,c
 15083  00574A  D003               	goto	l4364
 15084  00574C  0EFF               	movlw	255
 15085  00574E  ECAB  F02E         	call	_SPI1_Exchange8bit
 15086  005752                     l4364:
 15087                           
 15088                           ;diskio.c: 221:  n = 10;
 15089  005752  0E0A               	movlw	10
 15090  005754  6E09               	movwf	___send_cmd@n,c
 15091  005756                     l4366:
 15092                           
 15093                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 15094  005756  0EFF               	movlw	255
 15095  005758  ECAB  F02E         	call	_SPI1_Exchange8bit
 15096  00575C  6E08               	movwf	___send_cmd@res,c
 15097  00575E  AE08               	btfss	___send_cmd@res,7,c
 15098  005760  D002               	goto	l4372
 15099  005762  2E09               	decfsz	___send_cmd@n,f,c
 15100  005764  D7F8               	goto	l4366
 15101  005766                     l4372:
 15102                           
 15103                           ;diskio.c: 226:  return res;
 15104  005766  5008               	movf	___send_cmd@res,w,c
 15105  005768  0012               	return		;funcret
 15106  00576A                     __end_of___send_cmd:
 15107                           	opt callstack 0
 15108                           
 15109 ;; *************** function _select *****************
 15110 ;; Defined at:
 15111 ;;		line 106 in file "diskio.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;		None
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;		None
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      unsigned char 
 15118 ;; Registers used:
 15119 ;;		wreg, status,2, status,0, cstack
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0
 15126 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15128 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15129 ;;Total ram usage:        0 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    2
 15132 ;; This function calls:
 15133 ;;		_SPI1_Exchange8bit
 15134 ;;		_deselect
 15135 ;;		_wait_ready
 15136 ;; This function is called by:
 15137 ;;		___send_cmd
 15138 ;;		_disk_ioctl
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           	psect	text50
 15143  005CEC                     __ptext50:
 15144                           	opt callstack 0
 15145  005CEC                     _select:
 15146                           	opt callstack 20
 15147                           
 15148                           ;incstack = 0
 15149                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 15150  005CEC  948A               	bcf	3978,2,c	;volatile
 15151                           
 15152                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 15153  005CEE  0EFF               	movlw	255
 15154  005CF0  ECAB  F02E         	call	_SPI1_Exchange8bit
 15155                           
 15156                           ;diskio.c: 110:  if (wait_ready()) return 1;
 15157  005CF4  ECD1  F02D         	call	_wait_ready	;wreg free
 15158  005CF8  0900               	iorlw	0
 15159  005CFA  B4D8               	btfsc	status,2,c
 15160  005CFC  D002               	goto	l4322
 15161  005CFE  0E01               	movlw	1
 15162  005D00  0012               	return	
 15163  005D02                     l4322:
 15164                           
 15165                           ;diskio.c: 112:  deselect();
 15166  005D02  ECCF  F02E         	call	_deselect	;wreg free
 15167                           
 15168                           ;diskio.c: 113:  return 0;
 15169  005D06  0E00               	movlw	0
 15170  005D08  0012               	return		;funcret
 15171  005D0A                     __end_of_select:
 15172                           	opt callstack 0
 15173                           
 15174 ;; *************** function _wait_ready *****************
 15175 ;; Defined at:
 15176 ;;		line 74 in file "diskio.c"
 15177 ;; Parameters:    Size  Location     Type
 15178 ;;		None
 15179 ;; Auto vars:     Size  Location     Type
 15180 ;;  tmr             2    1[COMRAM] unsigned short 
 15181 ;; Return value:  Size  Location     Type
 15182 ;;                  1    wreg      unsigned char 
 15183 ;; Registers used:
 15184 ;;		wreg, status,2, status,0, cstack
 15185 ;; Tracked objects:
 15186 ;;		On entry : 0/0
 15187 ;;		On exit  : 0/0
 15188 ;;		Unchanged: 0/0
 15189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15190 ;;      Params:         0       0       0       0       0       0       0       0       0
 15191 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15192 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15193 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15194 ;;Total ram usage:        2 bytes
 15195 ;; Hardware stack levels used:    1
 15196 ;; Hardware stack levels required when called:    1
 15197 ;; This function calls:
 15198 ;;		_SPI1_Exchange8bit
 15199 ;; This function is called by:
 15200 ;;		_select
 15201 ;;		_xmit_datablock
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           	psect	text51
 15206  005BA2                     __ptext51:
 15207                           	opt callstack 0
 15208  005BA2                     _wait_ready:
 15209                           	opt callstack 22
 15210                           
 15211                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 15212                           
 15213                           ;incstack = 0
 15214  005BA2  0E13               	movlw	19
 15215  005BA4  6E03               	movwf	wait_ready@tmr+1,c
 15216  005BA6  0E88               	movlw	136
 15217  005BA8  6E02               	movwf	wait_ready@tmr,c
 15218  005BAA  D00D               	goto	l17
 15219  005BAC                     l4300:
 15220                           
 15221                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 15222  005BAC  0EFF               	movlw	255
 15223  005BAE  ECAB  F02E         	call	_SPI1_Exchange8bit
 15224  005BB2  0AFF               	xorlw	255
 15225  005BB4  B4D8               	btfsc	status,2,c
 15226  005BB6  D00B               	goto	u4590
 15227                           
 15228                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15229  005BB8  0E42               	movlw	66
 15230  005BBA                     u9137:
 15231  005BBA  2EE8               	decfsz	wreg,f,c
 15232  005BBC  D7FE               	bra	u9137
 15233  005BBE  D000               	nop2	
 15234                           
 15235                           ;diskio.c: 81:  }
 15236  005BC0  0602               	decf	wait_ready@tmr,f,c
 15237  005BC2  A0D8               	btfss	status,0,c
 15238  005BC4  0603               	decf	wait_ready@tmr+1,f,c
 15239  005BC6                     l17:
 15240  005BC6  5002               	movf	wait_ready@tmr,w,c
 15241  005BC8  1003               	iorwf	wait_ready@tmr+1,w,c
 15242  005BCA  A4D8               	btfss	status,2,c
 15243  005BCC  D7EF               	goto	l4300
 15244  005BCE                     u4590:
 15245                           
 15246                           ;diskio.c: 83:  return tmr ? 1 : 0;
 15247  005BCE  5002               	movf	wait_ready@tmr,w,c
 15248  005BD0  1003               	iorwf	wait_ready@tmr+1,w,c
 15249  005BD2  B4D8               	btfsc	status,2,c
 15250  005BD4  D002               	goto	u4600
 15251  005BD6  0E01               	movlw	1
 15252  005BD8  0012               	return	
 15253  005BDA                     u4600:
 15254  005BDA  0E00               	movlw	0
 15255  005BDC  0012               	return		;funcret
 15256  005BDE                     __end_of_wait_ready:
 15257                           	opt callstack 0
 15258                           
 15259 ;; *************** function _deselect *****************
 15260 ;; Defined at:
 15261 ;;		line 93 in file "diskio.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;		None
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;		None
 15266 ;; Return value:  Size  Location     Type
 15267 ;;                  1    wreg      void 
 15268 ;; Registers used:
 15269 ;;		wreg, status,2, cstack
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15275 ;;      Params:         0       0       0       0       0       0       0       0       0
 15276 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15278 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15279 ;;Total ram usage:        0 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:    1
 15282 ;; This function calls:
 15283 ;;		_SPI1_Exchange8bit
 15284 ;; This function is called by:
 15285 ;;		_select
 15286 ;;		___send_cmd
 15287 ;;		_disk_initialize
 15288 ;;		_disk_read
 15289 ;;		_disk_write
 15290 ;;		_disk_ioctl
 15291 ;; This function uses a non-reentrant model
 15292 ;;
 15293                           
 15294                           	psect	text52
 15295  005D9E                     __ptext52:
 15296                           	opt callstack 0
 15297  005D9E                     _deselect:
 15298                           	opt callstack 20
 15299                           
 15300                           ;incstack = 0
 15301                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 15302  005D9E  848A               	bsf	3978,2,c	;volatile
 15303                           
 15304                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 15305  005DA0  0EFF               	movlw	255
 15306  005DA2  ECAB  F02E         	call	_SPI1_Exchange8bit
 15307  005DA6  0012               	return		;funcret
 15308  005DA8                     __end_of_deselect:
 15309                           	opt callstack 0
 15310                           
 15311 ;; *************** function _rcvr_datablock *****************
 15312 ;; Defined at:
 15313 ;;		line 123 in file "diskio.c"
 15314 ;; Parameters:    Size  Location     Type
 15315 ;;  buff            2    1[COMRAM] PTR unsigned char 
 15316 ;;		 -> FatFs(558), ND(2), disk_ioctl@csd(16), NULL(0), 
 15317 ;;  btr             2    3[COMRAM] unsigned short 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  tmr             2    5[COMRAM] unsigned short 
 15320 ;;  token           1    7[COMRAM] unsigned char 
 15321 ;; Return value:  Size  Location     Type
 15322 ;;                  1    wreg      unsigned char 
 15323 ;; Registers used:
 15324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15325 ;; Tracked objects:
 15326 ;;		On entry : 0/0
 15327 ;;		On exit  : 0/0
 15328 ;;		Unchanged: 0/0
 15329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15330 ;;      Params:         4       0       0       0       0       0       0       0       0
 15331 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15332 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15333 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15334 ;;Total ram usage:        7 bytes
 15335 ;; Hardware stack levels used:    1
 15336 ;; Hardware stack levels required when called:    1
 15337 ;; This function calls:
 15338 ;;		_SPI1_Exchange8bit
 15339 ;; This function is called by:
 15340 ;;		_disk_read
 15341 ;;		_disk_ioctl
 15342 ;; This function uses a non-reentrant model
 15343 ;;
 15344                           
 15345                           	psect	text53
 15346  0058D2                     __ptext53:
 15347                           	opt callstack 0
 15348  0058D2                     _rcvr_datablock:
 15349                           	opt callstack 24
 15350                           
 15351                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 15352                           
 15353                           ;incstack = 0
 15354  0058D2  0E07               	movlw	7
 15355  0058D4  6E07               	movwf	rcvr_datablock@tmr+1,c
 15356  0058D6  0ED0               	movlw	208
 15357  0058D8  6E06               	movwf	rcvr_datablock@tmr,c
 15358  0058DA  D00E               	goto	l35
 15359  0058DC                     l4424:
 15360                           
 15361                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 15362  0058DC  0EFF               	movlw	255
 15363  0058DE  ECAB  F02E         	call	_SPI1_Exchange8bit
 15364  0058E2  6E08               	movwf	rcvr_datablock@token,c
 15365                           
 15366                           ;diskio.c: 134:   if (token != 0xFF) break;
 15367  0058E4  2808               	incf	rcvr_datablock@token,w,c
 15368  0058E6  A4D8               	btfss	status,2,c
 15369  0058E8  D00B               	goto	u4760
 15370                           
 15371                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15372  0058EA  0E42               	movlw	66
 15373  0058EC                     u9147:
 15374  0058EC  2EE8               	decfsz	wreg,f,c
 15375  0058EE  D7FE               	bra	u9147
 15376  0058F0  D000               	nop2	
 15377                           
 15378                           ;diskio.c: 136:  }
 15379  0058F2  0606               	decf	rcvr_datablock@tmr,f,c
 15380  0058F4  A0D8               	btfss	status,0,c
 15381  0058F6  0607               	decf	rcvr_datablock@tmr+1,f,c
 15382  0058F8                     l35:
 15383  0058F8  5006               	movf	rcvr_datablock@tmr,w,c
 15384  0058FA  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 15385  0058FC  A4D8               	btfss	status,2,c
 15386  0058FE  D7EE               	goto	l4424
 15387  005900                     u4760:
 15388                           
 15389                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 15390  005900  0EFE               	movlw	254
 15391  005902  1808               	xorwf	rcvr_datablock@token,w,c
 15392  005904  B4D8               	btfsc	status,2,c
 15393  005906  D002               	goto	l4440
 15394  005908  0E00               	movlw	0
 15395  00590A  0012               	return	
 15396  00590C                     l4440:
 15397                           
 15398                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 15399  00590C  0EFF               	movlw	255
 15400  00590E  ECAB  F02E         	call	_SPI1_Exchange8bit
 15401  005912  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 15402  005916  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 15403  00591A  6EDF               	movwf	indf2,c
 15404  00591C  4A02               	infsnz	rcvr_datablock@buff,f,c
 15405  00591E  2A03               	incf	rcvr_datablock@buff+1,f,c
 15406  005920  0604               	decf	rcvr_datablock@btr,f,c
 15407  005922  A0D8               	btfss	status,0,c
 15408  005924  0605               	decf	rcvr_datablock@btr+1,f,c
 15409  005926  5004               	movf	rcvr_datablock@btr,w,c
 15410  005928  1005               	iorwf	rcvr_datablock@btr+1,w,c
 15411  00592A  A4D8               	btfss	status,2,c
 15412  00592C  D7EF               	goto	l4440
 15413                           
 15414                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 15415  00592E  0EFF               	movlw	255
 15416  005930  ECAB  F02E         	call	_SPI1_Exchange8bit
 15417                           
 15418                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 15419  005934  0EFF               	movlw	255
 15420  005936  ECAB  F02E         	call	_SPI1_Exchange8bit
 15421                           
 15422                           ;diskio.c: 145:  return 1;
 15423  00593A  0E01               	movlw	1
 15424  00593C  0012               	return		;funcret
 15425  00593E                     __end_of_rcvr_datablock:
 15426                           	opt callstack 0
 15427                           
 15428 ;; *************** function _SPI1_Exchange8bit *****************
 15429 ;; Defined at:
 15430 ;;		line 90 in file "mcc_generated_files/spi1.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;  data            1    wreg     unsigned char 
 15433 ;; Auto vars:     Size  Location     Type
 15434 ;;  data            1    0[COMRAM] unsigned char 
 15435 ;; Return value:  Size  Location     Type
 15436 ;;                  1    wreg      unsigned char 
 15437 ;; Registers used:
 15438 ;;		wreg, status,2
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15444 ;;      Params:         0       0       0       0       0       0       0       0       0
 15445 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15446 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15447 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15448 ;;Total ram usage:        1 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; This function calls:
 15451 ;;		Nothing
 15452 ;; This function is called by:
 15453 ;;		_wait_ready
 15454 ;;		_deselect
 15455 ;;		_select
 15456 ;;		_rcvr_datablock
 15457 ;;		_xmit_datablock
 15458 ;;		___send_cmd
 15459 ;;		_disk_initialize
 15460 ;;		_disk_ioctl
 15461 ;;		_SPI1_Exchange8bitBuffer
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text54
 15466  005D56                     __ptext54:
 15467                           	opt callstack 0
 15468  005D56                     _SPI1_Exchange8bit:
 15469                           	opt callstack 22
 15470                           
 15471                           ;incstack = 0
 15472                           ;SPI1_Exchange8bit@data stored from wreg
 15473  005D56  6E01               	movwf	SPI1_Exchange8bit@data,c
 15474                           
 15475                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 15476  005D58  9EC6               	bcf	4038,7,c	;volatile
 15477                           
 15478                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 15479  005D5A  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 15480  005D5E                     l750:
 15481                           
 15482                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 15483  005D5E  A0C7               	btfss	4039,0,c	;volatile
 15484  005D60  D7FE               	goto	l750
 15485                           
 15486                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 15487  005D62  50C9               	movf	4041,w,c	;volatile
 15488  005D64  0012               	return		;funcret
 15489  005D66                     __end_of_SPI1_Exchange8bit:
 15490                           	opt callstack 0
 15491                           
 15492 ;; *************** function ___delay_sec *****************
 15493 ;; Defined at:
 15494 ;;		line 223 in file "Main.c"
 15495 ;; Parameters:    Size  Location     Type
 15496 ;;  sec             1    wreg     unsigned char 
 15497 ;; Auto vars:     Size  Location     Type
 15498 ;;  sec             1    3[COMRAM] unsigned char 
 15499 ;;  i               1    4[COMRAM] unsigned char 
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  1    wreg      void 
 15502 ;; Registers used:
 15503 ;;		wreg, status,2, status,0, prodl, prodh
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15509 ;;      Params:         0       0       0       0       0       0       0       0       0
 15510 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15511 ;;      Temps:          3       0       0       0       0       0       0       0       0
 15512 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15513 ;;Total ram usage:        5 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; This function calls:
 15516 ;;		Nothing
 15517 ;; This function is called by:
 15518 ;;		_guardar
 15519 ;;		_reproducir
 15520 ;; This function uses a non-reentrant model
 15521 ;;
 15522                           
 15523                           	psect	text55
 15524  005C18                     __ptext55:
 15525                           	opt callstack 0
 15526  005C18                     ___delay_sec:
 15527                           	opt callstack 29
 15528                           
 15529                           ;incstack = 0
 15530                           ;___delay_sec@sec stored from wreg
 15531  005C18  6E04               	movwf	___delay_sec@sec,c
 15532                           
 15533                           ;Main.c: 224:     for(char i=0;i<=(50*sec);i++) {
 15534  005C1A  0E00               	movlw	0
 15535  005C1C  6E05               	movwf	___delay_sec@i,c
 15536  005C1E  D008               	goto	l6678
 15537  005C20                     l6674:
 15538                           
 15539                           ;Main.c: 225:         _delay((unsigned long)((20)*(8000000/4000.0)));
 15540  005C20  0E34               	movlw	52
 15541  005C22  6E01               	movwf	??___delay_sec& (0+255),c
 15542  005C24  0EF2               	movlw	242
 15543  005C26                     u9157:
 15544  005C26  2EE8               	decfsz	wreg,f,c
 15545  005C28  D7FE               	bra	u9157
 15546  005C2A  2E01               	decfsz	??___delay_sec& (0+255),f,c
 15547  005C2C  D7FC               	bra	u9157
 15548                           
 15549                           ;Main.c: 226:     }
 15550  005C2E  2A05               	incf	___delay_sec@i,f,c
 15551  005C30                     l6678:
 15552  005C30  5005               	movf	___delay_sec@i,w,c
 15553  005C32  6E01               	movwf	??___delay_sec& (0+255),c
 15554  005C34  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 15555  005C36  5004               	movf	___delay_sec@sec,w,c
 15556  005C38  0D32               	mullw	50
 15557  005C3A  5001               	movf	??___delay_sec,w,c
 15558  005C3C  5CF3               	subwf	prodl,w,c
 15559  005C3E  50F4               	movf	prodh,w,c
 15560  005C40  0A80               	xorlw	128
 15561  005C42  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 15562  005C44  5002               	movf	??___delay_sec+1,w,c
 15563  005C46  0A80               	xorlw	128
 15564  005C48  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 15565  005C4A  A0D8               	btfss	status,0,c
 15566  005C4C  0012               	return	
 15567  005C4E  D7E8               	goto	l6674
 15568  005C50                     __end_of___delay_sec:
 15569                           	opt callstack 0
 15570                           
 15571 ;; *************** function _SYSTEM_Initialize *****************
 15572 ;; Defined at:
 15573 ;;		line 116 in file "mcc_generated_files/mcc.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;		None
 15576 ;; Auto vars:     Size  Location     Type
 15577 ;;		None
 15578 ;; Return value:  Size  Location     Type
 15579 ;;                  1    wreg      void 
 15580 ;; Registers used:
 15581 ;;		wreg, status,2, cstack
 15582 ;; Tracked objects:
 15583 ;;		On entry : 0/0
 15584 ;;		On exit  : 0/0
 15585 ;;		Unchanged: 0/0
 15586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15587 ;;      Params:         0       0       0       0       0       0       0       0       0
 15588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15590 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15591 ;;Total ram usage:        0 bytes
 15592 ;; Hardware stack levels used:    1
 15593 ;; Hardware stack levels required when called:    1
 15594 ;; This function calls:
 15595 ;;		_EUSART1_Initialize
 15596 ;;		_OSCILLATOR_Initialize
 15597 ;;		_PIN_MANAGER_Initialize
 15598 ;;		_SPI1_Initialize
 15599 ;; This function is called by:
 15600 ;;		_main
 15601 ;;		_guardar
 15602 ;;		_reproducir
 15603 ;; This function uses a non-reentrant model
 15604 ;;
 15605                           
 15606                           	psect	text56
 15607  005D32                     __ptext56:
 15608                           	opt callstack 0
 15609  005D32                     _SYSTEM_Initialize:
 15610                           	opt callstack 28
 15611                           
 15612                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 15613                           
 15614                           ;incstack = 0
 15615  005D32  EC66  F02E         	call	_PIN_MANAGER_Initialize	;wreg free
 15616                           
 15617                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 15618  005D36  ECA2  F02E         	call	_OSCILLATOR_Initialize	;wreg free
 15619                           
 15620                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 15621  005D3A  ECC2  F02E         	call	_SPI1_Initialize	;wreg free
 15622                           
 15623                           ;mcc_generated_files/mcc.c: 122:     EUSART1_Initialize();
 15624  005D3E  EC85  F02E         	call	_EUSART1_Initialize	;wreg free
 15625  005D42  0012               	return		;funcret
 15626  005D44                     __end_of_SYSTEM_Initialize:
 15627                           	opt callstack 0
 15628                           
 15629 ;; *************** function _SPI1_Initialize *****************
 15630 ;; Defined at:
 15631 ;;		line 63 in file "mcc_generated_files/spi1.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;		None
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;		None
 15636 ;; Return value:  Size  Location     Type
 15637 ;;                  1    wreg      void 
 15638 ;; Registers used:
 15639 ;;		wreg, status,2
 15640 ;; Tracked objects:
 15641 ;;		On entry : 0/0
 15642 ;;		On exit  : 0/0
 15643 ;;		Unchanged: 0/0
 15644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15645 ;;      Params:         0       0       0       0       0       0       0       0       0
 15646 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15647 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15648 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15649 ;;Total ram usage:        0 bytes
 15650 ;; Hardware stack levels used:    1
 15651 ;; This function calls:
 15652 ;;		Nothing
 15653 ;; This function is called by:
 15654 ;;		_disk_initialize
 15655 ;;		_SYSTEM_Initialize
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659                           	psect	text57
 15660  005D84                     __ptext57:
 15661                           	opt callstack 0
 15662  005D84                     _SPI1_Initialize:
 15663                           	opt callstack 26
 15664                           
 15665                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 15666                           
 15667                           ;incstack = 0
 15668  005D84  0E40               	movlw	64
 15669  005D86  6EC7               	movwf	4039,c	;volatile
 15670                           
 15671                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 15672  005D88  0E22               	movlw	34
 15673  005D8A  6EC6               	movwf	4038,c	;volatile
 15674                           
 15675                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 15676  005D8C  0E00               	movlw	0
 15677  005D8E  6EC8               	movwf	4040,c	;volatile
 15678  005D90  0012               	return		;funcret
 15679  005D92                     __end_of_SPI1_Initialize:
 15680                           	opt callstack 0
 15681                           
 15682 ;; *************** function _PIN_MANAGER_Initialize *****************
 15683 ;; Defined at:
 15684 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15685 ;; Parameters:    Size  Location     Type
 15686 ;;		None
 15687 ;; Auto vars:     Size  Location     Type
 15688 ;;		None
 15689 ;; Return value:  Size  Location     Type
 15690 ;;                  1    wreg      void 
 15691 ;; Registers used:
 15692 ;;		wreg, status,2
 15693 ;; Tracked objects:
 15694 ;;		On entry : 0/0
 15695 ;;		On exit  : 0/0
 15696 ;;		Unchanged: 0/0
 15697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15698 ;;      Params:         0       0       0       0       0       0       0       0       0
 15699 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15700 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15701 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15702 ;;Total ram usage:        0 bytes
 15703 ;; Hardware stack levels used:    1
 15704 ;; This function calls:
 15705 ;;		Nothing
 15706 ;; This function is called by:
 15707 ;;		_SYSTEM_Initialize
 15708 ;; This function uses a non-reentrant model
 15709 ;;
 15710                           
 15711                           	psect	text58
 15712  005CCC                     __ptext58:
 15713                           	opt callstack 0
 15714  005CCC                     _PIN_MANAGER_Initialize:
 15715                           	opt callstack 28
 15716                           
 15717                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 15718                           
 15719                           ;incstack = 0
 15720  005CCC  0E04               	movlw	4
 15721  005CCE  6E8A               	movwf	3978,c	;volatile
 15722                           
 15723                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 15724  005CD0  0E00               	movlw	0
 15725  005CD2  6E8B               	movwf	3979,c	;volatile
 15726                           
 15727                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 15728  005CD4  0EF1               	movlw	241
 15729  005CD6  6E93               	movwf	3987,c	;volatile
 15730                           
 15731                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 15732  005CD8  0EC7               	movlw	199
 15733  005CDA  6E94               	movwf	3988,c	;volatile
 15734                           
 15735                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 15736  005CDC  0EC4               	movlw	196
 15737  005CDE  010F               	movlb	15	; () banked
 15738  005CE0  6F5D               	movwf	93,b	;volatile
 15739                           
 15740                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 15741  005CE2  0E30               	movlw	48
 15742  005CE4  6F5C               	movwf	92,b	;volatile
 15743                           
 15744                           ; BSR set to: 15
 15745                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 15746  005CE6  6885               	setf	3973,c	;volatile
 15747                           
 15748                           ; BSR set to: 15
 15749                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 15750  005CE8  9EF1               	bcf	4081,7,c	;volatile
 15751                           
 15752                           ; BSR set to: 15
 15753  005CEA  0012               	return		;funcret
 15754  005CEC                     __end_of_PIN_MANAGER_Initialize:
 15755                           	opt callstack 0
 15756                           
 15757 ;; *************** function _OSCILLATOR_Initialize *****************
 15758 ;; Defined at:
 15759 ;;		line 125 in file "mcc_generated_files/mcc.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;		None
 15762 ;; Auto vars:     Size  Location     Type
 15763 ;;		None
 15764 ;; Return value:  Size  Location     Type
 15765 ;;                  1    wreg      void 
 15766 ;; Registers used:
 15767 ;;		wreg, status,2
 15768 ;; Tracked objects:
 15769 ;;		On entry : 0/0
 15770 ;;		On exit  : 0/0
 15771 ;;		Unchanged: 0/0
 15772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15773 ;;      Params:         0       0       0       0       0       0       0       0       0
 15774 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15775 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15776 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15777 ;;Total ram usage:        0 bytes
 15778 ;; Hardware stack levels used:    1
 15779 ;; This function calls:
 15780 ;;		Nothing
 15781 ;; This function is called by:
 15782 ;;		_SYSTEM_Initialize
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           	psect	text59
 15787  005D44                     __ptext59:
 15788                           	opt callstack 0
 15789  005D44                     _OSCILLATOR_Initialize:
 15790                           	opt callstack 28
 15791                           
 15792                           ;mcc_generated_files/mcc.c: 128:     OSCCON = 0x60;
 15793                           
 15794                           ; BSR set to: 15
 15795                           ;incstack = 0
 15796  005D44  0E60               	movlw	96
 15797  005D46  6ED3               	movwf	4051,c	;volatile
 15798                           
 15799                           ;mcc_generated_files/mcc.c: 130:     OSCCON2 = 0x00;
 15800  005D48  0E00               	movlw	0
 15801  005D4A  6ED2               	movwf	4050,c	;volatile
 15802                           
 15803                           ;mcc_generated_files/mcc.c: 132:     OSCTUNE = 0x00;
 15804  005D4C  0E00               	movlw	0
 15805  005D4E  6E9B               	movwf	3995,c	;volatile
 15806                           
 15807                           ;mcc_generated_files/mcc.c: 134:     ACTCON = 0x00;
 15808  005D50  0E00               	movlw	0
 15809  005D52  6EB5               	movwf	4021,c	;volatile
 15810  005D54  0012               	return		;funcret
 15811  005D56                     __end_of_OSCILLATOR_Initialize:
 15812                           	opt callstack 0
 15813                           
 15814 ;; *************** function _EUSART1_Initialize *****************
 15815 ;; Defined at:
 15816 ;;		line 55 in file "mcc_generated_files/eusart1.c"
 15817 ;; Parameters:    Size  Location     Type
 15818 ;;		None
 15819 ;; Auto vars:     Size  Location     Type
 15820 ;;		None
 15821 ;; Return value:  Size  Location     Type
 15822 ;;                  1    wreg      void 
 15823 ;; Registers used:
 15824 ;;		wreg, status,2
 15825 ;; Tracked objects:
 15826 ;;		On entry : 0/0
 15827 ;;		On exit  : 0/0
 15828 ;;		Unchanged: 0/0
 15829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15830 ;;      Params:         0       0       0       0       0       0       0       0       0
 15831 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15832 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15833 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15834 ;;Total ram usage:        0 bytes
 15835 ;; Hardware stack levels used:    1
 15836 ;; This function calls:
 15837 ;;		Nothing
 15838 ;; This function is called by:
 15839 ;;		_SYSTEM_Initialize
 15840 ;; This function uses a non-reentrant model
 15841 ;;
 15842                           
 15843                           	psect	text60
 15844  005D0A                     __ptext60:
 15845                           	opt callstack 0
 15846  005D0A                     _EUSART1_Initialize:
 15847                           	opt callstack 28
 15848                           
 15849                           ;mcc_generated_files/eusart1.c: 60:     BAUDCON1 = 0x08;
 15850                           
 15851                           ;incstack = 0
 15852  005D0A  0E08               	movlw	8
 15853  005D0C  6EB8               	movwf	4024,c	;volatile
 15854                           
 15855                           ;mcc_generated_files/eusart1.c: 63:     RCSTA1 = 0x90;
 15856  005D0E  0E90               	movlw	144
 15857  005D10  6EAB               	movwf	4011,c	;volatile
 15858                           
 15859                           ;mcc_generated_files/eusart1.c: 66:     TXSTA1 = 0x24;
 15860  005D12  0E24               	movlw	36
 15861  005D14  6EAC               	movwf	4012,c	;volatile
 15862                           
 15863                           ;mcc_generated_files/eusart1.c: 69:     SPBRG1 = 0x40;
 15864  005D16  0E40               	movlw	64
 15865  005D18  6EAF               	movwf	4015,c	;volatile
 15866                           
 15867                           ;mcc_generated_files/eusart1.c: 72:     SPBRGH1 = 0x03;
 15868  005D1A  0E03               	movlw	3
 15869  005D1C  6EB0               	movwf	4016,c	;volatile
 15870  005D1E  0012               	return		;funcret
 15871  005D20                     __end_of_EUSART1_Initialize:
 15872                           	opt callstack 0
 15873                           
 15874 ;; *************** function _Init8LEDs *****************
 15875 ;; Defined at:
 15876 ;;		line 161 in file "Main.c"
 15877 ;; Parameters:    Size  Location     Type
 15878 ;;		None
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;		None
 15881 ;; Return value:  Size  Location     Type
 15882 ;;                  1    wreg      void 
 15883 ;; Registers used:
 15884 ;;		wreg, status,2
 15885 ;; Tracked objects:
 15886 ;;		On entry : 0/0
 15887 ;;		On exit  : 0/0
 15888 ;;		Unchanged: 0/0
 15889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15890 ;;      Params:         0       0       0       0       0       0       0       0       0
 15891 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15892 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15893 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15894 ;;Total ram usage:        0 bytes
 15895 ;; Hardware stack levels used:    1
 15896 ;; This function calls:
 15897 ;;		Nothing
 15898 ;; This function is called by:
 15899 ;;		_main
 15900 ;; This function uses a non-reentrant model
 15901 ;;
 15902                           
 15903                           	psect	text61
 15904  005D66                     __ptext61:
 15905                           	opt callstack 0
 15906  005D66                     _Init8LEDs:
 15907                           	opt callstack 30
 15908                           
 15909                           ;Main.c: 163:     LATA = 0x00;
 15910                           
 15911                           ;incstack = 0
 15912  005D66  0E00               	movlw	0
 15913  005D68  6E89               	movwf	3977,c	;volatile
 15914                           
 15915                           ;Main.c: 164:     TRISA = 0x00;
 15916  005D6A  0E00               	movlw	0
 15917  005D6C  6E92               	movwf	3986,c	;volatile
 15918                           
 15919                           ;Main.c: 165:     ANSELA = 0x00;
 15920  005D6E  0E00               	movlw	0
 15921  005D70  010F               	movlb	15	; () banked
 15922  005D72  6F5B               	movwf	91,b	;volatile
 15923                           
 15924                           ; BSR set to: 15
 15925  005D74  0012               	return		;funcret
 15926  005D76                     __end_of_Init8LEDs:
 15927                           	opt callstack 0
 15928                           
 15929                           	psect	rparam
 15930  0000                     tosu	equ	0xFFF
 15931                           tosh	equ	0xFFE
 15932                           tosl	equ	0xFFD
 15933                           stkptr	equ	0xFFC
 15934                           pclatu	equ	0xFFB
 15935                           pclath	equ	0xFFA
 15936                           pcl	equ	0xFF9
 15937                           tblptru	equ	0xFF8
 15938                           tblptrh	equ	0xFF7
 15939                           tblptrl	equ	0xFF6
 15940                           tablat	equ	0xFF5
 15941                           prodh	equ	0xFF4
 15942                           prodl	equ	0xFF3
 15943                           indf0	equ	0xFEF
 15944                           postinc0	equ	0xFEE
 15945                           postdec0	equ	0xFED
 15946                           preinc0	equ	0xFEC
 15947                           plusw0	equ	0xFEB
 15948                           fsr0h	equ	0xFEA
 15949                           fsr0l	equ	0xFE9
 15950                           wreg	equ	0xFE8
 15951                           indf1	equ	0xFE7
 15952                           postinc1	equ	0xFE6
 15953                           postdec1	equ	0xFE5
 15954                           preinc1	equ	0xFE4
 15955                           plusw1	equ	0xFE3
 15956                           fsr1h	equ	0xFE2
 15957                           fsr1l	equ	0xFE1
 15958                           bsr	equ	0xFE0
 15959                           indf2	equ	0xFDF
 15960                           postinc2	equ	0xFDE
 15961                           postdec2	equ	0xFDD
 15962                           preinc2	equ	0xFDC
 15963                           plusw2	equ	0xFDB
 15964                           fsr2h	equ	0xFDA
 15965                           fsr2l	equ	0xFD9
 15966                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        11
    BSS         614
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    112     147
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_read@br	PTR unsigned short  size(2) Largest target is 2
		 -> br(BANK0[2]), 

    f_read@buff	PTR void  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_read@rbuff	PTR unsigned char  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    S221$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S221$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[11]), STR_7(CODE[1]), STR_6(CODE[1]), STR_5(CODE[11]), 
		 -> STR_4(CODE[1]), STR_3(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S210$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S210$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S210$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), 
		 -> NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), 
		 -> NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _reproductor->_f_read
    _f_read->_get_fat
    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _reproducir->_f_open
    _reproductor->_f_read
    _guardar->_f_open
    _grabador->_f_write
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  801899
                              _Error
                          _Init8LEDs
                  _SYSTEM_Initialize
                            _guardar
                         _reproducir
 ---------------------------------------------------------------------------------
 (1) _reproducir                                           0     0      0  366773
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_mount
                             _f_open
                        _reproductor
 ---------------------------------------------------------------------------------
 (2) _reproductor                                          7     7      0   36124
                                             32 BANK0      7     7      0
                              _Error
                             _f_read
 ---------------------------------------------------------------------------------
 (3) _f_read                                              40    32      8   34520
                                             85 COMRAM     8     0      8
                                              0 BANK0     32    32      0
                         _clust2sect
                          _disk_read
                            _get_fat
                            _mem_cpy
                        _move_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _guardar                                              0     0      0  433685
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                           _grabador
 ---------------------------------------------------------------------------------
 (2) _grabador                                             6     6      0   56411
                                             49 BANK0      6     6      0
                              _Error
                            _f_write
 ---------------------------------------------------------------------------------
 (3) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) _Error                                               13    11      2    1441
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266547
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             10     4      6    1323
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   33096
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (6) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29519
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (6) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (7) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (7) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (8) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (9) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (8) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (10) _deselect                                            0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (9) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init8LEDs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   _Init8LEDs
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _guardar
     _Error
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _grabador
       _Error
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _put_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_cpy
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _validate
           _disk_status
   _reproducir
     _Error
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _reproductor
       _Error
       _f_read
         _clust2sect
           ___lmul
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      93       5       91.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     112       6        0.0%
DATA                 0      0     340       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Jun 03 02:42:47 2019

              _SPI1_Exchange8bit 5D56                      get_fat@clst 003D  
                              _a 00D6                                _b 00D4  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l17 5BC6  
                             l35 58F8                               l70 413A  
                             l81 4202                               l92 4300  
                             l95 42D0                               _ND 00E2  
                             _br 00E4                               _bw 00E6  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l113 51A4                              l114 51B8  
                            l130 4B3E                              l131 4B46  
                            l132 4B5A                              l109 519A  
                            l126 4B34                              l302 4756  
                            l136 4BBA                              l242 44D4  
                            l155 269A                              l252 31F6  
                            l317 39FA                              l334 3BD6  
                            l255 3546                              l336 3BCE  
                            l520 09BC                              l432 3FB0  
                            l257 3200                              l533 0B04  
                            l349 3DA6                              l605 23B4  
                            l278 29BC                              l391 4D1C  
                            l456 4106                              l547 0FFC  
                            l539 0C9E                              l469 4858  
                            l581 363A                              l750 5D5E  
                            l590 37AC                              l582 3632  
                            l671 1C46                              l667 19B6  
                            l588 37C4                              l943 5A22  
                            l892 52D0                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 0100              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                     Error@F5055 00E8                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l1012 56D6                             l5010 3D1A  
                           l4300 5BAC                             l5030 3DE6  
                           l5120 3056                             l5008 3CF4  
                           l4322 5D02                             l4402 5A06  
                           l5210 4232                             l5018 3D66  
                           l5300 44AC                             l5132 30AC  
                           l5108 2FB6                             l5140 3152  
                           l5222 4268                             l5054 2DF6  
                           l6030 2006                             l4440 590C  
                           l4424 58DC                             l4512 51CC  
                           l5136 30F4                             l5080 2F16  
                           l5064 2E5A                             l5312 4C56  
                           l5400 3F2E                             l6200 16C0  
                           l6040 20BE                             l4354 5732  
                           l4338 5704                             l4418 5B8A  
                           l5226 428E                             l5218 425A  
                           l5162 4150                             l5074 2F00  
                           l6210 173A                             l6202 16E0  
                           l6130 1278                             l6042 20FE  
                           l6106 24DE                             l4372 5766  
                           l4364 5752                             l4612 336C  
                           l5228 42A0                             l5180 419E  
                           l6220 17C4                             l6212 175E  
                           l4366 5756                             l4358 573E  
                           l4382 59B2                             l4550 45C6  
                           l4614 338A                             l4710 2DAC  
                           l5166 4158                             l5158 4146  
                           l5326 4CEA                             l5422 3F8C  
                           l5342 57D6                             l6302 52A8  
                           l6230 1884                             l6214 177C  
                           l6070 224A                             l6054 2146  
                           l4528 523E                             l4544 454C  
                           l4720 5AD2                             l4624 3450  
                           l4616 3394                             l4704 2D6E  
                           l5192 41D2                             l5096 2F98  
                           l5328 4CF2                             l5504 40F4  
                           l6144 1360                             l6064 21C2  
                           l6048 2122                             l6056 2162  
                           l4490 4C1C                             l4554 45D2  
                           l4562 462C                             l4730 5C5A  
                           l4634 351A                             l4810 3B4E  
                           l4802 3ADC                             l5274 5854  
                           l5258 57FA                             l5266 582A  
                           l5426 3FA6                             l5370 4DAA  
                           l6402 360A                             l6226 180E  
                           l6162 13F0                             l6146 13A0  
                           l6090 23FC                             l6082 2378  
                           l4388 59C8                             l4476 4B9C  
                           l4580 55B2                             l5604 565E  
                           l5620 5694                             l4724 5AE6  
                           l4708 2D80                             l6500 1948  
                           l6340 53FA                             l5268 5838  
                           l5460 4048                             l5356 4D44  
                           l6308 52BC                             l6244 191C  
                           l6156 13CC                             l6076 229C  
                           l6084 2398                             l4582 55CE  
                           l4734 5C6A                             l5630 56C8  
                           l4662 2A78                             l5526 4F1E  
                           l6350 543C                             l6406 3616  
                           l6182 150A                             l6174 14A8  
                           l6166 1440                             l6238 18C0  
                           l4912 2854                             l4904 27BE  
                           l5608 5662                             l4744 5372  
                           l4680 2B94                             l4664 2AAC  
                           l4816 3BB6                             l6600 1E64  
                           l5528 4F22                             l6360 5468  
                           l5480 4084                             l5472 4072  
                           l5376 4DEA                             l5704 47F8  
                           l5640 4666                             l6096 2444  
                           l5618 5688                             l4770 39CA  
                           l6522 1B86                             l6506 196A  
                           l5554 4FC2                             l5802 08FC  
                           l6346 5428                             l5490 40C4  
                           l5482 4094                             l5386 3EBC  
                           l5642 466E                             l6442 3792  
                           l6194 15E6                             l6098 24A2  
                           l4924 28BE                             l4908 2846  
                           l4860 2518                             l4836 5D2C  
                           l6276 49FE                             l4684 2BCA  
                           l5572 4E5E                             l5484 409A  
                           l5388 3EC0                             l5740 48BC  
                           l6460 380A                             l6372 3566  
                           l6188 1592                             l4934 28F6  
                           l4918 288C                             l4870 25F6  
                           l4950 297E                             l4694 2C7C  
                           l4774 3A0A                             l4766 39A6  
                           l4758 3956                             l6606 1ED6  
                           l6550 1C70                             l5590 4EF4  
                           l5558 4FCC                             l5830 09F2  
                           l5814 093A                             l6710 4ACA  
                           _ADIE 007CEE                             l4928 28E0  
                           l4856 250A                             l4848 24FC  
                           l6560 1D08                             l6544 1C2A  
                           l6536 1C04                             l5584 4EBA  
                           l5824 09A0                             l5656 46CC  
                           l6632 5A5C                             l6720 4AF2  
                           l6640 549E                             _ADIF 007CF6  
                           l4946 2936                             l4938 28FE  
                           l4890 26E8                             l4786 3A68  
                           l6546 1C62                             l5578 4E7C  
                           l5842 0A4E                             l5762 0870  
                           l5754 084A                             l5666 4746  
                           l6394 35E0                             l4948 293C  
                           l5844 0A74                             l5836 0A08  
                           l4972 5B1A                             l6476 38EA  
                           l4886 26E0                             l6558 1CD4  
                           l6582 1D9C                             l5942 0DA0  
                           l5862 0AA4                             l5782 08B8  
                           l5686 5180                             l4974 5B1E  
                           l4966 5956                             l6726 4B12  
                           l6654 54DA                             l6670 551C  
                           l6814 589A                             l4896 272E  
                           l6568 1D1C                             l5856 0A9A  
                           l4992 3C52                             l5696 47A4  
                           l6664 5504                             l6760 50A2  
                           l6736 500A                             l6674 5C20  
                           l5962 0EDA                             l5938 0D8A  
                           l5858 0AA0                             l5794 08F2  
                           l5778 08B4                             l5884 0B62  
                           l6692 4A36                             l6678 5C30  
                           l5974 0FCE                             l4998 3CA2  
                           l5998 11A0                             STR_1 0801  
                           STR_2 0801                             STR_3 081A  
                           STR_4 081A                             STR_5 0810  
                           STR_6 081A                             STR_7 081A  
                           STR_8 0810                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5010 51F4                             u5030 5220  
                           u5110 5556                             u6000 3D76  
                           u5050 524E                             u5140 31C6  
                           u5230 3492                             u5150 31E6  
                           u5215 3378                             u4600 5BDA  
                           u5305 2AF8                             u5330 2BB2  
                           u5250 2996                             u6130 2EFC  
                           u5235 3488                             u6115 2E66  
                           _PEIE 007F96                             u5260 29B6  
                           u5500 3AB4                             u7020 4E78  
                           u6140 2F12                             u5165 324A  
                           u6045 3E1C                             u7110 5698  
                           u5350 2CBE                             u5430 3944  
                           u7030 4EB6                             u6070 2DF2  
                           u5335 2BA8                             u6055 3E68  
                           u4800 4B30                             u6400 42D8  
                           u7200 4776                             u5185 32E8  
                           u5610 2514                             u5450 39B8  
                           u6330 420A                             u6250 4140  
                           u7130 4640                             u5355 2CB4  
                           u5275 2A06                             u6235 3174  
                           u6420 42FC                             u7140 4660  
                           u4590 5BCE                             u4910 4BFE  
                           u4760 5900                             u5560 3B8E  
                           u5480 3A56                             u7240 479E  
                           u8040 12D2                             u4690 59AE  
                           u4930 4C2C                             u5730 2710  
                           u7090 565E                             u6530 4CD6  
                           u6700 3F76                             u5900 599A  
                           u4845 4B4C                             u5805 27FC  
                           u8205 1686                             u8045 12C8  
                           u6550 4D10                             u7190 4720  
                           u5735 2706                             u5655 25CE  
                           u8311 5276                             u8215 16CA  
                           u4960 5196                             u5680 2694  
                           u8400 5464                             u5920 5B4E  
                           u6720 3F88                             u5665 25FE  
                           u4890 4BD6                             u7370 08B0  
                           u6810 3FFE                             u7290 4852  
                           u5675 2624                             u9107 5312  
                           u8155 1522                             u7620 0D86  
                           u5940 3C4E                             u6580 4D3E  
                           u8260 18C8                             u5685 268A  
                           u9117 41F4                             u7630 0D9C  
                           u7470 0A8E                             u6750 3FBC  
                           u8350 52CA                             u5775 2772  
                           u9127 42C2                             u9137 5BBA  
                           u5785 2794                             u5794 27B2  
                           u7490 0AA0                             u6770 3FC8  
                           u5890 5966                             u9147 58EC  
                           u4995 51AA                             u5795 27AC  
                           u7820 2060                             u9157 5C26  
                           u8630 1944                             u6790 3FF2  
                           u9087 52DE                             u8800 1DB0  
                           u8720 1BF0                             u6960 4F44  
                           u7665 0EBA                             u9097 52F8  
                           u7825 2056                             u8730 1C16  
                           u7690 1022                             u7595 0CD2  
                           u8830 1E50                             u7695 1018  
                           u7945 233A                             u8850 1EBA  
                           u8930 4A54                             u8835 1E46  
                           u7955 2382                             u8780 1D2C  
                           u8685 1A2E                             u7885 21DA  
                           u8880 54EE                             u8890 5518  
                           u8980 5028                             _WPUB 000F85  
                           _Fsid 00DA                             _Stat 00F2  
                           _data 00DE                             _main 5866  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             _push 00E0  
                           _volt 00D0                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 5D66                    __CFG_IESO$OFF 000000  
                     Error@v_seg 0004                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 44D8  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 5D56  
                          ?_main 0001                  __end_of___lldiv 56E8  
                 __CFG_DEBUG$OFF 000000                            _PORTA 000F80  
                          _PORTC 000F82                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 5C18                            _FatFs 0120  
                __end_of_chk_chr 5B60               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F3C                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 5486                            _Error 5252  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3EAA  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 192E  
                __end_of_get_fat 3558                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                          _adcin 00D8                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 59A4                  __end_of_mem_cpy 5866  
                __end_of_mem_set 5C7C                  __end_of_guardar 4B20  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                   disk_ioctl@buff 0012  
                 disk_read@count 0017                            tablat 000FF5  
                 disk_ioctl@pdrv 0031                            plusw1 000FE3  
                          plusw2 000FDB                  __end_of_put_fat 2DB0  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 44D8                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 5A6C              disk_initialize@pdrv 0012  
     __end_of_EUSART1_Initialize 5D20                     __end_of_main 58D2  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
             __size_of_Init8LEDs 0010                           _ACTCON 000FB5  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _RCREG1 000FAE                           _RCSTA1 000FAB  
                         _OSCCON 000FD3                           _SPBRG1 000FAF  
           __end_of_dir_register 5186                           _TXREG1 000FAD  
               __end_of_check_fs 4EF8                           _TXSTA1 000FAC  
          SPI1_Exchange8bit@data 0001                           Error@a 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 5DA8  
               __end_of_dir_find 4E0C                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 5D84                 __end_of_dir_next 31B6  
                   ?_move_window 0030             __end_of_create_chain 3BE8  
               __end_of_ld_clust 57E8                           ___lmul 5AC2  
               __end_of_grabador 5A6C             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 5CA6  
                 __CFG_STVREN$ON 000000                           _f_read 1F3C  
                      ??___lldiv 0009                           _f_open 3558  
                         _f_sync 48C0                     ?_reproductor 0001  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 5A94                           clear_1 5AA6  
                         clear_2 5AB2                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 5CEC                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
               __end_of_send_cmd 5BA2                        ??_mem_cmp 0007  
                      ??_mem_cpy 0007                        ??_mem_set 0007  
                      ??_guardar 0060                  disk_ioctl@csize 0032  
               __end_of_validate 5666             __end_of_get_ldnumber 4FD6  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5CA6  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 5D32  
                     __accesstop 0060          __end_of__initialization 5AB8  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
              reproductor@i_1722 0084                    __end_of_Error 531C  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                   __pidataBANK0 5D92              ??_SYSTEM_Initialize 0001  
              __end_of_Init8LEDs 5D76                       ___send_cmd 56E8  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0003               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 5D44                       __pbssBANK0 00D0  
                     __pbssBANK1 0100                __CFG_PLLSEL$PLL4X 000000  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_read 0056                          ?_f_open 009A  
        __size_of_xmit_datablock 0066                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009                          ?_select 0001  
                      ?_check_fs 003B                       _disk_ioctl 24E8  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 4B20  
                        _OSCTUNE 000F9B                          _SPBRGH1 000FB0  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 5C50                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 531C                 sync_window@wsect 002C  
                      ?_grabador 0001                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 4D20  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 5252  
                        ff@FatFs 00DC                       f_close@res 0050  
                __size_of___lmul 0056                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 5666  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_read 05AC  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 5BDE  
            _disk_initialize$134 0017            __size_of_get_ldnumber 00DE  
                        __pcinit 5A6C                          _chk_chr 5B18  
                        _f_lseek 192E                          __ramtop 0800  
                        _f_mount 53D6                  __size_of_select 001E  
                        __ptext0 5866                          __ptext1 4FD6  
                        __ptext2 5486                          __ptext3 1F3C  
                        __ptext4 4A02                          __ptext5 5A0A  
                        __ptext6 11CA                          __ptext7 5252  
                        __ptext8 3558                          __ptext9 4630  
                        _dir_sdi 3BE8                      validate@fil 0008  
                        _f_write 11CA                      validate@obj 0002  
                        _get_fat 31B6             __size_of_reproductor 00A6  
                     chk_chr@chr 0003                     _dir_register 50B0  
                     chk_chr@str 0001                          _mem_cmp 593E  
                        _mem_cpy 57E8            _OSCILLATOR_Initialize 5D44  
                        _mem_set 5C50                          _guardar 4A02  
                     f_read@buff 0058                       f_read@clst 0071  
                     f_read@sect 0078                       f_read@rcnt 007E  
                     ??_check_fs 0041                  find_volume@path 0047  
                find_volume@nrsv 0082                  find_volume@stat 008C  
             _EUSART1_Initialize 5D0A         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 38EE                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 2986  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 0012  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 4318                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5AB8  
                     ??_grabador 0060              ?_EUSART1_Initialize 0001  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 58D2  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4EF8  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                       _reproducir 4FD6  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0007  
                 move_window@res 003A                        _SPI1_Open 5D76  
                     _wait_ready 5BA2             ??_EUSART1_Initialize 0001  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$624 0011  
                     dir_sdi@idx 0058                      ___delay_sec 5C18  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 593E  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5D84                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 59A4  
                     ?_SPI1_Open 0001                   __end_of___lmul 5B18  
                    st_clust@dir 0001                   __end_of___wmul 5CCC  
                 __end_of_f_read 24E8                   __end_of_f_open 38EE  
                 __end_of_f_sync 4A02                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                        _Init8LEDs 5D66  
                 __end_of_select 5D0A             __size_of_sync_window 0158  
            start_initialization 5A6C  __size_of_PIN_MANAGER_Initialize 0020  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 412E  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 5A0A  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 412E              __size_of_disk_write 0110  
                       ??___lmul 0009                      ?_reproducir 0001  
                       ??___wmul 0005                         ??_f_read 0060  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00E8  
            __end_of_find_volume 11CA              __end_of_disk_status 5D32  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 477A                       ?_Init8LEDs 0001  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                    __pbssBIGRAM 0120                    __pcstackBANK0 0060  
              __size_of_check_fs 00EC          __end_of_SPI1_Initialize 5D92  
                   check_fs@sect 003D                __size_of_deselect 000A  
              __size_of_dir_find 00EC                __size_of_dir_next 0406  
              __size_of_ld_clust 007E                __size_of_grabador 0062  
                _find_volume$728 0070                  _find_volume$729 0074  
         _PIN_MANAGER_Initialize 5CCC                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 4C30                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 5186  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 48C0  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       _BAUDCON1 000FB8                         ?_guardar 0001  
                 __size_of_Error 00CA                        f_close@fp 004E  
                       ?_put_fat 003B          __end_of_disk_initialize 4318  
                       ?_sync_fs 003A                      _get_fat$374 004A  
            __size_of_reproducir 00DA                     f_read@remain 006D  
              find_volume@fasize 008D                        f_read@btr 005A  
                      f_read@res 006C              __size_of_wait_ready 003C  
             __end_of___send_cmd 576A                      _create_name 3EAA  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 081C                      _disk_status 5D20  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                       _PIR1bits 000F9E                    move_window@fs 0030  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                      dir_find@c 0082                       ?_dir_alloc 0080  
                remove_chain@res 0060                  remove_chain@nxt 0061  
                       _SSP1STAT 000FC7                    ??_reproductor 005E  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                       _ADCON0bits 000FC2  
                    ??_Init8LEDs 0001                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00DF  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                      grabador@a 0095                        grabador@j 0093  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 5A80                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                       __Lrparam 0000                      _follow_path 477A  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 2986  
          __size_of_remove_chain 014A               __end_of_disk_write 4C30  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
    __size_of_EUSART1_Initialize 0016              __end_of_move_window 55D2  
             __end_of_clust2sect 53D6                 __size_of_f_close 003A  
               __size_of_chk_chr 0048                 __size_of_f_lseek 060E  
               __size_of_f_mount 00B0                 __size_of_dir_sdi 02C2  
               __size_of_f_write 0764                 __size_of_get_fat 03A2  
            __end_of_reproductor 552C                         _check_fs 4E0C  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 007E  
               __size_of_mem_set 002C                 __size_of_guardar 011E  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5D9E                         __ptext10 477A  
                       __ptext11 576A                         __ptext20 2DB0  
                       __ptext12 4D20                         __ptext21 53D6  
                       __ptext13 593E                         __ptext30 31B6  
                       __ptext22 081C                         __ptext14 3EAA  
                       __ptext31 531C                         __ptext23 4EF8  
                       __ptext15 5B18                         __ptext40 24E8  
                       __ptext32 5AC2                         __ptext24 412E  
                       __ptext16 50B0                         __ptext41 5CA6  
                       __ptext33 5666                         __ptext25 5D76  
                       __ptext17 57E8                         __ptext50 5CEC  
                       __ptext42 5C7C                         __ptext34 5BDE  
                       __ptext26 4E0C                         __ptext18 4C30  
                       __ptext51 5BA2                         __ptext43 552C  
                       __ptext35 48C0                         __ptext27 192E  
                       __ptext19 3BE8                         __ptext60 5D0A  
                       __ptext52 5D9E                         __ptext44 44D8  
                       __ptext36 55D2                         __ptext28 38EE  
                       __ptext61 5D66                         __ptext53 58D2  
                       __ptext45 4B20                         __ptext37 5D20  
                       __ptext29 2986                         __ptext54 5D56  
                       __ptext46 59A4                         __ptext38 4318  
                       __ptext55 5C18                         __ptext47 5186  
                       __ptext39 5C50                         __ptext56 5D32  
                       __ptext48 5B60                         __ptext57 5D84  
                       __ptext49 56E8                         __ptext58 5CCC  
                       __ptext59 5D44                         _dir_find 4D20  
                   _SSP1CON1bits 000FC6                         _dir_next 2DB0  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 576A                 __size_of_put_fat 042A  
                 sync_window@res 0029                         _grabador 5A0A  
               __size_of_sync_fs 01C0                      f_read@csect 0077  
                  __size_of_main 006C                       sync_fs@res 0044  
                   _remove_chain 4630                 find_volume@bsect 0091  
                    f_read@rbuff 0075                         f_read@cc 007C  
                       f_read@br 005C                         f_read@fp 0056  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5B60  
                       _validate 55D2                     ??_reproducir 0060  
                       f_sync@fp 0045                      ??_dir_alloc 0084  
                       _st_clust 5C7C                         get_fat@p 0052  
                   ??_wait_ready 0002                    ??_sync_window 001D  
                   _SSP1STATbits 000FC7                      ??_disk_read 0019  
                  _disk_read$143 001A                      f_lseek@clst 0090  
                       mem_cmp@d 0009                         mem_cmp@r 000D  
                       mem_cmp@s 000B                        put_fat@bc 0051  
                       mem_cpy@d 0007                        put_fat@fs 003B  
                       mem_cpy@s 0009                         mem_set@d 0007  
                  wait_ready@tmr 0002               __end_of_reproducir 50B0  
             xmit_datablock@buff 0004                     reproductor@c 0086  
                   reproductor@i 0082                     reproductor@j 0080  
             xmit_datablock@resp 0009                   dir_register@dp 008A  
               ??_xmit_datablock 0007               __end_of_wait_ready 5BDE  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                     _RCSTA1bits 000FAB                        sync_fs@fs 003A  
                    _move_window 552C             __CFG_CPUDIV$NOCLKDIV 000000  
                    _reproductor 5486                         put_fat@p 0054  
                  ?_dir_register 008A                    ___delay_sec@i 0005  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 4630  
                    dir_find@res 0085             __size_of___delay_sec 0038  
                  ?_create_chain 0056                     dir_next@clst 007C  
             __CFG_FOSC$INTOSCIO 000000                      dir_sdi@clst 006D  
 __end_of_PIN_MANAGER_Initialize 5CEC                      dir_sdi@sect 0069  
                   ?_create_name 0009                     f_write@csect 0084  
                   f_write@wbuff 0082                      f_write@buff 006F  
                    f_write@clst 008B                      f_write@sect 0087  
                   ?_find_volume 0045                      f_write@wcnt 008F  
                  ?_get_ldnumber 0001                      _put_fat$400 004D  
                    _put_fat$401 004F                     ?_disk_status 0001  
